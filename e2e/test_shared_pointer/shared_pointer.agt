fn outnl(a){
    out(a);
    out("\n");
}

struct shared_ptr<T>{
    let item_ptr = @T;
    let count = @i32;
}

fn __init__(sptr_ptr, item_ptr){
    outnl("INIT");
    type T = enable_if_resolve<sptr_ptr!.T>;
    type _ = enable_if<sptr_ptr == @shared_ptr<T>>;
    type _ = enable_if<item_ptr == @T>;

    sptr_ptr!.item_ptr = item_ptr;
    sptr_ptr!.count = heap_object<i32>(1);
}

fn __dest__(sptr_ptr){
    outnl("DEST");
    type T = enable_if_resolve<sptr_ptr!.T>;
    type _ = enable_if<sptr_ptr == @shared_ptr<T>>;

    sptr_ptr!.count! = sptr_ptr!.count! - 1;
    if (sptr_ptr!.count! == 0){
        outnl("RELEASE");
        __dest__(sptr_ptr!.item_ptr);
        heap_free(sptr_ptr!.item_ptr);
        heap_free(sptr_ptr!.count);
    }
}

fn __copy__(sptr_ptr_dest, sptr_ptr_src){
    outnl("COPY");
    type T = enable_if_resolve<sptr_ptr_dest!.T>;
    type _ = enable_if<sptr_ptr_dest == @shared_ptr<T>>;
    type _ = enable_if<sptr_ptr_src == @shared_ptr<T>>;

    sptr_ptr_src!.count! = sptr_ptr_src!.count! + 1;

    sptr_ptr_dest!.item_ptr = sptr_ptr_src!.item_ptr;
    sptr_ptr_dest!.count = sptr_ptr_src!.count;
}

fn make_shared(item_ptr) -> shared_ptr<inner>{
    type inner = enable_if_resolve<item_ptr!>;
    return object<shared_ptr<inner>>(item_ptr);
}

// actual use

fn main() -> i32{
    let a = make_shared(heap_object<i8>(15i8));
    outnl("Before B is initialized");
    outnl(a.count!);
    outnl(a.item_ptr!);
    {
        let b = a;
        outnl("After B is initialized");
        outnl(a.count!);
        outnl(a.item_ptr!);
        outnl(b.count!);
        outnl(b.item_ptr!);
        b.item_ptr! = 13i8;
        outnl("After B is changed");
        outnl(a.count!);
        outnl(a.item_ptr!);
        outnl(b.count!);
        outnl(b.item_ptr!);
    }
    outnl("After B is destructed");
    outnl(a.count!);
    outnl(a.item_ptr!);

    return 0;
}
