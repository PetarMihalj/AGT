; ModuleID = 'cprog.c'
source_filename = "cprog.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

; Function Attrs: nofree nounwind
declare i32 @printf(i8* nocapture readonly, ...) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #2
@.inout_int_str = private unnamed_addr constant [5 x i8] c"%lld\00", align 1

; Structs


; Primitives

%i8 = type i8
%i16 = type i16
%i32 = type i32
%i64 = type i64
%bool = type i1
; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @func$in_i32_dummy$2() local_unnamed_addr #0 {
  %1 = alloca i64, align 8
  %2 = bitcast i64* %1 to i8*
  %3 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.inout_int_str, i64 0, i64 0), i64* nonnull %1)
  %4 = load i64, i64* %1, align 8
  %5 = trunc i64 %4 to i32
  ret i32 %5
}
define dso_local i32 @func$dummy_func___add__$3(i32 %0, i32 %1) {
  %3 = add nsw i32 %1, %0
  ret i32 %3
}
define dso_local void @func$builtin_copy$4(%i32* %0, %i32* %1){
%val = load i32, i32* %1
store i32 %val, i32* %0
ret void
}
; Function Attrs: nofree nounwind sspstrong uwtable
define dso_local void @func$out_i32_dummy$5(i32 %0) local_unnamed_addr #0 {
  %2 = sext i32 %0 to i64
  %3 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([5 x i8], [5 x i8]* @.inout_int_str, i64 0, i64 0), i64 %2)
  ret void
}

; Funcs

define dso_local %i32 @func$main$1 () {
	; func setup done
	%return = alloca %i32
	%tmp_varcall$1 = alloca %i32
	%t_1 = call %i32 @func$in_i32_dummy$2()
	store %i32 %t_1, %i32* %tmp_varcall$1
	%var$n$1 = alloca %i32
	%t_2 = load %i32, %i32* %tmp_varcall$1
	store %i32 %t_2, %i32* %var$n$1
	%tmp_varint_lit$2 = alloca %i32
	store %i32 1, %i32* %tmp_varint_lit$2
	%tmp_varcall$3 = alloca %i32
	%tmp_varvar$n$1_copy$4 = alloca %i32
	%tmp_varvar$n$1_srcptr$5 = alloca %i32*
	%tmp_vartmp_varvar$n$1_copy$4_dstptr$6 = alloca %i32*
	store %i32* %var$n$1, %i32** %tmp_varvar$n$1_srcptr$5
	store %i32* %tmp_varvar$n$1_copy$4, %i32** %tmp_vartmp_varvar$n$1_copy$4_dstptr$6
	%t_3 = load %i32*, %i32** %tmp_vartmp_varvar$n$1_copy$4_dstptr$6
	%t_4 = load %i32*, %i32** %tmp_varvar$n$1_srcptr$5
	call void @func$builtin_copy$4(%i32* %t_3, %i32* %t_4)
	%t_5 = load %i32, %i32* %tmp_varvar$n$1_copy$4
	%t_6 = load %i32, %i32* %tmp_varint_lit$2
	%t_7 = call %i32 @func$dummy_func___add__$3(%i32 %t_5, %i32 %t_6)
	store %i32 %t_7, %i32* %tmp_varcall$3
	%t_8 = load %i32, %i32* %tmp_varcall$3
	call void @func$out_i32_dummy$5(%i32 %t_8)
	%tmp_varint_lit$7 = alloca %i32
	store %i32 0, %i32* %tmp_varint_lit$7
	%t_9 = load %i32, %i32* %tmp_varint_lit$7
	store %i32 %t_9, %i32* %return
	br label %func_end
	br label %func_end
	func_end:
	%tmp_varvar$n$1_destptr$8 = alloca %i32*
	store %i32* %var$n$1, %i32** %tmp_varvar$n$1_destptr$8
	%t_10 = load %i32, %i32* %return
	ret %i32 %t_10
}

; Footer

define dso_local i32 @main() #0 {
	%1 = call i32 @func$main$1()
	ret i32 %1
}
