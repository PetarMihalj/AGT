Incremental type inference

-   incremenal increase of precision, focusing on detected imprecisions
-   incremental steps of allocation, then analyzing for imperfections,
    than extended locally in areas of imperfections.

-   there exist a notion of run time variables and type variables
    runtime variables are generated by an execution of the program
    type variables summarize run time

-   discrimination between runtime variables can be, for instance
    made with respect to the call path which resulted in its allocation
    This call path method is sufficient for functional polymorphism, but not data polymorphism.
    Will this call path method fit our use well?

-   TypeVariable =  ProgramVariable_Env
    Env =           CallPoint x CreationPoint  
    CallPoint =     CallStatement x Environment
    CreationPoint = CreationStatement x Environment

-   we group execution envs and creation points into entry sets and creation sets. 
    



-   recursion problems
    
    a=5, b=6
    A=5L.2 B=6L
    gcd(a,b)
    gcd(A,B)


    gcd(var x, var y):
        if x-y == x:
            return x
        || y-x == y:
            return y 
        else if x>=y:
            return gcd(x-y,y)
        else:
            return gcd(y-x,x)

        

How does cpp template instantiation work?










