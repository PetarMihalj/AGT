Design of a strongly typed programming language

Programming languages play a central role in the development of software. 
However, there is no silver bullet programming language, which would be efficient, easy to use, portable and consistent. 
Many old programming languages exhibit bloat; they have been upgraded for decades now, and keeping up with their development is almost impossible. Other ones are easy to use, but painfully slow.

The goal of this graduate thesis is to design a new programming language. The language should be used for performance critical applications, while at the same time be as self contained as possible. It should exhibit no or little undefined behaviour, allowing it to be as portable as can be. The language specification should be described in a formal form. Runtime environment should be decided later on. The language has to be consistent as possible, so that there is one preferred way to achieve some goal. 

Design should be followed-up by a formal analysis of the language. One of the central points to prove should be the properties of the type system.

The final goal of the thesis is to implement the tool chain, which primarily consists of a compiler, but can include other tools, such as language servers and formatters. The code is to be made available on public repositories, and adhere to a consistent code style. All the functionality must be documented throughly. 
