fn outnl(i){
	out(i);
	out('\n');
}

struct B{
	let member = i32;
}

fn __init__(bp, i){
	type _ = enable_if<bp==@B>;
	type _ = enable_if<i==i32>;

	outnl("Init B started");
	bp!.member = i;
	outnl("Init B finished");
}

fn __copy__(bp1, bp2){
	type _ = enable_if<bp1==@B>;
	type _ = enable_if<bp2==@B>;

	outnl("Copy B started");
	bp1!.member = bp2!.member;
	outnl("Copy B finished");
}

fn __dest__(bp){
	type _ = enable_if<bp==@B>;

	outnl("Dest B started");
	__dest__(@(bp!.member));
	outnl("Dest B finished");
}

fn main() -> i32{
    let b = object<B>(5);
    outnl(b.member);

	return 0;
}
