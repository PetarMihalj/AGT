fn outnl(i){
    out(i);
    out('\n');
}

fn len(cptr) -> i32{
    type _ = enable_if<cptr == @char>;
    let k = 0;
    while (cptr[k]! !='\0'){
        k=k+1;
    }
    return k;
}

struct string{
    let arr = @char;
    let len = i32;
}

fn __init__(sptr, cptr){
    type _ = enable_if<sptr == @string>;
    type _ = enable_if<cptr == @char>;
    
    let k = len(cptr);

    sptr!.len = k;
    sptr!.arr = heap_alloc<char>(k);
    while (k >! 0){ // >! is strictly greater than
        sptr!.arr[k-1]! = cptr[k-1]!;
        k=k-1;
    }
}

fn __copy__(sptr1, sptr2){
    type _ = enable_if<sptr1 == @string>;
    type _ = enable_if<sptr2 == @string>;
    
    sptr1!.len = sptr2!.len;

    let k = sptr1!.len;
    
    sptr1!.arr = heap_alloc<char>(k);
    while (k >! 0){
        sptr1!.arr[k-1]! = sptr2!.arr[k-1]!;
        k=k-1;
    }
}

fn __dest__(sptr){
    type _ = enable_if<sptr == @string>;

    heap_free(sptr!.arr);
}

fn get(sptr, i) -> char{
    type _ = enable_if<sptr == @string>;
    type _ = enable_if<i == i32>;

    return sptr!.arr[i]!;
}

fn set(sptr, i, c){
    type _ = enable_if<sptr == @string>;
    type _ = enable_if<i == i32>;
    type _ = enable_if<c == char>;

    sptr!.arr[i]! = c;
}

fn out(s){
    type _ = enable_if<s == string>;

    for(let i=0; i <! s.len; i=i+1;){
        out(s.arr[i]!);
    }
}

fn main() -> i32{
    let a = object<string>("Hello world!");
    let b = a;

    outnl(a);
    outnl(b);
    outnl(get(@a,1));
    set(@a, 1, 'E');
    outnl(a);
    outnl(b);

    return 0;
}
