
    void a(u32 p, u32 t){
        for (a=2;a<3;a=a+3){a++;}
        while (a){
            a=a-a;
        };
    }
    
Injected <class 'parser_rules.statements.AssignmentStatement'>
Injected <class 'parser_rules.statements.BlankStatement'>
Injected <class 'parser_rules.statements.BreakStatement'>
Injected <class 'parser_rules.statements.DeclarationAssignmentStatement'>
Injected <class 'parser_rules.statements.DeclarationStatement'>
Injected <class 'parser_rules.statements.ForStatement'>
Injected <class 'parser_rules.statements.IfElseStatement'>
Injected <class 'parser_rules.ParserRule'>
Injected <class 'parser_rules.statements.ReturnStatement'>
Injected <class 'parser_rules.statements.Statement'>
Injected <class 'parser_rules.statements.StatementListR'>
Injected <class 'parser_rules.statements.WhileStatement'>
Injected <class 'parser_rules.binary_expressions.BinaryExpressionPrio3'>
Injected <class 'parser_rules.binary_expressions.BinaryExpressionPrio4'>
Injected <class 'parser_rules.binary_expressions.BinaryExpressionPrio6'>
Injected <class 'parser_rules.binary_expressions.BinaryExpressionPrio7'>
Injected <class 'parser_rules.binary_expressions.Expression'>
Injected <class 'parser_rules.ParserRule'>
Injected <class 'parser_rules.unary_expressions.DecrementAfter'>
Injected <class 'parser_rules.unary_expressions.DecrementBefore'>
Injected <class 'parser_rules.unary_expressions.FunctionCall'>
Injected <class 'parser_rules.unary_expressions.IncrementAfter'>
Injected <class 'parser_rules.unary_expressions.IncrementBefore'>
Injected <class 'parser_rules.ParserRule'>
Injected <class 'parser_rules.unary_expressions.UnaryExpression'>
Injected <class 'parser_rules.structural.Argument'>
Injected <class 'parser_rules.structural.ArgumentListR'>
Injected <class 'parser_rules.structural.Block'>
Injected <class 'parser_rules.structural.CompilationUnit'>
Injected <class 'parser_rules.structural.DefinitionListR'>
Injected <class 'parser_rules.structural.FunctionDefinition'>
Injected <class 'parser_rules.structural.Parameter'>
Injected <class 'parser_rules.structural.ParameterListR'>
Injected <class 'parser_rules.ParserRule'>
Injected <class 'parser_rules.structural.TypeName'>
Injected <class 'parser_rules.structural.VarName'>
Injected <class 'parser_rules.literals.BoolLiteral'>
Injected <class 'parser_rules.literals.CharLiteral'>
Injected <class 'parser_rules.literals.IntLiteral'>
Injected <class 'parser_rules.literals.Literal'>
Injected <class 'parser_rules.ParserRule'>
Injected <class 'parser_rules.operators.Add'>
Injected <class 'parser_rules.operators.Dec'>
Injected <class 'parser_rules.operators.Div'>
Injected <class 'parser_rules.operators.Equal'>
Injected <class 'parser_rules.operators.Greater'>
Injected <class 'parser_rules.operators.GreaterEqual'>
Injected <class 'parser_rules.operators.Inc'>
Injected <class 'parser_rules.operators.Less'>
Injected <class 'parser_rules.operators.LessEqual'>
Injected <class 'parser_rules.operators.Mod'>
Injected <class 'parser_rules.operators.Mul'>
Injected <class 'parser_rules.operators.NotEqual'>
Injected <class 'parser_rules.ParserRule'>
Injected <class 'parser_rules.operators.Sub'>
 compilationUnit = CompilationUnit(
 -  definitionList = DefinitionListR(
 -  -  functionDefinition = FunctionDefinition(
 -  -  -  returnType = TypeName(
 -  -  -  -  name = str(void)
 -  -  -  )
 -  -  -  name = str(a)
 -  -  -  parameterList = ParameterListR(
 -  -  -  -  parameter = Parameter(
 -  -  -  -  -  typeName = TypeName(
 -  -  -  -  -  -  name = str(u32)
 -  -  -  -  -  )
 -  -  -  -  -  name = str(p)
 -  -  -  -  )
 -  -  -  -  nxt = ParameterListR(
 -  -  -  -  -  parameter = Parameter(
 -  -  -  -  -  -  typeName = TypeName(
 -  -  -  -  -  -  -  name = str(u32)
 -  -  -  -  -  -  )
 -  -  -  -  -  -  name = str(t)
 -  -  -  -  -  )
 -  -  -  -  -  nxt = NoneType(None)
 -  -  -  -  )
 -  -  -  )
 -  -  -  block = Block(
 -  -  -  -  statementList = StatementListR(
 -  -  -  -  -  statement = Statement(
 -  -  -  -  -  -  statement = ForStatement(
 -  -  -  -  -  -  -  statementInit = Statement(
 -  -  -  -  -  -  -  -  statement = AssignmentStatement(
 -  -  -  -  -  -  -  -  -  name = str(a)
 -  -  -  -  -  -  -  -  -  expr = Expression(
 -  -  -  -  -  -  -  -  -  -  expr = BinaryExpressionPrio7(
 -  -  -  -  -  -  -  -  -  -  -  left = BinaryExpressionPrio6(
 -  -  -  -  -  -  -  -  -  -  -  -  left = BinaryExpressionPrio4(
 -  -  -  -  -  -  -  -  -  -  -  -  -  left = BinaryExpressionPrio3(
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  left = UnaryExpression(
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  unaryExprValue = Literal(
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  value = IntLiteral(
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  signed = bool(True)
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  size = int(32)
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  value = int(2)
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  op = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  right = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  -  -  op = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  -  -  -  right = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  -  op = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  -  -  right = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  op = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  -  right = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  exprCheck = Expression(
 -  -  -  -  -  -  -  -  expr = BinaryExpressionPrio7(
 -  -  -  -  -  -  -  -  -  left = BinaryExpressionPrio6(
 -  -  -  -  -  -  -  -  -  -  left = BinaryExpressionPrio4(
 -  -  -  -  -  -  -  -  -  -  -  left = BinaryExpressionPrio3(
 -  -  -  -  -  -  -  -  -  -  -  -  left = UnaryExpression(
 -  -  -  -  -  -  -  -  -  -  -  -  -  unaryExprValue = VarName(
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  name = str(a)
 -  -  -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  -  op = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  -  -  right = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  op = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  -  right = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  op = Less(
 -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  right = BinaryExpressionPrio6(
 -  -  -  -  -  -  -  -  -  -  -  left = BinaryExpressionPrio4(
 -  -  -  -  -  -  -  -  -  -  -  -  left = BinaryExpressionPrio3(
 -  -  -  -  -  -  -  -  -  -  -  -  -  left = UnaryExpression(
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  unaryExprValue = Literal(
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  value = IntLiteral(
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  signed = bool(True)
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  size = int(32)
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  value = int(3)
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  -  -  op = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  -  -  -  right = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  -  op = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  -  -  right = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  op = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  -  right = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  op = NoneType(None)
 -  -  -  -  -  -  -  -  -  right = NoneType(None)
 -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  statementChange = Statement(
 -  -  -  -  -  -  -  -  statement = AssignmentStatement(
 -  -  -  -  -  -  -  -  -  name = str(a)
 -  -  -  -  -  -  -  -  -  expr = Expression(
 -  -  -  -  -  -  -  -  -  -  expr = BinaryExpressionPrio7(
 -  -  -  -  -  -  -  -  -  -  -  left = BinaryExpressionPrio6(
 -  -  -  -  -  -  -  -  -  -  -  -  left = BinaryExpressionPrio4(
 -  -  -  -  -  -  -  -  -  -  -  -  -  left = BinaryExpressionPrio3(
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  left = UnaryExpression(
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  unaryExprValue = VarName(
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  name = str(a)
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  op = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  right = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  -  -  op = Add(
 -  -  -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  -  -  right = BinaryExpressionPrio4(
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  left = BinaryExpressionPrio3(
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  left = UnaryExpression(
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  unaryExprValue = Literal(
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  value = IntLiteral(
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  signed = bool(True)
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  size = int(32)
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  value = int(3)
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  op = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  right = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  op = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  right = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  -  op = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  -  -  right = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  op = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  -  right = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  block = Block(
 -  -  -  -  -  -  -  -  statementList = StatementListR(
 -  -  -  -  -  -  -  -  -  statement = Statement(
 -  -  -  -  -  -  -  -  -  -  statement = Expression(
 -  -  -  -  -  -  -  -  -  -  -  expr = BinaryExpressionPrio7(
 -  -  -  -  -  -  -  -  -  -  -  -  left = BinaryExpressionPrio6(
 -  -  -  -  -  -  -  -  -  -  -  -  -  left = BinaryExpressionPrio4(
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  left = BinaryExpressionPrio3(
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  left = UnaryExpression(
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  unaryExprValue = IncrementAfter(
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  name = VarName(
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  name = str(a)
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  op = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  right = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  op = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  right = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  -  -  op = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  -  -  -  right = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  -  op = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  -  -  right = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  nxt = StatementListR(
 -  -  -  -  -  -  -  -  -  -  statement = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  nxt = NoneType(None)
 -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  )
 -  -  -  -  -  -  )
 -  -  -  -  -  )
 -  -  -  -  -  nxt = StatementListR(
 -  -  -  -  -  -  statement = Statement(
 -  -  -  -  -  -  -  statement = WhileStatement(
 -  -  -  -  -  -  -  -  expr = Expression(
 -  -  -  -  -  -  -  -  -  expr = BinaryExpressionPrio7(
 -  -  -  -  -  -  -  -  -  -  left = BinaryExpressionPrio6(
 -  -  -  -  -  -  -  -  -  -  -  left = BinaryExpressionPrio4(
 -  -  -  -  -  -  -  -  -  -  -  -  left = BinaryExpressionPrio3(
 -  -  -  -  -  -  -  -  -  -  -  -  -  left = UnaryExpression(
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  unaryExprValue = VarName(
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  name = str(a)
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  -  -  op = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  -  -  -  right = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  -  op = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  -  -  right = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  op = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  -  right = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  op = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  right = NoneType(None)
 -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  block = Block(
 -  -  -  -  -  -  -  -  -  statementList = StatementListR(
 -  -  -  -  -  -  -  -  -  -  statement = Statement(
 -  -  -  -  -  -  -  -  -  -  -  statement = AssignmentStatement(
 -  -  -  -  -  -  -  -  -  -  -  -  name = str(a)
 -  -  -  -  -  -  -  -  -  -  -  -  expr = Expression(
 -  -  -  -  -  -  -  -  -  -  -  -  -  expr = BinaryExpressionPrio7(
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  left = BinaryExpressionPrio6(
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  left = BinaryExpressionPrio4(
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  left = BinaryExpressionPrio3(
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  left = UnaryExpression(
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  unaryExprValue = VarName(
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  name = str(a)
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  op = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  right = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  op = Sub(
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  right = BinaryExpressionPrio4(
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  left = BinaryExpressionPrio3(
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  left = UnaryExpression(
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  unaryExprValue = VarName(
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  name = str(a)
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  op = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  right = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  op = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  right = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  op = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  right = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  op = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  right = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  nxt = StatementListR(
 -  -  -  -  -  -  -  -  -  -  -  statement = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  -  nxt = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  )
 -  -  -  -  -  -  )
 -  -  -  -  -  -  nxt = StatementListR(
 -  -  -  -  -  -  -  statement = Statement(
 -  -  -  -  -  -  -  -  statement = BlankStatement(
 -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  nxt = StatementListR(
 -  -  -  -  -  -  -  -  statement = NoneType(None)
 -  -  -  -  -  -  -  -  nxt = NoneType(None)
 -  -  -  -  -  -  -  )
 -  -  -  -  -  -  )
 -  -  -  -  -  )
 -  -  -  -  )
 -  -  -  )
 -  -  )
 -  -  nxt = DefinitionListR(
 -  -  -  functionDefinition = NoneType(None)
 -  -  -  nxt = NoneType(None)
 -  -  )
 -  )
 )
<parser_rules.structural.TypeName object at 0x7f9108ee97b8>
<parser_rules.structural.TypeName object at 0x7f9108ee96a0>
<parser_rules.structural.Parameter object at 0x7f9108ee95c0>
<parser_rules.structural.TypeName object at 0x7f9108ee9668>
<parser_rules.structural.Parameter object at 0x7f9108b70ef0>
<parser_rules.literals.IntLiteral object at 0x7f9108ee9550>
<parser_rules.literals.Literal object at 0x7f9108b70f98>
<parser_rules.statements.AssignmentStatement object at 0x7f9108f1b2b0>
<parser_rules.literals.IntLiteral object at 0x7f9108f1b2e8>
<parser_rules.literals.Literal object at 0x7f9108f1b470>
<parser_rules.literals.IntLiteral object at 0x7f9108f1b6d8>
<parser_rules.literals.Literal object at 0x7f9108f1b828>
<parser_rules.statements.AssignmentStatement object at 0x7f9108f1b7f0>
<parser_rules.structural.Block object at 0x7f9108f1bcc0>
<parser_rules.statements.ForStatement object at 0x7f9108f1b5f8>
<parser_rules.statements.AssignmentStatement object at 0x7f9108f20048>
<parser_rules.structural.Block object at 0x7f9108f202b0>
<parser_rules.statements.WhileStatement object at 0x7f9108f1be48>
<parser_rules.statements.BlankStatement object at 0x7f9108f1be10>
<parser_rules.structural.Block object at 0x7f9108f1bd30>
<parser_rules.structural.FunctionDefinition object at 0x7f9108b70fd0>
<parser_rules.structural.CompilationUnit object at 0x7f9108b70f60>
 compilationUnit = CompilationUnit(
 -  definitionList = [
 -  -  FunctionDefinition(
 -  -  -  returnType = TypeName(
 -  -  -  -  name = str(void)
 -  -  -  )
 -  -  -  name = str(a)
 -  -  -  parameterList = [
 -  -  -  -  Parameter(
 -  -  -  -  -  typeName = TypeName(
 -  -  -  -  -  -  name = str(u32)
 -  -  -  -  -  )
 -  -  -  -  -  name = str(p)
 -  -  -  -  )
 -  -  -  -  Parameter(
 -  -  -  -  -  typeName = TypeName(
 -  -  -  -  -  -  name = str(u32)
 -  -  -  -  -  )
 -  -  -  -  -  name = str(t)
 -  -  -  -  )
 -  -  -  ]
 -  -  -  block = Block(
 -  -  -  -  statementList = [
 -  -  -  -  -  ForStatement(
 -  -  -  -  -  -  statementInit = AssignmentStatement(
 -  -  -  -  -  -  -  name = str(a)
 -  -  -  -  -  -  -  expr = [
 -  -  -  -  -  -  -  -  Literal(
 -  -  -  -  -  -  -  -  -  value = IntLiteral(
 -  -  -  -  -  -  -  -  -  -  signed = bool(True)
 -  -  -  -  -  -  -  -  -  -  size = int(32)
 -  -  -  -  -  -  -  -  -  -  value = int(2)
 -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  ]
 -  -  -  -  -  -  )
 -  -  -  -  -  -  exprCheck = [
 -  -  -  -  -  -  -  VarName(
 -  -  -  -  -  -  -  -  name = str(a)
 -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  Literal(
 -  -  -  -  -  -  -  -  value = IntLiteral(
 -  -  -  -  -  -  -  -  -  signed = bool(True)
 -  -  -  -  -  -  -  -  -  size = int(32)
 -  -  -  -  -  -  -  -  -  value = int(3)
 -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  Less(
 -  -  -  -  -  -  -  )
 -  -  -  -  -  -  ]
 -  -  -  -  -  -  statementChange = AssignmentStatement(
 -  -  -  -  -  -  -  name = str(a)
 -  -  -  -  -  -  -  expr = [
 -  -  -  -  -  -  -  -  VarName(
 -  -  -  -  -  -  -  -  -  name = str(a)
 -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  Literal(
 -  -  -  -  -  -  -  -  -  value = IntLiteral(
 -  -  -  -  -  -  -  -  -  -  signed = bool(True)
 -  -  -  -  -  -  -  -  -  -  size = int(32)
 -  -  -  -  -  -  -  -  -  -  value = int(3)
 -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  Add(
 -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  ]
 -  -  -  -  -  -  )
 -  -  -  -  -  -  block = Block(
 -  -  -  -  -  -  -  statementList = [
 -  -  -  -  -  -  -  -  [
 -  -  -  -  -  -  -  -  -  [
 -  -  -  -  -  -  -  -  -  -  VarName(
 -  -  -  -  -  -  -  -  -  -  -  name = str(a)
 -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  str(++)
 -  -  -  -  -  -  -  -  -  ]
 -  -  -  -  -  -  -  -  ]
 -  -  -  -  -  -  -  ]
 -  -  -  -  -  -  )
 -  -  -  -  -  )
 -  -  -  -  -  WhileStatement(
 -  -  -  -  -  -  expr = [
 -  -  -  -  -  -  -  VarName(
 -  -  -  -  -  -  -  -  name = str(a)
 -  -  -  -  -  -  -  )
 -  -  -  -  -  -  ]
 -  -  -  -  -  -  block = Block(
 -  -  -  -  -  -  -  statementList = [
 -  -  -  -  -  -  -  -  AssignmentStatement(
 -  -  -  -  -  -  -  -  -  name = str(a)
 -  -  -  -  -  -  -  -  -  expr = [
 -  -  -  -  -  -  -  -  -  -  VarName(
 -  -  -  -  -  -  -  -  -  -  -  name = str(a)
 -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  VarName(
 -  -  -  -  -  -  -  -  -  -  -  name = str(a)
 -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  Sub(
 -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  ]
 -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  ]
 -  -  -  -  -  -  )
 -  -  -  -  -  )
 -  -  -  -  -  BlankStatement(
 -  -  -  -  -  )
 -  -  -  -  ]
 -  -  -  )
 -  -  )
 -  ]
 )
