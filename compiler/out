struct kvadrat<T>{
    T a;
    T b;
}

fn __init__<T>(kvadrat<T>* this, T a, T b){
    this.a = a;
    this.b = b;
}

//this is a comment

fn sum(T a, T b){
    return a+b;
}

fn __mul__(int* a, int** b){

}

/*
this is a multiline comment
and we cache it

*/

fn main(){
    let a = i32{5i32};
    let b = i32{10i32};
    let A = heap_alloc<i32>{};
    //i32[5] a;
    //i32 a[5];
    A[3];
    sum(2,3);
    let kv = kvadrat{a,b};
    return kv.a * kv.b;
}


LexToken(STRUCT,'struct',1,0)
LexToken(ID,'kvadrat',1,7)
LexToken(LT,'<',1,14)
LexToken(ID,'T',1,15)
LexToken(GT,'>',1,16)
LexToken(LBRACE,'{',1,17)
LexToken(ID,'T',2,23)
LexToken(ID,'a',2,25)
LexToken(SEMICOLON,';',2,26)
LexToken(ID,'T',3,32)
LexToken(ID,'b',3,34)
LexToken(SEMICOLON,';',3,35)
LexToken(RBRACE,'}',4,37)
LexToken(FN,'fn',6,40)
LexToken(ID,'__init__',6,43)
LexToken(LT,'<',6,51)
LexToken(ID,'T',6,52)
LexToken(GT,'>',6,53)
LexToken(LPAREN,'(',6,54)
LexToken(ID,'kvadrat',6,55)
LexToken(LT,'<',6,62)
LexToken(ID,'T',6,63)
LexToken(GT,'>',6,64)
LexToken(TIMES,'*',6,65)
LexToken(ID,'this',6,67)
LexToken(COMMA,',',6,71)
LexToken(ID,'T',6,73)
LexToken(ID,'a',6,75)
LexToken(COMMA,',',6,76)
LexToken(ID,'T',6,78)
LexToken(ID,'b',6,80)
LexToken(RPAREN,')',6,81)
LexToken(LBRACE,'{',6,82)
LexToken(ID,'this',7,88)
LexToken(DOT,'.',7,92)
LexToken(ID,'a',7,93)
LexToken(ASSIGNMENT,'=',7,95)
LexToken(ID,'a',7,97)
LexToken(SEMICOLON,';',7,98)
LexToken(ID,'this',8,104)
LexToken(DOT,'.',8,108)
LexToken(ID,'b',8,109)
LexToken(ASSIGNMENT,'=',8,111)
LexToken(ID,'b',8,113)
LexToken(SEMICOLON,';',8,114)
LexToken(RBRACE,'}',9,116)
LexToken(FN,'fn',13,140)
LexToken(ID,'sum',13,143)
LexToken(LPAREN,'(',13,146)
LexToken(ID,'T',13,147)
LexToken(ID,'a',13,149)
LexToken(COMMA,',',13,150)
LexToken(ID,'T',13,152)
LexToken(ID,'b',13,154)
LexToken(RPAREN,')',13,155)
LexToken(LBRACE,'{',13,156)
LexToken(RETURN,'return',14,162)
LexToken(ID,'a',14,169)
LexToken(PLUS,'+',14,170)
LexToken(ID,'b',14,171)
LexToken(SEMICOLON,';',14,172)
LexToken(RBRACE,'}',15,174)
LexToken(FN,'fn',17,177)
LexToken(ID,'__mul__',17,180)
LexToken(LPAREN,'(',17,187)
LexToken(ID,'int',17,188)
LexToken(TIMES,'*',17,191)
LexToken(ID,'a',17,193)
LexToken(COMMA,',',17,194)
LexToken(ID,'int',17,196)
LexToken(TIMES,'*',17,199)
LexToken(TIMES,'*',17,200)
LexToken(ID,'b',17,202)
LexToken(RPAREN,')',17,203)
LexToken(LBRACE,'{',17,204)
LexToken(RBRACE,'}',19,207)
LexToken(FN,'fn',27,262)
LexToken(ID,'main',27,265)
LexToken(LPAREN,'(',27,269)
LexToken(RPAREN,')',27,270)
LexToken(LBRACE,'{',27,271)
LexToken(LET,'let',28,277)
LexToken(ID,'a',28,281)
LexToken(ASSIGNMENT,'=',28,283)
LexToken(ID,'i32',28,285)
LexToken(LBRACE,'{',28,288)
LexToken(INTL,'5i32',28,289)
LexToken(RBRACE,'}',28,293)
LexToken(SEMICOLON,';',28,294)
LexToken(LET,'let',29,300)
LexToken(ID,'b',29,304)
LexToken(ASSIGNMENT,'=',29,306)
LexToken(ID,'i32',29,308)
LexToken(LBRACE,'{',29,311)
LexToken(INTL,'10i32',29,312)
LexToken(RBRACE,'}',29,317)
LexToken(SEMICOLON,';',29,318)
LexToken(LET,'let',30,324)
LexToken(ID,'A',30,328)
LexToken(ASSIGNMENT,'=',30,330)
LexToken(ID,'heap_alloc',30,332)
LexToken(LT,'<',30,342)
LexToken(ID,'i32',30,343)
LexToken(GT,'>',30,346)
LexToken(LBRACE,'{',30,347)
LexToken(RBRACE,'}',30,348)
LexToken(SEMICOLON,';',30,349)
LexToken(ID,'A',33,387)
LexToken(LBRACKET,'[',33,388)
LexToken(INTL,'3',33,389)
LexToken(RBRACKET,']',33,390)
LexToken(SEMICOLON,';',33,391)
LexToken(ID,'sum',34,397)
LexToken(LPAREN,'(',34,400)
LexToken(INTL,'2',34,401)
LexToken(COMMA,',',34,402)
LexToken(INTL,'3',34,403)
LexToken(RPAREN,')',34,404)
LexToken(SEMICOLON,';',34,405)
LexToken(LET,'let',35,411)
LexToken(ID,'kv',35,415)
LexToken(ASSIGNMENT,'=',35,418)
LexToken(ID,'kvadrat',35,420)
LexToken(LBRACE,'{',35,427)
LexToken(ID,'a',35,428)
LexToken(COMMA,',',35,429)
LexToken(ID,'b',35,430)
LexToken(RBRACE,'}',35,431)
LexToken(SEMICOLON,';',35,432)
LexToken(RETURN,'return',36,438)
LexToken(ID,'kv',36,445)
LexToken(DOT,'.',36,447)
LexToken(ID,'a',36,448)
LexToken(TIMES,'*',36,450)
LexToken(ID,'kv',36,452)
LexToken(DOT,'.',36,454)
LexToken(ID,'b',36,455)
LexToken(SEMICOLON,';',36,456)
LexToken(RBRACE,'}',37,458)
Injected <class 'parser_rules.AddressExpression'>
Injected <class 'parser_rules.Argument'>
Injected <class 'parser_rules.ArgumentListR'>
Injected <class 'parser_rules.AssignmentStatement'>
Injected <class 'parser_rules.BinaryExpressionClassic'>
Injected <class 'parser_rules.BlankStatement'>
Injected <class 'parser_rules.Block'>
Injected <class 'parser_rules.BlockStatement'>
Injected <class 'parser_rules.BoolLiteral'>
Injected <class 'parser_rules.BracketCall'>
Injected <class 'parser_rules.BreakStatement'>
Injected <class 'parser_rules.CompilationUnit'>
Injected <class 'parser_rules.DefinitionListR'>
Injected <class 'parser_rules.DereferenceExpression'>
Injected <class 'parser_rules.Expression'>
Injected <class 'parser_rules.ForStatement'>
Injected <class 'parser_rules.FunctionCall'>
Injected <class 'parser_rules.FunctionDefinition'>
Injected <class 'parser_rules.IdExpression'>
Injected <class 'parser_rules.IfElseStatement'>
Injected <class 'parser_rules.InitCall'>
Injected <class 'parser_rules.InitStatement'>
Injected <class 'parser_rules.IntLiteral'>
Injected <class 'parser_rules.Literal'>
Injected <class 'parser_rules.Parameter'>
Injected <class 'parser_rules.ParameterListR'>
Injected <class 'parser_rules.PointerListR'>
Injected <class 'parser_rules.ReturnStatement'>
Injected <class 'parser_rules.Statement'>
Injected <class 'parser_rules.StatementListR'>
Injected <class 'parser_rules.StructDefinition'>
Injected <class 'parser_rules.StructMember'>
Injected <class 'parser_rules.StructMemberListR'>
Injected <class 'parser_rules.Type'>
Injected <class 'parser_rules.TypeArgumentListR'>
Injected <class 'parser_rules.TypeParameterListR'>
Injected <class 'parser_rules.UnaryExpression'>
Injected <class 'parser_rules.WhileStatement'>
 compilationUnit = CompilationUnit(
 -  definitionList = [
 -  -  StructDefinition(
 -  -  -  typeName = str(kvadrat)
 -  -  -  structMemberList = [
 -  -  -  -  StructMember(
 -  -  -  -  -  type = Type(
 -  -  -  -  -  -  name = str(T)
 -  -  -  -  -  -  typeArgumentList = [
 -  -  -  -  -  -  ]
 -  -  -  -  -  -  ptr_cnt = int(0)
 -  -  -  -  -  )
 -  -  -  -  -  name = str(a)
 -  -  -  -  )
 -  -  -  -  StructMember(
 -  -  -  -  -  type = Type(
 -  -  -  -  -  -  name = str(T)
 -  -  -  -  -  -  typeArgumentList = [
 -  -  -  -  -  -  ]
 -  -  -  -  -  -  ptr_cnt = int(0)
 -  -  -  -  -  )
 -  -  -  -  -  name = str(b)
 -  -  -  -  )
 -  -  -  ]
 -  -  -  typeParameters = [
 -  -  -  -  str(T)
 -  -  -  ]
 -  -  )
 -  -  FunctionDefinition(
 -  -  -  name = str(__init__)
 -  -  -  parameterList = [
 -  -  -  -  Parameter(
 -  -  -  -  -  type = Type(
 -  -  -  -  -  -  name = str(kvadrat)
 -  -  -  -  -  -  typeArgumentList = [
 -  -  -  -  -  -  -  Type(
 -  -  -  -  -  -  -  -  name = str(T)
 -  -  -  -  -  -  -  -  typeArgumentList = [
 -  -  -  -  -  -  -  -  ]
 -  -  -  -  -  -  -  -  ptr_cnt = int(0)
 -  -  -  -  -  -  -  )
 -  -  -  -  -  -  ]
 -  -  -  -  -  -  ptr_cnt = int(1)
 -  -  -  -  -  )
 -  -  -  -  -  name = str(this)
 -  -  -  -  )
 -  -  -  -  Parameter(
 -  -  -  -  -  type = Type(
 -  -  -  -  -  -  name = str(T)
 -  -  -  -  -  -  typeArgumentList = [
 -  -  -  -  -  -  ]
 -  -  -  -  -  -  ptr_cnt = int(0)
 -  -  -  -  -  )
 -  -  -  -  -  name = str(a)
 -  -  -  -  )
 -  -  -  -  Parameter(
 -  -  -  -  -  type = Type(
 -  -  -  -  -  -  name = str(T)
 -  -  -  -  -  -  typeArgumentList = [
 -  -  -  -  -  -  ]
 -  -  -  -  -  -  ptr_cnt = int(0)
 -  -  -  -  -  )
 -  -  -  -  -  name = str(b)
 -  -  -  -  )
 -  -  -  ]
 -  -  -  typeParameterList = [
 -  -  -  -  str(T)
 -  -  -  ]
 -  -  -  block = Block(
 -  -  -  -  statementList = [
 -  -  -  -  -  Statement(
 -  -  -  -  -  -  statement = AssignmentStatement(
 -  -  -  -  -  -  -  left = Expression(
 -  -  -  -  -  -  -  -  expr = IdExpression(
 -  -  -  -  -  -  -  -  -  nxt = IdExpression(
 -  -  -  -  -  -  -  -  -  -  nxt = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  id = str(this)
 -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  id = str(a)
 -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  right = Expression(
 -  -  -  -  -  -  -  -  expr = IdExpression(
 -  -  -  -  -  -  -  -  -  nxt = NoneType(None)
 -  -  -  -  -  -  -  -  -  id = str(a)
 -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  )
 -  -  -  -  -  -  )
 -  -  -  -  -  )
 -  -  -  -  -  Statement(
 -  -  -  -  -  -  statement = AssignmentStatement(
 -  -  -  -  -  -  -  left = Expression(
 -  -  -  -  -  -  -  -  expr = IdExpression(
 -  -  -  -  -  -  -  -  -  nxt = IdExpression(
 -  -  -  -  -  -  -  -  -  -  nxt = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  id = str(this)
 -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  id = str(b)
 -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  right = Expression(
 -  -  -  -  -  -  -  -  expr = IdExpression(
 -  -  -  -  -  -  -  -  -  nxt = NoneType(None)
 -  -  -  -  -  -  -  -  -  id = str(b)
 -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  )
 -  -  -  -  -  -  )
 -  -  -  -  -  )
 -  -  -  -  ]
 -  -  -  )
 -  -  )
 -  -  FunctionDefinition(
 -  -  -  name = str(sum)
 -  -  -  parameterList = [
 -  -  -  -  Parameter(
 -  -  -  -  -  type = Type(
 -  -  -  -  -  -  name = str(T)
 -  -  -  -  -  -  typeArgumentList = [
 -  -  -  -  -  -  ]
 -  -  -  -  -  -  ptr_cnt = int(0)
 -  -  -  -  -  )
 -  -  -  -  -  name = str(a)
 -  -  -  -  )
 -  -  -  -  Parameter(
 -  -  -  -  -  type = Type(
 -  -  -  -  -  -  name = str(T)
 -  -  -  -  -  -  typeArgumentList = [
 -  -  -  -  -  -  ]
 -  -  -  -  -  -  ptr_cnt = int(0)
 -  -  -  -  -  )
 -  -  -  -  -  name = str(b)
 -  -  -  -  )
 -  -  -  ]
 -  -  -  typeParameterList = [
 -  -  -  ]
 -  -  -  block = Block(
 -  -  -  -  statementList = [
 -  -  -  -  -  Statement(
 -  -  -  -  -  -  statement = ReturnStatement(
 -  -  -  -  -  -  -  expr = Expression(
 -  -  -  -  -  -  -  -  expr = BinaryExpressionClassic(
 -  -  -  -  -  -  -  -  -  left = Expression(
 -  -  -  -  -  -  -  -  -  -  expr = IdExpression(
 -  -  -  -  -  -  -  -  -  -  -  nxt = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  -  id = str(a)
 -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  op = str(__add__)
 -  -  -  -  -  -  -  -  -  right = Expression(
 -  -  -  -  -  -  -  -  -  -  expr = IdExpression(
 -  -  -  -  -  -  -  -  -  -  -  nxt = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  -  id = str(b)
 -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  )
 -  -  -  -  -  -  )
 -  -  -  -  -  )
 -  -  -  -  ]
 -  -  -  )
 -  -  )
 -  -  FunctionDefinition(
 -  -  -  name = str(__mul__)
 -  -  -  parameterList = [
 -  -  -  -  Parameter(
 -  -  -  -  -  type = Type(
 -  -  -  -  -  -  name = str(int)
 -  -  -  -  -  -  typeArgumentList = [
 -  -  -  -  -  -  ]
 -  -  -  -  -  -  ptr_cnt = int(1)
 -  -  -  -  -  )
 -  -  -  -  -  name = str(a)
 -  -  -  -  )
 -  -  -  -  Parameter(
 -  -  -  -  -  type = Type(
 -  -  -  -  -  -  name = str(int)
 -  -  -  -  -  -  typeArgumentList = [
 -  -  -  -  -  -  ]
 -  -  -  -  -  -  ptr_cnt = int(2)
 -  -  -  -  -  )
 -  -  -  -  -  name = str(b)
 -  -  -  -  )
 -  -  -  ]
 -  -  -  typeParameterList = [
 -  -  -  ]
 -  -  -  block = Block(
 -  -  -  -  statementList = [
 -  -  -  -  ]
 -  -  -  )
 -  -  )
 -  -  FunctionDefinition(
 -  -  -  name = str(main)
 -  -  -  parameterList = [
 -  -  -  ]
 -  -  -  typeParameterList = [
 -  -  -  ]
 -  -  -  block = Block(
 -  -  -  -  statementList = [
 -  -  -  -  -  Statement(
 -  -  -  -  -  -  statement = InitStatement(
 -  -  -  -  -  -  -  name = str(a)
 -  -  -  -  -  -  -  initExpression = InitCall(
 -  -  -  -  -  -  -  -  type = str(i32)
 -  -  -  -  -  -  -  -  typeArgumentList = [
 -  -  -  -  -  -  -  -  ]
 -  -  -  -  -  -  -  -  argumentList = [
 -  -  -  -  -  -  -  -  -  Argument(
 -  -  -  -  -  -  -  -  -  -  expr = Expression(
 -  -  -  -  -  -  -  -  -  -  -  expr = UnaryExpression(
 -  -  -  -  -  -  -  -  -  -  -  -  expr = Literal(
 -  -  -  -  -  -  -  -  -  -  -  -  -  value = IntLiteral(
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  signed = bool(True)
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  size = int(32)
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  value = int(5)
 -  -  -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  ]
 -  -  -  -  -  -  -  )
 -  -  -  -  -  -  )
 -  -  -  -  -  )
 -  -  -  -  -  Statement(
 -  -  -  -  -  -  statement = InitStatement(
 -  -  -  -  -  -  -  name = str(b)
 -  -  -  -  -  -  -  initExpression = InitCall(
 -  -  -  -  -  -  -  -  type = str(i32)
 -  -  -  -  -  -  -  -  typeArgumentList = [
 -  -  -  -  -  -  -  -  ]
 -  -  -  -  -  -  -  -  argumentList = [
 -  -  -  -  -  -  -  -  -  Argument(
 -  -  -  -  -  -  -  -  -  -  expr = Expression(
 -  -  -  -  -  -  -  -  -  -  -  expr = UnaryExpression(
 -  -  -  -  -  -  -  -  -  -  -  -  expr = Literal(
 -  -  -  -  -  -  -  -  -  -  -  -  -  value = IntLiteral(
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  signed = bool(True)
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  size = int(32)
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  value = int(10)
 -  -  -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  ]
 -  -  -  -  -  -  -  )
 -  -  -  -  -  -  )
 -  -  -  -  -  )
 -  -  -  -  -  Statement(
 -  -  -  -  -  -  statement = InitStatement(
 -  -  -  -  -  -  -  name = str(A)
 -  -  -  -  -  -  -  initExpression = InitCall(
 -  -  -  -  -  -  -  -  type = str(heap_alloc)
 -  -  -  -  -  -  -  -  typeArgumentList = [
 -  -  -  -  -  -  -  -  -  Type(
 -  -  -  -  -  -  -  -  -  -  name = str(i32)
 -  -  -  -  -  -  -  -  -  -  typeArgumentList = [
 -  -  -  -  -  -  -  -  -  -  ]
 -  -  -  -  -  -  -  -  -  -  ptr_cnt = int(0)
 -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  ]
 -  -  -  -  -  -  -  -  argumentList = [
 -  -  -  -  -  -  -  -  ]
 -  -  -  -  -  -  -  )
 -  -  -  -  -  -  )
 -  -  -  -  -  )
 -  -  -  -  -  Statement(
 -  -  -  -  -  -  statement = Expression(
 -  -  -  -  -  -  -  expr = UnaryExpression(
 -  -  -  -  -  -  -  -  expr = BracketCall(
 -  -  -  -  -  -  -  -  -  name = Expression(
 -  -  -  -  -  -  -  -  -  -  expr = IdExpression(
 -  -  -  -  -  -  -  -  -  -  -  nxt = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  -  id = str(A)
 -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  expr = Expression(
 -  -  -  -  -  -  -  -  -  -  expr = UnaryExpression(
 -  -  -  -  -  -  -  -  -  -  -  expr = Literal(
 -  -  -  -  -  -  -  -  -  -  -  -  value = IntLiteral(
 -  -  -  -  -  -  -  -  -  -  -  -  -  signed = bool(True)
 -  -  -  -  -  -  -  -  -  -  -  -  -  size = int(32)
 -  -  -  -  -  -  -  -  -  -  -  -  -  value = int(3)
 -  -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  )
 -  -  -  -  -  -  )
 -  -  -  -  -  )
 -  -  -  -  -  Statement(
 -  -  -  -  -  -  statement = Expression(
 -  -  -  -  -  -  -  expr = UnaryExpression(
 -  -  -  -  -  -  -  -  expr = FunctionCall(
 -  -  -  -  -  -  -  -  -  name = str(sum)
 -  -  -  -  -  -  -  -  -  argumentList = [
 -  -  -  -  -  -  -  -  -  -  Argument(
 -  -  -  -  -  -  -  -  -  -  -  expr = Expression(
 -  -  -  -  -  -  -  -  -  -  -  -  expr = UnaryExpression(
 -  -  -  -  -  -  -  -  -  -  -  -  -  expr = Literal(
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  value = IntLiteral(
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  signed = bool(True)
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  size = int(32)
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  value = int(2)
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  Argument(
 -  -  -  -  -  -  -  -  -  -  -  expr = Expression(
 -  -  -  -  -  -  -  -  -  -  -  -  expr = UnaryExpression(
 -  -  -  -  -  -  -  -  -  -  -  -  -  expr = Literal(
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  value = IntLiteral(
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  signed = bool(True)
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  size = int(32)
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  value = int(3)
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  ]
 -  -  -  -  -  -  -  -  -  typeArgumentList = [
 -  -  -  -  -  -  -  -  -  ]
 -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  )
 -  -  -  -  -  -  )
 -  -  -  -  -  )
 -  -  -  -  -  Statement(
 -  -  -  -  -  -  statement = InitStatement(
 -  -  -  -  -  -  -  name = str(kv)
 -  -  -  -  -  -  -  initExpression = InitCall(
 -  -  -  -  -  -  -  -  type = str(kvadrat)
 -  -  -  -  -  -  -  -  typeArgumentList = [
 -  -  -  -  -  -  -  -  ]
 -  -  -  -  -  -  -  -  argumentList = [
 -  -  -  -  -  -  -  -  -  Argument(
 -  -  -  -  -  -  -  -  -  -  expr = Expression(
 -  -  -  -  -  -  -  -  -  -  -  expr = IdExpression(
 -  -  -  -  -  -  -  -  -  -  -  -  nxt = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  -  -  id = str(a)
 -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  Argument(
 -  -  -  -  -  -  -  -  -  -  expr = Expression(
 -  -  -  -  -  -  -  -  -  -  -  expr = IdExpression(
 -  -  -  -  -  -  -  -  -  -  -  -  nxt = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  -  -  id = str(b)
 -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  ]
 -  -  -  -  -  -  -  )
 -  -  -  -  -  -  )
 -  -  -  -  -  )
 -  -  -  -  -  Statement(
 -  -  -  -  -  -  statement = ReturnStatement(
 -  -  -  -  -  -  -  expr = Expression(
 -  -  -  -  -  -  -  -  expr = BinaryExpressionClassic(
 -  -  -  -  -  -  -  -  -  left = Expression(
 -  -  -  -  -  -  -  -  -  -  expr = IdExpression(
 -  -  -  -  -  -  -  -  -  -  -  nxt = IdExpression(
 -  -  -  -  -  -  -  -  -  -  -  -  nxt = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  -  -  id = str(kv)
 -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  id = str(a)
 -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  op = str(__mul__)
 -  -  -  -  -  -  -  -  -  right = Expression(
 -  -  -  -  -  -  -  -  -  -  expr = IdExpression(
 -  -  -  -  -  -  -  -  -  -  -  nxt = IdExpression(
 -  -  -  -  -  -  -  -  -  -  -  -  nxt = NoneType(None)
 -  -  -  -  -  -  -  -  -  -  -  -  id = str(kv)
 -  -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  -  -  id = str(b)
 -  -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  -  )
 -  -  -  -  -  -  -  )
 -  -  -  -  -  -  )
 -  -  -  -  -  )
 -  -  -  -  ]
 -  -  -  )
 -  -  )
 -  ]
 )

 compilationUnit = [
 -  StructDefinition(
 -  -  typeName = str(kvadrat)
 -  -  typeParameters = [
 -  -  -  str(T)
 -  -  ]
 -  -  members = [
 -  -  -  StructMember(
 -  -  -  -  type = Type(
 -  -  -  -  -  name = str(T)
 -  -  -  -  -  typeArgumentList = [
 -  -  -  -  -  ]
 -  -  -  -  -  ptr_cnt = int(0)
 -  -  -  -  )
 -  -  -  -  name = str(a)
 -  -  -  )
 -  -  -  StructMember(
 -  -  -  -  type = Type(
 -  -  -  -  -  name = str(T)
 -  -  -  -  -  typeArgumentList = [
 -  -  -  -  -  ]
 -  -  -  -  -  ptr_cnt = int(0)
 -  -  -  -  )
 -  -  -  -  name = str(b)
 -  -  -  )
 -  -  ]
 -  )
 -  FunctionDefinition(
 -  -  name = str(__init__)
 -  -  parameters = [
 -  -  -  Parameter(
 -  -  -  -  type = Type(
 -  -  -  -  -  name = str(kvadrat)
 -  -  -  -  -  typeArgumentList = [
 -  -  -  -  -  -  Type(
 -  -  -  -  -  -  -  name = str(T)
 -  -  -  -  -  -  -  typeArgumentList = [
 -  -  -  -  -  -  -  ]
 -  -  -  -  -  -  -  ptr_cnt = int(0)
 -  -  -  -  -  -  )
 -  -  -  -  -  ]
 -  -  -  -  -  ptr_cnt = int(1)
 -  -  -  -  )
 -  -  -  -  name = str(this)
 -  -  -  )
 -  -  -  Parameter(
 -  -  -  -  type = Type(
 -  -  -  -  -  name = str(T)
 -  -  -  -  -  typeArgumentList = [
 -  -  -  -  -  ]
 -  -  -  -  -  ptr_cnt = int(0)
 -  -  -  -  )
 -  -  -  -  name = str(a)
 -  -  -  )
 -  -  -  Parameter(
 -  -  -  -  type = Type(
 -  -  -  -  -  name = str(T)
 -  -  -  -  -  typeArgumentList = [
 -  -  -  -  -  ]
 -  -  -  -  -  ptr_cnt = int(0)
 -  -  -  -  )
 -  -  -  -  name = str(b)
 -  -  -  )
 -  -  ]
 -  -  typeParameters = [
 -  -  -  str(T)
 -  -  ]
 -  -  body = [
 -  -  -  Description(
 -  -  -  -  name = str(Starting parameter stack shifting)
 -  -  -  )
 -  -  -  StackAllocate(
 -  -  -  -  dest = str(var_$_this_$_2)
 -  -  -  -  typename = Type(
 -  -  -  -  -  name = str(kvadrat)
 -  -  -  -  -  typeArgumentList = [
 -  -  -  -  -  -  Type(
 -  -  -  -  -  -  -  name = str(T)
 -  -  -  -  -  -  -  typeArgumentList = [
 -  -  -  -  -  -  -  ]
 -  -  -  -  -  -  -  ptr_cnt = int(0)
 -  -  -  -  -  -  )
 -  -  -  -  -  ]
 -  -  -  -  -  ptr_cnt = int(1)
 -  -  -  -  )
 -  -  -  )
 -  -  -  StoreValueToPointer(
 -  -  -  -  dest = str(var_$_this_$_2)
 -  -  -  -  src = str(this)
 -  -  -  )
 -  -  -  StackAllocate(
 -  -  -  -  dest = str(var_$_a_$_3)
 -  -  -  -  typename = Type(
 -  -  -  -  -  name = str(T)
 -  -  -  -  -  typeArgumentList = [
 -  -  -  -  -  ]
 -  -  -  -  -  ptr_cnt = int(0)
 -  -  -  -  )
 -  -  -  )
 -  -  -  StoreValueToPointer(
 -  -  -  -  dest = str(var_$_a_$_3)
 -  -  -  -  src = str(a)
 -  -  -  )
 -  -  -  StackAllocate(
 -  -  -  -  dest = str(var_$_b_$_4)
 -  -  -  -  typename = Type(
 -  -  -  -  -  name = str(T)
 -  -  -  -  -  typeArgumentList = [
 -  -  -  -  -  ]
 -  -  -  -  -  ptr_cnt = int(0)
 -  -  -  -  )
 -  -  -  )
 -  -  -  StoreValueToPointer(
 -  -  -  -  dest = str(var_$_b_$_4)
 -  -  -  -  src = str(b)
 -  -  -  )
 -  -  -  Description(
 -  -  -  -  name = str(Ending parameter stack shifting)
 -  -  -  )
 -  -  -  LoadValueFromPointer(
 -  -  -  -  dest = str(tmp_var_$_1)
 -  -  -  -  src = str(var_$_a_$_3)
 -  -  -  )
 -  -  -  GetElementPtr(
 -  -  -  -  dest = str(tmp_var_$_2)
 -  -  -  -  src = str(var_$_this_$_2)
 -  -  -  -  element_name = str(a)
 -  -  -  )
 -  -  -  StoreValueToPointer(
 -  -  -  -  dest = str(tmp_var_$_2)
 -  -  -  -  src = str(tmp_var_$_1)
 -  -  -  )
 -  -  -  LoadValueFromPointer(
 -  -  -  -  dest = str(tmp_var_$_3)
 -  -  -  -  src = str(var_$_b_$_4)
 -  -  -  )
 -  -  -  GetElementPtr(
 -  -  -  -  dest = str(tmp_var_$_4)
 -  -  -  -  src = str(var_$_this_$_2)
 -  -  -  -  element_name = str(b)
 -  -  -  )
 -  -  -  StoreValueToPointer(
 -  -  -  -  dest = str(tmp_var_$_4)
 -  -  -  -  src = str(tmp_var_$_3)
 -  -  -  )
 -  -  ]
 -  )
 -  FunctionDefinition(
 -  -  name = str(sum)
 -  -  parameters = [
 -  -  -  Parameter(
 -  -  -  -  type = Type(
 -  -  -  -  -  name = str(T)
 -  -  -  -  -  typeArgumentList = [
 -  -  -  -  -  ]
 -  -  -  -  -  ptr_cnt = int(0)
 -  -  -  -  )
 -  -  -  -  name = str(a)
 -  -  -  )
 -  -  -  Parameter(
 -  -  -  -  type = Type(
 -  -  -  -  -  name = str(T)
 -  -  -  -  -  typeArgumentList = [
 -  -  -  -  -  ]
 -  -  -  -  -  ptr_cnt = int(0)
 -  -  -  -  )
 -  -  -  -  name = str(b)
 -  -  -  )
 -  -  ]
 -  -  typeParameters = [
 -  -  ]
 -  -  body = [
 -  -  -  Description(
 -  -  -  -  name = str(Starting parameter stack shifting)
 -  -  -  )
 -  -  -  StackAllocate(
 -  -  -  -  dest = str(var_$_a_$_6)
 -  -  -  -  typename = Type(
 -  -  -  -  -  name = str(T)
 -  -  -  -  -  typeArgumentList = [
 -  -  -  -  -  ]
 -  -  -  -  -  ptr_cnt = int(0)
 -  -  -  -  )
 -  -  -  )
 -  -  -  StoreValueToPointer(
 -  -  -  -  dest = str(var_$_a_$_6)
 -  -  -  -  src = str(a)
 -  -  -  )
 -  -  -  StackAllocate(
 -  -  -  -  dest = str(var_$_b_$_7)
 -  -  -  -  typename = Type(
 -  -  -  -  -  name = str(T)
 -  -  -  -  -  typeArgumentList = [
 -  -  -  -  -  ]
 -  -  -  -  -  ptr_cnt = int(0)
 -  -  -  -  )
 -  -  -  )
 -  -  -  StoreValueToPointer(
 -  -  -  -  dest = str(var_$_b_$_7)
 -  -  -  -  src = str(b)
 -  -  -  )
 -  -  -  Description(
 -  -  -  -  name = str(Ending parameter stack shifting)
 -  -  -  )
 -  -  -  LoadValueFromPointer(
 -  -  -  -  dest = str(tmp_var_$_5)
 -  -  -  -  src = str(var_$_a_$_6)
 -  -  -  )
 -  -  -  LoadValueFromPointer(
 -  -  -  -  dest = str(tmp_var_$_6)
 -  -  -  -  src = str(var_$_b_$_7)
 -  -  -  )
 -  -  -  FunctionCall(
 -  -  -  -  dest = str(tmp_var__add___$_7)
 -  -  -  -  fn_name = str(__add__)
 -  -  -  -  arguments = [
 -  -  -  -  -  str(tmp_var_$_5)
 -  -  -  -  -  str(tmp_var_$_6)
 -  -  -  -  ]
 -  -  -  -  typeArguments = [
 -  -  -  -  ]
 -  -  -  )
 -  -  -  StoreValueToPointer(
 -  -  -  -  dest = str(var_$_return_$_5)
 -  -  -  -  src = str(tmp_var__add___$_7)
 -  -  -  )
 -  -  ]
 -  )
 -  FunctionDefinition(
 -  -  name = str(__mul__)
 -  -  parameters = [
 -  -  -  Parameter(
 -  -  -  -  type = Type(
 -  -  -  -  -  name = str(int)
 -  -  -  -  -  typeArgumentList = [
 -  -  -  -  -  ]
 -  -  -  -  -  ptr_cnt = int(1)
 -  -  -  -  )
 -  -  -  -  name = str(a)
 -  -  -  )
 -  -  -  Parameter(
 -  -  -  -  type = Type(
 -  -  -  -  -  name = str(int)
 -  -  -  -  -  typeArgumentList = [
 -  -  -  -  -  ]
 -  -  -  -  -  ptr_cnt = int(2)
 -  -  -  -  )
 -  -  -  -  name = str(b)
 -  -  -  )
 -  -  ]
 -  -  typeParameters = [
 -  -  ]
 -  -  body = [
 -  -  -  Description(
 -  -  -  -  name = str(Starting parameter stack shifting)
 -  -  -  )
 -  -  -  StackAllocate(
 -  -  -  -  dest = str(var_$_a_$_9)
 -  -  -  -  typename = Type(
 -  -  -  -  -  name = str(int)
 -  -  -  -  -  typeArgumentList = [
 -  -  -  -  -  ]
 -  -  -  -  -  ptr_cnt = int(1)
 -  -  -  -  )
 -  -  -  )
 -  -  -  StoreValueToPointer(
 -  -  -  -  dest = str(var_$_a_$_9)
 -  -  -  -  src = str(a)
 -  -  -  )
 -  -  -  StackAllocate(
 -  -  -  -  dest = str(var_$_b_$_10)
 -  -  -  -  typename = Type(
 -  -  -  -  -  name = str(int)
 -  -  -  -  -  typeArgumentList = [
 -  -  -  -  -  ]
 -  -  -  -  -  ptr_cnt = int(2)
 -  -  -  -  )
 -  -  -  )
 -  -  -  StoreValueToPointer(
 -  -  -  -  dest = str(var_$_b_$_10)
 -  -  -  -  src = str(b)
 -  -  -  )
 -  -  -  Description(
 -  -  -  -  name = str(Ending parameter stack shifting)
 -  -  -  )
 -  -  ]
 -  )
 -  FunctionDefinition(
 -  -  name = str(main)
 -  -  parameters = [
 -  -  ]
 -  -  typeParameters = [
 -  -  ]
 -  -  body = [
 -  -  -  Description(
 -  -  -  -  name = str(Starting parameter stack shifting)
 -  -  -  )
 -  -  -  Description(
 -  -  -  -  name = str(Ending parameter stack shifting)
 -  -  -  )
 -  -  -  StackAllocate(
 -  -  -  -  dest = str(tmp_var_$_8)
 -  -  -  -  typename = str(i32)
 -  -  -  )
 -  -  -  IntConstant(
 -  -  -  -  dest = str(tmp_var_$_9)
 -  -  -  -  value = int(5)
 -  -  -  -  size = int(32)
 -  -  -  -  signed = bool(True)
 -  -  -  )
 -  -  -  FunctionCall(
 -  -  -  -  dest = str(tmp_var_$_10)
 -  -  -  -  fn_name = str(__init__)
 -  -  -  -  arguments = [
 -  -  -  -  -  str(tmp_var_$_8)
 -  -  -  -  -  str(tmp_var_$_9)
 -  -  -  -  ]
 -  -  -  -  typeArguments = [
 -  -  -  -  ]
 -  -  -  )
 -  -  -  Assignment(
 -  -  -  -  dest = str(var_$_a_$_12)
 -  -  -  -  src = str(tmp_var_$_10)
 -  -  -  )
 -  -  -  StackAllocate(
 -  -  -  -  dest = str(tmp_var_$_11)
 -  -  -  -  typename = str(i32)
 -  -  -  )
 -  -  -  IntConstant(
 -  -  -  -  dest = str(tmp_var_$_12)
 -  -  -  -  value = int(10)
 -  -  -  -  size = int(32)
 -  -  -  -  signed = bool(True)
 -  -  -  )
 -  -  -  FunctionCall(
 -  -  -  -  dest = str(tmp_var_$_13)
 -  -  -  -  fn_name = str(__init__)
 -  -  -  -  arguments = [
 -  -  -  -  -  str(tmp_var_$_11)
 -  -  -  -  -  str(tmp_var_$_12)
 -  -  -  -  ]
 -  -  -  -  typeArguments = [
 -  -  -  -  ]
 -  -  -  )
 -  -  -  Assignment(
 -  -  -  -  dest = str(var_$_b_$_13)
 -  -  -  -  src = str(tmp_var_$_13)
 -  -  -  )
 -  -  -  StackAllocate(
 -  -  -  -  dest = str(tmp_var_$_14)
 -  -  -  -  typename = str(heap_alloc)
 -  -  -  )
 -  -  -  FunctionCall(
 -  -  -  -  dest = str(tmp_var_$_15)
 -  -  -  -  fn_name = str(__init__)
 -  -  -  -  arguments = [
 -  -  -  -  -  str(tmp_var_$_14)
 -  -  -  -  ]
 -  -  -  -  typeArguments = [
 -  -  -  -  -  Type(
 -  -  -  -  -  -  name = str(i32)
 -  -  -  -  -  -  typeArgumentList = [
 -  -  -  -  -  -  ]
 -  -  -  -  -  -  ptr_cnt = int(0)
 -  -  -  -  -  )
 -  -  -  -  ]
 -  -  -  )
 -  -  -  Assignment(
 -  -  -  -  dest = str(var_$_A_$_14)
 -  -  -  -  src = str(tmp_var_$_15)
 -  -  -  )
 -  -  -  LoadValueFromPointer(
 -  -  -  -  dest = str(tmp_var_$_16)
 -  -  -  -  src = str(var_$_A_$_14)
 -  -  -  )
 -  -  -  GetPointerOffset(
 -  -  -  -  dest = str(tmp_var_$_17)
 -  -  -  -  src = str(var_$_A_$_14)
 -  -  -  -  offset = str(tmp_var_$_16)
 -  -  -  )
 -  -  -  LoadValueFromPointer(
 -  -  -  -  dest = str(tmp_var_$_18)
 -  -  -  -  src = str(tmp_var_$_17)
 -  -  -  )
 -  -  -  IntConstant(
 -  -  -  -  dest = str(tmp_var_$_20)
 -  -  -  -  value = int(2)
 -  -  -  -  size = int(32)
 -  -  -  -  signed = bool(True)
 -  -  -  )
 -  -  -  IntConstant(
 -  -  -  -  dest = str(tmp_var_$_21)
 -  -  -  -  value = int(3)
 -  -  -  -  size = int(32)
 -  -  -  -  signed = bool(True)
 -  -  -  )
 -  -  -  FunctionCall(
 -  -  -  -  dest = str(tmp_var_$_19)
 -  -  -  -  fn_name = str(sum)
 -  -  -  -  arguments = [
 -  -  -  -  -  str(tmp_var_$_20)
 -  -  -  -  -  str(tmp_var_$_21)
 -  -  -  -  ]
 -  -  -  -  typeArguments = [
 -  -  -  -  ]
 -  -  -  )
 -  -  -  StackAllocate(
 -  -  -  -  dest = str(tmp_var_$_22)
 -  -  -  -  typename = str(kvadrat)
 -  -  -  )
 -  -  -  LoadValueFromPointer(
 -  -  -  -  dest = str(tmp_var_$_23)
 -  -  -  -  src = str(var_$_a_$_12)
 -  -  -  )
 -  -  -  LoadValueFromPointer(
 -  -  -  -  dest = str(tmp_var_$_24)
 -  -  -  -  src = str(var_$_b_$_13)
 -  -  -  )
 -  -  -  FunctionCall(
 -  -  -  -  dest = str(tmp_var_$_25)
 -  -  -  -  fn_name = str(__init__)
 -  -  -  -  arguments = [
 -  -  -  -  -  str(tmp_var_$_22)
 -  -  -  -  -  str(tmp_var_$_23)
 -  -  -  -  -  str(tmp_var_$_24)
 -  -  -  -  ]
 -  -  -  -  typeArguments = [
 -  -  -  -  ]
 -  -  -  )
 -  -  -  Assignment(
 -  -  -  -  dest = str(var_$_kv_$_15)
 -  -  -  -  src = str(tmp_var_$_25)
 -  -  -  )
 -  -  -  GetElementPtr(
 -  -  -  -  dest = str(tmp_var_$_26)
 -  -  -  -  src = str(var_$_kv_$_15)
 -  -  -  -  element_name = str(a)
 -  -  -  )
 -  -  -  LoadValueFromPointer(
 -  -  -  -  dest = str(tmp_var_$_27)
 -  -  -  -  src = str(tmp_var_$_26)
 -  -  -  )
 -  -  -  GetElementPtr(
 -  -  -  -  dest = str(tmp_var_$_28)
 -  -  -  -  src = str(var_$_kv_$_15)
 -  -  -  -  element_name = str(b)
 -  -  -  )
 -  -  -  LoadValueFromPointer(
 -  -  -  -  dest = str(tmp_var_$_29)
 -  -  -  -  src = str(tmp_var_$_28)
 -  -  -  )
 -  -  -  FunctionCall(
 -  -  -  -  dest = str(tmp_var__mul___$_30)
 -  -  -  -  fn_name = str(__mul__)
 -  -  -  -  arguments = [
 -  -  -  -  -  str(tmp_var_$_27)
 -  -  -  -  -  str(tmp_var_$_29)
 -  -  -  -  ]
 -  -  -  -  typeArguments = [
 -  -  -  -  ]
 -  -  -  )
 -  -  -  StoreValueToPointer(
 -  -  -  -  dest = str(var_$_return_$_11)
 -  -  -  -  src = str(tmp_var__mul___$_30)
 -  -  -  )
 -  -  ]
 -  )
 ]
