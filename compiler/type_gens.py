from type_system import Type
from helpers import add_method_to_list
from typing import List
import type_system as ts
from type_system import NoInferencePossibleError
# MAIN METHODS

func_methods = []
struct_methods = []

def gen_function(tc, name: str,
                 type_argument_types: List[Type],
                 argument_types: List[Type]
            ):
    pass

def gen_struct(tc, name: str,
            type_argument_types: List[Type]
        ):
    for sm in struct_methods:
        try:
            sm(tc,name,type_argument_types)
            print("Autogenerated struct!")
            break
        except:
            pass

# targets

@add_method_to_list(struct_methods)
def gen_void(tc, name: str,
                 type_argument_types: List[Type],
            ):
    if name == "void" and len(type_argument_types)==0:
        print("here")
        tc.struct_type_container[(name, tuple(type_argument_types))] = ts.VoidType()
        print("here")
    else:
        raise NoInferencePossibleError()

@add_method_to_list(struct_methods)
def gen_int(tc, name: str,
                 type_argument_types: List[Type],
            ):
    try:
        if name[0] == 'i':
            sign = 1
        elif name[0] == 'I':
            sign = -1
        else:
            raise NoInferencePossibleError()
        val = int(name[1:])*sign

        tc.struct_type_container[(name, tuple(type_argument_types))] = ts.IntType(val)
    except:
        raise NoInferencePossibleError()

@add_method_to_list(struct_methods)
def gen_int_ops(tc, name: str,
                 type_argument_types: List[Type],
            ):
    try:
        i1 = type_argument_types[0].size
        i2 = type_argument_types[1].size


    except:
        raise NoInferencePossibleError()
