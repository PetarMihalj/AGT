
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "CompilationUnitleftPLUSMINUSleftTIMESDIVIDEMODleftLEQGEQLTGTEQNEASSIGNMENT BOOLL BREAK COMMA DIVIDE DOT ELSE EQ FOR GEQ GT ID IF INTL LBRACE LBRACKET LEQ LPAREN LT MINUS MOD NE PLUS RBRACE RBRACKET RETURN RPAREN SEMICOLON STRUCT TIMES WHILEArgument : ExpressionArgumentListR : Argument COMMA ArgumentListR\n                     | Argument\n                     | empty\n    AssignmentStatement : IdListR ASSIGNMENT Expression SEMICOLON\n                           | IdListR ASSIGNMENT Expression\n    BinaryExpression : Expression PLUS Expression\n                        | Expression MINUS Expression\n                        | Expression TIMES Expression\n                        | Expression DIVIDE Expression\n                        | Expression MOD Expression\n                        | Expression LEQ Expression\n                        | Expression GEQ Expression\n                        | Expression LT Expression\n                        | Expression GT Expression\n                        | Expression EQ Expression\n                        | Expression NE Expression\n    BlankStatement : ';'Block : LBRACE StatementListR RBRACEBlockStatement : BlockBoolLiteral : BOOLLBracketCall : IdListR LBRACKET Expression RBRACKETBreakStatement : BREAK INTL SEMICOLON\n                      | BREAK SEMICOLON\n    CompilationUnit : DefinitionListRDeclarationAssignmentStatement : Type ID ASSIGNMENT                                        Expression SEMICOLONDeclarationFunctionCallStatement : Type FunctionCall SEMICOLONDeclarationStatement : Type ID SEMICOLONDefinitionListR : FunctionDefinition DefinitionListR\n                       | StructDefinition DefinitionListR\n                       | empty\n    Expression : BinaryExpression\n                  | UnaryExpressionForStatement : FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block\n    FunctionCall : ID LPAREN ArgumentListR RPAREN\n                    | ID LT TypeParameterListR GT LPAREN ArgumentListR RPAREN\n    FunctionDefinition : ID ID LPAREN ParameterListR RPAREN Block\n                          | ID ID LT TypeParameterListR GT LPAREN ParameterListR RPAREN Block \n    IdListR : ID DOT IdListR\n               | ID\n    IfElseStatement : IF LPAREN Expression RPAREN Block ELSE Block\n    IntLiteral : INTLLiteral : IntLiteral\n               | BoolLiteral\n    Parameter : Type IDParameterListR : Parameter COMMA ParameterListR\n                     | Parameter\n                     | empty\n    PointerListR : TIMES PointerListR\n                    | empty\n    ReturnStatement : RETURN Expression SEMICOLON\n                       | RETURN SEMICOLON\n    Statement : AssignmentStatement\n                 | DeclarationAssignmentStatement\n                 | DeclarationFunctionCallStatement\n                 | DeclarationStatement\n                 | Expression SEMICOLON\n                 | IfElseStatement\n                 | ForStatement\n                 | WhileStatement\n                 | BreakStatement\n                 | ReturnStatement\n                 | BlockStatement\n                 | BlankStatement\n    StatementListR : Statement StatementListR\n                      | empty\n    StructDefinition : STRUCT ID LT TypeParameterListR GT            LBRACE StructMemberDeclarationListR RBRACE\n                        | STRUCT ID            LBRACE StructMemberDeclarationListR RBRACE\n    StructMemberDeclarationListR : DeclarationStatement                                        StructMemberDeclarationListR\n                                     | empty\n    Type : ID PointerListR\n            | ID LT TypeParameterListR GT PointerListR\n    TypeParameter : IDTypeParameterListR : TypeParameter COMMA TypeParameterListR\n                     | TypeParameter\n                     | empty\n    UnaryExpression : IdListR\n                       | Literal\n                       | FunctionCall\n                       | BracketCall\n                       | LPAREN Expression RPAREN\n    WhileStatement : WHILE LPAREN Expression RPAREN Block\n    empty :"
    
_lr_action_items = {'ID':([0,3,4,6,7,12,13,14,15,16,20,27,29,30,31,32,33,35,38,40,44,45,46,48,50,51,52,54,56,57,58,59,61,62,63,64,65,66,67,69,70,71,72,73,75,76,80,81,82,83,84,85,86,87,90,91,93,94,95,96,97,98,99,100,101,102,103,104,105,106,109,110,111,112,114,115,116,117,119,121,123,124,125,126,127,128,129,130,131,132,133,134,135,137,138,139,140,141,148,149,151,152,153,154,155,158,159,160,164,166,169,170,174,175,177,],[6,6,6,10,11,16,21,21,16,-83,36,16,42,-71,21,-83,-50,16,21,-68,-49,-37,70,16,16,-28,-83,70,-53,-54,-55,-56,-58,-59,-60,-61,-62,-63,-64,107,-83,-79,-32,-33,115,-20,-42,115,-18,-78,-80,-43,-44,-21,-72,-19,-57,115,115,115,115,115,115,115,115,115,115,115,115,115,140,21,115,115,-77,-40,70,115,-24,-52,-67,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-6,115,21,-27,-40,-39,-81,115,-23,-51,-38,-5,-22,-83,-35,115,-26,115,70,-82,-36,-41,-34,]),'STRUCT':([0,3,4,40,45,91,123,153,],[7,7,7,-68,-37,-19,-67,-38,]),'$end':([0,1,2,3,4,5,8,9,40,45,91,123,153,],[-83,0,-25,-83,-83,-31,-29,-30,-68,-37,-19,-67,-38,]),'LPAREN':([10,37,46,51,54,56,57,58,59,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,80,81,82,83,84,85,86,87,91,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,111,112,114,115,116,117,119,121,124,125,126,127,128,129,130,131,132,133,134,135,137,139,140,141,148,149,151,152,154,155,158,159,160,164,165,166,169,170,174,175,177,],[12,48,75,-28,75,-53,-54,-55,-56,-58,-59,-60,-61,-62,-63,-64,111,-79,-32,-33,112,75,-20,116,117,-42,75,-18,-78,-80,-43,-44,-21,-19,-57,75,75,75,75,75,75,75,75,75,75,75,75,75,111,75,75,-77,111,75,75,-24,-52,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-6,75,-27,-40,-39,-81,75,-23,-51,-5,-22,166,-35,75,-26,166,75,75,-82,-36,-41,-34,]),'LT':([10,11,16,60,68,70,71,72,73,80,83,84,85,86,87,107,113,114,115,120,124,125,126,127,128,129,130,131,132,133,134,135,136,140,141,146,147,148,150,155,156,159,162,174,],[13,14,31,101,-77,110,-79,-32,-33,-42,-78,-80,-43,-44,-21,138,101,-77,138,101,101,101,101,101,101,-12,-13,-14,-15,-16,-17,101,101,-40,-39,101,101,-81,101,-22,101,-35,101,-36,]),'LBRACE':([11,34,39,46,51,54,56,57,58,59,61,62,63,64,65,66,67,71,72,73,76,80,82,83,84,85,86,87,91,93,114,115,116,119,121,122,124,125,126,127,128,129,130,131,132,133,134,135,139,140,141,148,151,152,154,155,159,161,163,164,169,170,172,174,175,176,177,],[15,46,50,46,-28,46,-53,-54,-55,-56,-58,-59,-60,-61,-62,-63,-64,-79,-32,-33,-20,-42,-18,-78,-80,-43,-44,-21,-19,-57,-77,-40,46,-24,-52,46,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-6,-27,-40,-39,-81,-23,-51,-5,-22,-35,46,46,-26,46,-82,46,-36,-41,46,-34,]),'RPAREN':([12,17,18,19,35,36,47,48,51,56,57,58,59,61,62,63,64,65,66,67,71,72,73,76,80,82,83,84,85,86,87,88,91,93,111,113,114,115,119,121,124,125,126,127,128,129,130,131,132,133,134,135,139,140,141,143,144,145,146,147,148,150,151,152,154,155,159,160,164,166,167,170,171,173,174,175,177,],[-83,34,-47,-48,-83,-45,-46,-83,-28,-53,-54,-55,-56,-58,-59,-60,-61,-62,-63,-64,-79,-32,-33,-20,-42,-18,-78,-80,-43,-44,-21,122,-19,-57,-83,148,-77,-40,-24,-52,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-6,-27,-40,-39,159,-3,-4,-1,161,-81,163,-23,-51,-5,-22,-35,-83,-26,-83,-2,-82,174,176,-36,-41,-34,]),'GT':([13,14,21,22,23,24,25,31,38,43,49,60,68,70,71,72,73,80,83,84,85,86,87,110,113,114,115,120,124,125,126,127,128,129,130,131,132,133,134,135,136,138,140,141,142,146,147,148,150,155,156,157,159,162,174,],[-83,-83,-73,37,-75,-76,39,-83,-83,52,-74,102,-77,-40,-79,-32,-33,-42,-78,-80,-43,-44,-21,-83,102,-77,-40,102,102,102,102,102,102,-12,-13,-14,-15,-16,-17,102,102,-83,-40,-39,158,102,102,-81,102,-22,102,165,-35,102,-36,]),'RBRACE':([15,26,27,28,41,46,50,51,53,54,55,56,57,58,59,61,62,63,64,65,66,67,71,72,73,76,80,82,83,84,85,86,87,89,91,92,93,114,115,119,121,124,125,126,127,128,129,130,131,132,133,134,135,139,140,141,148,151,152,154,155,159,164,170,174,175,177,],[-83,40,-83,-70,-69,-83,-83,-28,91,-83,-66,-53,-54,-55,-56,-58,-59,-60,-61,-62,-63,-64,-79,-32,-33,-20,-42,-18,-78,-80,-43,-44,-21,123,-19,-65,-57,-77,-40,-24,-52,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-6,-27,-40,-39,-81,-23,-51,-5,-22,-35,-26,-82,-36,-41,-34,]),'TIMES':([16,32,52,60,68,70,71,72,73,80,83,84,85,86,87,113,114,115,120,124,125,126,127,128,129,130,131,132,133,134,135,136,140,141,146,147,148,150,155,156,158,159,162,174,],[32,32,32,96,-77,32,-79,-32,-33,-42,-78,-80,-43,-44,-21,96,-77,-40,96,96,96,-9,-10,-11,-12,-13,-14,-15,-16,-17,96,96,-40,-39,96,96,-81,96,-22,96,32,-35,96,-36,]),'COMMA':([18,21,23,36,71,72,73,80,83,84,85,86,87,114,115,124,125,126,127,128,129,130,131,132,133,134,140,141,144,146,148,155,159,174,],[35,-73,38,-45,-79,-32,-33,-42,-78,-80,-43,-44,-21,-77,-40,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-40,-39,160,-1,-81,-22,-35,-36,]),'SEMICOLON':([42,60,68,70,71,72,73,79,80,81,83,84,85,86,87,107,108,114,115,118,120,124,125,126,127,128,129,130,131,132,133,134,135,140,141,148,155,156,159,162,174,],[51,93,-77,-40,-79,-32,-33,119,-42,121,-78,-80,-43,-44,-21,51,139,-77,-40,151,152,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,154,-40,-39,-81,-22,164,-35,169,-36,]),'IF':([46,51,54,56,57,58,59,61,62,63,64,65,66,67,71,72,73,76,80,82,83,84,85,86,87,91,93,114,115,116,119,121,124,125,126,127,128,129,130,131,132,133,134,135,139,140,141,148,151,152,154,155,159,164,169,170,174,175,177,],[74,-28,74,-53,-54,-55,-56,-58,-59,-60,-61,-62,-63,-64,-79,-32,-33,-20,-42,-18,-78,-80,-43,-44,-21,-19,-57,-77,-40,74,-24,-52,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-6,-27,-40,-39,-81,-23,-51,-5,-22,-35,-26,74,-82,-36,-41,-34,]),'FOR':([46,51,54,56,57,58,59,61,62,63,64,65,66,67,71,72,73,76,80,82,83,84,85,86,87,91,93,114,115,116,119,121,124,125,126,127,128,129,130,131,132,133,134,135,139,140,141,148,151,152,154,155,159,164,169,170,174,175,177,],[77,-28,77,-53,-54,-55,-56,-58,-59,-60,-61,-62,-63,-64,-79,-32,-33,-20,-42,-18,-78,-80,-43,-44,-21,-19,-57,-77,-40,77,-24,-52,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-6,-27,-40,-39,-81,-23,-51,-5,-22,-35,-26,77,-82,-36,-41,-34,]),'WHILE':([46,51,54,56,57,58,59,61,62,63,64,65,66,67,71,72,73,76,80,82,83,84,85,86,87,91,93,114,115,116,119,121,124,125,126,127,128,129,130,131,132,133,134,135,139,140,141,148,151,152,154,155,159,164,169,170,174,175,177,],[78,-28,78,-53,-54,-55,-56,-58,-59,-60,-61,-62,-63,-64,-79,-32,-33,-20,-42,-18,-78,-80,-43,-44,-21,-19,-57,-77,-40,78,-24,-52,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-6,-27,-40,-39,-81,-23,-51,-5,-22,-35,-26,78,-82,-36,-41,-34,]),'BREAK':([46,51,54,56,57,58,59,61,62,63,64,65,66,67,71,72,73,76,80,82,83,84,85,86,87,91,93,114,115,116,119,121,124,125,126,127,128,129,130,131,132,133,134,135,139,140,141,148,151,152,154,155,159,164,169,170,174,175,177,],[79,-28,79,-53,-54,-55,-56,-58,-59,-60,-61,-62,-63,-64,-79,-32,-33,-20,-42,-18,-78,-80,-43,-44,-21,-19,-57,-77,-40,79,-24,-52,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-6,-27,-40,-39,-81,-23,-51,-5,-22,-35,-26,79,-82,-36,-41,-34,]),'RETURN':([46,51,54,56,57,58,59,61,62,63,64,65,66,67,71,72,73,76,80,82,83,84,85,86,87,91,93,114,115,116,119,121,124,125,126,127,128,129,130,131,132,133,134,135,139,140,141,148,151,152,154,155,159,164,169,170,174,175,177,],[81,-28,81,-53,-54,-55,-56,-58,-59,-60,-61,-62,-63,-64,-79,-32,-33,-20,-42,-18,-78,-80,-43,-44,-21,-19,-57,-77,-40,81,-24,-52,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-6,-27,-40,-39,-81,-23,-51,-5,-22,-35,-26,81,-82,-36,-41,-34,]),';':([46,51,54,56,57,58,59,61,62,63,64,65,66,67,71,72,73,76,80,82,83,84,85,86,87,91,93,114,115,116,119,121,124,125,126,127,128,129,130,131,132,133,134,135,139,140,141,148,151,152,154,155,159,164,169,170,174,175,177,],[82,-28,82,-53,-54,-55,-56,-58,-59,-60,-61,-62,-63,-64,-79,-32,-33,-20,-42,-18,-78,-80,-43,-44,-21,-19,-57,-77,-40,82,-24,-52,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-6,-27,-40,-39,-81,-23,-51,-5,-22,-35,-26,82,-82,-36,-41,-34,]),'INTL':([46,51,54,56,57,58,59,61,62,63,64,65,66,67,71,72,73,75,76,79,80,81,82,83,84,85,86,87,91,93,94,95,96,97,98,99,100,101,102,103,104,105,106,111,112,114,115,116,117,119,121,124,125,126,127,128,129,130,131,132,133,134,135,137,139,140,141,148,149,151,152,154,155,159,160,164,166,169,170,174,175,177,],[80,-28,80,-53,-54,-55,-56,-58,-59,-60,-61,-62,-63,-64,-79,-32,-33,80,-20,118,-42,80,-18,-78,-80,-43,-44,-21,-19,-57,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,-77,-40,80,80,-24,-52,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-6,80,-27,-40,-39,-81,80,-23,-51,-5,-22,-35,80,-26,80,80,-82,-36,-41,-34,]),'BOOLL':([46,51,54,56,57,58,59,61,62,63,64,65,66,67,71,72,73,75,76,80,81,82,83,84,85,86,87,91,93,94,95,96,97,98,99,100,101,102,103,104,105,106,111,112,114,115,116,117,119,121,124,125,126,127,128,129,130,131,132,133,134,135,137,139,140,141,148,149,151,152,154,155,159,160,164,166,169,170,174,175,177,],[87,-28,87,-53,-54,-55,-56,-58,-59,-60,-61,-62,-63,-64,-79,-32,-33,87,-20,-42,87,-18,-78,-80,-43,-44,-21,-19,-57,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,-77,-40,87,87,-24,-52,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-6,87,-27,-40,-39,-81,87,-23,-51,-5,-22,-35,87,-26,87,87,-82,-36,-41,-34,]),'PLUS':([60,68,70,71,72,73,80,83,84,85,86,87,113,114,115,120,124,125,126,127,128,129,130,131,132,133,134,135,136,140,141,146,147,148,150,155,156,159,162,174,],[94,-77,-40,-79,-32,-33,-42,-78,-80,-43,-44,-21,94,-77,-40,94,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,94,94,-40,-39,94,94,-81,94,-22,94,-35,94,-36,]),'MINUS':([60,68,70,71,72,73,80,83,84,85,86,87,113,114,115,120,124,125,126,127,128,129,130,131,132,133,134,135,136,140,141,146,147,148,150,155,156,159,162,174,],[95,-77,-40,-79,-32,-33,-42,-78,-80,-43,-44,-21,95,-77,-40,95,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,95,95,-40,-39,95,95,-81,95,-22,95,-35,95,-36,]),'DIVIDE':([60,68,70,71,72,73,80,83,84,85,86,87,113,114,115,120,124,125,126,127,128,129,130,131,132,133,134,135,136,140,141,146,147,148,150,155,156,159,162,174,],[97,-77,-40,-79,-32,-33,-42,-78,-80,-43,-44,-21,97,-77,-40,97,97,97,-9,-10,-11,-12,-13,-14,-15,-16,-17,97,97,-40,-39,97,97,-81,97,-22,97,-35,97,-36,]),'MOD':([60,68,70,71,72,73,80,83,84,85,86,87,113,114,115,120,124,125,126,127,128,129,130,131,132,133,134,135,136,140,141,146,147,148,150,155,156,159,162,174,],[98,-77,-40,-79,-32,-33,-42,-78,-80,-43,-44,-21,98,-77,-40,98,98,98,-9,-10,-11,-12,-13,-14,-15,-16,-17,98,98,-40,-39,98,98,-81,98,-22,98,-35,98,-36,]),'LEQ':([60,68,70,71,72,73,80,83,84,85,86,87,113,114,115,120,124,125,126,127,128,129,130,131,132,133,134,135,136,140,141,146,147,148,150,155,156,159,162,174,],[99,-77,-40,-79,-32,-33,-42,-78,-80,-43,-44,-21,99,-77,-40,99,99,99,99,99,99,-12,-13,-14,-15,-16,-17,99,99,-40,-39,99,99,-81,99,-22,99,-35,99,-36,]),'GEQ':([60,68,70,71,72,73,80,83,84,85,86,87,113,114,115,120,124,125,126,127,128,129,130,131,132,133,134,135,136,140,141,146,147,148,150,155,156,159,162,174,],[100,-77,-40,-79,-32,-33,-42,-78,-80,-43,-44,-21,100,-77,-40,100,100,100,100,100,100,-12,-13,-14,-15,-16,-17,100,100,-40,-39,100,100,-81,100,-22,100,-35,100,-36,]),'EQ':([60,68,70,71,72,73,80,83,84,85,86,87,113,114,115,120,124,125,126,127,128,129,130,131,132,133,134,135,136,140,141,146,147,148,150,155,156,159,162,174,],[103,-77,-40,-79,-32,-33,-42,-78,-80,-43,-44,-21,103,-77,-40,103,103,103,103,103,103,-12,-13,-14,-15,-16,-17,103,103,-40,-39,103,103,-81,103,-22,103,-35,103,-36,]),'NE':([60,68,70,71,72,73,80,83,84,85,86,87,113,114,115,120,124,125,126,127,128,129,130,131,132,133,134,135,136,140,141,146,147,148,150,155,156,159,162,174,],[104,-77,-40,-79,-32,-33,-42,-78,-80,-43,-44,-21,104,-77,-40,104,104,104,104,104,104,-12,-13,-14,-15,-16,-17,104,104,-40,-39,104,104,-81,104,-22,104,-35,104,-36,]),'ASSIGNMENT':([68,70,107,140,141,],[105,-40,137,-40,-39,]),'LBRACKET':([68,70,114,115,140,141,],[106,-40,106,-40,-40,-39,]),'DOT':([70,115,140,],[109,109,109,]),'RBRACKET':([71,72,73,80,83,84,85,86,87,114,115,124,125,126,127,128,129,130,131,132,133,134,136,140,141,148,155,159,174,],[-79,-32,-33,-42,-78,-80,-43,-44,-21,-77,-40,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,155,-40,-39,-81,-22,-35,-36,]),'ELSE':([91,168,],[-19,172,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'CompilationUnit':([0,],[1,]),'DefinitionListR':([0,3,4,],[2,8,9,]),'FunctionDefinition':([0,3,4,],[3,3,3,]),'StructDefinition':([0,3,4,],[4,4,4,]),'empty':([0,3,4,12,13,14,15,16,27,31,32,35,38,46,48,50,52,54,70,110,111,138,158,160,166,],[5,5,5,19,24,24,28,33,28,24,33,19,24,55,19,28,33,55,33,24,145,24,33,145,145,]),'ParameterListR':([12,35,48,],[17,47,88,]),'Parameter':([12,35,48,],[18,18,18,]),'Type':([12,15,27,35,46,48,50,54,116,169,],[20,29,29,20,69,20,29,69,69,69,]),'TypeParameterListR':([13,14,31,38,110,138,],[22,25,43,49,142,157,]),'TypeParameter':([13,14,31,38,110,138,],[23,23,23,23,23,23,]),'StructMemberDeclarationListR':([15,27,50,],[26,41,89,]),'DeclarationStatement':([15,27,46,50,54,116,169,],[27,27,59,27,59,59,59,]),'PointerListR':([16,32,52,70,158,],[30,44,90,30,90,]),'Block':([34,46,54,116,122,161,163,169,172,176,],[45,76,76,76,153,168,170,76,175,177,]),'StatementListR':([46,54,],[53,92,]),'Statement':([46,54,116,169,],[54,54,149,173,]),'AssignmentStatement':([46,54,116,169,],[56,56,56,56,]),'DeclarationAssignmentStatement':([46,54,116,169,],[57,57,57,57,]),'DeclarationFunctionCallStatement':([46,54,116,169,],[58,58,58,58,]),'Expression':([46,54,75,81,94,95,96,97,98,99,100,101,102,103,104,105,106,111,112,116,117,137,149,160,166,169,],[60,60,113,120,124,125,126,127,128,129,130,131,132,133,134,135,136,146,147,60,150,156,162,146,146,60,]),'IfElseStatement':([46,54,116,169,],[61,61,61,61,]),'ForStatement':([46,54,116,169,],[62,62,62,62,]),'WhileStatement':([46,54,116,169,],[63,63,63,63,]),'BreakStatement':([46,54,116,169,],[64,64,64,64,]),'ReturnStatement':([46,54,116,169,],[65,65,65,65,]),'BlockStatement':([46,54,116,169,],[66,66,66,66,]),'BlankStatement':([46,54,116,169,],[67,67,67,67,]),'IdListR':([46,54,75,81,94,95,96,97,98,99,100,101,102,103,104,105,106,109,111,112,116,117,137,149,160,166,169,],[68,68,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,141,114,114,68,114,114,114,114,114,68,]),'FunctionCall':([46,54,69,75,81,94,95,96,97,98,99,100,101,102,103,104,105,106,111,112,116,117,137,149,160,166,169,],[71,71,108,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'BinaryExpression':([46,54,75,81,94,95,96,97,98,99,100,101,102,103,104,105,106,111,112,116,117,137,149,160,166,169,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'UnaryExpression':([46,54,75,81,94,95,96,97,98,99,100,101,102,103,104,105,106,111,112,116,117,137,149,160,166,169,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'Literal':([46,54,75,81,94,95,96,97,98,99,100,101,102,103,104,105,106,111,112,116,117,137,149,160,166,169,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'BracketCall':([46,54,75,81,94,95,96,97,98,99,100,101,102,103,104,105,106,111,112,116,117,137,149,160,166,169,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'IntLiteral':([46,54,75,81,94,95,96,97,98,99,100,101,102,103,104,105,106,111,112,116,117,137,149,160,166,169,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'BoolLiteral':([46,54,75,81,94,95,96,97,98,99,100,101,102,103,104,105,106,111,112,116,117,137,149,160,166,169,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'ArgumentListR':([111,160,166,],[143,167,171,]),'Argument':([111,160,166,],[144,144,144,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> CompilationUnit","S'",1,None,None,None),
  ('Argument -> Expression','Argument',1,"p_<class 'parser_rules.Argument'>",'parser.py',28),
  ('ArgumentListR -> Argument COMMA ArgumentListR','ArgumentListR',3,"p_<class 'parser_rules.ArgumentListR'>",'parser.py',28),
  ('ArgumentListR -> Argument','ArgumentListR',1,"p_<class 'parser_rules.ArgumentListR'>",'parser.py',29),
  ('ArgumentListR -> empty','ArgumentListR',1,"p_<class 'parser_rules.ArgumentListR'>",'parser.py',30),
  ('AssignmentStatement -> IdListR ASSIGNMENT Expression SEMICOLON','AssignmentStatement',4,"p_<class 'parser_rules.AssignmentStatement'>",'parser.py',28),
  ('AssignmentStatement -> IdListR ASSIGNMENT Expression','AssignmentStatement',3,"p_<class 'parser_rules.AssignmentStatement'>",'parser.py',29),
  ('BinaryExpression -> Expression PLUS Expression','BinaryExpression',3,"p_<class 'parser_rules.BinaryExpression'>",'parser.py',28),
  ('BinaryExpression -> Expression MINUS Expression','BinaryExpression',3,"p_<class 'parser_rules.BinaryExpression'>",'parser.py',29),
  ('BinaryExpression -> Expression TIMES Expression','BinaryExpression',3,"p_<class 'parser_rules.BinaryExpression'>",'parser.py',30),
  ('BinaryExpression -> Expression DIVIDE Expression','BinaryExpression',3,"p_<class 'parser_rules.BinaryExpression'>",'parser.py',31),
  ('BinaryExpression -> Expression MOD Expression','BinaryExpression',3,"p_<class 'parser_rules.BinaryExpression'>",'parser.py',32),
  ('BinaryExpression -> Expression LEQ Expression','BinaryExpression',3,"p_<class 'parser_rules.BinaryExpression'>",'parser.py',33),
  ('BinaryExpression -> Expression GEQ Expression','BinaryExpression',3,"p_<class 'parser_rules.BinaryExpression'>",'parser.py',34),
  ('BinaryExpression -> Expression LT Expression','BinaryExpression',3,"p_<class 'parser_rules.BinaryExpression'>",'parser.py',35),
  ('BinaryExpression -> Expression GT Expression','BinaryExpression',3,"p_<class 'parser_rules.BinaryExpression'>",'parser.py',36),
  ('BinaryExpression -> Expression EQ Expression','BinaryExpression',3,"p_<class 'parser_rules.BinaryExpression'>",'parser.py',37),
  ('BinaryExpression -> Expression NE Expression','BinaryExpression',3,"p_<class 'parser_rules.BinaryExpression'>",'parser.py',38),
  ('BlankStatement -> ;','BlankStatement',1,"p_<class 'parser_rules.BlankStatement'>",'parser.py',28),
  ('Block -> LBRACE StatementListR RBRACE','Block',3,"p_<class 'parser_rules.Block'>",'parser.py',28),
  ('BlockStatement -> Block','BlockStatement',1,"p_<class 'parser_rules.BlockStatement'>",'parser.py',28),
  ('BoolLiteral -> BOOLL','BoolLiteral',1,"p_<class 'parser_rules.BoolLiteral'>",'parser.py',28),
  ('BracketCall -> IdListR LBRACKET Expression RBRACKET','BracketCall',4,"p_<class 'parser_rules.BracketCall'>",'parser.py',28),
  ('BreakStatement -> BREAK INTL SEMICOLON','BreakStatement',3,"p_<class 'parser_rules.BreakStatement'>",'parser.py',28),
  ('BreakStatement -> BREAK SEMICOLON','BreakStatement',2,"p_<class 'parser_rules.BreakStatement'>",'parser.py',29),
  ('CompilationUnit -> DefinitionListR','CompilationUnit',1,"p_<class 'parser_rules.CompilationUnit'>",'parser.py',28),
  ('DeclarationAssignmentStatement -> Type ID ASSIGNMENT Expression SEMICOLON','DeclarationAssignmentStatement',5,"p_<class 'parser_rules.DeclarationAssignmentStatement'>",'parser.py',28),
  ('DeclarationFunctionCallStatement -> Type FunctionCall SEMICOLON','DeclarationFunctionCallStatement',3,"p_<class 'parser_rules.DeclarationFunctionCallStatement'>",'parser.py',28),
  ('DeclarationStatement -> Type ID SEMICOLON','DeclarationStatement',3,"p_<class 'parser_rules.DeclarationStatement'>",'parser.py',28),
  ('DefinitionListR -> FunctionDefinition DefinitionListR','DefinitionListR',2,"p_<class 'parser_rules.DefinitionListR'>",'parser.py',28),
  ('DefinitionListR -> StructDefinition DefinitionListR','DefinitionListR',2,"p_<class 'parser_rules.DefinitionListR'>",'parser.py',29),
  ('DefinitionListR -> empty','DefinitionListR',1,"p_<class 'parser_rules.DefinitionListR'>",'parser.py',30),
  ('Expression -> BinaryExpression','Expression',1,"p_<class 'parser_rules.Expression'>",'parser.py',28),
  ('Expression -> UnaryExpression','Expression',1,"p_<class 'parser_rules.Expression'>",'parser.py',29),
  ('ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block','ForStatement',8,"p_<class 'parser_rules.ForStatement'>",'parser.py',28),
  ('FunctionCall -> ID LPAREN ArgumentListR RPAREN','FunctionCall',4,"p_<class 'parser_rules.FunctionCall'>",'parser.py',28),
  ('FunctionCall -> ID LT TypeParameterListR GT LPAREN ArgumentListR RPAREN','FunctionCall',7,"p_<class 'parser_rules.FunctionCall'>",'parser.py',29),
  ('FunctionDefinition -> ID ID LPAREN ParameterListR RPAREN Block','FunctionDefinition',6,"p_<class 'parser_rules.FunctionDefinition'>",'parser.py',28),
  ('FunctionDefinition -> ID ID LT TypeParameterListR GT LPAREN ParameterListR RPAREN Block','FunctionDefinition',9,"p_<class 'parser_rules.FunctionDefinition'>",'parser.py',29),
  ('IdListR -> ID DOT IdListR','IdListR',3,"p_<class 'parser_rules.IdListR'>",'parser.py',28),
  ('IdListR -> ID','IdListR',1,"p_<class 'parser_rules.IdListR'>",'parser.py',29),
  ('IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block','IfElseStatement',7,"p_<class 'parser_rules.IfElseStatement'>",'parser.py',28),
  ('IntLiteral -> INTL','IntLiteral',1,"p_<class 'parser_rules.IntLiteral'>",'parser.py',28),
  ('Literal -> IntLiteral','Literal',1,"p_<class 'parser_rules.Literal'>",'parser.py',28),
  ('Literal -> BoolLiteral','Literal',1,"p_<class 'parser_rules.Literal'>",'parser.py',29),
  ('Parameter -> Type ID','Parameter',2,"p_<class 'parser_rules.Parameter'>",'parser.py',28),
  ('ParameterListR -> Parameter COMMA ParameterListR','ParameterListR',3,"p_<class 'parser_rules.ParameterListR'>",'parser.py',28),
  ('ParameterListR -> Parameter','ParameterListR',1,"p_<class 'parser_rules.ParameterListR'>",'parser.py',29),
  ('ParameterListR -> empty','ParameterListR',1,"p_<class 'parser_rules.ParameterListR'>",'parser.py',30),
  ('PointerListR -> TIMES PointerListR','PointerListR',2,"p_<class 'parser_rules.PointerListR'>",'parser.py',28),
  ('PointerListR -> empty','PointerListR',1,"p_<class 'parser_rules.PointerListR'>",'parser.py',29),
  ('ReturnStatement -> RETURN Expression SEMICOLON','ReturnStatement',3,"p_<class 'parser_rules.ReturnStatement'>",'parser.py',28),
  ('ReturnStatement -> RETURN SEMICOLON','ReturnStatement',2,"p_<class 'parser_rules.ReturnStatement'>",'parser.py',29),
  ('Statement -> AssignmentStatement','Statement',1,"p_<class 'parser_rules.Statement'>",'parser.py',28),
  ('Statement -> DeclarationAssignmentStatement','Statement',1,"p_<class 'parser_rules.Statement'>",'parser.py',29),
  ('Statement -> DeclarationFunctionCallStatement','Statement',1,"p_<class 'parser_rules.Statement'>",'parser.py',30),
  ('Statement -> DeclarationStatement','Statement',1,"p_<class 'parser_rules.Statement'>",'parser.py',31),
  ('Statement -> Expression SEMICOLON','Statement',2,"p_<class 'parser_rules.Statement'>",'parser.py',32),
  ('Statement -> IfElseStatement','Statement',1,"p_<class 'parser_rules.Statement'>",'parser.py',33),
  ('Statement -> ForStatement','Statement',1,"p_<class 'parser_rules.Statement'>",'parser.py',34),
  ('Statement -> WhileStatement','Statement',1,"p_<class 'parser_rules.Statement'>",'parser.py',35),
  ('Statement -> BreakStatement','Statement',1,"p_<class 'parser_rules.Statement'>",'parser.py',36),
  ('Statement -> ReturnStatement','Statement',1,"p_<class 'parser_rules.Statement'>",'parser.py',37),
  ('Statement -> BlockStatement','Statement',1,"p_<class 'parser_rules.Statement'>",'parser.py',38),
  ('Statement -> BlankStatement','Statement',1,"p_<class 'parser_rules.Statement'>",'parser.py',39),
  ('StatementListR -> Statement StatementListR','StatementListR',2,"p_<class 'parser_rules.StatementListR'>",'parser.py',28),
  ('StatementListR -> empty','StatementListR',1,"p_<class 'parser_rules.StatementListR'>",'parser.py',29),
  ('StructDefinition -> STRUCT ID LT TypeParameterListR GT LBRACE StructMemberDeclarationListR RBRACE','StructDefinition',8,"p_<class 'parser_rules.StructDefinition'>",'parser.py',28),
  ('StructDefinition -> STRUCT ID LBRACE StructMemberDeclarationListR RBRACE','StructDefinition',5,"p_<class 'parser_rules.StructDefinition'>",'parser.py',29),
  ('StructMemberDeclarationListR -> DeclarationStatement StructMemberDeclarationListR','StructMemberDeclarationListR',2,"p_<class 'parser_rules.StructMemberDeclarationListR'>",'parser.py',28),
  ('StructMemberDeclarationListR -> empty','StructMemberDeclarationListR',1,"p_<class 'parser_rules.StructMemberDeclarationListR'>",'parser.py',29),
  ('Type -> ID PointerListR','Type',2,"p_<class 'parser_rules.Type'>",'parser.py',28),
  ('Type -> ID LT TypeParameterListR GT PointerListR','Type',5,"p_<class 'parser_rules.Type'>",'parser.py',29),
  ('TypeParameter -> ID','TypeParameter',1,"p_<class 'parser_rules.TypeParameter'>",'parser.py',28),
  ('TypeParameterListR -> TypeParameter COMMA TypeParameterListR','TypeParameterListR',3,"p_<class 'parser_rules.TypeParameterListR'>",'parser.py',28),
  ('TypeParameterListR -> TypeParameter','TypeParameterListR',1,"p_<class 'parser_rules.TypeParameterListR'>",'parser.py',29),
  ('TypeParameterListR -> empty','TypeParameterListR',1,"p_<class 'parser_rules.TypeParameterListR'>",'parser.py',30),
  ('UnaryExpression -> IdListR','UnaryExpression',1,"p_<class 'parser_rules.UnaryExpression'>",'parser.py',28),
  ('UnaryExpression -> Literal','UnaryExpression',1,"p_<class 'parser_rules.UnaryExpression'>",'parser.py',29),
  ('UnaryExpression -> FunctionCall','UnaryExpression',1,"p_<class 'parser_rules.UnaryExpression'>",'parser.py',30),
  ('UnaryExpression -> BracketCall','UnaryExpression',1,"p_<class 'parser_rules.UnaryExpression'>",'parser.py',31),
  ('UnaryExpression -> LPAREN Expression RPAREN','UnaryExpression',3,"p_<class 'parser_rules.UnaryExpression'>",'parser.py',32),
  ('WhileStatement -> WHILE LPAREN Expression RPAREN Block','WhileStatement',5,"p_<class 'parser_rules.WhileStatement'>",'parser.py',28),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',35),
]
