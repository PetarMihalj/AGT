
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "CompilationUnitBOOLL BREAK CHARL DEC ELSE EQ FOR GEQ GT ID IF INC INTL LEQ LT NE RETURN WHILEBinaryExpressionPrio3 : UnaryExpression Mul BinaryExpressionPrio3\n                             | UnaryExpression Div BinaryExpressionPrio3\n                             | UnaryExpression Mod BinaryExpressionPrio3\n                             | UnaryExpression\n    BinaryExpressionPrio4 : BinaryExpressionPrio3 Add BinaryExpressionPrio4\n                             | BinaryExpressionPrio3 Sub BinaryExpressionPrio4\n                             | BinaryExpressionPrio3\n    BinaryExpressionPrio6 : BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6\n                             | BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6\n                             | BinaryExpressionPrio4 Less BinaryExpressionPrio6\n                             | BinaryExpressionPrio4 Greater BinaryExpressionPrio6\n                             | BinaryExpressionPrio4\n    BinaryExpressionPrio7 : BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7\n                             | BinaryExpressionPrio6 Equal BinaryExpressionPrio7\n                             | BinaryExpressionPrio6\n    Expression : BinaryExpressionPrio7BoolLiteral : BOOLLCharLiteral : CHARLIntLiteral : INTLLiteral : IntLiteral\n               | BoolLiteral\n               | CharLiteral\n    Add : '+'Dec : DECDiv : '/'Equal : EQGreater : GTGreaterEqual : LEQInc : INCLess : LTLessEqual : GEQMod : '%'Mul : '*'NotEqual : NESub : '-'AssignmentStatement : ID '=' Expression ';'\n                           | ID '=' Expression\n    BlankStatement : ';'BreakStatement : BREAK INTL ';'\n                      | BREAK ';'\n    DeclarationAssignmentStatement : TypeName ID '=' Expression ';'DeclarationStatement : TypeName ID ';'ForStatement : FOR '(' Statement Expression ';' Statement ')' Block\n    IfElseStatement : IF '(' Expression ')' Block ELSE Block\n    ReturnStatement : RETURN Expression ';'\n                       | RETURN ';'\n    Statement : AssignmentStatement\n                 | DeclarationAssignmentStatement\n                 | Expression ';'\n                 | DeclarationStatement\n                 | IfElseStatement\n                 | ForStatement\n                 | WhileStatement\n                 | BreakStatement\n                 | ReturnStatement\n                 | BlankStatement\n    StatementListR : Statement StatementListR\n                      | empty\n    WhileStatement : WHILE '(' Expression ')' Block\n    Argument : ExpressionArgumentListR : Argument ',' ArgumentListR\n                     | Argument\n                     | empty\n    Block : '{' StatementListR '}'CompilationUnit : DefinitionListRDefinitionListR : FunctionDefinition DefinitionListR\n                       | empty\n    FunctionDefinition : TypeName ID '(' ParameterListR ')' BlockParameter : TypeName IDParameterListR : Parameter ',' ParameterListR\n                     | Parameter\n                     | empty\n    TypeName : IDVarName : IDDecrementAfter : VarName DecDecrementBefore : Dec VarNameFunctionCall : VarName '(' ArgumentListR ')'IncrementAfter : VarName IncIncrementBefore : Inc VarNameUnaryExpression : IncrementAfter\n                       | IncrementBefore\n                       | DecrementAfter\n                       | DecrementBefore\n                       | FunctionCall\n                       | VarName\n                       | Literal\n                       | '(' Expression ')'\n    empty :"
    
_lr_action_items = {'$end':([0,1,2,3,4,7,17,64,],[-88,0,-65,-88,-67,-66,-68,-64,]),'ID':([0,3,5,6,9,10,16,17,18,21,23,24,26,27,28,29,30,31,32,33,34,35,36,38,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,66,67,69,71,72,73,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,110,112,113,114,115,116,117,118,119,120,121,122,123,124,129,134,135,136,138,139,143,145,],[6,6,8,-73,6,14,6,-68,34,34,-47,-48,-38,-50,-51,-52,-53,-54,-55,-56,-73,68,-16,71,-19,71,-15,-12,-7,-4,-80,-81,-82,-83,-84,-85,-86,71,71,-20,-21,-22,-29,-24,-17,-18,-64,-49,71,71,-74,34,71,-40,-46,71,71,-34,-26,71,71,71,71,-31,-28,-30,-27,71,71,-23,-35,71,71,71,-33,-25,-32,-78,-75,71,-79,-76,-37,71,-42,-87,71,-39,-45,-13,-14,-8,-9,-10,-11,-5,-6,-1,-2,-3,-36,-77,71,-41,34,-59,-44,-43,]),'(':([8,18,21,23,24,26,27,28,29,30,31,32,33,34,36,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,57,58,59,60,61,62,63,64,66,67,69,71,72,73,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,110,112,113,114,115,116,117,118,119,120,121,122,123,124,129,134,135,136,138,139,143,145,],[9,38,38,-47,-48,-38,-50,-51,-52,-53,-54,-55,-56,-74,-16,69,38,72,73,-19,38,-15,-12,-7,-4,-80,-81,-82,-83,-84,102,-86,-20,-21,-22,-29,-24,-17,-18,-64,-49,38,38,-74,38,38,-40,-46,38,38,-34,-26,38,38,38,38,-31,-28,-30,-27,38,38,-23,-35,38,38,38,-33,-25,-32,-78,-75,38,-79,-76,-37,38,-42,-87,38,-39,-45,-13,-14,-8,-9,-10,-11,-5,-6,-1,-2,-3,-36,-77,38,-41,38,-59,-44,-43,]),')':([9,11,12,13,14,16,19,23,24,26,27,28,29,30,31,32,33,36,42,44,45,46,47,48,49,50,51,52,53,54,57,58,59,60,61,62,63,64,66,70,71,75,77,100,101,102,103,104,105,107,108,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,134,135,136,139,140,142,143,145,],[-88,15,-71,-72,-69,-88,-70,-47,-48,-38,-50,-51,-52,-53,-54,-55,-56,-16,-19,-15,-12,-7,-4,-80,-81,-82,-83,-84,-85,-86,-20,-21,-22,-29,-24,-17,-18,-64,-49,109,-74,-40,-46,-78,-75,-88,-79,-76,-37,-42,131,-87,133,-39,-45,-13,-14,-8,-9,-10,-11,-5,-6,-1,-2,-3,134,-62,-63,-60,-36,-77,-88,-41,-59,-61,144,-44,-43,]),',':([12,14,36,42,44,45,46,47,48,49,50,51,52,53,54,57,58,59,60,61,62,63,71,100,101,103,104,109,114,115,116,117,118,119,120,121,122,123,124,126,128,134,],[16,-69,-16,-19,-15,-12,-7,-4,-80,-81,-82,-83,-84,-85,-86,-20,-21,-22,-29,-24,-17,-18,-74,-78,-75,-79,-76,-87,-13,-14,-8,-9,-10,-11,-5,-6,-1,-2,-3,135,-60,-77,]),'{':([15,131,133,141,144,],[18,18,18,18,18,]),'}':([18,20,21,22,23,24,26,27,28,29,30,31,32,33,36,42,44,45,46,47,48,49,50,51,52,53,54,57,58,59,60,61,62,63,64,65,66,71,75,77,100,101,103,104,105,107,109,112,113,114,115,116,117,118,119,120,121,122,123,124,129,134,136,139,143,145,],[-88,64,-88,-58,-47,-48,-38,-50,-51,-52,-53,-54,-55,-56,-16,-19,-15,-12,-7,-4,-80,-81,-82,-83,-84,-85,-86,-20,-21,-22,-29,-24,-17,-18,-64,-57,-49,-74,-40,-46,-78,-75,-79,-76,-37,-42,-87,-39,-45,-13,-14,-8,-9,-10,-11,-5,-6,-1,-2,-3,-36,-77,-41,-59,-44,-43,]),'IF':([18,21,23,24,26,27,28,29,30,31,32,33,36,42,44,45,46,47,48,49,50,51,52,53,54,57,58,59,60,61,62,63,64,66,71,72,75,77,100,101,103,104,105,107,109,112,113,114,115,116,117,118,119,120,121,122,123,124,129,134,136,138,139,143,145,],[37,37,-47,-48,-38,-50,-51,-52,-53,-54,-55,-56,-16,-19,-15,-12,-7,-4,-80,-81,-82,-83,-84,-85,-86,-20,-21,-22,-29,-24,-17,-18,-64,-49,-74,37,-40,-46,-78,-75,-79,-76,-37,-42,-87,-39,-45,-13,-14,-8,-9,-10,-11,-5,-6,-1,-2,-3,-36,-77,-41,37,-59,-44,-43,]),'FOR':([18,21,23,24,26,27,28,29,30,31,32,33,36,42,44,45,46,47,48,49,50,51,52,53,54,57,58,59,60,61,62,63,64,66,71,72,75,77,100,101,103,104,105,107,109,112,113,114,115,116,117,118,119,120,121,122,123,124,129,134,136,138,139,143,145,],[39,39,-47,-48,-38,-50,-51,-52,-53,-54,-55,-56,-16,-19,-15,-12,-7,-4,-80,-81,-82,-83,-84,-85,-86,-20,-21,-22,-29,-24,-17,-18,-64,-49,-74,39,-40,-46,-78,-75,-79,-76,-37,-42,-87,-39,-45,-13,-14,-8,-9,-10,-11,-5,-6,-1,-2,-3,-36,-77,-41,39,-59,-44,-43,]),'WHILE':([18,21,23,24,26,27,28,29,30,31,32,33,36,42,44,45,46,47,48,49,50,51,52,53,54,57,58,59,60,61,62,63,64,66,71,72,75,77,100,101,103,104,105,107,109,112,113,114,115,116,117,118,119,120,121,122,123,124,129,134,136,138,139,143,145,],[40,40,-47,-48,-38,-50,-51,-52,-53,-54,-55,-56,-16,-19,-15,-12,-7,-4,-80,-81,-82,-83,-84,-85,-86,-20,-21,-22,-29,-24,-17,-18,-64,-49,-74,40,-40,-46,-78,-75,-79,-76,-37,-42,-87,-39,-45,-13,-14,-8,-9,-10,-11,-5,-6,-1,-2,-3,-36,-77,-41,40,-59,-44,-43,]),'BREAK':([18,21,23,24,26,27,28,29,30,31,32,33,36,42,44,45,46,47,48,49,50,51,52,53,54,57,58,59,60,61,62,63,64,66,71,72,75,77,100,101,103,104,105,107,109,112,113,114,115,116,117,118,119,120,121,122,123,124,129,134,136,138,139,143,145,],[41,41,-47,-48,-38,-50,-51,-52,-53,-54,-55,-56,-16,-19,-15,-12,-7,-4,-80,-81,-82,-83,-84,-85,-86,-20,-21,-22,-29,-24,-17,-18,-64,-49,-74,41,-40,-46,-78,-75,-79,-76,-37,-42,-87,-39,-45,-13,-14,-8,-9,-10,-11,-5,-6,-1,-2,-3,-36,-77,-41,41,-59,-44,-43,]),'RETURN':([18,21,23,24,26,27,28,29,30,31,32,33,36,42,44,45,46,47,48,49,50,51,52,53,54,57,58,59,60,61,62,63,64,66,71,72,75,77,100,101,103,104,105,107,109,112,113,114,115,116,117,118,119,120,121,122,123,124,129,134,136,138,139,143,145,],[43,43,-47,-48,-38,-50,-51,-52,-53,-54,-55,-56,-16,-19,-15,-12,-7,-4,-80,-81,-82,-83,-84,-85,-86,-20,-21,-22,-29,-24,-17,-18,-64,-49,-74,43,-40,-46,-78,-75,-79,-76,-37,-42,-87,-39,-45,-13,-14,-8,-9,-10,-11,-5,-6,-1,-2,-3,-36,-77,-41,43,-59,-44,-43,]),';':([18,21,23,24,25,26,27,28,29,30,31,32,33,34,36,41,42,43,44,45,46,47,48,49,50,51,52,53,54,57,58,59,60,61,62,63,64,66,68,71,72,74,75,76,77,100,101,103,104,105,107,109,112,113,114,115,116,117,118,119,120,121,122,123,124,129,130,132,134,136,138,139,143,145,],[26,26,-47,-48,66,-38,-50,-51,-52,-53,-54,-55,-56,-74,-16,75,-19,77,-15,-12,-7,-4,-80,-81,-82,-83,-84,-85,-86,-20,-21,-22,-29,-24,-17,-18,-64,-49,107,-74,26,112,-40,113,-46,-78,-75,-79,-76,129,-42,-87,-39,-45,-13,-14,-8,-9,-10,-11,-5,-6,-1,-2,-3,-36,136,138,-77,-41,26,-59,-44,-43,]),'INC':([18,21,23,24,26,27,28,29,30,31,32,33,34,36,38,42,43,44,45,46,47,48,49,50,51,52,53,54,57,58,59,60,61,62,63,64,66,67,69,71,72,73,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,110,112,113,114,115,116,117,118,119,120,121,122,123,124,129,134,135,136,138,139,143,145,],[60,60,-47,-48,-38,-50,-51,-52,-53,-54,-55,-56,-74,-16,60,-19,60,-15,-12,-7,-4,-80,-81,-82,-83,-84,60,-86,-20,-21,-22,-29,-24,-17,-18,-64,-49,60,60,-74,60,60,-40,-46,60,60,-34,-26,60,60,60,60,-31,-28,-30,-27,60,60,-23,-35,60,60,60,-33,-25,-32,-78,-75,60,-79,-76,-37,60,-42,-87,60,-39,-45,-13,-14,-8,-9,-10,-11,-5,-6,-1,-2,-3,-36,-77,60,-41,60,-59,-44,-43,]),'DEC':([18,21,23,24,26,27,28,29,30,31,32,33,34,36,38,42,43,44,45,46,47,48,49,50,51,52,53,54,57,58,59,60,61,62,63,64,66,67,69,71,72,73,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,110,112,113,114,115,116,117,118,119,120,121,122,123,124,129,134,135,136,138,139,143,145,],[61,61,-47,-48,-38,-50,-51,-52,-53,-54,-55,-56,-74,-16,61,-19,61,-15,-12,-7,-4,-80,-81,-82,-83,-84,61,-86,-20,-21,-22,-29,-24,-17,-18,-64,-49,61,61,-74,61,61,-40,-46,61,61,-34,-26,61,61,61,61,-31,-28,-30,-27,61,61,-23,-35,61,61,61,-33,-25,-32,-78,-75,61,-79,-76,-37,61,-42,-87,61,-39,-45,-13,-14,-8,-9,-10,-11,-5,-6,-1,-2,-3,-36,-77,61,-41,61,-59,-44,-43,]),'INTL':([18,21,23,24,26,27,28,29,30,31,32,33,36,38,41,42,43,44,45,46,47,48,49,50,51,52,53,54,57,58,59,60,61,62,63,64,66,67,69,71,72,73,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,110,112,113,114,115,116,117,118,119,120,121,122,123,124,129,134,135,136,138,139,143,145,],[42,42,-47,-48,-38,-50,-51,-52,-53,-54,-55,-56,-16,42,74,-19,42,-15,-12,-7,-4,-80,-81,-82,-83,-84,-85,-86,-20,-21,-22,-29,-24,-17,-18,-64,-49,42,42,-74,42,42,-40,-46,42,42,-34,-26,42,42,42,42,-31,-28,-30,-27,42,42,-23,-35,42,42,42,-33,-25,-32,-78,-75,42,-79,-76,-37,42,-42,-87,42,-39,-45,-13,-14,-8,-9,-10,-11,-5,-6,-1,-2,-3,-36,-77,42,-41,42,-59,-44,-43,]),'BOOLL':([18,21,23,24,26,27,28,29,30,31,32,33,36,38,42,43,44,45,46,47,48,49,50,51,52,53,54,57,58,59,60,61,62,63,64,66,67,69,71,72,73,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,110,112,113,114,115,116,117,118,119,120,121,122,123,124,129,134,135,136,138,139,143,145,],[62,62,-47,-48,-38,-50,-51,-52,-53,-54,-55,-56,-16,62,-19,62,-15,-12,-7,-4,-80,-81,-82,-83,-84,-85,-86,-20,-21,-22,-29,-24,-17,-18,-64,-49,62,62,-74,62,62,-40,-46,62,62,-34,-26,62,62,62,62,-31,-28,-30,-27,62,62,-23,-35,62,62,62,-33,-25,-32,-78,-75,62,-79,-76,-37,62,-42,-87,62,-39,-45,-13,-14,-8,-9,-10,-11,-5,-6,-1,-2,-3,-36,-77,62,-41,62,-59,-44,-43,]),'CHARL':([18,21,23,24,26,27,28,29,30,31,32,33,36,38,42,43,44,45,46,47,48,49,50,51,52,53,54,57,58,59,60,61,62,63,64,66,67,69,71,72,73,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,110,112,113,114,115,116,117,118,119,120,121,122,123,124,129,134,135,136,138,139,143,145,],[63,63,-47,-48,-38,-50,-51,-52,-53,-54,-55,-56,-16,63,-19,63,-15,-12,-7,-4,-80,-81,-82,-83,-84,-85,-86,-20,-21,-22,-29,-24,-17,-18,-64,-49,63,63,-74,63,63,-40,-46,63,63,-34,-26,63,63,63,63,-31,-28,-30,-27,63,63,-23,-35,63,63,63,-33,-25,-32,-78,-75,63,-79,-76,-37,63,-42,-87,63,-39,-45,-13,-14,-8,-9,-10,-11,-5,-6,-1,-2,-3,-36,-77,63,-41,63,-59,-44,-43,]),'=':([34,68,],[67,106,]),'*':([34,42,47,48,49,50,51,52,53,54,57,58,59,60,61,62,63,71,100,101,103,104,109,134,],[-74,-19,97,-80,-81,-82,-83,-84,-85,-86,-20,-21,-22,-29,-24,-17,-18,-74,-78,-75,-79,-76,-87,-77,]),'/':([34,42,47,48,49,50,51,52,53,54,57,58,59,60,61,62,63,71,100,101,103,104,109,134,],[-74,-19,98,-80,-81,-82,-83,-84,-85,-86,-20,-21,-22,-29,-24,-17,-18,-74,-78,-75,-79,-76,-87,-77,]),'%':([34,42,47,48,49,50,51,52,53,54,57,58,59,60,61,62,63,71,100,101,103,104,109,134,],[-74,-19,99,-80,-81,-82,-83,-84,-85,-86,-20,-21,-22,-29,-24,-17,-18,-74,-78,-75,-79,-76,-87,-77,]),'+':([34,42,46,47,48,49,50,51,52,53,54,57,58,59,60,61,62,63,71,100,101,103,104,109,122,123,124,134,],[-74,-19,92,-4,-80,-81,-82,-83,-84,-85,-86,-20,-21,-22,-29,-24,-17,-18,-74,-78,-75,-79,-76,-87,-1,-2,-3,-77,]),'-':([34,42,46,47,48,49,50,51,52,53,54,57,58,59,60,61,62,63,71,100,101,103,104,109,122,123,124,134,],[-74,-19,93,-4,-80,-81,-82,-83,-84,-85,-86,-20,-21,-22,-29,-24,-17,-18,-74,-78,-75,-79,-76,-87,-1,-2,-3,-77,]),'GEQ':([34,42,45,46,47,48,49,50,51,52,53,54,57,58,59,60,61,62,63,71,100,101,103,104,109,120,121,122,123,124,134,],[-74,-19,86,-7,-4,-80,-81,-82,-83,-84,-85,-86,-20,-21,-22,-29,-24,-17,-18,-74,-78,-75,-79,-76,-87,-5,-6,-1,-2,-3,-77,]),'LEQ':([34,42,45,46,47,48,49,50,51,52,53,54,57,58,59,60,61,62,63,71,100,101,103,104,109,120,121,122,123,124,134,],[-74,-19,87,-7,-4,-80,-81,-82,-83,-84,-85,-86,-20,-21,-22,-29,-24,-17,-18,-74,-78,-75,-79,-76,-87,-5,-6,-1,-2,-3,-77,]),'LT':([34,42,45,46,47,48,49,50,51,52,53,54,57,58,59,60,61,62,63,71,100,101,103,104,109,120,121,122,123,124,134,],[-74,-19,88,-7,-4,-80,-81,-82,-83,-84,-85,-86,-20,-21,-22,-29,-24,-17,-18,-74,-78,-75,-79,-76,-87,-5,-6,-1,-2,-3,-77,]),'GT':([34,42,45,46,47,48,49,50,51,52,53,54,57,58,59,60,61,62,63,71,100,101,103,104,109,120,121,122,123,124,134,],[-74,-19,89,-7,-4,-80,-81,-82,-83,-84,-85,-86,-20,-21,-22,-29,-24,-17,-18,-74,-78,-75,-79,-76,-87,-5,-6,-1,-2,-3,-77,]),'NE':([34,42,44,45,46,47,48,49,50,51,52,53,54,57,58,59,60,61,62,63,71,100,101,103,104,109,116,117,118,119,120,121,122,123,124,134,],[-74,-19,80,-12,-7,-4,-80,-81,-82,-83,-84,-85,-86,-20,-21,-22,-29,-24,-17,-18,-74,-78,-75,-79,-76,-87,-8,-9,-10,-11,-5,-6,-1,-2,-3,-77,]),'EQ':([34,42,44,45,46,47,48,49,50,51,52,53,54,57,58,59,60,61,62,63,71,100,101,103,104,109,116,117,118,119,120,121,122,123,124,134,],[-74,-19,81,-12,-7,-4,-80,-81,-82,-83,-84,-85,-86,-20,-21,-22,-29,-24,-17,-18,-74,-78,-75,-79,-76,-87,-8,-9,-10,-11,-5,-6,-1,-2,-3,-77,]),'ELSE':([64,137,],[-64,141,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'CompilationUnit':([0,],[1,]),'DefinitionListR':([0,3,],[2,7,]),'FunctionDefinition':([0,3,],[3,3,]),'empty':([0,3,9,16,18,21,102,135,],[4,4,13,13,22,22,127,127,]),'TypeName':([0,3,9,16,18,21,72,138,],[5,5,10,10,35,35,35,35,]),'ParameterListR':([9,16,],[11,19,]),'Parameter':([9,16,],[12,12,]),'Block':([15,131,133,141,144,],[17,137,139,143,145,]),'StatementListR':([18,21,],[20,65,]),'Statement':([18,21,72,138,],[21,21,110,142,]),'AssignmentStatement':([18,21,72,138,],[23,23,23,23,]),'DeclarationAssignmentStatement':([18,21,72,138,],[24,24,24,24,]),'Expression':([18,21,38,43,67,69,72,73,102,106,110,135,138,],[25,25,70,76,105,108,25,111,128,130,132,128,25,]),'DeclarationStatement':([18,21,72,138,],[27,27,27,27,]),'IfElseStatement':([18,21,72,138,],[28,28,28,28,]),'ForStatement':([18,21,72,138,],[29,29,29,29,]),'WhileStatement':([18,21,72,138,],[30,30,30,30,]),'BreakStatement':([18,21,72,138,],[31,31,31,31,]),'ReturnStatement':([18,21,72,138,],[32,32,32,32,]),'BlankStatement':([18,21,72,138,],[33,33,33,33,]),'BinaryExpressionPrio7':([18,21,38,43,67,69,72,73,78,79,102,106,110,135,138,],[36,36,36,36,36,36,36,36,114,115,36,36,36,36,36,]),'BinaryExpressionPrio6':([18,21,38,43,67,69,72,73,78,79,82,83,84,85,102,106,110,135,138,],[44,44,44,44,44,44,44,44,44,44,116,117,118,119,44,44,44,44,44,]),'BinaryExpressionPrio4':([18,21,38,43,67,69,72,73,78,79,82,83,84,85,90,91,102,106,110,135,138,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,120,121,45,45,45,45,45,]),'BinaryExpressionPrio3':([18,21,38,43,67,69,72,73,78,79,82,83,84,85,90,91,94,95,96,102,106,110,135,138,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,122,123,124,46,46,46,46,46,]),'UnaryExpression':([18,21,38,43,67,69,72,73,78,79,82,83,84,85,90,91,94,95,96,102,106,110,135,138,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'IncrementAfter':([18,21,38,43,67,69,72,73,78,79,82,83,84,85,90,91,94,95,96,102,106,110,135,138,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'IncrementBefore':([18,21,38,43,67,69,72,73,78,79,82,83,84,85,90,91,94,95,96,102,106,110,135,138,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'DecrementAfter':([18,21,38,43,67,69,72,73,78,79,82,83,84,85,90,91,94,95,96,102,106,110,135,138,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'DecrementBefore':([18,21,38,43,67,69,72,73,78,79,82,83,84,85,90,91,94,95,96,102,106,110,135,138,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'FunctionCall':([18,21,38,43,67,69,72,73,78,79,82,83,84,85,90,91,94,95,96,102,106,110,135,138,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'VarName':([18,21,38,43,55,56,67,69,72,73,78,79,82,83,84,85,90,91,94,95,96,102,106,110,135,138,],[53,53,53,53,103,104,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'Literal':([18,21,38,43,67,69,72,73,78,79,82,83,84,85,90,91,94,95,96,102,106,110,135,138,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'Inc':([18,21,38,43,53,67,69,72,73,78,79,82,83,84,85,90,91,94,95,96,102,106,110,135,138,],[55,55,55,55,100,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'Dec':([18,21,38,43,53,67,69,72,73,78,79,82,83,84,85,90,91,94,95,96,102,106,110,135,138,],[56,56,56,56,101,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'IntLiteral':([18,21,38,43,67,69,72,73,78,79,82,83,84,85,90,91,94,95,96,102,106,110,135,138,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'BoolLiteral':([18,21,38,43,67,69,72,73,78,79,82,83,84,85,90,91,94,95,96,102,106,110,135,138,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'CharLiteral':([18,21,38,43,67,69,72,73,78,79,82,83,84,85,90,91,94,95,96,102,106,110,135,138,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'NotEqual':([44,],[78,]),'Equal':([44,],[79,]),'LessEqual':([45,],[82,]),'GreaterEqual':([45,],[83,]),'Less':([45,],[84,]),'Greater':([45,],[85,]),'Add':([46,],[90,]),'Sub':([46,],[91,]),'Mul':([47,],[94,]),'Div':([47,],[95,]),'Mod':([47,],[96,]),'ArgumentListR':([102,135,],[125,140,]),'Argument':([102,135,],[126,126,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> CompilationUnit","S'",1,None,None,None),
  ('BinaryExpressionPrio3 -> UnaryExpression Mul BinaryExpressionPrio3','BinaryExpressionPrio3',3,"p_<class 'parser_rules.binary_expressions.BinaryExpressionPrio3'>",'parser.py',23),
  ('BinaryExpressionPrio3 -> UnaryExpression Div BinaryExpressionPrio3','BinaryExpressionPrio3',3,"p_<class 'parser_rules.binary_expressions.BinaryExpressionPrio3'>",'parser.py',24),
  ('BinaryExpressionPrio3 -> UnaryExpression Mod BinaryExpressionPrio3','BinaryExpressionPrio3',3,"p_<class 'parser_rules.binary_expressions.BinaryExpressionPrio3'>",'parser.py',25),
  ('BinaryExpressionPrio3 -> UnaryExpression','BinaryExpressionPrio3',1,"p_<class 'parser_rules.binary_expressions.BinaryExpressionPrio3'>",'parser.py',26),
  ('BinaryExpressionPrio4 -> BinaryExpressionPrio3 Add BinaryExpressionPrio4','BinaryExpressionPrio4',3,"p_<class 'parser_rules.binary_expressions.BinaryExpressionPrio4'>",'parser.py',23),
  ('BinaryExpressionPrio4 -> BinaryExpressionPrio3 Sub BinaryExpressionPrio4','BinaryExpressionPrio4',3,"p_<class 'parser_rules.binary_expressions.BinaryExpressionPrio4'>",'parser.py',24),
  ('BinaryExpressionPrio4 -> BinaryExpressionPrio3','BinaryExpressionPrio4',1,"p_<class 'parser_rules.binary_expressions.BinaryExpressionPrio4'>",'parser.py',25),
  ('BinaryExpressionPrio6 -> BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6','BinaryExpressionPrio6',3,"p_<class 'parser_rules.binary_expressions.BinaryExpressionPrio6'>",'parser.py',23),
  ('BinaryExpressionPrio6 -> BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6','BinaryExpressionPrio6',3,"p_<class 'parser_rules.binary_expressions.BinaryExpressionPrio6'>",'parser.py',24),
  ('BinaryExpressionPrio6 -> BinaryExpressionPrio4 Less BinaryExpressionPrio6','BinaryExpressionPrio6',3,"p_<class 'parser_rules.binary_expressions.BinaryExpressionPrio6'>",'parser.py',25),
  ('BinaryExpressionPrio6 -> BinaryExpressionPrio4 Greater BinaryExpressionPrio6','BinaryExpressionPrio6',3,"p_<class 'parser_rules.binary_expressions.BinaryExpressionPrio6'>",'parser.py',26),
  ('BinaryExpressionPrio6 -> BinaryExpressionPrio4','BinaryExpressionPrio6',1,"p_<class 'parser_rules.binary_expressions.BinaryExpressionPrio6'>",'parser.py',27),
  ('BinaryExpressionPrio7 -> BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7','BinaryExpressionPrio7',3,"p_<class 'parser_rules.binary_expressions.BinaryExpressionPrio7'>",'parser.py',23),
  ('BinaryExpressionPrio7 -> BinaryExpressionPrio6 Equal BinaryExpressionPrio7','BinaryExpressionPrio7',3,"p_<class 'parser_rules.binary_expressions.BinaryExpressionPrio7'>",'parser.py',24),
  ('BinaryExpressionPrio7 -> BinaryExpressionPrio6','BinaryExpressionPrio7',1,"p_<class 'parser_rules.binary_expressions.BinaryExpressionPrio7'>",'parser.py',25),
  ('Expression -> BinaryExpressionPrio7','Expression',1,"p_<class 'parser_rules.binary_expressions.Expression'>",'parser.py',23),
  ('BoolLiteral -> BOOLL','BoolLiteral',1,"p_<class 'parser_rules.literals.BoolLiteral'>",'parser.py',23),
  ('CharLiteral -> CHARL','CharLiteral',1,"p_<class 'parser_rules.literals.CharLiteral'>",'parser.py',23),
  ('IntLiteral -> INTL','IntLiteral',1,"p_<class 'parser_rules.literals.IntLiteral'>",'parser.py',23),
  ('Literal -> IntLiteral','Literal',1,"p_<class 'parser_rules.literals.Literal'>",'parser.py',23),
  ('Literal -> BoolLiteral','Literal',1,"p_<class 'parser_rules.literals.Literal'>",'parser.py',24),
  ('Literal -> CharLiteral','Literal',1,"p_<class 'parser_rules.literals.Literal'>",'parser.py',25),
  ('Add -> +','Add',1,"p_<class 'parser_rules.operators.Add'>",'parser.py',23),
  ('Dec -> DEC','Dec',1,"p_<class 'parser_rules.operators.Dec'>",'parser.py',23),
  ('Div -> /','Div',1,"p_<class 'parser_rules.operators.Div'>",'parser.py',23),
  ('Equal -> EQ','Equal',1,"p_<class 'parser_rules.operators.Equal'>",'parser.py',23),
  ('Greater -> GT','Greater',1,"p_<class 'parser_rules.operators.Greater'>",'parser.py',23),
  ('GreaterEqual -> LEQ','GreaterEqual',1,"p_<class 'parser_rules.operators.GreaterEqual'>",'parser.py',23),
  ('Inc -> INC','Inc',1,"p_<class 'parser_rules.operators.Inc'>",'parser.py',23),
  ('Less -> LT','Less',1,"p_<class 'parser_rules.operators.Less'>",'parser.py',23),
  ('LessEqual -> GEQ','LessEqual',1,"p_<class 'parser_rules.operators.LessEqual'>",'parser.py',23),
  ('Mod -> %','Mod',1,"p_<class 'parser_rules.operators.Mod'>",'parser.py',23),
  ('Mul -> *','Mul',1,"p_<class 'parser_rules.operators.Mul'>",'parser.py',23),
  ('NotEqual -> NE','NotEqual',1,"p_<class 'parser_rules.operators.NotEqual'>",'parser.py',23),
  ('Sub -> -','Sub',1,"p_<class 'parser_rules.operators.Sub'>",'parser.py',23),
  ('AssignmentStatement -> ID = Expression ;','AssignmentStatement',4,"p_<class 'parser_rules.statements.AssignmentStatement'>",'parser.py',23),
  ('AssignmentStatement -> ID = Expression','AssignmentStatement',3,"p_<class 'parser_rules.statements.AssignmentStatement'>",'parser.py',24),
  ('BlankStatement -> ;','BlankStatement',1,"p_<class 'parser_rules.statements.BlankStatement'>",'parser.py',23),
  ('BreakStatement -> BREAK INTL ;','BreakStatement',3,"p_<class 'parser_rules.statements.BreakStatement'>",'parser.py',23),
  ('BreakStatement -> BREAK ;','BreakStatement',2,"p_<class 'parser_rules.statements.BreakStatement'>",'parser.py',24),
  ('DeclarationAssignmentStatement -> TypeName ID = Expression ;','DeclarationAssignmentStatement',5,"p_<class 'parser_rules.statements.DeclarationAssignmentStatement'>",'parser.py',23),
  ('DeclarationStatement -> TypeName ID ;','DeclarationStatement',3,"p_<class 'parser_rules.statements.DeclarationStatement'>",'parser.py',23),
  ('ForStatement -> FOR ( Statement Expression ; Statement ) Block','ForStatement',8,"p_<class 'parser_rules.statements.ForStatement'>",'parser.py',23),
  ('IfElseStatement -> IF ( Expression ) Block ELSE Block','IfElseStatement',7,"p_<class 'parser_rules.statements.IfElseStatement'>",'parser.py',23),
  ('ReturnStatement -> RETURN Expression ;','ReturnStatement',3,"p_<class 'parser_rules.statements.ReturnStatement'>",'parser.py',23),
  ('ReturnStatement -> RETURN ;','ReturnStatement',2,"p_<class 'parser_rules.statements.ReturnStatement'>",'parser.py',24),
  ('Statement -> AssignmentStatement','Statement',1,"p_<class 'parser_rules.statements.Statement'>",'parser.py',23),
  ('Statement -> DeclarationAssignmentStatement','Statement',1,"p_<class 'parser_rules.statements.Statement'>",'parser.py',24),
  ('Statement -> Expression ;','Statement',2,"p_<class 'parser_rules.statements.Statement'>",'parser.py',25),
  ('Statement -> DeclarationStatement','Statement',1,"p_<class 'parser_rules.statements.Statement'>",'parser.py',26),
  ('Statement -> IfElseStatement','Statement',1,"p_<class 'parser_rules.statements.Statement'>",'parser.py',27),
  ('Statement -> ForStatement','Statement',1,"p_<class 'parser_rules.statements.Statement'>",'parser.py',28),
  ('Statement -> WhileStatement','Statement',1,"p_<class 'parser_rules.statements.Statement'>",'parser.py',29),
  ('Statement -> BreakStatement','Statement',1,"p_<class 'parser_rules.statements.Statement'>",'parser.py',30),
  ('Statement -> ReturnStatement','Statement',1,"p_<class 'parser_rules.statements.Statement'>",'parser.py',31),
  ('Statement -> BlankStatement','Statement',1,"p_<class 'parser_rules.statements.Statement'>",'parser.py',32),
  ('StatementListR -> Statement StatementListR','StatementListR',2,"p_<class 'parser_rules.statements.StatementListR'>",'parser.py',23),
  ('StatementListR -> empty','StatementListR',1,"p_<class 'parser_rules.statements.StatementListR'>",'parser.py',24),
  ('WhileStatement -> WHILE ( Expression ) Block','WhileStatement',5,"p_<class 'parser_rules.statements.WhileStatement'>",'parser.py',23),
  ('Argument -> Expression','Argument',1,"p_<class 'parser_rules.structural.Argument'>",'parser.py',23),
  ('ArgumentListR -> Argument , ArgumentListR','ArgumentListR',3,"p_<class 'parser_rules.structural.ArgumentListR'>",'parser.py',23),
  ('ArgumentListR -> Argument','ArgumentListR',1,"p_<class 'parser_rules.structural.ArgumentListR'>",'parser.py',24),
  ('ArgumentListR -> empty','ArgumentListR',1,"p_<class 'parser_rules.structural.ArgumentListR'>",'parser.py',25),
  ('Block -> { StatementListR }','Block',3,"p_<class 'parser_rules.structural.Block'>",'parser.py',23),
  ('CompilationUnit -> DefinitionListR','CompilationUnit',1,"p_<class 'parser_rules.structural.CompilationUnit'>",'parser.py',23),
  ('DefinitionListR -> FunctionDefinition DefinitionListR','DefinitionListR',2,"p_<class 'parser_rules.structural.DefinitionListR'>",'parser.py',23),
  ('DefinitionListR -> empty','DefinitionListR',1,"p_<class 'parser_rules.structural.DefinitionListR'>",'parser.py',24),
  ('FunctionDefinition -> TypeName ID ( ParameterListR ) Block','FunctionDefinition',6,"p_<class 'parser_rules.structural.FunctionDefinition'>",'parser.py',23),
  ('Parameter -> TypeName ID','Parameter',2,"p_<class 'parser_rules.structural.Parameter'>",'parser.py',23),
  ('ParameterListR -> Parameter , ParameterListR','ParameterListR',3,"p_<class 'parser_rules.structural.ParameterListR'>",'parser.py',23),
  ('ParameterListR -> Parameter','ParameterListR',1,"p_<class 'parser_rules.structural.ParameterListR'>",'parser.py',24),
  ('ParameterListR -> empty','ParameterListR',1,"p_<class 'parser_rules.structural.ParameterListR'>",'parser.py',25),
  ('TypeName -> ID','TypeName',1,"p_<class 'parser_rules.structural.TypeName'>",'parser.py',23),
  ('VarName -> ID','VarName',1,"p_<class 'parser_rules.structural.VarName'>",'parser.py',23),
  ('DecrementAfter -> VarName Dec','DecrementAfter',2,"p_<class 'parser_rules.unary_expressions.DecrementAfter'>",'parser.py',23),
  ('DecrementBefore -> Dec VarName','DecrementBefore',2,"p_<class 'parser_rules.unary_expressions.DecrementBefore'>",'parser.py',23),
  ('FunctionCall -> VarName ( ArgumentListR )','FunctionCall',4,"p_<class 'parser_rules.unary_expressions.FunctionCall'>",'parser.py',23),
  ('IncrementAfter -> VarName Inc','IncrementAfter',2,"p_<class 'parser_rules.unary_expressions.IncrementAfter'>",'parser.py',23),
  ('IncrementBefore -> Inc VarName','IncrementBefore',2,"p_<class 'parser_rules.unary_expressions.IncrementBefore'>",'parser.py',23),
  ('UnaryExpression -> IncrementAfter','UnaryExpression',1,"p_<class 'parser_rules.unary_expressions.UnaryExpression'>",'parser.py',23),
  ('UnaryExpression -> IncrementBefore','UnaryExpression',1,"p_<class 'parser_rules.unary_expressions.UnaryExpression'>",'parser.py',24),
  ('UnaryExpression -> DecrementAfter','UnaryExpression',1,"p_<class 'parser_rules.unary_expressions.UnaryExpression'>",'parser.py',25),
  ('UnaryExpression -> DecrementBefore','UnaryExpression',1,"p_<class 'parser_rules.unary_expressions.UnaryExpression'>",'parser.py',26),
  ('UnaryExpression -> FunctionCall','UnaryExpression',1,"p_<class 'parser_rules.unary_expressions.UnaryExpression'>",'parser.py',27),
  ('UnaryExpression -> VarName','UnaryExpression',1,"p_<class 'parser_rules.unary_expressions.UnaryExpression'>",'parser.py',28),
  ('UnaryExpression -> Literal','UnaryExpression',1,"p_<class 'parser_rules.unary_expressions.UnaryExpression'>",'parser.py',29),
  ('UnaryExpression -> ( Expression )','UnaryExpression',3,"p_<class 'parser_rules.unary_expressions.UnaryExpression'>",'parser.py',30),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',30),
]
