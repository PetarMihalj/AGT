
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "CompilationUnitleftPLUSMINUSleftTIMESDIVIDEMODleftLEQGEQLTGTEQNEAMPERSAND ASSIGNMENT BOOLL BREAK COMMA DIVIDE DOT ELSE EQ FN FOR GEQ GT ID IF INTL LBRACE LBRACKET LEQ LET LPAREN LT MINUS MOD NE PLUS RBRACE RBRACKET RETURN RPAREN SEMICOLON STRUCT TIMES WHILEAddressExpression : AMPERSAND ExpressionArgument : ExpressionArgumentListR : Argument COMMA ArgumentListR\n                     | Argument\n                     | empty\n    AssignmentStatement : Expression ASSIGNMENT Expression SEMICOLON\n                           | Expression ASSIGNMENT Expression\n    BinaryExpression : Expression PLUS Expression\n                        | Expression MINUS Expression\n                        | Expression TIMES Expression\n                        | Expression DIVIDE Expression\n                        | Expression MOD Expression\n                        | Expression LEQ Expression\n                        | Expression GEQ Expression\n                        | Expression LT Expression\n                        | Expression GT Expression\n                        | Expression EQ Expression\n                        | Expression NE Expression\n    BlankStatement : ';'Block : LBRACE StatementListR RBRACEBlockStatement : BlockBoolLiteral : BOOLLBracketCall : Expression LBRACKET Expression RBRACKETBreakStatement : BREAK INTL SEMICOLON\n                      | BREAK SEMICOLON\n    CompilationUnit : DefinitionListRDefinitionListR : FunctionDefinition DefinitionListR\n                       | StructDefinition DefinitionListR\n                       | empty\n    DereferenceExpression : TIMES ExpressionExpression : BinaryExpression\n                  | UnaryExpression\n                  | IdExpression\n    ForStatement : FOR LPAREN Statement Expression            SEMICOLON Statement RPAREN Block\n    FunctionCall : ID LPAREN ArgumentListR RPAREN\n                    | ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN\n    FunctionDefinition : FN ID LPAREN ParameterListR RPAREN Block\n                          | FN ID LT TypeParameterListR GT LPAREN ParameterListR RPAREN Block\n    IdExpression : ID\n                    | IdExpression DOT ID\n    IfElseStatement : IF LPAREN Expression RPAREN Block ELSE Block\n    InitCall : ID LBRACE ArgumentListR RBRACE\n                | ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACEInitStatement : LET ID ASSIGNMENT                                        InitCall SEMICOLONIntLiteral : INTLLiteral : IntLiteral\n               | BoolLiteral\n    Parameter : Type IDParameterListR : Parameter COMMA ParameterListR\n                      | Parameter\n                      | empty\n    PointerListR : TIMES PointerListR\n                    | empty\n    ReturnStatement : RETURN Expression SEMICOLON\n                       | RETURN SEMICOLON\n    Statement : AssignmentStatement\n                 | InitStatement\n                 | Expression SEMICOLON\n                 | IfElseStatement\n                 | ForStatement\n                 | WhileStatement\n                 | BreakStatement\n                 | ReturnStatement\n                 | BlockStatement\n                 | BlankStatement\n    StatementListR : Statement StatementListR\n                      | empty\n    StructDefinition : STRUCT ID LBRACE StructMemberListR RBRACE\n                        | STRUCT ID LT TypeParameterListR GT LBRACE StructMemberListR RBRACE\n    StructMember : Type ID SEMICOLONStructMemberListR : StructMember StructMemberListR\n                         | empty\n    Type : ID PointerListR\n            | ID LT TypeArgumentListR GT PointerListRTypeArgumentListR : Type COMMA TypeArgumentListR\n                         | Type\n                         | empty\n    TypeParameterListR : ID COMMA TypeParameterListR\n                          | ID\n                          | empty\n    UnaryExpression : Literal\n                       | FunctionCall\n                       | BracketCall\n                       | InitCall\n                       | LPAREN Expression RPAREN\n                       | DereferenceExpression\n                       | AddressExpression\n    WhileStatement : WHILE LPAREN Expression RPAREN Block\n    empty :"
    
_lr_action_items = {'FN':([0,3,4,38,46,97,129,157,],[6,6,6,-68,-37,-20,-69,-38,]),'STRUCT':([0,3,4,38,46,97,129,157,],[7,7,7,-68,-37,-20,-69,-38,]),'$end':([0,1,2,3,4,5,8,9,38,46,97,129,157,],[-89,0,-26,-89,-89,-29,-27,-28,-68,-37,-20,-69,-38,]),'ID':([6,7,12,13,14,15,16,20,25,27,29,30,31,32,34,36,45,47,50,51,52,53,54,56,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,80,81,82,83,84,85,86,87,88,89,90,91,92,95,97,99,100,101,102,103,104,105,106,107,108,109,110,111,112,114,115,116,117,118,120,121,123,125,126,127,130,131,132,133,134,135,136,137,138,139,140,141,143,150,152,153,155,156,158,159,162,163,165,169,170,172,173,175,176,183,184,185,187,],[10,11,16,21,16,21,-89,35,16,40,-73,16,-89,-53,16,21,-52,69,16,-70,16,-89,16,69,-56,-57,-59,-60,-61,-62,-63,-64,-65,113,-39,-84,-31,-32,-33,69,-21,-45,69,-19,69,-81,-82,-83,-86,-87,-46,-47,69,-22,-74,-20,-58,69,69,69,69,69,69,69,69,69,69,69,69,69,69,16,69,150,69,69,69,-25,-55,-30,-1,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,160,-40,-85,69,-24,-54,-6,-23,-35,69,-42,16,-44,69,69,69,-88,-36,-43,-41,-34,]),'LPAREN':([10,37,47,56,58,59,61,62,63,64,65,66,67,69,70,71,72,73,74,75,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,97,99,100,101,102,103,104,105,106,107,108,109,110,111,112,114,116,118,120,121,123,125,126,127,130,131,132,133,134,135,136,137,138,139,140,141,150,152,153,155,156,158,159,162,163,164,165,170,172,173,175,176,183,184,185,187,],[12,50,75,75,-56,-57,-59,-60,-61,-62,-63,-64,-65,114,-84,-31,-32,-33,118,75,-21,120,121,-45,75,-19,75,-81,-82,-83,-86,-87,-46,-47,75,-22,-20,-58,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,-25,-55,-30,-1,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-40,-85,75,-24,-54,-6,-23,-35,75,172,-42,-44,75,75,75,-88,-36,-43,-41,-34,]),'LT':([10,11,16,60,69,70,71,72,73,80,84,85,86,87,88,89,90,92,119,124,126,127,130,131,132,133,134,135,136,137,138,139,140,141,142,147,150,151,152,154,159,160,162,165,167,183,184,],[13,15,30,108,115,-84,-31,-32,-33,-45,-81,-82,-83,-86,-87,-46,-47,-22,108,108,108,108,108,108,108,108,108,108,-13,-14,-15,-16,-17,-18,108,108,-40,108,-85,108,-23,169,-35,-42,108,-36,-43,]),'LBRACE':([11,33,41,47,56,58,59,61,62,63,64,65,66,67,69,70,71,72,73,76,80,82,84,85,86,87,88,89,90,92,97,99,120,123,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,150,152,155,156,158,159,160,162,164,165,166,168,170,175,176,180,182,183,184,185,186,187,],[14,47,52,47,47,-56,-57,-59,-60,-61,-62,-63,-64,-65,116,-84,-31,-32,-33,-21,-45,-19,-81,-82,-83,-86,-87,-46,-47,-22,-20,-58,47,-25,-55,-30,-1,47,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-40,-85,-24,-54,-6,-23,116,-35,173,-42,47,47,-44,47,-88,47,173,-36,-43,-41,47,-34,]),'RPAREN':([12,17,18,19,34,35,48,50,58,59,61,62,63,64,65,66,67,69,70,71,72,73,76,80,82,84,85,86,87,88,89,90,92,93,97,99,114,119,123,125,126,127,130,131,132,133,134,135,136,137,138,139,140,141,144,145,146,147,150,151,152,154,155,156,158,159,162,163,165,170,171,172,176,178,181,183,184,185,187,],[-89,33,-50,-51,-89,-48,-49,-89,-56,-57,-59,-60,-61,-62,-63,-64,-65,-39,-84,-31,-32,-33,-21,-45,-19,-81,-82,-83,-86,-87,-46,-47,-22,128,-20,-58,-89,152,-25,-55,-30,-1,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,162,-4,-5,-2,-40,166,-85,168,-24,-54,-6,-23,-35,-89,-42,-44,-3,-89,-88,183,186,-36,-43,-41,-34,]),'GT':([13,15,16,21,22,23,28,29,30,31,32,36,42,43,44,45,49,53,54,60,69,70,71,72,73,80,84,85,86,87,88,89,90,92,95,96,115,119,124,126,127,130,131,132,133,134,135,136,137,138,139,140,141,142,147,148,150,151,152,154,159,162,165,167,169,177,183,184,],[-89,-89,-89,-79,37,-80,41,-73,-89,-89,-53,-89,53,-76,-77,-52,-78,-89,-89,109,-39,-84,-31,-32,-33,-45,-81,-82,-83,-86,-87,-46,-47,-22,-74,-75,-89,109,109,109,109,109,109,109,109,109,109,-13,-14,-15,-16,-17,-18,109,109,164,-40,109,-85,109,-23,-35,-42,109,-89,182,-36,-43,]),'RBRACE':([14,24,25,26,39,47,51,52,55,56,57,58,59,61,62,63,64,65,66,67,69,70,71,72,73,76,80,82,84,85,86,87,88,89,90,92,94,97,98,99,116,123,125,126,127,130,131,132,133,134,135,136,137,138,139,140,141,145,146,147,149,150,152,155,156,158,159,162,163,165,170,171,173,176,179,183,184,185,187,],[-89,38,-89,-72,-71,-89,-70,-89,97,-89,-67,-56,-57,-59,-60,-61,-62,-63,-64,-65,-39,-84,-31,-32,-33,-21,-45,-19,-81,-82,-83,-86,-87,-46,-47,-22,129,-20,-66,-58,-89,-25,-55,-30,-1,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-4,-5,-2,165,-40,-85,-24,-54,-6,-23,-35,-89,-42,-44,-3,-89,-88,184,-36,-43,-41,-34,]),'TIMES':([16,31,47,53,56,58,59,60,61,62,63,64,65,66,67,69,70,71,72,73,75,76,80,81,82,83,84,85,86,87,88,89,90,91,92,97,99,100,101,102,103,104,105,106,107,108,109,110,111,112,114,116,118,119,120,121,123,124,125,126,127,130,131,132,133,134,135,136,137,138,139,140,141,142,147,150,151,152,153,154,155,156,158,159,162,163,165,167,170,172,173,175,176,183,184,185,187,],[31,31,83,31,83,-56,-57,103,-59,-60,-61,-62,-63,-64,-65,-39,-84,-31,-32,-33,83,-21,-45,83,-19,83,-81,-82,-83,-86,-87,-46,-47,83,-22,-20,-58,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,103,83,83,-25,103,-55,-30,103,103,103,103,-10,-11,-12,-13,-14,-15,-16,-17,-18,103,103,-40,103,-85,83,103,-24,-54,-6,-23,-35,83,-42,103,-44,83,83,83,-88,-36,-43,-41,-34,]),'COMMA':([16,18,21,29,31,32,35,43,45,53,69,70,71,72,73,80,84,85,86,87,88,89,90,92,95,126,127,131,132,133,134,135,136,137,138,139,140,141,145,147,150,152,159,162,165,183,184,],[-89,34,36,-73,-89,-53,-48,54,-52,-89,-39,-84,-31,-32,-33,-45,-81,-82,-83,-86,-87,-46,-47,-22,-74,-30,-1,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,163,-2,-40,-85,-23,-35,-42,-36,-43,]),'SEMICOLON':([40,60,69,70,71,72,73,79,80,81,84,85,86,87,88,89,90,92,122,124,126,127,130,131,132,133,134,135,136,137,138,139,140,141,150,152,159,161,162,165,167,183,184,],[51,99,-39,-84,-31,-32,-33,123,-45,125,-81,-82,-83,-86,-87,-46,-47,-22,155,156,-30,-1,158,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-40,-85,-23,170,-35,-42,175,-36,-43,]),'LET':([47,56,58,59,61,62,63,64,65,66,67,69,70,71,72,73,76,80,82,84,85,86,87,88,89,90,92,97,99,120,123,125,126,127,130,131,132,133,134,135,136,137,138,139,140,141,150,152,155,156,158,159,162,165,170,175,176,183,184,185,187,],[68,68,-56,-57,-59,-60,-61,-62,-63,-64,-65,-39,-84,-31,-32,-33,-21,-45,-19,-81,-82,-83,-86,-87,-46,-47,-22,-20,-58,68,-25,-55,-30,-1,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-40,-85,-24,-54,-6,-23,-35,-42,-44,68,-88,-36,-43,-41,-34,]),'IF':([47,56,58,59,61,62,63,64,65,66,67,69,70,71,72,73,76,80,82,84,85,86,87,88,89,90,92,97,99,120,123,125,126,127,130,131,132,133,134,135,136,137,138,139,140,141,150,152,155,156,158,159,162,165,170,175,176,183,184,185,187,],[74,74,-56,-57,-59,-60,-61,-62,-63,-64,-65,-39,-84,-31,-32,-33,-21,-45,-19,-81,-82,-83,-86,-87,-46,-47,-22,-20,-58,74,-25,-55,-30,-1,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-40,-85,-24,-54,-6,-23,-35,-42,-44,74,-88,-36,-43,-41,-34,]),'FOR':([47,56,58,59,61,62,63,64,65,66,67,69,70,71,72,73,76,80,82,84,85,86,87,88,89,90,92,97,99,120,123,125,126,127,130,131,132,133,134,135,136,137,138,139,140,141,150,152,155,156,158,159,162,165,170,175,176,183,184,185,187,],[77,77,-56,-57,-59,-60,-61,-62,-63,-64,-65,-39,-84,-31,-32,-33,-21,-45,-19,-81,-82,-83,-86,-87,-46,-47,-22,-20,-58,77,-25,-55,-30,-1,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-40,-85,-24,-54,-6,-23,-35,-42,-44,77,-88,-36,-43,-41,-34,]),'WHILE':([47,56,58,59,61,62,63,64,65,66,67,69,70,71,72,73,76,80,82,84,85,86,87,88,89,90,92,97,99,120,123,125,126,127,130,131,132,133,134,135,136,137,138,139,140,141,150,152,155,156,158,159,162,165,170,175,176,183,184,185,187,],[78,78,-56,-57,-59,-60,-61,-62,-63,-64,-65,-39,-84,-31,-32,-33,-21,-45,-19,-81,-82,-83,-86,-87,-46,-47,-22,-20,-58,78,-25,-55,-30,-1,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-40,-85,-24,-54,-6,-23,-35,-42,-44,78,-88,-36,-43,-41,-34,]),'BREAK':([47,56,58,59,61,62,63,64,65,66,67,69,70,71,72,73,76,80,82,84,85,86,87,88,89,90,92,97,99,120,123,125,126,127,130,131,132,133,134,135,136,137,138,139,140,141,150,152,155,156,158,159,162,165,170,175,176,183,184,185,187,],[79,79,-56,-57,-59,-60,-61,-62,-63,-64,-65,-39,-84,-31,-32,-33,-21,-45,-19,-81,-82,-83,-86,-87,-46,-47,-22,-20,-58,79,-25,-55,-30,-1,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-40,-85,-24,-54,-6,-23,-35,-42,-44,79,-88,-36,-43,-41,-34,]),'RETURN':([47,56,58,59,61,62,63,64,65,66,67,69,70,71,72,73,76,80,82,84,85,86,87,88,89,90,92,97,99,120,123,125,126,127,130,131,132,133,134,135,136,137,138,139,140,141,150,152,155,156,158,159,162,165,170,175,176,183,184,185,187,],[81,81,-56,-57,-59,-60,-61,-62,-63,-64,-65,-39,-84,-31,-32,-33,-21,-45,-19,-81,-82,-83,-86,-87,-46,-47,-22,-20,-58,81,-25,-55,-30,-1,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-40,-85,-24,-54,-6,-23,-35,-42,-44,81,-88,-36,-43,-41,-34,]),';':([47,56,58,59,61,62,63,64,65,66,67,69,70,71,72,73,76,80,82,84,85,86,87,88,89,90,92,97,99,120,123,125,126,127,130,131,132,133,134,135,136,137,138,139,140,141,150,152,155,156,158,159,162,165,170,175,176,183,184,185,187,],[82,82,-56,-57,-59,-60,-61,-62,-63,-64,-65,-39,-84,-31,-32,-33,-21,-45,-19,-81,-82,-83,-86,-87,-46,-47,-22,-20,-58,82,-25,-55,-30,-1,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-40,-85,-24,-54,-6,-23,-35,-42,-44,82,-88,-36,-43,-41,-34,]),'AMPERSAND':([47,56,58,59,61,62,63,64,65,66,67,69,70,71,72,73,75,76,80,81,82,83,84,85,86,87,88,89,90,91,92,97,99,100,101,102,103,104,105,106,107,108,109,110,111,112,114,116,118,120,121,123,125,126,127,130,131,132,133,134,135,136,137,138,139,140,141,150,152,153,155,156,158,159,162,163,165,170,172,173,175,176,183,184,185,187,],[91,91,-56,-57,-59,-60,-61,-62,-63,-64,-65,-39,-84,-31,-32,-33,91,-21,-45,91,-19,91,-81,-82,-83,-86,-87,-46,-47,91,-22,-20,-58,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,-25,-55,-30,-1,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-40,-85,91,-24,-54,-6,-23,-35,91,-42,-44,91,91,91,-88,-36,-43,-41,-34,]),'INTL':([47,56,58,59,61,62,63,64,65,66,67,69,70,71,72,73,75,76,79,80,81,82,83,84,85,86,87,88,89,90,91,92,97,99,100,101,102,103,104,105,106,107,108,109,110,111,112,114,116,118,120,121,123,125,126,127,130,131,132,133,134,135,136,137,138,139,140,141,150,152,153,155,156,158,159,162,163,165,170,172,173,175,176,183,184,185,187,],[80,80,-56,-57,-59,-60,-61,-62,-63,-64,-65,-39,-84,-31,-32,-33,80,-21,122,-45,80,-19,80,-81,-82,-83,-86,-87,-46,-47,80,-22,-20,-58,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,-25,-55,-30,-1,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-40,-85,80,-24,-54,-6,-23,-35,80,-42,-44,80,80,80,-88,-36,-43,-41,-34,]),'BOOLL':([47,56,58,59,61,62,63,64,65,66,67,69,70,71,72,73,75,76,80,81,82,83,84,85,86,87,88,89,90,91,92,97,99,100,101,102,103,104,105,106,107,108,109,110,111,112,114,116,118,120,121,123,125,126,127,130,131,132,133,134,135,136,137,138,139,140,141,150,152,153,155,156,158,159,162,163,165,170,172,173,175,176,183,184,185,187,],[92,92,-56,-57,-59,-60,-61,-62,-63,-64,-65,-39,-84,-31,-32,-33,92,-21,-45,92,-19,92,-81,-82,-83,-86,-87,-46,-47,92,-22,-20,-58,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,-25,-55,-30,-1,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-40,-85,92,-24,-54,-6,-23,-35,92,-42,-44,92,92,92,-88,-36,-43,-41,-34,]),'ASSIGNMENT':([60,69,70,71,72,73,80,84,85,86,87,88,89,90,92,113,126,127,131,132,133,134,135,136,137,138,139,140,141,150,152,159,162,165,183,184,],[100,-39,-84,-31,-32,-33,-45,-81,-82,-83,-86,-87,-46,-47,-22,143,-30,-1,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-40,-85,-23,-35,-42,-36,-43,]),'PLUS':([60,69,70,71,72,73,80,84,85,86,87,88,89,90,92,119,124,126,127,130,131,132,133,134,135,136,137,138,139,140,141,142,147,150,151,152,154,159,162,165,167,183,184,],[101,-39,-84,-31,-32,-33,-45,-81,-82,-83,-86,-87,-46,-47,-22,101,101,-30,101,101,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,101,101,-40,101,-85,101,-23,-35,-42,101,-36,-43,]),'MINUS':([60,69,70,71,72,73,80,84,85,86,87,88,89,90,92,119,124,126,127,130,131,132,133,134,135,136,137,138,139,140,141,142,147,150,151,152,154,159,162,165,167,183,184,],[102,-39,-84,-31,-32,-33,-45,-81,-82,-83,-86,-87,-46,-47,-22,102,102,-30,102,102,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,102,102,-40,102,-85,102,-23,-35,-42,102,-36,-43,]),'DIVIDE':([60,69,70,71,72,73,80,84,85,86,87,88,89,90,92,119,124,126,127,130,131,132,133,134,135,136,137,138,139,140,141,142,147,150,151,152,154,159,162,165,167,183,184,],[104,-39,-84,-31,-32,-33,-45,-81,-82,-83,-86,-87,-46,-47,-22,104,104,-30,104,104,104,104,-10,-11,-12,-13,-14,-15,-16,-17,-18,104,104,-40,104,-85,104,-23,-35,-42,104,-36,-43,]),'MOD':([60,69,70,71,72,73,80,84,85,86,87,88,89,90,92,119,124,126,127,130,131,132,133,134,135,136,137,138,139,140,141,142,147,150,151,152,154,159,162,165,167,183,184,],[105,-39,-84,-31,-32,-33,-45,-81,-82,-83,-86,-87,-46,-47,-22,105,105,-30,105,105,105,105,-10,-11,-12,-13,-14,-15,-16,-17,-18,105,105,-40,105,-85,105,-23,-35,-42,105,-36,-43,]),'LEQ':([60,69,70,71,72,73,80,84,85,86,87,88,89,90,92,119,124,126,127,130,131,132,133,134,135,136,137,138,139,140,141,142,147,150,151,152,154,159,162,165,167,183,184,],[106,-39,-84,-31,-32,-33,-45,-81,-82,-83,-86,-87,-46,-47,-22,106,106,106,106,106,106,106,106,106,106,-13,-14,-15,-16,-17,-18,106,106,-40,106,-85,106,-23,-35,-42,106,-36,-43,]),'GEQ':([60,69,70,71,72,73,80,84,85,86,87,88,89,90,92,119,124,126,127,130,131,132,133,134,135,136,137,138,139,140,141,142,147,150,151,152,154,159,162,165,167,183,184,],[107,-39,-84,-31,-32,-33,-45,-81,-82,-83,-86,-87,-46,-47,-22,107,107,107,107,107,107,107,107,107,107,-13,-14,-15,-16,-17,-18,107,107,-40,107,-85,107,-23,-35,-42,107,-36,-43,]),'EQ':([60,69,70,71,72,73,80,84,85,86,87,88,89,90,92,119,124,126,127,130,131,132,133,134,135,136,137,138,139,140,141,142,147,150,151,152,154,159,162,165,167,183,184,],[110,-39,-84,-31,-32,-33,-45,-81,-82,-83,-86,-87,-46,-47,-22,110,110,110,110,110,110,110,110,110,110,-13,-14,-15,-16,-17,-18,110,110,-40,110,-85,110,-23,-35,-42,110,-36,-43,]),'NE':([60,69,70,71,72,73,80,84,85,86,87,88,89,90,92,119,124,126,127,130,131,132,133,134,135,136,137,138,139,140,141,142,147,150,151,152,154,159,162,165,167,183,184,],[111,-39,-84,-31,-32,-33,-45,-81,-82,-83,-86,-87,-46,-47,-22,111,111,111,111,111,111,111,111,111,111,-13,-14,-15,-16,-17,-18,111,111,-40,111,-85,111,-23,-35,-42,111,-36,-43,]),'LBRACKET':([60,69,70,71,72,73,80,84,85,86,87,88,89,90,92,119,124,126,127,130,131,132,133,134,135,136,137,138,139,140,141,142,147,150,151,152,154,159,162,165,167,183,184,],[112,-39,-84,-31,-32,-33,-45,-81,-82,-83,-86,-87,-46,-47,-22,112,112,-30,112,112,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,112,112,-40,112,-85,112,-23,-35,-42,112,-36,-43,]),'DOT':([69,73,150,],[-39,117,-40,]),'RBRACKET':([69,70,71,72,73,80,84,85,86,87,88,89,90,92,126,127,131,132,133,134,135,136,137,138,139,140,141,142,150,152,159,162,165,183,184,],[-39,-84,-31,-32,-33,-45,-81,-82,-83,-86,-87,-46,-47,-22,-30,-1,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,159,-40,-85,-23,-35,-42,-36,-43,]),'ELSE':([97,174,],[-20,180,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'CompilationUnit':([0,],[1,]),'DefinitionListR':([0,3,4,],[2,8,9,]),'FunctionDefinition':([0,3,4,],[3,3,3,]),'StructDefinition':([0,3,4,],[4,4,4,]),'empty':([0,3,4,12,13,14,15,16,25,30,31,34,36,47,50,52,53,54,56,114,115,116,163,169,172,173,],[5,5,5,19,23,26,23,32,26,44,32,19,23,57,19,26,32,44,57,146,44,146,146,44,146,146,]),'ParameterListR':([12,34,50,],[17,48,93,]),'Parameter':([12,34,50,],[18,18,18,]),'Type':([12,14,25,30,34,50,52,54,115,169,],[20,27,27,43,20,20,27,43,43,43,]),'TypeParameterListR':([13,15,36,],[22,28,49,]),'StructMemberListR':([14,25,52,],[24,39,94,]),'StructMember':([14,25,52,],[25,25,25,]),'PointerListR':([16,31,53,],[29,45,95,]),'TypeArgumentListR':([30,54,115,169,],[42,96,148,177,]),'Block':([33,47,56,120,128,166,168,175,180,186,],[46,76,76,76,157,174,176,76,185,187,]),'StatementListR':([47,56,],[55,98,]),'Statement':([47,56,120,175,],[56,56,153,181,]),'AssignmentStatement':([47,56,120,175,],[58,58,58,58,]),'InitStatement':([47,56,120,175,],[59,59,59,59,]),'Expression':([47,56,75,81,83,91,100,101,102,103,104,105,106,107,108,109,110,111,112,114,116,118,120,121,153,163,172,173,175,],[60,60,119,124,126,127,130,131,132,133,134,135,136,137,138,139,140,141,142,147,147,151,60,154,167,147,147,147,60,]),'IfElseStatement':([47,56,120,175,],[61,61,61,61,]),'ForStatement':([47,56,120,175,],[62,62,62,62,]),'WhileStatement':([47,56,120,175,],[63,63,63,63,]),'BreakStatement':([47,56,120,175,],[64,64,64,64,]),'ReturnStatement':([47,56,120,175,],[65,65,65,65,]),'BlockStatement':([47,56,120,175,],[66,66,66,66,]),'BlankStatement':([47,56,120,175,],[67,67,67,67,]),'InitCall':([47,56,75,81,83,91,100,101,102,103,104,105,106,107,108,109,110,111,112,114,116,118,120,121,143,153,163,172,173,175,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,161,70,70,70,70,70,]),'BinaryExpression':([47,56,75,81,83,91,100,101,102,103,104,105,106,107,108,109,110,111,112,114,116,118,120,121,153,163,172,173,175,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'UnaryExpression':([47,56,75,81,83,91,100,101,102,103,104,105,106,107,108,109,110,111,112,114,116,118,120,121,153,163,172,173,175,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'IdExpression':([47,56,75,81,83,91,100,101,102,103,104,105,106,107,108,109,110,111,112,114,116,118,120,121,153,163,172,173,175,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'Literal':([47,56,75,81,83,91,100,101,102,103,104,105,106,107,108,109,110,111,112,114,116,118,120,121,153,163,172,173,175,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'FunctionCall':([47,56,75,81,83,91,100,101,102,103,104,105,106,107,108,109,110,111,112,114,116,118,120,121,153,163,172,173,175,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'BracketCall':([47,56,75,81,83,91,100,101,102,103,104,105,106,107,108,109,110,111,112,114,116,118,120,121,153,163,172,173,175,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'DereferenceExpression':([47,56,75,81,83,91,100,101,102,103,104,105,106,107,108,109,110,111,112,114,116,118,120,121,153,163,172,173,175,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'AddressExpression':([47,56,75,81,83,91,100,101,102,103,104,105,106,107,108,109,110,111,112,114,116,118,120,121,153,163,172,173,175,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'IntLiteral':([47,56,75,81,83,91,100,101,102,103,104,105,106,107,108,109,110,111,112,114,116,118,120,121,153,163,172,173,175,],[89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,]),'BoolLiteral':([47,56,75,81,83,91,100,101,102,103,104,105,106,107,108,109,110,111,112,114,116,118,120,121,153,163,172,173,175,],[90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'ArgumentListR':([114,116,163,172,173,],[144,149,171,178,179,]),'Argument':([114,116,163,172,173,],[145,145,145,145,145,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> CompilationUnit","S'",1,None,None,None),
  ('AddressExpression -> AMPERSAND Expression','AddressExpression',2,"p_<class 'parser_rules.AddressExpression'>",'parser.py',28),
  ('Argument -> Expression','Argument',1,"p_<class 'parser_rules.Argument'>",'parser.py',28),
  ('ArgumentListR -> Argument COMMA ArgumentListR','ArgumentListR',3,"p_<class 'parser_rules.ArgumentListR'>",'parser.py',28),
  ('ArgumentListR -> Argument','ArgumentListR',1,"p_<class 'parser_rules.ArgumentListR'>",'parser.py',29),
  ('ArgumentListR -> empty','ArgumentListR',1,"p_<class 'parser_rules.ArgumentListR'>",'parser.py',30),
  ('AssignmentStatement -> Expression ASSIGNMENT Expression SEMICOLON','AssignmentStatement',4,"p_<class 'parser_rules.AssignmentStatement'>",'parser.py',28),
  ('AssignmentStatement -> Expression ASSIGNMENT Expression','AssignmentStatement',3,"p_<class 'parser_rules.AssignmentStatement'>",'parser.py',29),
  ('BinaryExpression -> Expression PLUS Expression','BinaryExpression',3,"p_<class 'parser_rules.BinaryExpressionClassic'>",'parser.py',28),
  ('BinaryExpression -> Expression MINUS Expression','BinaryExpression',3,"p_<class 'parser_rules.BinaryExpressionClassic'>",'parser.py',29),
  ('BinaryExpression -> Expression TIMES Expression','BinaryExpression',3,"p_<class 'parser_rules.BinaryExpressionClassic'>",'parser.py',30),
  ('BinaryExpression -> Expression DIVIDE Expression','BinaryExpression',3,"p_<class 'parser_rules.BinaryExpressionClassic'>",'parser.py',31),
  ('BinaryExpression -> Expression MOD Expression','BinaryExpression',3,"p_<class 'parser_rules.BinaryExpressionClassic'>",'parser.py',32),
  ('BinaryExpression -> Expression LEQ Expression','BinaryExpression',3,"p_<class 'parser_rules.BinaryExpressionClassic'>",'parser.py',33),
  ('BinaryExpression -> Expression GEQ Expression','BinaryExpression',3,"p_<class 'parser_rules.BinaryExpressionClassic'>",'parser.py',34),
  ('BinaryExpression -> Expression LT Expression','BinaryExpression',3,"p_<class 'parser_rules.BinaryExpressionClassic'>",'parser.py',35),
  ('BinaryExpression -> Expression GT Expression','BinaryExpression',3,"p_<class 'parser_rules.BinaryExpressionClassic'>",'parser.py',36),
  ('BinaryExpression -> Expression EQ Expression','BinaryExpression',3,"p_<class 'parser_rules.BinaryExpressionClassic'>",'parser.py',37),
  ('BinaryExpression -> Expression NE Expression','BinaryExpression',3,"p_<class 'parser_rules.BinaryExpressionClassic'>",'parser.py',38),
  ('BlankStatement -> ;','BlankStatement',1,"p_<class 'parser_rules.BlankStatement'>",'parser.py',28),
  ('Block -> LBRACE StatementListR RBRACE','Block',3,"p_<class 'parser_rules.Block'>",'parser.py',28),
  ('BlockStatement -> Block','BlockStatement',1,"p_<class 'parser_rules.BlockStatement'>",'parser.py',28),
  ('BoolLiteral -> BOOLL','BoolLiteral',1,"p_<class 'parser_rules.BoolLiteral'>",'parser.py',28),
  ('BracketCall -> Expression LBRACKET Expression RBRACKET','BracketCall',4,"p_<class 'parser_rules.BracketCall'>",'parser.py',28),
  ('BreakStatement -> BREAK INTL SEMICOLON','BreakStatement',3,"p_<class 'parser_rules.BreakStatement'>",'parser.py',28),
  ('BreakStatement -> BREAK SEMICOLON','BreakStatement',2,"p_<class 'parser_rules.BreakStatement'>",'parser.py',29),
  ('CompilationUnit -> DefinitionListR','CompilationUnit',1,"p_<class 'parser_rules.CompilationUnit'>",'parser.py',28),
  ('DefinitionListR -> FunctionDefinition DefinitionListR','DefinitionListR',2,"p_<class 'parser_rules.DefinitionListR'>",'parser.py',28),
  ('DefinitionListR -> StructDefinition DefinitionListR','DefinitionListR',2,"p_<class 'parser_rules.DefinitionListR'>",'parser.py',29),
  ('DefinitionListR -> empty','DefinitionListR',1,"p_<class 'parser_rules.DefinitionListR'>",'parser.py',30),
  ('DereferenceExpression -> TIMES Expression','DereferenceExpression',2,"p_<class 'parser_rules.DereferenceExpression'>",'parser.py',28),
  ('Expression -> BinaryExpression','Expression',1,"p_<class 'parser_rules.Expression'>",'parser.py',28),
  ('Expression -> UnaryExpression','Expression',1,"p_<class 'parser_rules.Expression'>",'parser.py',29),
  ('Expression -> IdExpression','Expression',1,"p_<class 'parser_rules.Expression'>",'parser.py',30),
  ('ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block','ForStatement',8,"p_<class 'parser_rules.ForStatement'>",'parser.py',28),
  ('FunctionCall -> ID LPAREN ArgumentListR RPAREN','FunctionCall',4,"p_<class 'parser_rules.FunctionCall'>",'parser.py',28),
  ('FunctionCall -> ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN','FunctionCall',7,"p_<class 'parser_rules.FunctionCall'>",'parser.py',29),
  ('FunctionDefinition -> FN ID LPAREN ParameterListR RPAREN Block','FunctionDefinition',6,"p_<class 'parser_rules.FunctionDefinition'>",'parser.py',28),
  ('FunctionDefinition -> FN ID LT TypeParameterListR GT LPAREN ParameterListR RPAREN Block','FunctionDefinition',9,"p_<class 'parser_rules.FunctionDefinition'>",'parser.py',29),
  ('IdExpression -> ID','IdExpression',1,"p_<class 'parser_rules.IdExpression'>",'parser.py',28),
  ('IdExpression -> IdExpression DOT ID','IdExpression',3,"p_<class 'parser_rules.IdExpression'>",'parser.py',29),
  ('IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block','IfElseStatement',7,"p_<class 'parser_rules.IfElseStatement'>",'parser.py',28),
  ('InitCall -> ID LBRACE ArgumentListR RBRACE','InitCall',4,"p_<class 'parser_rules.InitCall'>",'parser.py',28),
  ('InitCall -> ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE','InitCall',7,"p_<class 'parser_rules.InitCall'>",'parser.py',29),
  ('InitStatement -> LET ID ASSIGNMENT InitCall SEMICOLON','InitStatement',5,"p_<class 'parser_rules.InitStatement'>",'parser.py',28),
  ('IntLiteral -> INTL','IntLiteral',1,"p_<class 'parser_rules.IntLiteral'>",'parser.py',28),
  ('Literal -> IntLiteral','Literal',1,"p_<class 'parser_rules.Literal'>",'parser.py',28),
  ('Literal -> BoolLiteral','Literal',1,"p_<class 'parser_rules.Literal'>",'parser.py',29),
  ('Parameter -> Type ID','Parameter',2,"p_<class 'parser_rules.Parameter'>",'parser.py',28),
  ('ParameterListR -> Parameter COMMA ParameterListR','ParameterListR',3,"p_<class 'parser_rules.ParameterListR'>",'parser.py',28),
  ('ParameterListR -> Parameter','ParameterListR',1,"p_<class 'parser_rules.ParameterListR'>",'parser.py',29),
  ('ParameterListR -> empty','ParameterListR',1,"p_<class 'parser_rules.ParameterListR'>",'parser.py',30),
  ('PointerListR -> TIMES PointerListR','PointerListR',2,"p_<class 'parser_rules.PointerListR'>",'parser.py',28),
  ('PointerListR -> empty','PointerListR',1,"p_<class 'parser_rules.PointerListR'>",'parser.py',29),
  ('ReturnStatement -> RETURN Expression SEMICOLON','ReturnStatement',3,"p_<class 'parser_rules.ReturnStatement'>",'parser.py',28),
  ('ReturnStatement -> RETURN SEMICOLON','ReturnStatement',2,"p_<class 'parser_rules.ReturnStatement'>",'parser.py',29),
  ('Statement -> AssignmentStatement','Statement',1,"p_<class 'parser_rules.Statement'>",'parser.py',28),
  ('Statement -> InitStatement','Statement',1,"p_<class 'parser_rules.Statement'>",'parser.py',29),
  ('Statement -> Expression SEMICOLON','Statement',2,"p_<class 'parser_rules.Statement'>",'parser.py',30),
  ('Statement -> IfElseStatement','Statement',1,"p_<class 'parser_rules.Statement'>",'parser.py',31),
  ('Statement -> ForStatement','Statement',1,"p_<class 'parser_rules.Statement'>",'parser.py',32),
  ('Statement -> WhileStatement','Statement',1,"p_<class 'parser_rules.Statement'>",'parser.py',33),
  ('Statement -> BreakStatement','Statement',1,"p_<class 'parser_rules.Statement'>",'parser.py',34),
  ('Statement -> ReturnStatement','Statement',1,"p_<class 'parser_rules.Statement'>",'parser.py',35),
  ('Statement -> BlockStatement','Statement',1,"p_<class 'parser_rules.Statement'>",'parser.py',36),
  ('Statement -> BlankStatement','Statement',1,"p_<class 'parser_rules.Statement'>",'parser.py',37),
  ('StatementListR -> Statement StatementListR','StatementListR',2,"p_<class 'parser_rules.StatementListR'>",'parser.py',28),
  ('StatementListR -> empty','StatementListR',1,"p_<class 'parser_rules.StatementListR'>",'parser.py',29),
  ('StructDefinition -> STRUCT ID LBRACE StructMemberListR RBRACE','StructDefinition',5,"p_<class 'parser_rules.StructDefinition'>",'parser.py',28),
  ('StructDefinition -> STRUCT ID LT TypeParameterListR GT LBRACE StructMemberListR RBRACE','StructDefinition',8,"p_<class 'parser_rules.StructDefinition'>",'parser.py',29),
  ('StructMember -> Type ID SEMICOLON','StructMember',3,"p_<class 'parser_rules.StructMember'>",'parser.py',28),
  ('StructMemberListR -> StructMember StructMemberListR','StructMemberListR',2,"p_<class 'parser_rules.StructMemberListR'>",'parser.py',28),
  ('StructMemberListR -> empty','StructMemberListR',1,"p_<class 'parser_rules.StructMemberListR'>",'parser.py',29),
  ('Type -> ID PointerListR','Type',2,"p_<class 'parser_rules.Type'>",'parser.py',28),
  ('Type -> ID LT TypeArgumentListR GT PointerListR','Type',5,"p_<class 'parser_rules.Type'>",'parser.py',29),
  ('TypeArgumentListR -> Type COMMA TypeArgumentListR','TypeArgumentListR',3,"p_<class 'parser_rules.TypeArgumentListR'>",'parser.py',28),
  ('TypeArgumentListR -> Type','TypeArgumentListR',1,"p_<class 'parser_rules.TypeArgumentListR'>",'parser.py',29),
  ('TypeArgumentListR -> empty','TypeArgumentListR',1,"p_<class 'parser_rules.TypeArgumentListR'>",'parser.py',30),
  ('TypeParameterListR -> ID COMMA TypeParameterListR','TypeParameterListR',3,"p_<class 'parser_rules.TypeParameterListR'>",'parser.py',28),
  ('TypeParameterListR -> ID','TypeParameterListR',1,"p_<class 'parser_rules.TypeParameterListR'>",'parser.py',29),
  ('TypeParameterListR -> empty','TypeParameterListR',1,"p_<class 'parser_rules.TypeParameterListR'>",'parser.py',30),
  ('UnaryExpression -> Literal','UnaryExpression',1,"p_<class 'parser_rules.UnaryExpression'>",'parser.py',28),
  ('UnaryExpression -> FunctionCall','UnaryExpression',1,"p_<class 'parser_rules.UnaryExpression'>",'parser.py',29),
  ('UnaryExpression -> BracketCall','UnaryExpression',1,"p_<class 'parser_rules.UnaryExpression'>",'parser.py',30),
  ('UnaryExpression -> InitCall','UnaryExpression',1,"p_<class 'parser_rules.UnaryExpression'>",'parser.py',31),
  ('UnaryExpression -> LPAREN Expression RPAREN','UnaryExpression',3,"p_<class 'parser_rules.UnaryExpression'>",'parser.py',32),
  ('UnaryExpression -> DereferenceExpression','UnaryExpression',1,"p_<class 'parser_rules.UnaryExpression'>",'parser.py',33),
  ('UnaryExpression -> AddressExpression','UnaryExpression',1,"p_<class 'parser_rules.UnaryExpression'>",'parser.py',34),
  ('WhileStatement -> WHILE LPAREN Expression RPAREN Block','WhileStatement',5,"p_<class 'parser_rules.WhileStatement'>",'parser.py',28),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',35),
]
