
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "CompilationUnitBOOLL BREAK CHARL DEC ELSE EQ FOR GEQ GT ID IF INC INTL LEQ LT NEQ RETURN WHILEBinaryExpressionPrio3 : UnaryExpression '*' BinaryExpressionPrio3\n                             | UnaryExpression '/' BinaryExpressionPrio3\n                             | UnaryExpression '%' BinaryExpressionPrio3\n                             | UnaryExpression\n    BinaryExpressionPrio4 : BinaryExpressionPrio3 '+' BinaryExpressionPrio4\n                             | BinaryExpressionPrio3 '-' BinaryExpressionPrio4\n                             | BinaryExpressionPrio3\n    BinaryExpressionPrio6 : BinaryExpressionPrio4 LEQ BinaryExpressionPrio6\n                             | BinaryExpressionPrio4 GEQ BinaryExpressionPrio6\n                             | BinaryExpressionPrio4 LT BinaryExpressionPrio6\n                             | BinaryExpressionPrio4 GT BinaryExpressionPrio6\n                             | BinaryExpressionPrio4\n    BinaryExpressionPrio7 : BinaryExpressionPrio6 NEQ BinaryExpressionPrio7\n                             | BinaryExpressionPrio6 EQ BinaryExpressionPrio7\n                             | BinaryExpressionPrio6\n    Expression : BinaryExpressionPrio7BoolLiteral : BOOLLCharLiteral : CHARLIntLiteral : INTLLiteral : IntLiteral\n               | BoolLiteral\n               | CharLiteral\n    AssignmentStatement : ID '=' Expression ';'BreakStatement : BREAK INTL ';'\n                      | BREAK ';'\n    DeclarationAssignmentStatement : TypeName ID '=' Expression ';'DeclarationStatement : TypeName ID ';'ForStatement : FOR '(' Statement ';' Expression ';' Statement ')' Block\n    IfElseStatement : IF '(' Expression ')' Block ELSE Block\n    ReturnStatement : RETURN Expression ';'\n                       | RETURN ';'\n    Statement : AssignmentStatement\n                 | DeclarationAssignmentStatement\n                 | Expression ';'\n                 | DeclarationStatement\n                 | IfElseStatement\n                 | ForStatement\n                 | WhileStatement\n                 | BreakStatement\n                 | ReturnStatement\n    StatementListR : Statement StatementListR\n                      | empty\n    WhileStatement : WHILE '(' Expression ')' Block\n    Argument : ExpressionArgumentListR : Argument ',' ArgumentListR\n                     | Argument\n                     | empty\n    Block : '{' StatementListR '}'CompilationUnit : DefinitionListRDefinitionListR : FunctionDefinition DefinitionListR\n                       | empty\n    FunctionDefinition : TypeName ID '(' ParameterListR ')' BlockParameter : TypeName IDParameterListR : Parameter ',' ParameterListR\n                     | Parameter\n                     | empty\n    TypeName : IDVarName : IDDecrementAfter : VarName DECDecrementBefore : DEC VarNameFunctionCall : VarName '(' ArgumentListR ')'IncrementAfter : VarName INCIncrementBefore : INC VarNameNegate : '-' VarNameUnaryExpression : Negate\n                       | IncrementAfter\n                       | IncrementBefore\n                       | DecrementAfter\n                       | DecrementBefore\n                       | FunctionCall\n                       | VarName\n                       | Literal\n                       | '(' Expression ')'\n    empty :"
    
_lr_action_items = {'$end':([0,1,2,3,4,7,17,62,],[-74,0,-49,-74,-51,-50,-52,-48,]),'ID':([0,3,5,6,9,10,16,17,18,21,23,24,26,27,28,29,30,31,32,33,36,41,45,55,56,62,64,65,67,70,71,73,75,76,77,78,79,80,81,82,83,85,86,87,90,94,95,100,101,117,120,123,124,127,130,131,134,],[6,6,8,-57,6,14,6,-52,32,32,-32,-33,-35,-36,-37,-38,-39,-40,-57,66,69,69,69,69,69,-48,-34,69,69,32,69,-25,-31,69,69,69,69,69,69,69,69,69,69,69,69,69,-27,-24,-30,-23,69,69,-26,-43,32,-29,-28,]),'(':([8,18,21,23,24,26,27,28,29,30,31,32,35,36,37,38,41,53,62,64,65,67,69,70,71,73,75,76,77,78,79,80,81,82,83,85,86,87,90,94,95,100,101,117,120,123,124,127,130,131,134,],[9,36,36,-32,-33,-35,-36,-37,-38,-39,-40,-58,67,36,70,71,36,90,-48,-34,36,36,-58,36,36,-25,-31,36,36,36,36,36,36,36,36,36,36,36,36,36,-27,-24,-30,-23,36,36,-26,-43,36,-29,-28,]),')':([9,11,12,13,14,16,19,23,24,26,27,28,29,30,31,34,40,42,43,44,46,47,48,49,50,51,52,53,54,57,58,59,60,61,62,64,68,69,73,75,84,88,89,90,91,92,95,96,97,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,122,123,124,127,128,131,132,134,],[-74,15,-55,-56,-53,-74,-54,-32,-33,-35,-36,-37,-38,-39,-40,-16,-19,-15,-12,-7,-4,-65,-66,-67,-68,-69,-70,-71,-72,-20,-21,-22,-17,-18,-48,-34,97,-58,-25,-31,-64,-62,-59,-74,-63,-60,-27,119,-73,121,-24,-30,-13,-14,-8,-9,-10,-11,-5,-6,-1,-2,-3,122,-46,-47,-44,-23,-61,-74,-26,-43,-45,-29,133,-28,]),',':([12,14,34,40,42,43,44,46,47,48,49,50,51,52,53,54,57,58,59,60,61,69,84,88,89,91,92,97,102,103,104,105,106,107,108,109,110,111,112,114,116,122,],[16,-53,-16,-19,-15,-12,-7,-4,-65,-66,-67,-68,-69,-70,-71,-72,-20,-21,-22,-17,-18,-58,-64,-62,-59,-63,-60,-73,-13,-14,-8,-9,-10,-11,-5,-6,-1,-2,-3,123,-44,-61,]),'{':([15,119,121,129,133,],[18,18,18,18,18,]),'}':([18,20,21,22,23,24,26,27,28,29,30,31,62,63,64,73,75,95,100,101,117,124,127,131,134,],[-74,62,-74,-42,-32,-33,-35,-36,-37,-38,-39,-40,-48,-41,-34,-25,-31,-27,-24,-30,-23,-26,-43,-29,-28,]),'IF':([18,21,23,24,26,27,28,29,30,31,62,64,70,73,75,95,100,101,117,124,127,130,131,134,],[35,35,-32,-33,-35,-36,-37,-38,-39,-40,-48,-34,35,-25,-31,-27,-24,-30,-23,-26,-43,35,-29,-28,]),'FOR':([18,21,23,24,26,27,28,29,30,31,62,64,70,73,75,95,100,101,117,124,127,130,131,134,],[37,37,-32,-33,-35,-36,-37,-38,-39,-40,-48,-34,37,-25,-31,-27,-24,-30,-23,-26,-43,37,-29,-28,]),'WHILE':([18,21,23,24,26,27,28,29,30,31,62,64,70,73,75,95,100,101,117,124,127,130,131,134,],[38,38,-32,-33,-35,-36,-37,-38,-39,-40,-48,-34,38,-25,-31,-27,-24,-30,-23,-26,-43,38,-29,-28,]),'BREAK':([18,21,23,24,26,27,28,29,30,31,62,64,70,73,75,95,100,101,117,124,127,130,131,134,],[39,39,-32,-33,-35,-36,-37,-38,-39,-40,-48,-34,39,-25,-31,-27,-24,-30,-23,-26,-43,39,-29,-28,]),'RETURN':([18,21,23,24,26,27,28,29,30,31,62,64,70,73,75,95,100,101,117,124,127,130,131,134,],[41,41,-32,-33,-35,-36,-37,-38,-39,-40,-48,-34,41,-25,-31,-27,-24,-30,-23,-26,-43,41,-29,-28,]),'-':([18,21,23,24,26,27,28,29,30,31,32,36,40,41,44,46,47,48,49,50,51,52,53,54,57,58,59,60,61,62,64,65,67,69,70,71,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,95,97,100,101,110,111,112,117,120,122,123,124,127,130,131,134,],[45,45,-32,-33,-35,-36,-37,-38,-39,-40,-58,45,-19,45,83,-4,-65,-66,-67,-68,-69,-70,-71,-72,-20,-21,-22,-17,-18,-48,-34,45,45,-58,45,45,-25,-31,45,45,45,45,45,45,45,45,-64,45,45,45,-62,-59,45,-63,-60,45,-27,-73,-24,-30,-1,-2,-3,-23,45,-61,45,-26,-43,45,-29,-28,]),'INC':([18,21,23,24,26,27,28,29,30,31,32,36,41,53,62,64,65,67,69,70,71,73,75,76,77,78,79,80,81,82,83,85,86,87,90,94,95,100,101,117,120,123,124,127,130,131,134,],[55,55,-32,-33,-35,-36,-37,-38,-39,-40,-58,55,55,88,-48,-34,55,55,-58,55,55,-25,-31,55,55,55,55,55,55,55,55,55,55,55,55,55,-27,-24,-30,-23,55,55,-26,-43,55,-29,-28,]),'DEC':([18,21,23,24,26,27,28,29,30,31,32,36,41,53,62,64,65,67,69,70,71,73,75,76,77,78,79,80,81,82,83,85,86,87,90,94,95,100,101,117,120,123,124,127,130,131,134,],[56,56,-32,-33,-35,-36,-37,-38,-39,-40,-58,56,56,89,-48,-34,56,56,-58,56,56,-25,-31,56,56,56,56,56,56,56,56,56,56,56,56,56,-27,-24,-30,-23,56,56,-26,-43,56,-29,-28,]),'INTL':([18,21,23,24,26,27,28,29,30,31,36,39,41,62,64,65,67,70,71,73,75,76,77,78,79,80,81,82,83,85,86,87,90,94,95,100,101,117,120,123,124,127,130,131,134,],[40,40,-32,-33,-35,-36,-37,-38,-39,-40,40,72,40,-48,-34,40,40,40,40,-25,-31,40,40,40,40,40,40,40,40,40,40,40,40,40,-27,-24,-30,-23,40,40,-26,-43,40,-29,-28,]),'BOOLL':([18,21,23,24,26,27,28,29,30,31,36,41,62,64,65,67,70,71,73,75,76,77,78,79,80,81,82,83,85,86,87,90,94,95,100,101,117,120,123,124,127,130,131,134,],[60,60,-32,-33,-35,-36,-37,-38,-39,-40,60,60,-48,-34,60,60,60,60,-25,-31,60,60,60,60,60,60,60,60,60,60,60,60,60,-27,-24,-30,-23,60,60,-26,-43,60,-29,-28,]),'CHARL':([18,21,23,24,26,27,28,29,30,31,36,41,62,64,65,67,70,71,73,75,76,77,78,79,80,81,82,83,85,86,87,90,94,95,100,101,117,120,123,124,127,130,131,134,],[61,61,-32,-33,-35,-36,-37,-38,-39,-40,61,61,-48,-34,61,61,61,61,-25,-31,61,61,61,61,61,61,61,61,61,61,61,61,61,-27,-24,-30,-23,61,61,-26,-43,61,-29,-28,]),';':([23,24,25,26,27,28,29,30,31,32,34,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,57,58,59,60,61,62,64,66,69,72,73,74,75,84,88,89,91,92,93,95,97,98,100,101,102,103,104,105,106,107,108,109,110,111,112,117,118,122,124,126,127,131,134,],[-32,-33,64,-35,-36,-37,-38,-39,-40,-58,-16,73,-19,75,-15,-12,-7,-4,-65,-66,-67,-68,-69,-70,-71,-72,-20,-21,-22,-17,-18,-48,-34,95,-58,100,-25,101,-31,-64,-62,-59,-63,-60,117,-27,-73,120,-24,-30,-13,-14,-8,-9,-10,-11,-5,-6,-1,-2,-3,-23,124,-61,-26,130,-43,-29,-28,]),'=':([32,66,],[65,94,]),'*':([32,40,46,47,48,49,50,51,52,53,54,57,58,59,60,61,69,84,88,89,91,92,97,122,],[-58,-19,85,-65,-66,-67,-68,-69,-70,-71,-72,-20,-21,-22,-17,-18,-58,-64,-62,-59,-63,-60,-73,-61,]),'/':([32,40,46,47,48,49,50,51,52,53,54,57,58,59,60,61,69,84,88,89,91,92,97,122,],[-58,-19,86,-65,-66,-67,-68,-69,-70,-71,-72,-20,-21,-22,-17,-18,-58,-64,-62,-59,-63,-60,-73,-61,]),'%':([32,40,46,47,48,49,50,51,52,53,54,57,58,59,60,61,69,84,88,89,91,92,97,122,],[-58,-19,87,-65,-66,-67,-68,-69,-70,-71,-72,-20,-21,-22,-17,-18,-58,-64,-62,-59,-63,-60,-73,-61,]),'+':([32,40,44,46,47,48,49,50,51,52,53,54,57,58,59,60,61,69,84,88,89,91,92,97,110,111,112,122,],[-58,-19,82,-4,-65,-66,-67,-68,-69,-70,-71,-72,-20,-21,-22,-17,-18,-58,-64,-62,-59,-63,-60,-73,-1,-2,-3,-61,]),'LEQ':([32,40,43,44,46,47,48,49,50,51,52,53,54,57,58,59,60,61,69,84,88,89,91,92,97,108,109,110,111,112,122,],[-58,-19,78,-7,-4,-65,-66,-67,-68,-69,-70,-71,-72,-20,-21,-22,-17,-18,-58,-64,-62,-59,-63,-60,-73,-5,-6,-1,-2,-3,-61,]),'GEQ':([32,40,43,44,46,47,48,49,50,51,52,53,54,57,58,59,60,61,69,84,88,89,91,92,97,108,109,110,111,112,122,],[-58,-19,79,-7,-4,-65,-66,-67,-68,-69,-70,-71,-72,-20,-21,-22,-17,-18,-58,-64,-62,-59,-63,-60,-73,-5,-6,-1,-2,-3,-61,]),'LT':([32,40,43,44,46,47,48,49,50,51,52,53,54,57,58,59,60,61,69,84,88,89,91,92,97,108,109,110,111,112,122,],[-58,-19,80,-7,-4,-65,-66,-67,-68,-69,-70,-71,-72,-20,-21,-22,-17,-18,-58,-64,-62,-59,-63,-60,-73,-5,-6,-1,-2,-3,-61,]),'GT':([32,40,43,44,46,47,48,49,50,51,52,53,54,57,58,59,60,61,69,84,88,89,91,92,97,108,109,110,111,112,122,],[-58,-19,81,-7,-4,-65,-66,-67,-68,-69,-70,-71,-72,-20,-21,-22,-17,-18,-58,-64,-62,-59,-63,-60,-73,-5,-6,-1,-2,-3,-61,]),'NEQ':([32,40,42,43,44,46,47,48,49,50,51,52,53,54,57,58,59,60,61,69,84,88,89,91,92,97,104,105,106,107,108,109,110,111,112,122,],[-58,-19,76,-12,-7,-4,-65,-66,-67,-68,-69,-70,-71,-72,-20,-21,-22,-17,-18,-58,-64,-62,-59,-63,-60,-73,-8,-9,-10,-11,-5,-6,-1,-2,-3,-61,]),'EQ':([32,40,42,43,44,46,47,48,49,50,51,52,53,54,57,58,59,60,61,69,84,88,89,91,92,97,104,105,106,107,108,109,110,111,112,122,],[-58,-19,77,-12,-7,-4,-65,-66,-67,-68,-69,-70,-71,-72,-20,-21,-22,-17,-18,-58,-64,-62,-59,-63,-60,-73,-8,-9,-10,-11,-5,-6,-1,-2,-3,-61,]),'ELSE':([62,125,],[-48,129,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'CompilationUnit':([0,],[1,]),'DefinitionListR':([0,3,],[2,7,]),'FunctionDefinition':([0,3,],[3,3,]),'empty':([0,3,9,16,18,21,90,123,],[4,4,13,13,22,22,115,115,]),'TypeName':([0,3,9,16,18,21,70,130,],[5,5,10,10,33,33,33,33,]),'ParameterListR':([9,16,],[11,19,]),'Parameter':([9,16,],[12,12,]),'Block':([15,119,121,129,133,],[17,125,127,131,134,]),'StatementListR':([18,21,],[20,63,]),'Statement':([18,21,70,130,],[21,21,98,132,]),'AssignmentStatement':([18,21,70,130,],[23,23,23,23,]),'DeclarationAssignmentStatement':([18,21,70,130,],[24,24,24,24,]),'Expression':([18,21,36,41,65,67,70,71,90,94,120,123,130,],[25,25,68,74,93,96,25,99,116,118,126,116,25,]),'DeclarationStatement':([18,21,70,130,],[26,26,26,26,]),'IfElseStatement':([18,21,70,130,],[27,27,27,27,]),'ForStatement':([18,21,70,130,],[28,28,28,28,]),'WhileStatement':([18,21,70,130,],[29,29,29,29,]),'BreakStatement':([18,21,70,130,],[30,30,30,30,]),'ReturnStatement':([18,21,70,130,],[31,31,31,31,]),'BinaryExpressionPrio7':([18,21,36,41,65,67,70,71,76,77,90,94,120,123,130,],[34,34,34,34,34,34,34,34,102,103,34,34,34,34,34,]),'BinaryExpressionPrio6':([18,21,36,41,65,67,70,71,76,77,78,79,80,81,90,94,120,123,130,],[42,42,42,42,42,42,42,42,42,42,104,105,106,107,42,42,42,42,42,]),'BinaryExpressionPrio4':([18,21,36,41,65,67,70,71,76,77,78,79,80,81,82,83,90,94,120,123,130,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,108,109,43,43,43,43,43,]),'BinaryExpressionPrio3':([18,21,36,41,65,67,70,71,76,77,78,79,80,81,82,83,85,86,87,90,94,120,123,130,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,110,111,112,44,44,44,44,44,]),'UnaryExpression':([18,21,36,41,65,67,70,71,76,77,78,79,80,81,82,83,85,86,87,90,94,120,123,130,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'Negate':([18,21,36,41,65,67,70,71,76,77,78,79,80,81,82,83,85,86,87,90,94,120,123,130,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'IncrementAfter':([18,21,36,41,65,67,70,71,76,77,78,79,80,81,82,83,85,86,87,90,94,120,123,130,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'IncrementBefore':([18,21,36,41,65,67,70,71,76,77,78,79,80,81,82,83,85,86,87,90,94,120,123,130,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'DecrementAfter':([18,21,36,41,65,67,70,71,76,77,78,79,80,81,82,83,85,86,87,90,94,120,123,130,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'DecrementBefore':([18,21,36,41,65,67,70,71,76,77,78,79,80,81,82,83,85,86,87,90,94,120,123,130,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'FunctionCall':([18,21,36,41,65,67,70,71,76,77,78,79,80,81,82,83,85,86,87,90,94,120,123,130,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'VarName':([18,21,36,41,45,55,56,65,67,70,71,76,77,78,79,80,81,82,83,85,86,87,90,94,120,123,130,],[53,53,53,53,84,91,92,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'Literal':([18,21,36,41,65,67,70,71,76,77,78,79,80,81,82,83,85,86,87,90,94,120,123,130,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'IntLiteral':([18,21,36,41,65,67,70,71,76,77,78,79,80,81,82,83,85,86,87,90,94,120,123,130,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'BoolLiteral':([18,21,36,41,65,67,70,71,76,77,78,79,80,81,82,83,85,86,87,90,94,120,123,130,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'CharLiteral':([18,21,36,41,65,67,70,71,76,77,78,79,80,81,82,83,85,86,87,90,94,120,123,130,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'ArgumentListR':([90,123,],[113,128,]),'Argument':([90,123,],[114,114,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> CompilationUnit","S'",1,None,None,None),
  ('BinaryExpressionPrio3 -> UnaryExpression * BinaryExpressionPrio3','BinaryExpressionPrio3',3,"p_<class 'binary_expressions.BinaryExpressionPrio3'>",'parser_rules.py',36),
  ('BinaryExpressionPrio3 -> UnaryExpression / BinaryExpressionPrio3','BinaryExpressionPrio3',3,"p_<class 'binary_expressions.BinaryExpressionPrio3'>",'parser_rules.py',37),
  ('BinaryExpressionPrio3 -> UnaryExpression % BinaryExpressionPrio3','BinaryExpressionPrio3',3,"p_<class 'binary_expressions.BinaryExpressionPrio3'>",'parser_rules.py',38),
  ('BinaryExpressionPrio3 -> UnaryExpression','BinaryExpressionPrio3',1,"p_<class 'binary_expressions.BinaryExpressionPrio3'>",'parser_rules.py',39),
  ('BinaryExpressionPrio4 -> BinaryExpressionPrio3 + BinaryExpressionPrio4','BinaryExpressionPrio4',3,"p_<class 'binary_expressions.BinaryExpressionPrio4'>",'parser_rules.py',36),
  ('BinaryExpressionPrio4 -> BinaryExpressionPrio3 - BinaryExpressionPrio4','BinaryExpressionPrio4',3,"p_<class 'binary_expressions.BinaryExpressionPrio4'>",'parser_rules.py',37),
  ('BinaryExpressionPrio4 -> BinaryExpressionPrio3','BinaryExpressionPrio4',1,"p_<class 'binary_expressions.BinaryExpressionPrio4'>",'parser_rules.py',38),
  ('BinaryExpressionPrio6 -> BinaryExpressionPrio4 LEQ BinaryExpressionPrio6','BinaryExpressionPrio6',3,"p_<class 'binary_expressions.BinaryExpressionPrio6'>",'parser_rules.py',36),
  ('BinaryExpressionPrio6 -> BinaryExpressionPrio4 GEQ BinaryExpressionPrio6','BinaryExpressionPrio6',3,"p_<class 'binary_expressions.BinaryExpressionPrio6'>",'parser_rules.py',37),
  ('BinaryExpressionPrio6 -> BinaryExpressionPrio4 LT BinaryExpressionPrio6','BinaryExpressionPrio6',3,"p_<class 'binary_expressions.BinaryExpressionPrio6'>",'parser_rules.py',38),
  ('BinaryExpressionPrio6 -> BinaryExpressionPrio4 GT BinaryExpressionPrio6','BinaryExpressionPrio6',3,"p_<class 'binary_expressions.BinaryExpressionPrio6'>",'parser_rules.py',39),
  ('BinaryExpressionPrio6 -> BinaryExpressionPrio4','BinaryExpressionPrio6',1,"p_<class 'binary_expressions.BinaryExpressionPrio6'>",'parser_rules.py',40),
  ('BinaryExpressionPrio7 -> BinaryExpressionPrio6 NEQ BinaryExpressionPrio7','BinaryExpressionPrio7',3,"p_<class 'binary_expressions.BinaryExpressionPrio7'>",'parser_rules.py',36),
  ('BinaryExpressionPrio7 -> BinaryExpressionPrio6 EQ BinaryExpressionPrio7','BinaryExpressionPrio7',3,"p_<class 'binary_expressions.BinaryExpressionPrio7'>",'parser_rules.py',37),
  ('BinaryExpressionPrio7 -> BinaryExpressionPrio6','BinaryExpressionPrio7',1,"p_<class 'binary_expressions.BinaryExpressionPrio7'>",'parser_rules.py',38),
  ('Expression -> BinaryExpressionPrio7','Expression',1,"p_<class 'binary_expressions.Expression'>",'parser_rules.py',36),
  ('BoolLiteral -> BOOLL','BoolLiteral',1,"p_<class 'literals.BoolLiteral'>",'parser_rules.py',36),
  ('CharLiteral -> CHARL','CharLiteral',1,"p_<class 'literals.CharLiteral'>",'parser_rules.py',36),
  ('IntLiteral -> INTL','IntLiteral',1,"p_<class 'literals.IntLiteral'>",'parser_rules.py',36),
  ('Literal -> IntLiteral','Literal',1,"p_<class 'literals.Literal'>",'parser_rules.py',36),
  ('Literal -> BoolLiteral','Literal',1,"p_<class 'literals.Literal'>",'parser_rules.py',37),
  ('Literal -> CharLiteral','Literal',1,"p_<class 'literals.Literal'>",'parser_rules.py',38),
  ('AssignmentStatement -> ID = Expression ;','AssignmentStatement',4,"p_<class 'statements.AssignmentStatement'>",'parser_rules.py',36),
  ('BreakStatement -> BREAK INTL ;','BreakStatement',3,"p_<class 'statements.BreakStatement'>",'parser_rules.py',36),
  ('BreakStatement -> BREAK ;','BreakStatement',2,"p_<class 'statements.BreakStatement'>",'parser_rules.py',37),
  ('DeclarationAssignmentStatement -> TypeName ID = Expression ;','DeclarationAssignmentStatement',5,"p_<class 'statements.DeclarationAssignmentStatement'>",'parser_rules.py',36),
  ('DeclarationStatement -> TypeName ID ;','DeclarationStatement',3,"p_<class 'statements.DeclarationStatement'>",'parser_rules.py',36),
  ('ForStatement -> FOR ( Statement ; Expression ; Statement ) Block','ForStatement',9,"p_<class 'statements.ForStatement'>",'parser_rules.py',36),
  ('IfElseStatement -> IF ( Expression ) Block ELSE Block','IfElseStatement',7,"p_<class 'statements.IfElseStatement'>",'parser_rules.py',36),
  ('ReturnStatement -> RETURN Expression ;','ReturnStatement',3,"p_<class 'statements.ReturnStatement'>",'parser_rules.py',36),
  ('ReturnStatement -> RETURN ;','ReturnStatement',2,"p_<class 'statements.ReturnStatement'>",'parser_rules.py',37),
  ('Statement -> AssignmentStatement','Statement',1,"p_<class 'statements.Statement'>",'parser_rules.py',36),
  ('Statement -> DeclarationAssignmentStatement','Statement',1,"p_<class 'statements.Statement'>",'parser_rules.py',37),
  ('Statement -> Expression ;','Statement',2,"p_<class 'statements.Statement'>",'parser_rules.py',38),
  ('Statement -> DeclarationStatement','Statement',1,"p_<class 'statements.Statement'>",'parser_rules.py',39),
  ('Statement -> IfElseStatement','Statement',1,"p_<class 'statements.Statement'>",'parser_rules.py',40),
  ('Statement -> ForStatement','Statement',1,"p_<class 'statements.Statement'>",'parser_rules.py',41),
  ('Statement -> WhileStatement','Statement',1,"p_<class 'statements.Statement'>",'parser_rules.py',42),
  ('Statement -> BreakStatement','Statement',1,"p_<class 'statements.Statement'>",'parser_rules.py',43),
  ('Statement -> ReturnStatement','Statement',1,"p_<class 'statements.Statement'>",'parser_rules.py',44),
  ('StatementListR -> Statement StatementListR','StatementListR',2,"p_<class 'statements.StatementListR'>",'parser_rules.py',36),
  ('StatementListR -> empty','StatementListR',1,"p_<class 'statements.StatementListR'>",'parser_rules.py',37),
  ('WhileStatement -> WHILE ( Expression ) Block','WhileStatement',5,"p_<class 'statements.WhileStatement'>",'parser_rules.py',36),
  ('Argument -> Expression','Argument',1,"p_<class 'structural.Argument'>",'parser_rules.py',36),
  ('ArgumentListR -> Argument , ArgumentListR','ArgumentListR',3,"p_<class 'structural.ArgumentListR'>",'parser_rules.py',36),
  ('ArgumentListR -> Argument','ArgumentListR',1,"p_<class 'structural.ArgumentListR'>",'parser_rules.py',37),
  ('ArgumentListR -> empty','ArgumentListR',1,"p_<class 'structural.ArgumentListR'>",'parser_rules.py',38),
  ('Block -> { StatementListR }','Block',3,"p_<class 'structural.Block'>",'parser_rules.py',36),
  ('CompilationUnit -> DefinitionListR','CompilationUnit',1,"p_<class 'structural.CompilationUnit'>",'parser_rules.py',36),
  ('DefinitionListR -> FunctionDefinition DefinitionListR','DefinitionListR',2,"p_<class 'structural.DefinitionListR'>",'parser_rules.py',36),
  ('DefinitionListR -> empty','DefinitionListR',1,"p_<class 'structural.DefinitionListR'>",'parser_rules.py',37),
  ('FunctionDefinition -> TypeName ID ( ParameterListR ) Block','FunctionDefinition',6,"p_<class 'structural.FunctionDefinition'>",'parser_rules.py',36),
  ('Parameter -> TypeName ID','Parameter',2,"p_<class 'structural.Parameter'>",'parser_rules.py',36),
  ('ParameterListR -> Parameter , ParameterListR','ParameterListR',3,"p_<class 'structural.ParameterListR'>",'parser_rules.py',36),
  ('ParameterListR -> Parameter','ParameterListR',1,"p_<class 'structural.ParameterListR'>",'parser_rules.py',37),
  ('ParameterListR -> empty','ParameterListR',1,"p_<class 'structural.ParameterListR'>",'parser_rules.py',38),
  ('TypeName -> ID','TypeName',1,"p_<class 'structural.TypeName'>",'parser_rules.py',36),
  ('VarName -> ID','VarName',1,"p_<class 'structural.VarName'>",'parser_rules.py',36),
  ('DecrementAfter -> VarName DEC','DecrementAfter',2,"p_<class 'unary_expressions.DecrementAfter'>",'parser_rules.py',36),
  ('DecrementBefore -> DEC VarName','DecrementBefore',2,"p_<class 'unary_expressions.DecrementBefore'>",'parser_rules.py',36),
  ('FunctionCall -> VarName ( ArgumentListR )','FunctionCall',4,"p_<class 'unary_expressions.FunctionCall'>",'parser_rules.py',36),
  ('IncrementAfter -> VarName INC','IncrementAfter',2,"p_<class 'unary_expressions.IncrementAfter'>",'parser_rules.py',36),
  ('IncrementBefore -> INC VarName','IncrementBefore',2,"p_<class 'unary_expressions.IncrementBefore'>",'parser_rules.py',36),
  ('Negate -> - VarName','Negate',2,"p_<class 'unary_expressions.Negate'>",'parser_rules.py',36),
  ('UnaryExpression -> Negate','UnaryExpression',1,"p_<class 'unary_expressions.UnaryExpression'>",'parser_rules.py',36),
  ('UnaryExpression -> IncrementAfter','UnaryExpression',1,"p_<class 'unary_expressions.UnaryExpression'>",'parser_rules.py',37),
  ('UnaryExpression -> IncrementBefore','UnaryExpression',1,"p_<class 'unary_expressions.UnaryExpression'>",'parser_rules.py',38),
  ('UnaryExpression -> DecrementAfter','UnaryExpression',1,"p_<class 'unary_expressions.UnaryExpression'>",'parser_rules.py',39),
  ('UnaryExpression -> DecrementBefore','UnaryExpression',1,"p_<class 'unary_expressions.UnaryExpression'>",'parser_rules.py',40),
  ('UnaryExpression -> FunctionCall','UnaryExpression',1,"p_<class 'unary_expressions.UnaryExpression'>",'parser_rules.py',41),
  ('UnaryExpression -> VarName','UnaryExpression',1,"p_<class 'unary_expressions.UnaryExpression'>",'parser_rules.py',42),
  ('UnaryExpression -> Literal','UnaryExpression',1,"p_<class 'unary_expressions.UnaryExpression'>",'parser_rules.py',43),
  ('UnaryExpression -> ( Expression )','UnaryExpression',3,"p_<class 'unary_expressions.UnaryExpression'>",'parser_rules.py',44),
  ('empty -> <empty>','empty',0,'p_empty','parser_rules.py',43),
]
