Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    NAMESPACE

Grammar

Rule 0     S' -> CompilationUnit
Rule 1     Add -> +
Rule 2     BoolLiteral -> BOOLL
Rule 3     CharLiteral -> CHARL
Rule 4     Div -> /
Rule 5     Equal -> EQ
Rule 6     Greater -> GT
Rule 7     GreaterEqual -> LEQ
Rule 8     Id -> ID
Rule 9     IntLiteral -> INTL
Rule 10    Less -> LT
Rule 11    LessEqual -> GEQ
Rule 12    Literal -> IntLiteral
Rule 13    Literal -> BoolLiteral
Rule 14    Literal -> CharLiteral
Rule 15    Mod -> %
Rule 16    Mul -> *
Rule 17    NotEqual -> NE
Rule 18    Sub -> -
Rule 19    Argument -> Expression
Rule 20    ArgumentListR -> Argument , ArgumentListR
Rule 21    ArgumentListR -> Argument
Rule 22    ArgumentListR -> empty
Rule 23    BinaryExpressionPrio3 -> UnaryExpression Mul BinaryExpressionPrio3
Rule 24    BinaryExpressionPrio3 -> UnaryExpression Div BinaryExpressionPrio3
Rule 25    BinaryExpressionPrio3 -> UnaryExpression Mod BinaryExpressionPrio3
Rule 26    BinaryExpressionPrio3 -> UnaryExpression
Rule 27    BinaryExpressionPrio4 -> BinaryExpressionPrio3 Add BinaryExpressionPrio4
Rule 28    BinaryExpressionPrio4 -> BinaryExpressionPrio3 Sub BinaryExpressionPrio4
Rule 29    BinaryExpressionPrio4 -> BinaryExpressionPrio3
Rule 30    BinaryExpressionPrio6 -> BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6
Rule 31    BinaryExpressionPrio6 -> BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6
Rule 32    BinaryExpressionPrio6 -> BinaryExpressionPrio4 Less BinaryExpressionPrio6
Rule 33    BinaryExpressionPrio6 -> BinaryExpressionPrio4 Greater BinaryExpressionPrio6
Rule 34    BinaryExpressionPrio6 -> BinaryExpressionPrio4
Rule 35    BinaryExpressionPrio7 -> BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7
Rule 36    BinaryExpressionPrio7 -> BinaryExpressionPrio6 Equal BinaryExpressionPrio7
Rule 37    BinaryExpressionPrio7 -> BinaryExpressionPrio6
Rule 38    Expression -> BinaryExpressionPrio7
Rule 39    FunctionCall -> Id ( ArgumentListR )
Rule 40    UnaryExpression -> FunctionCall
Rule 41    UnaryExpression -> Id
Rule 42    UnaryExpression -> Literal
Rule 43    UnaryExpression -> ( Expression )
Rule 44    AssignmentStatement -> Id = Expression ;
Rule 45    AssignmentStatement -> Id = Expression
Rule 46    BlankStatement -> ;
Rule 47    BreakStatement -> BREAK INTL ;
Rule 48    BreakStatement -> BREAK ;
Rule 49    DeclarationAssignmentStatement -> Id Id = Expression ;
Rule 50    DeclarationStatement -> Id Id ;
Rule 51    ForStatement -> FOR ( Statement Expression ; Statement ) Block
Rule 52    IfElseStatement -> IF ( Expression ) Block ELSE Block
Rule 53    ReturnStatement -> RETURN Expression ;
Rule 54    ReturnStatement -> RETURN ;
Rule 55    Statement -> AssignmentStatement
Rule 56    Statement -> DeclarationAssignmentStatement
Rule 57    Statement -> Expression ;
Rule 58    Statement -> DeclarationStatement
Rule 59    Statement -> IfElseStatement
Rule 60    Statement -> ForStatement
Rule 61    Statement -> WhileStatement
Rule 62    Statement -> BreakStatement
Rule 63    Statement -> ReturnStatement
Rule 64    Statement -> BlankStatement
Rule 65    StatementListR -> Statement StatementListR
Rule 66    StatementListR -> empty
Rule 67    WhileStatement -> WHILE ( Expression ) Block
Rule 68    Block -> { StatementListR }
Rule 69    CompilationUnit -> DefinitionListR
Rule 70    DefinitionListR -> FunctionDefinition DefinitionListR
Rule 71    DefinitionListR -> StructDefinition DefinitionListR
Rule 72    DefinitionListR -> empty
Rule 73    FunctionDefinition -> Id Id ( ParameterListR ) Block
Rule 74    Parameter -> Id Id
Rule 75    ParameterListR -> Parameter , ParameterListR
Rule 76    ParameterListR -> Parameter
Rule 77    ParameterListR -> empty
Rule 78    StructDefinition -> STRUCT Id ( ParameterListR )
Rule 79    empty -> <empty>

Terminals, with rules where they appear

%                    : 15
(                    : 39 43 51 52 67 73 78
)                    : 39 43 51 52 67 73 78
*                    : 16
+                    : 1
,                    : 20 75
-                    : 18
/                    : 4
;                    : 44 46 47 48 49 50 51 53 54 57
=                    : 44 45 49
BOOLL                : 2
BREAK                : 47 48
CHARL                : 3
ELSE                 : 52
EQ                   : 5
FOR                  : 51
GEQ                  : 11
GT                   : 6
ID                   : 8
IF                   : 52
INTL                 : 9 47
LEQ                  : 7
LT                   : 10
NAMESPACE            : 
NE                   : 17
RETURN               : 53 54
STRUCT               : 78
WHILE                : 67
error                : 
{                    : 68
}                    : 68

Nonterminals, with rules where they appear

Add                  : 27
Argument             : 20 21
ArgumentListR        : 20 39
AssignmentStatement  : 55
BinaryExpressionPrio3 : 23 24 25 27 28 29
BinaryExpressionPrio4 : 27 28 30 31 32 33 34
BinaryExpressionPrio6 : 30 31 32 33 35 36 37
BinaryExpressionPrio7 : 35 36 38
BlankStatement       : 64
Block                : 51 52 52 67 73
BoolLiteral          : 13
BreakStatement       : 62
CharLiteral          : 14
CompilationUnit      : 0
DeclarationAssignmentStatement : 56
DeclarationStatement : 58
DefinitionListR      : 69 70 71
Div                  : 24
Equal                : 36
Expression           : 19 43 44 45 49 51 52 53 57 67
ForStatement         : 60
FunctionCall         : 40
FunctionDefinition   : 70
Greater              : 33
GreaterEqual         : 31
Id                   : 39 41 44 45 49 49 50 50 73 73 74 74 78
IfElseStatement      : 59
IntLiteral           : 12
Less                 : 32
LessEqual            : 30
Literal              : 42
Mod                  : 25
Mul                  : 23
NotEqual             : 35
Parameter            : 75 76
ParameterListR       : 73 75 78
ReturnStatement      : 63
Statement            : 51 51 65
StatementListR       : 65 68
StructDefinition     : 71
Sub                  : 28
UnaryExpression      : 23 24 25 26
WhileStatement       : 61
empty                : 22 66 72 77

Parsing method: LALR

state 0

    (0) S' -> . CompilationUnit
    (69) CompilationUnit -> . DefinitionListR
    (70) DefinitionListR -> . FunctionDefinition DefinitionListR
    (71) DefinitionListR -> . StructDefinition DefinitionListR
    (72) DefinitionListR -> . empty
    (73) FunctionDefinition -> . Id Id ( ParameterListR ) Block
    (78) StructDefinition -> . STRUCT Id ( ParameterListR )
    (79) empty -> .
    (8) Id -> . ID

    STRUCT          shift and go to state 7
    $end            reduce using rule 79 (empty -> .)
    ID              shift and go to state 8

    CompilationUnit                shift and go to state 1
    DefinitionListR                shift and go to state 2
    FunctionDefinition             shift and go to state 3
    StructDefinition               shift and go to state 4
    empty                          shift and go to state 5
    Id                             shift and go to state 6

state 1

    (0) S' -> CompilationUnit .



state 2

    (69) CompilationUnit -> DefinitionListR .

    $end            reduce using rule 69 (CompilationUnit -> DefinitionListR .)


state 3

    (70) DefinitionListR -> FunctionDefinition . DefinitionListR
    (70) DefinitionListR -> . FunctionDefinition DefinitionListR
    (71) DefinitionListR -> . StructDefinition DefinitionListR
    (72) DefinitionListR -> . empty
    (73) FunctionDefinition -> . Id Id ( ParameterListR ) Block
    (78) StructDefinition -> . STRUCT Id ( ParameterListR )
    (79) empty -> .
    (8) Id -> . ID

    STRUCT          shift and go to state 7
    $end            reduce using rule 79 (empty -> .)
    ID              shift and go to state 8

    FunctionDefinition             shift and go to state 3
    DefinitionListR                shift and go to state 9
    StructDefinition               shift and go to state 4
    empty                          shift and go to state 5
    Id                             shift and go to state 6

state 4

    (71) DefinitionListR -> StructDefinition . DefinitionListR
    (70) DefinitionListR -> . FunctionDefinition DefinitionListR
    (71) DefinitionListR -> . StructDefinition DefinitionListR
    (72) DefinitionListR -> . empty
    (73) FunctionDefinition -> . Id Id ( ParameterListR ) Block
    (78) StructDefinition -> . STRUCT Id ( ParameterListR )
    (79) empty -> .
    (8) Id -> . ID

    STRUCT          shift and go to state 7
    $end            reduce using rule 79 (empty -> .)
    ID              shift and go to state 8

    StructDefinition               shift and go to state 4
    DefinitionListR                shift and go to state 10
    FunctionDefinition             shift and go to state 3
    empty                          shift and go to state 5
    Id                             shift and go to state 6

state 5

    (72) DefinitionListR -> empty .

    $end            reduce using rule 72 (DefinitionListR -> empty .)


state 6

    (73) FunctionDefinition -> Id . Id ( ParameterListR ) Block
    (8) Id -> . ID

    ID              shift and go to state 8

    Id                             shift and go to state 11

state 7

    (78) StructDefinition -> STRUCT . Id ( ParameterListR )
    (8) Id -> . ID

    ID              shift and go to state 8

    Id                             shift and go to state 12

state 8

    (8) Id -> ID .

    ID              reduce using rule 8 (Id -> ID .)
    (               reduce using rule 8 (Id -> ID .)
    ,               reduce using rule 8 (Id -> ID .)
    )               reduce using rule 8 (Id -> ID .)
    =               reduce using rule 8 (Id -> ID .)
    *               reduce using rule 8 (Id -> ID .)
    /               reduce using rule 8 (Id -> ID .)
    %               reduce using rule 8 (Id -> ID .)
    +               reduce using rule 8 (Id -> ID .)
    -               reduce using rule 8 (Id -> ID .)
    GEQ             reduce using rule 8 (Id -> ID .)
    LEQ             reduce using rule 8 (Id -> ID .)
    LT              reduce using rule 8 (Id -> ID .)
    GT              reduce using rule 8 (Id -> ID .)
    NE              reduce using rule 8 (Id -> ID .)
    EQ              reduce using rule 8 (Id -> ID .)
    ;               reduce using rule 8 (Id -> ID .)
    IF              reduce using rule 8 (Id -> ID .)
    FOR             reduce using rule 8 (Id -> ID .)
    WHILE           reduce using rule 8 (Id -> ID .)
    BREAK           reduce using rule 8 (Id -> ID .)
    RETURN          reduce using rule 8 (Id -> ID .)
    INTL            reduce using rule 8 (Id -> ID .)
    BOOLL           reduce using rule 8 (Id -> ID .)
    CHARL           reduce using rule 8 (Id -> ID .)
    }               reduce using rule 8 (Id -> ID .)


state 9

    (70) DefinitionListR -> FunctionDefinition DefinitionListR .

    $end            reduce using rule 70 (DefinitionListR -> FunctionDefinition DefinitionListR .)


state 10

    (71) DefinitionListR -> StructDefinition DefinitionListR .

    $end            reduce using rule 71 (DefinitionListR -> StructDefinition DefinitionListR .)


state 11

    (73) FunctionDefinition -> Id Id . ( ParameterListR ) Block

    (               shift and go to state 13


state 12

    (78) StructDefinition -> STRUCT Id . ( ParameterListR )

    (               shift and go to state 14


state 13

    (73) FunctionDefinition -> Id Id ( . ParameterListR ) Block
    (75) ParameterListR -> . Parameter , ParameterListR
    (76) ParameterListR -> . Parameter
    (77) ParameterListR -> . empty
    (74) Parameter -> . Id Id
    (79) empty -> .
    (8) Id -> . ID

    )               reduce using rule 79 (empty -> .)
    ID              shift and go to state 8

    Id                             shift and go to state 15
    ParameterListR                 shift and go to state 16
    Parameter                      shift and go to state 17
    empty                          shift and go to state 18

state 14

    (78) StructDefinition -> STRUCT Id ( . ParameterListR )
    (75) ParameterListR -> . Parameter , ParameterListR
    (76) ParameterListR -> . Parameter
    (77) ParameterListR -> . empty
    (74) Parameter -> . Id Id
    (79) empty -> .
    (8) Id -> . ID

    )               reduce using rule 79 (empty -> .)
    ID              shift and go to state 8

    Id                             shift and go to state 15
    ParameterListR                 shift and go to state 19
    Parameter                      shift and go to state 17
    empty                          shift and go to state 18

state 15

    (74) Parameter -> Id . Id
    (8) Id -> . ID

    ID              shift and go to state 8

    Id                             shift and go to state 20

state 16

    (73) FunctionDefinition -> Id Id ( ParameterListR . ) Block

    )               shift and go to state 21


state 17

    (75) ParameterListR -> Parameter . , ParameterListR
    (76) ParameterListR -> Parameter .

    ,               shift and go to state 22
    )               reduce using rule 76 (ParameterListR -> Parameter .)


state 18

    (77) ParameterListR -> empty .

    )               reduce using rule 77 (ParameterListR -> empty .)


state 19

    (78) StructDefinition -> STRUCT Id ( ParameterListR . )

    )               shift and go to state 23


state 20

    (74) Parameter -> Id Id .

    ,               reduce using rule 74 (Parameter -> Id Id .)
    )               reduce using rule 74 (Parameter -> Id Id .)


state 21

    (73) FunctionDefinition -> Id Id ( ParameterListR ) . Block
    (68) Block -> . { StatementListR }

    {               shift and go to state 25

    Block                          shift and go to state 24

state 22

    (75) ParameterListR -> Parameter , . ParameterListR
    (75) ParameterListR -> . Parameter , ParameterListR
    (76) ParameterListR -> . Parameter
    (77) ParameterListR -> . empty
    (74) Parameter -> . Id Id
    (79) empty -> .
    (8) Id -> . ID

    )               reduce using rule 79 (empty -> .)
    ID              shift and go to state 8

    Parameter                      shift and go to state 17
    ParameterListR                 shift and go to state 26
    empty                          shift and go to state 18
    Id                             shift and go to state 15

state 23

    (78) StructDefinition -> STRUCT Id ( ParameterListR ) .

    STRUCT          reduce using rule 78 (StructDefinition -> STRUCT Id ( ParameterListR ) .)
    ID              reduce using rule 78 (StructDefinition -> STRUCT Id ( ParameterListR ) .)
    $end            reduce using rule 78 (StructDefinition -> STRUCT Id ( ParameterListR ) .)


state 24

    (73) FunctionDefinition -> Id Id ( ParameterListR ) Block .

    STRUCT          reduce using rule 73 (FunctionDefinition -> Id Id ( ParameterListR ) Block .)
    ID              reduce using rule 73 (FunctionDefinition -> Id Id ( ParameterListR ) Block .)
    $end            reduce using rule 73 (FunctionDefinition -> Id Id ( ParameterListR ) Block .)


state 25

    (68) Block -> { . StatementListR }
    (65) StatementListR -> . Statement StatementListR
    (66) StatementListR -> . empty
    (55) Statement -> . AssignmentStatement
    (56) Statement -> . DeclarationAssignmentStatement
    (57) Statement -> . Expression ;
    (58) Statement -> . DeclarationStatement
    (59) Statement -> . IfElseStatement
    (60) Statement -> . ForStatement
    (61) Statement -> . WhileStatement
    (62) Statement -> . BreakStatement
    (63) Statement -> . ReturnStatement
    (64) Statement -> . BlankStatement
    (79) empty -> .
    (44) AssignmentStatement -> . Id = Expression ;
    (45) AssignmentStatement -> . Id = Expression
    (49) DeclarationAssignmentStatement -> . Id Id = Expression ;
    (38) Expression -> . BinaryExpressionPrio7
    (50) DeclarationStatement -> . Id Id ;
    (52) IfElseStatement -> . IF ( Expression ) Block ELSE Block
    (51) ForStatement -> . FOR ( Statement Expression ; Statement ) Block
    (67) WhileStatement -> . WHILE ( Expression ) Block
    (47) BreakStatement -> . BREAK INTL ;
    (48) BreakStatement -> . BREAK ;
    (53) ReturnStatement -> . RETURN Expression ;
    (54) ReturnStatement -> . RETURN ;
    (46) BlankStatement -> . ;
    (8) Id -> . ID
    (35) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7
    (36) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 Equal BinaryExpressionPrio7
    (37) BinaryExpressionPrio7 -> . BinaryExpressionPrio6
    (30) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6
    (31) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6
    (32) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Less BinaryExpressionPrio6
    (33) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Greater BinaryExpressionPrio6
    (34) BinaryExpressionPrio6 -> . BinaryExpressionPrio4
    (27) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Add BinaryExpressionPrio4
    (28) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Sub BinaryExpressionPrio4
    (29) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (23) BinaryExpressionPrio3 -> . UnaryExpression Mul BinaryExpressionPrio3
    (24) BinaryExpressionPrio3 -> . UnaryExpression Div BinaryExpressionPrio3
    (25) BinaryExpressionPrio3 -> . UnaryExpression Mod BinaryExpressionPrio3
    (26) BinaryExpressionPrio3 -> . UnaryExpression
    (40) UnaryExpression -> . FunctionCall
    (41) UnaryExpression -> . Id
    (42) UnaryExpression -> . Literal
    (43) UnaryExpression -> . ( Expression )
    (39) FunctionCall -> . Id ( ArgumentListR )
    (12) Literal -> . IntLiteral
    (13) Literal -> . BoolLiteral
    (14) Literal -> . CharLiteral
    (9) IntLiteral -> . INTL
    (2) BoolLiteral -> . BOOLL
    (3) CharLiteral -> . CHARL

    }               reduce using rule 79 (empty -> .)
    IF              shift and go to state 43
    FOR             shift and go to state 45
    WHILE           shift and go to state 46
    BREAK           shift and go to state 47
    RETURN          shift and go to state 49
    ;               shift and go to state 33
    ID              shift and go to state 8
    (               shift and go to state 44
    INTL            shift and go to state 48
    BOOLL           shift and go to state 59
    CHARL           shift and go to state 60

    StatementListR                 shift and go to state 27
    Statement                      shift and go to state 28
    empty                          shift and go to state 29
    AssignmentStatement            shift and go to state 30
    DeclarationAssignmentStatement shift and go to state 31
    Expression                     shift and go to state 32
    DeclarationStatement           shift and go to state 34
    IfElseStatement                shift and go to state 35
    ForStatement                   shift and go to state 36
    WhileStatement                 shift and go to state 37
    BreakStatement                 shift and go to state 38
    ReturnStatement                shift and go to state 39
    BlankStatement                 shift and go to state 40
    Id                             shift and go to state 41
    BinaryExpressionPrio7          shift and go to state 42
    BinaryExpressionPrio6          shift and go to state 50
    BinaryExpressionPrio4          shift and go to state 51
    BinaryExpressionPrio3          shift and go to state 52
    UnaryExpression                shift and go to state 53
    FunctionCall                   shift and go to state 54
    Literal                        shift and go to state 55
    IntLiteral                     shift and go to state 56
    BoolLiteral                    shift and go to state 57
    CharLiteral                    shift and go to state 58

state 26

    (75) ParameterListR -> Parameter , ParameterListR .

    )               reduce using rule 75 (ParameterListR -> Parameter , ParameterListR .)


state 27

    (68) Block -> { StatementListR . }

    }               shift and go to state 61


state 28

    (65) StatementListR -> Statement . StatementListR
    (65) StatementListR -> . Statement StatementListR
    (66) StatementListR -> . empty
    (55) Statement -> . AssignmentStatement
    (56) Statement -> . DeclarationAssignmentStatement
    (57) Statement -> . Expression ;
    (58) Statement -> . DeclarationStatement
    (59) Statement -> . IfElseStatement
    (60) Statement -> . ForStatement
    (61) Statement -> . WhileStatement
    (62) Statement -> . BreakStatement
    (63) Statement -> . ReturnStatement
    (64) Statement -> . BlankStatement
    (79) empty -> .
    (44) AssignmentStatement -> . Id = Expression ;
    (45) AssignmentStatement -> . Id = Expression
    (49) DeclarationAssignmentStatement -> . Id Id = Expression ;
    (38) Expression -> . BinaryExpressionPrio7
    (50) DeclarationStatement -> . Id Id ;
    (52) IfElseStatement -> . IF ( Expression ) Block ELSE Block
    (51) ForStatement -> . FOR ( Statement Expression ; Statement ) Block
    (67) WhileStatement -> . WHILE ( Expression ) Block
    (47) BreakStatement -> . BREAK INTL ;
    (48) BreakStatement -> . BREAK ;
    (53) ReturnStatement -> . RETURN Expression ;
    (54) ReturnStatement -> . RETURN ;
    (46) BlankStatement -> . ;
    (8) Id -> . ID
    (35) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7
    (36) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 Equal BinaryExpressionPrio7
    (37) BinaryExpressionPrio7 -> . BinaryExpressionPrio6
    (30) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6
    (31) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6
    (32) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Less BinaryExpressionPrio6
    (33) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Greater BinaryExpressionPrio6
    (34) BinaryExpressionPrio6 -> . BinaryExpressionPrio4
    (27) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Add BinaryExpressionPrio4
    (28) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Sub BinaryExpressionPrio4
    (29) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (23) BinaryExpressionPrio3 -> . UnaryExpression Mul BinaryExpressionPrio3
    (24) BinaryExpressionPrio3 -> . UnaryExpression Div BinaryExpressionPrio3
    (25) BinaryExpressionPrio3 -> . UnaryExpression Mod BinaryExpressionPrio3
    (26) BinaryExpressionPrio3 -> . UnaryExpression
    (40) UnaryExpression -> . FunctionCall
    (41) UnaryExpression -> . Id
    (42) UnaryExpression -> . Literal
    (43) UnaryExpression -> . ( Expression )
    (39) FunctionCall -> . Id ( ArgumentListR )
    (12) Literal -> . IntLiteral
    (13) Literal -> . BoolLiteral
    (14) Literal -> . CharLiteral
    (9) IntLiteral -> . INTL
    (2) BoolLiteral -> . BOOLL
    (3) CharLiteral -> . CHARL

    }               reduce using rule 79 (empty -> .)
    IF              shift and go to state 43
    FOR             shift and go to state 45
    WHILE           shift and go to state 46
    BREAK           shift and go to state 47
    RETURN          shift and go to state 49
    ;               shift and go to state 33
    ID              shift and go to state 8
    (               shift and go to state 44
    INTL            shift and go to state 48
    BOOLL           shift and go to state 59
    CHARL           shift and go to state 60

    Statement                      shift and go to state 28
    StatementListR                 shift and go to state 62
    empty                          shift and go to state 29
    AssignmentStatement            shift and go to state 30
    DeclarationAssignmentStatement shift and go to state 31
    Expression                     shift and go to state 32
    DeclarationStatement           shift and go to state 34
    IfElseStatement                shift and go to state 35
    ForStatement                   shift and go to state 36
    WhileStatement                 shift and go to state 37
    BreakStatement                 shift and go to state 38
    ReturnStatement                shift and go to state 39
    BlankStatement                 shift and go to state 40
    Id                             shift and go to state 41
    BinaryExpressionPrio7          shift and go to state 42
    BinaryExpressionPrio6          shift and go to state 50
    BinaryExpressionPrio4          shift and go to state 51
    BinaryExpressionPrio3          shift and go to state 52
    UnaryExpression                shift and go to state 53
    FunctionCall                   shift and go to state 54
    Literal                        shift and go to state 55
    IntLiteral                     shift and go to state 56
    BoolLiteral                    shift and go to state 57
    CharLiteral                    shift and go to state 58

state 29

    (66) StatementListR -> empty .

    }               reduce using rule 66 (StatementListR -> empty .)


state 30

    (55) Statement -> AssignmentStatement .

    IF              reduce using rule 55 (Statement -> AssignmentStatement .)
    FOR             reduce using rule 55 (Statement -> AssignmentStatement .)
    WHILE           reduce using rule 55 (Statement -> AssignmentStatement .)
    BREAK           reduce using rule 55 (Statement -> AssignmentStatement .)
    RETURN          reduce using rule 55 (Statement -> AssignmentStatement .)
    ;               reduce using rule 55 (Statement -> AssignmentStatement .)
    ID              reduce using rule 55 (Statement -> AssignmentStatement .)
    (               reduce using rule 55 (Statement -> AssignmentStatement .)
    INTL            reduce using rule 55 (Statement -> AssignmentStatement .)
    BOOLL           reduce using rule 55 (Statement -> AssignmentStatement .)
    CHARL           reduce using rule 55 (Statement -> AssignmentStatement .)
    }               reduce using rule 55 (Statement -> AssignmentStatement .)
    )               reduce using rule 55 (Statement -> AssignmentStatement .)


state 31

    (56) Statement -> DeclarationAssignmentStatement .

    IF              reduce using rule 56 (Statement -> DeclarationAssignmentStatement .)
    FOR             reduce using rule 56 (Statement -> DeclarationAssignmentStatement .)
    WHILE           reduce using rule 56 (Statement -> DeclarationAssignmentStatement .)
    BREAK           reduce using rule 56 (Statement -> DeclarationAssignmentStatement .)
    RETURN          reduce using rule 56 (Statement -> DeclarationAssignmentStatement .)
    ;               reduce using rule 56 (Statement -> DeclarationAssignmentStatement .)
    ID              reduce using rule 56 (Statement -> DeclarationAssignmentStatement .)
    (               reduce using rule 56 (Statement -> DeclarationAssignmentStatement .)
    INTL            reduce using rule 56 (Statement -> DeclarationAssignmentStatement .)
    BOOLL           reduce using rule 56 (Statement -> DeclarationAssignmentStatement .)
    CHARL           reduce using rule 56 (Statement -> DeclarationAssignmentStatement .)
    }               reduce using rule 56 (Statement -> DeclarationAssignmentStatement .)
    )               reduce using rule 56 (Statement -> DeclarationAssignmentStatement .)


state 32

    (57) Statement -> Expression . ;

    ;               shift and go to state 63


state 33

    (46) BlankStatement -> ; .

    IF              reduce using rule 46 (BlankStatement -> ; .)
    FOR             reduce using rule 46 (BlankStatement -> ; .)
    WHILE           reduce using rule 46 (BlankStatement -> ; .)
    BREAK           reduce using rule 46 (BlankStatement -> ; .)
    RETURN          reduce using rule 46 (BlankStatement -> ; .)
    ;               reduce using rule 46 (BlankStatement -> ; .)
    ID              reduce using rule 46 (BlankStatement -> ; .)
    (               reduce using rule 46 (BlankStatement -> ; .)
    INTL            reduce using rule 46 (BlankStatement -> ; .)
    BOOLL           reduce using rule 46 (BlankStatement -> ; .)
    CHARL           reduce using rule 46 (BlankStatement -> ; .)
    }               reduce using rule 46 (BlankStatement -> ; .)
    )               reduce using rule 46 (BlankStatement -> ; .)


state 34

    (58) Statement -> DeclarationStatement .

    IF              reduce using rule 58 (Statement -> DeclarationStatement .)
    FOR             reduce using rule 58 (Statement -> DeclarationStatement .)
    WHILE           reduce using rule 58 (Statement -> DeclarationStatement .)
    BREAK           reduce using rule 58 (Statement -> DeclarationStatement .)
    RETURN          reduce using rule 58 (Statement -> DeclarationStatement .)
    ;               reduce using rule 58 (Statement -> DeclarationStatement .)
    ID              reduce using rule 58 (Statement -> DeclarationStatement .)
    (               reduce using rule 58 (Statement -> DeclarationStatement .)
    INTL            reduce using rule 58 (Statement -> DeclarationStatement .)
    BOOLL           reduce using rule 58 (Statement -> DeclarationStatement .)
    CHARL           reduce using rule 58 (Statement -> DeclarationStatement .)
    }               reduce using rule 58 (Statement -> DeclarationStatement .)
    )               reduce using rule 58 (Statement -> DeclarationStatement .)


state 35

    (59) Statement -> IfElseStatement .

    IF              reduce using rule 59 (Statement -> IfElseStatement .)
    FOR             reduce using rule 59 (Statement -> IfElseStatement .)
    WHILE           reduce using rule 59 (Statement -> IfElseStatement .)
    BREAK           reduce using rule 59 (Statement -> IfElseStatement .)
    RETURN          reduce using rule 59 (Statement -> IfElseStatement .)
    ;               reduce using rule 59 (Statement -> IfElseStatement .)
    ID              reduce using rule 59 (Statement -> IfElseStatement .)
    (               reduce using rule 59 (Statement -> IfElseStatement .)
    INTL            reduce using rule 59 (Statement -> IfElseStatement .)
    BOOLL           reduce using rule 59 (Statement -> IfElseStatement .)
    CHARL           reduce using rule 59 (Statement -> IfElseStatement .)
    }               reduce using rule 59 (Statement -> IfElseStatement .)
    )               reduce using rule 59 (Statement -> IfElseStatement .)


state 36

    (60) Statement -> ForStatement .

    IF              reduce using rule 60 (Statement -> ForStatement .)
    FOR             reduce using rule 60 (Statement -> ForStatement .)
    WHILE           reduce using rule 60 (Statement -> ForStatement .)
    BREAK           reduce using rule 60 (Statement -> ForStatement .)
    RETURN          reduce using rule 60 (Statement -> ForStatement .)
    ;               reduce using rule 60 (Statement -> ForStatement .)
    ID              reduce using rule 60 (Statement -> ForStatement .)
    (               reduce using rule 60 (Statement -> ForStatement .)
    INTL            reduce using rule 60 (Statement -> ForStatement .)
    BOOLL           reduce using rule 60 (Statement -> ForStatement .)
    CHARL           reduce using rule 60 (Statement -> ForStatement .)
    }               reduce using rule 60 (Statement -> ForStatement .)
    )               reduce using rule 60 (Statement -> ForStatement .)


state 37

    (61) Statement -> WhileStatement .

    IF              reduce using rule 61 (Statement -> WhileStatement .)
    FOR             reduce using rule 61 (Statement -> WhileStatement .)
    WHILE           reduce using rule 61 (Statement -> WhileStatement .)
    BREAK           reduce using rule 61 (Statement -> WhileStatement .)
    RETURN          reduce using rule 61 (Statement -> WhileStatement .)
    ;               reduce using rule 61 (Statement -> WhileStatement .)
    ID              reduce using rule 61 (Statement -> WhileStatement .)
    (               reduce using rule 61 (Statement -> WhileStatement .)
    INTL            reduce using rule 61 (Statement -> WhileStatement .)
    BOOLL           reduce using rule 61 (Statement -> WhileStatement .)
    CHARL           reduce using rule 61 (Statement -> WhileStatement .)
    }               reduce using rule 61 (Statement -> WhileStatement .)
    )               reduce using rule 61 (Statement -> WhileStatement .)


state 38

    (62) Statement -> BreakStatement .

    IF              reduce using rule 62 (Statement -> BreakStatement .)
    FOR             reduce using rule 62 (Statement -> BreakStatement .)
    WHILE           reduce using rule 62 (Statement -> BreakStatement .)
    BREAK           reduce using rule 62 (Statement -> BreakStatement .)
    RETURN          reduce using rule 62 (Statement -> BreakStatement .)
    ;               reduce using rule 62 (Statement -> BreakStatement .)
    ID              reduce using rule 62 (Statement -> BreakStatement .)
    (               reduce using rule 62 (Statement -> BreakStatement .)
    INTL            reduce using rule 62 (Statement -> BreakStatement .)
    BOOLL           reduce using rule 62 (Statement -> BreakStatement .)
    CHARL           reduce using rule 62 (Statement -> BreakStatement .)
    }               reduce using rule 62 (Statement -> BreakStatement .)
    )               reduce using rule 62 (Statement -> BreakStatement .)


state 39

    (63) Statement -> ReturnStatement .

    IF              reduce using rule 63 (Statement -> ReturnStatement .)
    FOR             reduce using rule 63 (Statement -> ReturnStatement .)
    WHILE           reduce using rule 63 (Statement -> ReturnStatement .)
    BREAK           reduce using rule 63 (Statement -> ReturnStatement .)
    RETURN          reduce using rule 63 (Statement -> ReturnStatement .)
    ;               reduce using rule 63 (Statement -> ReturnStatement .)
    ID              reduce using rule 63 (Statement -> ReturnStatement .)
    (               reduce using rule 63 (Statement -> ReturnStatement .)
    INTL            reduce using rule 63 (Statement -> ReturnStatement .)
    BOOLL           reduce using rule 63 (Statement -> ReturnStatement .)
    CHARL           reduce using rule 63 (Statement -> ReturnStatement .)
    }               reduce using rule 63 (Statement -> ReturnStatement .)
    )               reduce using rule 63 (Statement -> ReturnStatement .)


state 40

    (64) Statement -> BlankStatement .

    IF              reduce using rule 64 (Statement -> BlankStatement .)
    FOR             reduce using rule 64 (Statement -> BlankStatement .)
    WHILE           reduce using rule 64 (Statement -> BlankStatement .)
    BREAK           reduce using rule 64 (Statement -> BlankStatement .)
    RETURN          reduce using rule 64 (Statement -> BlankStatement .)
    ;               reduce using rule 64 (Statement -> BlankStatement .)
    ID              reduce using rule 64 (Statement -> BlankStatement .)
    (               reduce using rule 64 (Statement -> BlankStatement .)
    INTL            reduce using rule 64 (Statement -> BlankStatement .)
    BOOLL           reduce using rule 64 (Statement -> BlankStatement .)
    CHARL           reduce using rule 64 (Statement -> BlankStatement .)
    }               reduce using rule 64 (Statement -> BlankStatement .)
    )               reduce using rule 64 (Statement -> BlankStatement .)


state 41

    (44) AssignmentStatement -> Id . = Expression ;
    (45) AssignmentStatement -> Id . = Expression
    (49) DeclarationAssignmentStatement -> Id . Id = Expression ;
    (50) DeclarationStatement -> Id . Id ;
    (41) UnaryExpression -> Id .
    (39) FunctionCall -> Id . ( ArgumentListR )
    (8) Id -> . ID

    =               shift and go to state 65
    *               reduce using rule 41 (UnaryExpression -> Id .)
    /               reduce using rule 41 (UnaryExpression -> Id .)
    %               reduce using rule 41 (UnaryExpression -> Id .)
    +               reduce using rule 41 (UnaryExpression -> Id .)
    -               reduce using rule 41 (UnaryExpression -> Id .)
    GEQ             reduce using rule 41 (UnaryExpression -> Id .)
    LEQ             reduce using rule 41 (UnaryExpression -> Id .)
    LT              reduce using rule 41 (UnaryExpression -> Id .)
    GT              reduce using rule 41 (UnaryExpression -> Id .)
    NE              reduce using rule 41 (UnaryExpression -> Id .)
    EQ              reduce using rule 41 (UnaryExpression -> Id .)
    ;               reduce using rule 41 (UnaryExpression -> Id .)
    (               shift and go to state 66
    ID              shift and go to state 8

    Id                             shift and go to state 64

state 42

    (38) Expression -> BinaryExpressionPrio7 .

    ;               reduce using rule 38 (Expression -> BinaryExpressionPrio7 .)
    )               reduce using rule 38 (Expression -> BinaryExpressionPrio7 .)
    IF              reduce using rule 38 (Expression -> BinaryExpressionPrio7 .)
    FOR             reduce using rule 38 (Expression -> BinaryExpressionPrio7 .)
    WHILE           reduce using rule 38 (Expression -> BinaryExpressionPrio7 .)
    BREAK           reduce using rule 38 (Expression -> BinaryExpressionPrio7 .)
    RETURN          reduce using rule 38 (Expression -> BinaryExpressionPrio7 .)
    ID              reduce using rule 38 (Expression -> BinaryExpressionPrio7 .)
    (               reduce using rule 38 (Expression -> BinaryExpressionPrio7 .)
    INTL            reduce using rule 38 (Expression -> BinaryExpressionPrio7 .)
    BOOLL           reduce using rule 38 (Expression -> BinaryExpressionPrio7 .)
    CHARL           reduce using rule 38 (Expression -> BinaryExpressionPrio7 .)
    }               reduce using rule 38 (Expression -> BinaryExpressionPrio7 .)
    ,               reduce using rule 38 (Expression -> BinaryExpressionPrio7 .)


state 43

    (52) IfElseStatement -> IF . ( Expression ) Block ELSE Block

    (               shift and go to state 67


state 44

    (43) UnaryExpression -> ( . Expression )
    (38) Expression -> . BinaryExpressionPrio7
    (35) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7
    (36) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 Equal BinaryExpressionPrio7
    (37) BinaryExpressionPrio7 -> . BinaryExpressionPrio6
    (30) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6
    (31) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6
    (32) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Less BinaryExpressionPrio6
    (33) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Greater BinaryExpressionPrio6
    (34) BinaryExpressionPrio6 -> . BinaryExpressionPrio4
    (27) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Add BinaryExpressionPrio4
    (28) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Sub BinaryExpressionPrio4
    (29) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (23) BinaryExpressionPrio3 -> . UnaryExpression Mul BinaryExpressionPrio3
    (24) BinaryExpressionPrio3 -> . UnaryExpression Div BinaryExpressionPrio3
    (25) BinaryExpressionPrio3 -> . UnaryExpression Mod BinaryExpressionPrio3
    (26) BinaryExpressionPrio3 -> . UnaryExpression
    (40) UnaryExpression -> . FunctionCall
    (41) UnaryExpression -> . Id
    (42) UnaryExpression -> . Literal
    (43) UnaryExpression -> . ( Expression )
    (39) FunctionCall -> . Id ( ArgumentListR )
    (8) Id -> . ID
    (12) Literal -> . IntLiteral
    (13) Literal -> . BoolLiteral
    (14) Literal -> . CharLiteral
    (9) IntLiteral -> . INTL
    (2) BoolLiteral -> . BOOLL
    (3) CharLiteral -> . CHARL

    (               shift and go to state 44
    ID              shift and go to state 8
    INTL            shift and go to state 48
    BOOLL           shift and go to state 59
    CHARL           shift and go to state 60

    Expression                     shift and go to state 68
    BinaryExpressionPrio7          shift and go to state 42
    BinaryExpressionPrio6          shift and go to state 50
    BinaryExpressionPrio4          shift and go to state 51
    BinaryExpressionPrio3          shift and go to state 52
    UnaryExpression                shift and go to state 53
    FunctionCall                   shift and go to state 54
    Id                             shift and go to state 69
    Literal                        shift and go to state 55
    IntLiteral                     shift and go to state 56
    BoolLiteral                    shift and go to state 57
    CharLiteral                    shift and go to state 58

state 45

    (51) ForStatement -> FOR . ( Statement Expression ; Statement ) Block

    (               shift and go to state 70


state 46

    (67) WhileStatement -> WHILE . ( Expression ) Block

    (               shift and go to state 71


state 47

    (47) BreakStatement -> BREAK . INTL ;
    (48) BreakStatement -> BREAK . ;

    INTL            shift and go to state 72
    ;               shift and go to state 73


state 48

    (9) IntLiteral -> INTL .

    *               reduce using rule 9 (IntLiteral -> INTL .)
    /               reduce using rule 9 (IntLiteral -> INTL .)
    %               reduce using rule 9 (IntLiteral -> INTL .)
    +               reduce using rule 9 (IntLiteral -> INTL .)
    -               reduce using rule 9 (IntLiteral -> INTL .)
    GEQ             reduce using rule 9 (IntLiteral -> INTL .)
    LEQ             reduce using rule 9 (IntLiteral -> INTL .)
    LT              reduce using rule 9 (IntLiteral -> INTL .)
    GT              reduce using rule 9 (IntLiteral -> INTL .)
    NE              reduce using rule 9 (IntLiteral -> INTL .)
    EQ              reduce using rule 9 (IntLiteral -> INTL .)
    ;               reduce using rule 9 (IntLiteral -> INTL .)
    )               reduce using rule 9 (IntLiteral -> INTL .)
    IF              reduce using rule 9 (IntLiteral -> INTL .)
    FOR             reduce using rule 9 (IntLiteral -> INTL .)
    WHILE           reduce using rule 9 (IntLiteral -> INTL .)
    BREAK           reduce using rule 9 (IntLiteral -> INTL .)
    RETURN          reduce using rule 9 (IntLiteral -> INTL .)
    ID              reduce using rule 9 (IntLiteral -> INTL .)
    (               reduce using rule 9 (IntLiteral -> INTL .)
    INTL            reduce using rule 9 (IntLiteral -> INTL .)
    BOOLL           reduce using rule 9 (IntLiteral -> INTL .)
    CHARL           reduce using rule 9 (IntLiteral -> INTL .)
    }               reduce using rule 9 (IntLiteral -> INTL .)
    ,               reduce using rule 9 (IntLiteral -> INTL .)


state 49

    (53) ReturnStatement -> RETURN . Expression ;
    (54) ReturnStatement -> RETURN . ;
    (38) Expression -> . BinaryExpressionPrio7
    (35) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7
    (36) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 Equal BinaryExpressionPrio7
    (37) BinaryExpressionPrio7 -> . BinaryExpressionPrio6
    (30) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6
    (31) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6
    (32) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Less BinaryExpressionPrio6
    (33) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Greater BinaryExpressionPrio6
    (34) BinaryExpressionPrio6 -> . BinaryExpressionPrio4
    (27) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Add BinaryExpressionPrio4
    (28) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Sub BinaryExpressionPrio4
    (29) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (23) BinaryExpressionPrio3 -> . UnaryExpression Mul BinaryExpressionPrio3
    (24) BinaryExpressionPrio3 -> . UnaryExpression Div BinaryExpressionPrio3
    (25) BinaryExpressionPrio3 -> . UnaryExpression Mod BinaryExpressionPrio3
    (26) BinaryExpressionPrio3 -> . UnaryExpression
    (40) UnaryExpression -> . FunctionCall
    (41) UnaryExpression -> . Id
    (42) UnaryExpression -> . Literal
    (43) UnaryExpression -> . ( Expression )
    (39) FunctionCall -> . Id ( ArgumentListR )
    (8) Id -> . ID
    (12) Literal -> . IntLiteral
    (13) Literal -> . BoolLiteral
    (14) Literal -> . CharLiteral
    (9) IntLiteral -> . INTL
    (2) BoolLiteral -> . BOOLL
    (3) CharLiteral -> . CHARL

    ;               shift and go to state 75
    (               shift and go to state 44
    ID              shift and go to state 8
    INTL            shift and go to state 48
    BOOLL           shift and go to state 59
    CHARL           shift and go to state 60

    Expression                     shift and go to state 74
    BinaryExpressionPrio7          shift and go to state 42
    BinaryExpressionPrio6          shift and go to state 50
    BinaryExpressionPrio4          shift and go to state 51
    BinaryExpressionPrio3          shift and go to state 52
    UnaryExpression                shift and go to state 53
    FunctionCall                   shift and go to state 54
    Id                             shift and go to state 69
    Literal                        shift and go to state 55
    IntLiteral                     shift and go to state 56
    BoolLiteral                    shift and go to state 57
    CharLiteral                    shift and go to state 58

state 50

    (35) BinaryExpressionPrio7 -> BinaryExpressionPrio6 . NotEqual BinaryExpressionPrio7
    (36) BinaryExpressionPrio7 -> BinaryExpressionPrio6 . Equal BinaryExpressionPrio7
    (37) BinaryExpressionPrio7 -> BinaryExpressionPrio6 .
    (17) NotEqual -> . NE
    (5) Equal -> . EQ

    ;               reduce using rule 37 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 .)
    )               reduce using rule 37 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 .)
    IF              reduce using rule 37 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 .)
    FOR             reduce using rule 37 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 .)
    WHILE           reduce using rule 37 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 .)
    BREAK           reduce using rule 37 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 .)
    RETURN          reduce using rule 37 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 .)
    ID              reduce using rule 37 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 .)
    (               reduce using rule 37 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 .)
    INTL            reduce using rule 37 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 .)
    BOOLL           reduce using rule 37 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 .)
    CHARL           reduce using rule 37 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 .)
    }               reduce using rule 37 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 .)
    ,               reduce using rule 37 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 .)
    NE              shift and go to state 78
    EQ              shift and go to state 79

    NotEqual                       shift and go to state 76
    Equal                          shift and go to state 77

state 51

    (30) BinaryExpressionPrio6 -> BinaryExpressionPrio4 . LessEqual BinaryExpressionPrio6
    (31) BinaryExpressionPrio6 -> BinaryExpressionPrio4 . GreaterEqual BinaryExpressionPrio6
    (32) BinaryExpressionPrio6 -> BinaryExpressionPrio4 . Less BinaryExpressionPrio6
    (33) BinaryExpressionPrio6 -> BinaryExpressionPrio4 . Greater BinaryExpressionPrio6
    (34) BinaryExpressionPrio6 -> BinaryExpressionPrio4 .
    (11) LessEqual -> . GEQ
    (7) GreaterEqual -> . LEQ
    (10) Less -> . LT
    (6) Greater -> . GT

    NE              reduce using rule 34 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 .)
    EQ              reduce using rule 34 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 .)
    ;               reduce using rule 34 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 .)
    )               reduce using rule 34 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 .)
    IF              reduce using rule 34 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 .)
    FOR             reduce using rule 34 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 .)
    WHILE           reduce using rule 34 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 .)
    BREAK           reduce using rule 34 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 .)
    RETURN          reduce using rule 34 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 .)
    ID              reduce using rule 34 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 .)
    (               reduce using rule 34 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 .)
    INTL            reduce using rule 34 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 .)
    BOOLL           reduce using rule 34 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 .)
    CHARL           reduce using rule 34 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 .)
    }               reduce using rule 34 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 .)
    ,               reduce using rule 34 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 .)
    GEQ             shift and go to state 84
    LEQ             shift and go to state 85
    LT              shift and go to state 86
    GT              shift and go to state 87

    LessEqual                      shift and go to state 80
    GreaterEqual                   shift and go to state 81
    Less                           shift and go to state 82
    Greater                        shift and go to state 83

state 52

    (27) BinaryExpressionPrio4 -> BinaryExpressionPrio3 . Add BinaryExpressionPrio4
    (28) BinaryExpressionPrio4 -> BinaryExpressionPrio3 . Sub BinaryExpressionPrio4
    (29) BinaryExpressionPrio4 -> BinaryExpressionPrio3 .
    (1) Add -> . +
    (18) Sub -> . -

    GEQ             reduce using rule 29 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 .)
    LEQ             reduce using rule 29 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 .)
    LT              reduce using rule 29 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 .)
    GT              reduce using rule 29 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 .)
    NE              reduce using rule 29 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 .)
    EQ              reduce using rule 29 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 .)
    ;               reduce using rule 29 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 .)
    )               reduce using rule 29 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 .)
    IF              reduce using rule 29 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 .)
    FOR             reduce using rule 29 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 .)
    WHILE           reduce using rule 29 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 .)
    BREAK           reduce using rule 29 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 .)
    RETURN          reduce using rule 29 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 .)
    ID              reduce using rule 29 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 .)
    (               reduce using rule 29 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 .)
    INTL            reduce using rule 29 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 .)
    BOOLL           reduce using rule 29 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 .)
    CHARL           reduce using rule 29 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 .)
    }               reduce using rule 29 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 .)
    ,               reduce using rule 29 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 .)
    +               shift and go to state 90
    -               shift and go to state 91

    Add                            shift and go to state 88
    Sub                            shift and go to state 89

state 53

    (23) BinaryExpressionPrio3 -> UnaryExpression . Mul BinaryExpressionPrio3
    (24) BinaryExpressionPrio3 -> UnaryExpression . Div BinaryExpressionPrio3
    (25) BinaryExpressionPrio3 -> UnaryExpression . Mod BinaryExpressionPrio3
    (26) BinaryExpressionPrio3 -> UnaryExpression .
    (16) Mul -> . *
    (4) Div -> . /
    (15) Mod -> . %

    +               reduce using rule 26 (BinaryExpressionPrio3 -> UnaryExpression .)
    -               reduce using rule 26 (BinaryExpressionPrio3 -> UnaryExpression .)
    GEQ             reduce using rule 26 (BinaryExpressionPrio3 -> UnaryExpression .)
    LEQ             reduce using rule 26 (BinaryExpressionPrio3 -> UnaryExpression .)
    LT              reduce using rule 26 (BinaryExpressionPrio3 -> UnaryExpression .)
    GT              reduce using rule 26 (BinaryExpressionPrio3 -> UnaryExpression .)
    NE              reduce using rule 26 (BinaryExpressionPrio3 -> UnaryExpression .)
    EQ              reduce using rule 26 (BinaryExpressionPrio3 -> UnaryExpression .)
    ;               reduce using rule 26 (BinaryExpressionPrio3 -> UnaryExpression .)
    )               reduce using rule 26 (BinaryExpressionPrio3 -> UnaryExpression .)
    IF              reduce using rule 26 (BinaryExpressionPrio3 -> UnaryExpression .)
    FOR             reduce using rule 26 (BinaryExpressionPrio3 -> UnaryExpression .)
    WHILE           reduce using rule 26 (BinaryExpressionPrio3 -> UnaryExpression .)
    BREAK           reduce using rule 26 (BinaryExpressionPrio3 -> UnaryExpression .)
    RETURN          reduce using rule 26 (BinaryExpressionPrio3 -> UnaryExpression .)
    ID              reduce using rule 26 (BinaryExpressionPrio3 -> UnaryExpression .)
    (               reduce using rule 26 (BinaryExpressionPrio3 -> UnaryExpression .)
    INTL            reduce using rule 26 (BinaryExpressionPrio3 -> UnaryExpression .)
    BOOLL           reduce using rule 26 (BinaryExpressionPrio3 -> UnaryExpression .)
    CHARL           reduce using rule 26 (BinaryExpressionPrio3 -> UnaryExpression .)
    }               reduce using rule 26 (BinaryExpressionPrio3 -> UnaryExpression .)
    ,               reduce using rule 26 (BinaryExpressionPrio3 -> UnaryExpression .)
    *               shift and go to state 95
    /               shift and go to state 96
    %               shift and go to state 97

    Mul                            shift and go to state 92
    Div                            shift and go to state 93
    Mod                            shift and go to state 94

state 54

    (40) UnaryExpression -> FunctionCall .

    *               reduce using rule 40 (UnaryExpression -> FunctionCall .)
    /               reduce using rule 40 (UnaryExpression -> FunctionCall .)
    %               reduce using rule 40 (UnaryExpression -> FunctionCall .)
    +               reduce using rule 40 (UnaryExpression -> FunctionCall .)
    -               reduce using rule 40 (UnaryExpression -> FunctionCall .)
    GEQ             reduce using rule 40 (UnaryExpression -> FunctionCall .)
    LEQ             reduce using rule 40 (UnaryExpression -> FunctionCall .)
    LT              reduce using rule 40 (UnaryExpression -> FunctionCall .)
    GT              reduce using rule 40 (UnaryExpression -> FunctionCall .)
    NE              reduce using rule 40 (UnaryExpression -> FunctionCall .)
    EQ              reduce using rule 40 (UnaryExpression -> FunctionCall .)
    ;               reduce using rule 40 (UnaryExpression -> FunctionCall .)
    )               reduce using rule 40 (UnaryExpression -> FunctionCall .)
    IF              reduce using rule 40 (UnaryExpression -> FunctionCall .)
    FOR             reduce using rule 40 (UnaryExpression -> FunctionCall .)
    WHILE           reduce using rule 40 (UnaryExpression -> FunctionCall .)
    BREAK           reduce using rule 40 (UnaryExpression -> FunctionCall .)
    RETURN          reduce using rule 40 (UnaryExpression -> FunctionCall .)
    ID              reduce using rule 40 (UnaryExpression -> FunctionCall .)
    (               reduce using rule 40 (UnaryExpression -> FunctionCall .)
    INTL            reduce using rule 40 (UnaryExpression -> FunctionCall .)
    BOOLL           reduce using rule 40 (UnaryExpression -> FunctionCall .)
    CHARL           reduce using rule 40 (UnaryExpression -> FunctionCall .)
    }               reduce using rule 40 (UnaryExpression -> FunctionCall .)
    ,               reduce using rule 40 (UnaryExpression -> FunctionCall .)


state 55

    (42) UnaryExpression -> Literal .

    *               reduce using rule 42 (UnaryExpression -> Literal .)
    /               reduce using rule 42 (UnaryExpression -> Literal .)
    %               reduce using rule 42 (UnaryExpression -> Literal .)
    +               reduce using rule 42 (UnaryExpression -> Literal .)
    -               reduce using rule 42 (UnaryExpression -> Literal .)
    GEQ             reduce using rule 42 (UnaryExpression -> Literal .)
    LEQ             reduce using rule 42 (UnaryExpression -> Literal .)
    LT              reduce using rule 42 (UnaryExpression -> Literal .)
    GT              reduce using rule 42 (UnaryExpression -> Literal .)
    NE              reduce using rule 42 (UnaryExpression -> Literal .)
    EQ              reduce using rule 42 (UnaryExpression -> Literal .)
    ;               reduce using rule 42 (UnaryExpression -> Literal .)
    )               reduce using rule 42 (UnaryExpression -> Literal .)
    IF              reduce using rule 42 (UnaryExpression -> Literal .)
    FOR             reduce using rule 42 (UnaryExpression -> Literal .)
    WHILE           reduce using rule 42 (UnaryExpression -> Literal .)
    BREAK           reduce using rule 42 (UnaryExpression -> Literal .)
    RETURN          reduce using rule 42 (UnaryExpression -> Literal .)
    ID              reduce using rule 42 (UnaryExpression -> Literal .)
    (               reduce using rule 42 (UnaryExpression -> Literal .)
    INTL            reduce using rule 42 (UnaryExpression -> Literal .)
    BOOLL           reduce using rule 42 (UnaryExpression -> Literal .)
    CHARL           reduce using rule 42 (UnaryExpression -> Literal .)
    }               reduce using rule 42 (UnaryExpression -> Literal .)
    ,               reduce using rule 42 (UnaryExpression -> Literal .)


state 56

    (12) Literal -> IntLiteral .

    *               reduce using rule 12 (Literal -> IntLiteral .)
    /               reduce using rule 12 (Literal -> IntLiteral .)
    %               reduce using rule 12 (Literal -> IntLiteral .)
    +               reduce using rule 12 (Literal -> IntLiteral .)
    -               reduce using rule 12 (Literal -> IntLiteral .)
    GEQ             reduce using rule 12 (Literal -> IntLiteral .)
    LEQ             reduce using rule 12 (Literal -> IntLiteral .)
    LT              reduce using rule 12 (Literal -> IntLiteral .)
    GT              reduce using rule 12 (Literal -> IntLiteral .)
    NE              reduce using rule 12 (Literal -> IntLiteral .)
    EQ              reduce using rule 12 (Literal -> IntLiteral .)
    ;               reduce using rule 12 (Literal -> IntLiteral .)
    )               reduce using rule 12 (Literal -> IntLiteral .)
    IF              reduce using rule 12 (Literal -> IntLiteral .)
    FOR             reduce using rule 12 (Literal -> IntLiteral .)
    WHILE           reduce using rule 12 (Literal -> IntLiteral .)
    BREAK           reduce using rule 12 (Literal -> IntLiteral .)
    RETURN          reduce using rule 12 (Literal -> IntLiteral .)
    ID              reduce using rule 12 (Literal -> IntLiteral .)
    (               reduce using rule 12 (Literal -> IntLiteral .)
    INTL            reduce using rule 12 (Literal -> IntLiteral .)
    BOOLL           reduce using rule 12 (Literal -> IntLiteral .)
    CHARL           reduce using rule 12 (Literal -> IntLiteral .)
    }               reduce using rule 12 (Literal -> IntLiteral .)
    ,               reduce using rule 12 (Literal -> IntLiteral .)


state 57

    (13) Literal -> BoolLiteral .

    *               reduce using rule 13 (Literal -> BoolLiteral .)
    /               reduce using rule 13 (Literal -> BoolLiteral .)
    %               reduce using rule 13 (Literal -> BoolLiteral .)
    +               reduce using rule 13 (Literal -> BoolLiteral .)
    -               reduce using rule 13 (Literal -> BoolLiteral .)
    GEQ             reduce using rule 13 (Literal -> BoolLiteral .)
    LEQ             reduce using rule 13 (Literal -> BoolLiteral .)
    LT              reduce using rule 13 (Literal -> BoolLiteral .)
    GT              reduce using rule 13 (Literal -> BoolLiteral .)
    NE              reduce using rule 13 (Literal -> BoolLiteral .)
    EQ              reduce using rule 13 (Literal -> BoolLiteral .)
    ;               reduce using rule 13 (Literal -> BoolLiteral .)
    )               reduce using rule 13 (Literal -> BoolLiteral .)
    IF              reduce using rule 13 (Literal -> BoolLiteral .)
    FOR             reduce using rule 13 (Literal -> BoolLiteral .)
    WHILE           reduce using rule 13 (Literal -> BoolLiteral .)
    BREAK           reduce using rule 13 (Literal -> BoolLiteral .)
    RETURN          reduce using rule 13 (Literal -> BoolLiteral .)
    ID              reduce using rule 13 (Literal -> BoolLiteral .)
    (               reduce using rule 13 (Literal -> BoolLiteral .)
    INTL            reduce using rule 13 (Literal -> BoolLiteral .)
    BOOLL           reduce using rule 13 (Literal -> BoolLiteral .)
    CHARL           reduce using rule 13 (Literal -> BoolLiteral .)
    }               reduce using rule 13 (Literal -> BoolLiteral .)
    ,               reduce using rule 13 (Literal -> BoolLiteral .)


state 58

    (14) Literal -> CharLiteral .

    *               reduce using rule 14 (Literal -> CharLiteral .)
    /               reduce using rule 14 (Literal -> CharLiteral .)
    %               reduce using rule 14 (Literal -> CharLiteral .)
    +               reduce using rule 14 (Literal -> CharLiteral .)
    -               reduce using rule 14 (Literal -> CharLiteral .)
    GEQ             reduce using rule 14 (Literal -> CharLiteral .)
    LEQ             reduce using rule 14 (Literal -> CharLiteral .)
    LT              reduce using rule 14 (Literal -> CharLiteral .)
    GT              reduce using rule 14 (Literal -> CharLiteral .)
    NE              reduce using rule 14 (Literal -> CharLiteral .)
    EQ              reduce using rule 14 (Literal -> CharLiteral .)
    ;               reduce using rule 14 (Literal -> CharLiteral .)
    )               reduce using rule 14 (Literal -> CharLiteral .)
    IF              reduce using rule 14 (Literal -> CharLiteral .)
    FOR             reduce using rule 14 (Literal -> CharLiteral .)
    WHILE           reduce using rule 14 (Literal -> CharLiteral .)
    BREAK           reduce using rule 14 (Literal -> CharLiteral .)
    RETURN          reduce using rule 14 (Literal -> CharLiteral .)
    ID              reduce using rule 14 (Literal -> CharLiteral .)
    (               reduce using rule 14 (Literal -> CharLiteral .)
    INTL            reduce using rule 14 (Literal -> CharLiteral .)
    BOOLL           reduce using rule 14 (Literal -> CharLiteral .)
    CHARL           reduce using rule 14 (Literal -> CharLiteral .)
    }               reduce using rule 14 (Literal -> CharLiteral .)
    ,               reduce using rule 14 (Literal -> CharLiteral .)


state 59

    (2) BoolLiteral -> BOOLL .

    *               reduce using rule 2 (BoolLiteral -> BOOLL .)
    /               reduce using rule 2 (BoolLiteral -> BOOLL .)
    %               reduce using rule 2 (BoolLiteral -> BOOLL .)
    +               reduce using rule 2 (BoolLiteral -> BOOLL .)
    -               reduce using rule 2 (BoolLiteral -> BOOLL .)
    GEQ             reduce using rule 2 (BoolLiteral -> BOOLL .)
    LEQ             reduce using rule 2 (BoolLiteral -> BOOLL .)
    LT              reduce using rule 2 (BoolLiteral -> BOOLL .)
    GT              reduce using rule 2 (BoolLiteral -> BOOLL .)
    NE              reduce using rule 2 (BoolLiteral -> BOOLL .)
    EQ              reduce using rule 2 (BoolLiteral -> BOOLL .)
    ;               reduce using rule 2 (BoolLiteral -> BOOLL .)
    )               reduce using rule 2 (BoolLiteral -> BOOLL .)
    IF              reduce using rule 2 (BoolLiteral -> BOOLL .)
    FOR             reduce using rule 2 (BoolLiteral -> BOOLL .)
    WHILE           reduce using rule 2 (BoolLiteral -> BOOLL .)
    BREAK           reduce using rule 2 (BoolLiteral -> BOOLL .)
    RETURN          reduce using rule 2 (BoolLiteral -> BOOLL .)
    ID              reduce using rule 2 (BoolLiteral -> BOOLL .)
    (               reduce using rule 2 (BoolLiteral -> BOOLL .)
    INTL            reduce using rule 2 (BoolLiteral -> BOOLL .)
    BOOLL           reduce using rule 2 (BoolLiteral -> BOOLL .)
    CHARL           reduce using rule 2 (BoolLiteral -> BOOLL .)
    }               reduce using rule 2 (BoolLiteral -> BOOLL .)
    ,               reduce using rule 2 (BoolLiteral -> BOOLL .)


state 60

    (3) CharLiteral -> CHARL .

    *               reduce using rule 3 (CharLiteral -> CHARL .)
    /               reduce using rule 3 (CharLiteral -> CHARL .)
    %               reduce using rule 3 (CharLiteral -> CHARL .)
    +               reduce using rule 3 (CharLiteral -> CHARL .)
    -               reduce using rule 3 (CharLiteral -> CHARL .)
    GEQ             reduce using rule 3 (CharLiteral -> CHARL .)
    LEQ             reduce using rule 3 (CharLiteral -> CHARL .)
    LT              reduce using rule 3 (CharLiteral -> CHARL .)
    GT              reduce using rule 3 (CharLiteral -> CHARL .)
    NE              reduce using rule 3 (CharLiteral -> CHARL .)
    EQ              reduce using rule 3 (CharLiteral -> CHARL .)
    ;               reduce using rule 3 (CharLiteral -> CHARL .)
    )               reduce using rule 3 (CharLiteral -> CHARL .)
    IF              reduce using rule 3 (CharLiteral -> CHARL .)
    FOR             reduce using rule 3 (CharLiteral -> CHARL .)
    WHILE           reduce using rule 3 (CharLiteral -> CHARL .)
    BREAK           reduce using rule 3 (CharLiteral -> CHARL .)
    RETURN          reduce using rule 3 (CharLiteral -> CHARL .)
    ID              reduce using rule 3 (CharLiteral -> CHARL .)
    (               reduce using rule 3 (CharLiteral -> CHARL .)
    INTL            reduce using rule 3 (CharLiteral -> CHARL .)
    BOOLL           reduce using rule 3 (CharLiteral -> CHARL .)
    CHARL           reduce using rule 3 (CharLiteral -> CHARL .)
    }               reduce using rule 3 (CharLiteral -> CHARL .)
    ,               reduce using rule 3 (CharLiteral -> CHARL .)


state 61

    (68) Block -> { StatementListR } .

    STRUCT          reduce using rule 68 (Block -> { StatementListR } .)
    ID              reduce using rule 68 (Block -> { StatementListR } .)
    $end            reduce using rule 68 (Block -> { StatementListR } .)
    ELSE            reduce using rule 68 (Block -> { StatementListR } .)
    IF              reduce using rule 68 (Block -> { StatementListR } .)
    FOR             reduce using rule 68 (Block -> { StatementListR } .)
    WHILE           reduce using rule 68 (Block -> { StatementListR } .)
    BREAK           reduce using rule 68 (Block -> { StatementListR } .)
    RETURN          reduce using rule 68 (Block -> { StatementListR } .)
    ;               reduce using rule 68 (Block -> { StatementListR } .)
    (               reduce using rule 68 (Block -> { StatementListR } .)
    INTL            reduce using rule 68 (Block -> { StatementListR } .)
    BOOLL           reduce using rule 68 (Block -> { StatementListR } .)
    CHARL           reduce using rule 68 (Block -> { StatementListR } .)
    }               reduce using rule 68 (Block -> { StatementListR } .)
    )               reduce using rule 68 (Block -> { StatementListR } .)


state 62

    (65) StatementListR -> Statement StatementListR .

    }               reduce using rule 65 (StatementListR -> Statement StatementListR .)


state 63

    (57) Statement -> Expression ; .

    IF              reduce using rule 57 (Statement -> Expression ; .)
    FOR             reduce using rule 57 (Statement -> Expression ; .)
    WHILE           reduce using rule 57 (Statement -> Expression ; .)
    BREAK           reduce using rule 57 (Statement -> Expression ; .)
    RETURN          reduce using rule 57 (Statement -> Expression ; .)
    ;               reduce using rule 57 (Statement -> Expression ; .)
    ID              reduce using rule 57 (Statement -> Expression ; .)
    (               reduce using rule 57 (Statement -> Expression ; .)
    INTL            reduce using rule 57 (Statement -> Expression ; .)
    BOOLL           reduce using rule 57 (Statement -> Expression ; .)
    CHARL           reduce using rule 57 (Statement -> Expression ; .)
    }               reduce using rule 57 (Statement -> Expression ; .)
    )               reduce using rule 57 (Statement -> Expression ; .)


state 64

    (49) DeclarationAssignmentStatement -> Id Id . = Expression ;
    (50) DeclarationStatement -> Id Id . ;

    =               shift and go to state 98
    ;               shift and go to state 99


state 65

    (44) AssignmentStatement -> Id = . Expression ;
    (45) AssignmentStatement -> Id = . Expression
    (38) Expression -> . BinaryExpressionPrio7
    (35) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7
    (36) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 Equal BinaryExpressionPrio7
    (37) BinaryExpressionPrio7 -> . BinaryExpressionPrio6
    (30) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6
    (31) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6
    (32) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Less BinaryExpressionPrio6
    (33) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Greater BinaryExpressionPrio6
    (34) BinaryExpressionPrio6 -> . BinaryExpressionPrio4
    (27) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Add BinaryExpressionPrio4
    (28) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Sub BinaryExpressionPrio4
    (29) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (23) BinaryExpressionPrio3 -> . UnaryExpression Mul BinaryExpressionPrio3
    (24) BinaryExpressionPrio3 -> . UnaryExpression Div BinaryExpressionPrio3
    (25) BinaryExpressionPrio3 -> . UnaryExpression Mod BinaryExpressionPrio3
    (26) BinaryExpressionPrio3 -> . UnaryExpression
    (40) UnaryExpression -> . FunctionCall
    (41) UnaryExpression -> . Id
    (42) UnaryExpression -> . Literal
    (43) UnaryExpression -> . ( Expression )
    (39) FunctionCall -> . Id ( ArgumentListR )
    (8) Id -> . ID
    (12) Literal -> . IntLiteral
    (13) Literal -> . BoolLiteral
    (14) Literal -> . CharLiteral
    (9) IntLiteral -> . INTL
    (2) BoolLiteral -> . BOOLL
    (3) CharLiteral -> . CHARL

    (               shift and go to state 44
    ID              shift and go to state 8
    INTL            shift and go to state 48
    BOOLL           shift and go to state 59
    CHARL           shift and go to state 60

    Id                             shift and go to state 69
    Expression                     shift and go to state 100
    BinaryExpressionPrio7          shift and go to state 42
    BinaryExpressionPrio6          shift and go to state 50
    BinaryExpressionPrio4          shift and go to state 51
    BinaryExpressionPrio3          shift and go to state 52
    UnaryExpression                shift and go to state 53
    FunctionCall                   shift and go to state 54
    Literal                        shift and go to state 55
    IntLiteral                     shift and go to state 56
    BoolLiteral                    shift and go to state 57
    CharLiteral                    shift and go to state 58

state 66

    (39) FunctionCall -> Id ( . ArgumentListR )
    (20) ArgumentListR -> . Argument , ArgumentListR
    (21) ArgumentListR -> . Argument
    (22) ArgumentListR -> . empty
    (19) Argument -> . Expression
    (79) empty -> .
    (38) Expression -> . BinaryExpressionPrio7
    (35) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7
    (36) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 Equal BinaryExpressionPrio7
    (37) BinaryExpressionPrio7 -> . BinaryExpressionPrio6
    (30) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6
    (31) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6
    (32) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Less BinaryExpressionPrio6
    (33) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Greater BinaryExpressionPrio6
    (34) BinaryExpressionPrio6 -> . BinaryExpressionPrio4
    (27) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Add BinaryExpressionPrio4
    (28) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Sub BinaryExpressionPrio4
    (29) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (23) BinaryExpressionPrio3 -> . UnaryExpression Mul BinaryExpressionPrio3
    (24) BinaryExpressionPrio3 -> . UnaryExpression Div BinaryExpressionPrio3
    (25) BinaryExpressionPrio3 -> . UnaryExpression Mod BinaryExpressionPrio3
    (26) BinaryExpressionPrio3 -> . UnaryExpression
    (40) UnaryExpression -> . FunctionCall
    (41) UnaryExpression -> . Id
    (42) UnaryExpression -> . Literal
    (43) UnaryExpression -> . ( Expression )
    (39) FunctionCall -> . Id ( ArgumentListR )
    (8) Id -> . ID
    (12) Literal -> . IntLiteral
    (13) Literal -> . BoolLiteral
    (14) Literal -> . CharLiteral
    (9) IntLiteral -> . INTL
    (2) BoolLiteral -> . BOOLL
    (3) CharLiteral -> . CHARL

    )               reduce using rule 79 (empty -> .)
    (               shift and go to state 44
    ID              shift and go to state 8
    INTL            shift and go to state 48
    BOOLL           shift and go to state 59
    CHARL           shift and go to state 60

    Id                             shift and go to state 69
    ArgumentListR                  shift and go to state 101
    Argument                       shift and go to state 102
    empty                          shift and go to state 103
    Expression                     shift and go to state 104
    BinaryExpressionPrio7          shift and go to state 42
    BinaryExpressionPrio6          shift and go to state 50
    BinaryExpressionPrio4          shift and go to state 51
    BinaryExpressionPrio3          shift and go to state 52
    UnaryExpression                shift and go to state 53
    FunctionCall                   shift and go to state 54
    Literal                        shift and go to state 55
    IntLiteral                     shift and go to state 56
    BoolLiteral                    shift and go to state 57
    CharLiteral                    shift and go to state 58

state 67

    (52) IfElseStatement -> IF ( . Expression ) Block ELSE Block
    (38) Expression -> . BinaryExpressionPrio7
    (35) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7
    (36) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 Equal BinaryExpressionPrio7
    (37) BinaryExpressionPrio7 -> . BinaryExpressionPrio6
    (30) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6
    (31) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6
    (32) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Less BinaryExpressionPrio6
    (33) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Greater BinaryExpressionPrio6
    (34) BinaryExpressionPrio6 -> . BinaryExpressionPrio4
    (27) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Add BinaryExpressionPrio4
    (28) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Sub BinaryExpressionPrio4
    (29) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (23) BinaryExpressionPrio3 -> . UnaryExpression Mul BinaryExpressionPrio3
    (24) BinaryExpressionPrio3 -> . UnaryExpression Div BinaryExpressionPrio3
    (25) BinaryExpressionPrio3 -> . UnaryExpression Mod BinaryExpressionPrio3
    (26) BinaryExpressionPrio3 -> . UnaryExpression
    (40) UnaryExpression -> . FunctionCall
    (41) UnaryExpression -> . Id
    (42) UnaryExpression -> . Literal
    (43) UnaryExpression -> . ( Expression )
    (39) FunctionCall -> . Id ( ArgumentListR )
    (8) Id -> . ID
    (12) Literal -> . IntLiteral
    (13) Literal -> . BoolLiteral
    (14) Literal -> . CharLiteral
    (9) IntLiteral -> . INTL
    (2) BoolLiteral -> . BOOLL
    (3) CharLiteral -> . CHARL

    (               shift and go to state 44
    ID              shift and go to state 8
    INTL            shift and go to state 48
    BOOLL           shift and go to state 59
    CHARL           shift and go to state 60

    Expression                     shift and go to state 105
    BinaryExpressionPrio7          shift and go to state 42
    BinaryExpressionPrio6          shift and go to state 50
    BinaryExpressionPrio4          shift and go to state 51
    BinaryExpressionPrio3          shift and go to state 52
    UnaryExpression                shift and go to state 53
    FunctionCall                   shift and go to state 54
    Id                             shift and go to state 69
    Literal                        shift and go to state 55
    IntLiteral                     shift and go to state 56
    BoolLiteral                    shift and go to state 57
    CharLiteral                    shift and go to state 58

state 68

    (43) UnaryExpression -> ( Expression . )

    )               shift and go to state 106


state 69

    (41) UnaryExpression -> Id .
    (39) FunctionCall -> Id . ( ArgumentListR )

  ! shift/reduce conflict for ( resolved as shift
    *               reduce using rule 41 (UnaryExpression -> Id .)
    /               reduce using rule 41 (UnaryExpression -> Id .)
    %               reduce using rule 41 (UnaryExpression -> Id .)
    +               reduce using rule 41 (UnaryExpression -> Id .)
    -               reduce using rule 41 (UnaryExpression -> Id .)
    GEQ             reduce using rule 41 (UnaryExpression -> Id .)
    LEQ             reduce using rule 41 (UnaryExpression -> Id .)
    LT              reduce using rule 41 (UnaryExpression -> Id .)
    GT              reduce using rule 41 (UnaryExpression -> Id .)
    NE              reduce using rule 41 (UnaryExpression -> Id .)
    EQ              reduce using rule 41 (UnaryExpression -> Id .)
    )               reduce using rule 41 (UnaryExpression -> Id .)
    ;               reduce using rule 41 (UnaryExpression -> Id .)
    IF              reduce using rule 41 (UnaryExpression -> Id .)
    FOR             reduce using rule 41 (UnaryExpression -> Id .)
    WHILE           reduce using rule 41 (UnaryExpression -> Id .)
    BREAK           reduce using rule 41 (UnaryExpression -> Id .)
    RETURN          reduce using rule 41 (UnaryExpression -> Id .)
    ID              reduce using rule 41 (UnaryExpression -> Id .)
    INTL            reduce using rule 41 (UnaryExpression -> Id .)
    BOOLL           reduce using rule 41 (UnaryExpression -> Id .)
    CHARL           reduce using rule 41 (UnaryExpression -> Id .)
    }               reduce using rule 41 (UnaryExpression -> Id .)
    ,               reduce using rule 41 (UnaryExpression -> Id .)
    (               shift and go to state 66

  ! (               [ reduce using rule 41 (UnaryExpression -> Id .) ]


state 70

    (51) ForStatement -> FOR ( . Statement Expression ; Statement ) Block
    (55) Statement -> . AssignmentStatement
    (56) Statement -> . DeclarationAssignmentStatement
    (57) Statement -> . Expression ;
    (58) Statement -> . DeclarationStatement
    (59) Statement -> . IfElseStatement
    (60) Statement -> . ForStatement
    (61) Statement -> . WhileStatement
    (62) Statement -> . BreakStatement
    (63) Statement -> . ReturnStatement
    (64) Statement -> . BlankStatement
    (44) AssignmentStatement -> . Id = Expression ;
    (45) AssignmentStatement -> . Id = Expression
    (49) DeclarationAssignmentStatement -> . Id Id = Expression ;
    (38) Expression -> . BinaryExpressionPrio7
    (50) DeclarationStatement -> . Id Id ;
    (52) IfElseStatement -> . IF ( Expression ) Block ELSE Block
    (51) ForStatement -> . FOR ( Statement Expression ; Statement ) Block
    (67) WhileStatement -> . WHILE ( Expression ) Block
    (47) BreakStatement -> . BREAK INTL ;
    (48) BreakStatement -> . BREAK ;
    (53) ReturnStatement -> . RETURN Expression ;
    (54) ReturnStatement -> . RETURN ;
    (46) BlankStatement -> . ;
    (8) Id -> . ID
    (35) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7
    (36) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 Equal BinaryExpressionPrio7
    (37) BinaryExpressionPrio7 -> . BinaryExpressionPrio6
    (30) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6
    (31) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6
    (32) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Less BinaryExpressionPrio6
    (33) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Greater BinaryExpressionPrio6
    (34) BinaryExpressionPrio6 -> . BinaryExpressionPrio4
    (27) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Add BinaryExpressionPrio4
    (28) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Sub BinaryExpressionPrio4
    (29) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (23) BinaryExpressionPrio3 -> . UnaryExpression Mul BinaryExpressionPrio3
    (24) BinaryExpressionPrio3 -> . UnaryExpression Div BinaryExpressionPrio3
    (25) BinaryExpressionPrio3 -> . UnaryExpression Mod BinaryExpressionPrio3
    (26) BinaryExpressionPrio3 -> . UnaryExpression
    (40) UnaryExpression -> . FunctionCall
    (41) UnaryExpression -> . Id
    (42) UnaryExpression -> . Literal
    (43) UnaryExpression -> . ( Expression )
    (39) FunctionCall -> . Id ( ArgumentListR )
    (12) Literal -> . IntLiteral
    (13) Literal -> . BoolLiteral
    (14) Literal -> . CharLiteral
    (9) IntLiteral -> . INTL
    (2) BoolLiteral -> . BOOLL
    (3) CharLiteral -> . CHARL

    IF              shift and go to state 43
    FOR             shift and go to state 45
    WHILE           shift and go to state 46
    BREAK           shift and go to state 47
    RETURN          shift and go to state 49
    ;               shift and go to state 33
    ID              shift and go to state 8
    (               shift and go to state 44
    INTL            shift and go to state 48
    BOOLL           shift and go to state 59
    CHARL           shift and go to state 60

    Statement                      shift and go to state 107
    Expression                     shift and go to state 32
    AssignmentStatement            shift and go to state 30
    DeclarationAssignmentStatement shift and go to state 31
    DeclarationStatement           shift and go to state 34
    IfElseStatement                shift and go to state 35
    ForStatement                   shift and go to state 36
    WhileStatement                 shift and go to state 37
    BreakStatement                 shift and go to state 38
    ReturnStatement                shift and go to state 39
    BlankStatement                 shift and go to state 40
    Id                             shift and go to state 41
    BinaryExpressionPrio7          shift and go to state 42
    BinaryExpressionPrio6          shift and go to state 50
    BinaryExpressionPrio4          shift and go to state 51
    BinaryExpressionPrio3          shift and go to state 52
    UnaryExpression                shift and go to state 53
    FunctionCall                   shift and go to state 54
    Literal                        shift and go to state 55
    IntLiteral                     shift and go to state 56
    BoolLiteral                    shift and go to state 57
    CharLiteral                    shift and go to state 58

state 71

    (67) WhileStatement -> WHILE ( . Expression ) Block
    (38) Expression -> . BinaryExpressionPrio7
    (35) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7
    (36) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 Equal BinaryExpressionPrio7
    (37) BinaryExpressionPrio7 -> . BinaryExpressionPrio6
    (30) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6
    (31) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6
    (32) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Less BinaryExpressionPrio6
    (33) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Greater BinaryExpressionPrio6
    (34) BinaryExpressionPrio6 -> . BinaryExpressionPrio4
    (27) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Add BinaryExpressionPrio4
    (28) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Sub BinaryExpressionPrio4
    (29) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (23) BinaryExpressionPrio3 -> . UnaryExpression Mul BinaryExpressionPrio3
    (24) BinaryExpressionPrio3 -> . UnaryExpression Div BinaryExpressionPrio3
    (25) BinaryExpressionPrio3 -> . UnaryExpression Mod BinaryExpressionPrio3
    (26) BinaryExpressionPrio3 -> . UnaryExpression
    (40) UnaryExpression -> . FunctionCall
    (41) UnaryExpression -> . Id
    (42) UnaryExpression -> . Literal
    (43) UnaryExpression -> . ( Expression )
    (39) FunctionCall -> . Id ( ArgumentListR )
    (8) Id -> . ID
    (12) Literal -> . IntLiteral
    (13) Literal -> . BoolLiteral
    (14) Literal -> . CharLiteral
    (9) IntLiteral -> . INTL
    (2) BoolLiteral -> . BOOLL
    (3) CharLiteral -> . CHARL

    (               shift and go to state 44
    ID              shift and go to state 8
    INTL            shift and go to state 48
    BOOLL           shift and go to state 59
    CHARL           shift and go to state 60

    Expression                     shift and go to state 108
    BinaryExpressionPrio7          shift and go to state 42
    BinaryExpressionPrio6          shift and go to state 50
    BinaryExpressionPrio4          shift and go to state 51
    BinaryExpressionPrio3          shift and go to state 52
    UnaryExpression                shift and go to state 53
    FunctionCall                   shift and go to state 54
    Id                             shift and go to state 69
    Literal                        shift and go to state 55
    IntLiteral                     shift and go to state 56
    BoolLiteral                    shift and go to state 57
    CharLiteral                    shift and go to state 58

state 72

    (47) BreakStatement -> BREAK INTL . ;

    ;               shift and go to state 109


state 73

    (48) BreakStatement -> BREAK ; .

    IF              reduce using rule 48 (BreakStatement -> BREAK ; .)
    FOR             reduce using rule 48 (BreakStatement -> BREAK ; .)
    WHILE           reduce using rule 48 (BreakStatement -> BREAK ; .)
    BREAK           reduce using rule 48 (BreakStatement -> BREAK ; .)
    RETURN          reduce using rule 48 (BreakStatement -> BREAK ; .)
    ;               reduce using rule 48 (BreakStatement -> BREAK ; .)
    ID              reduce using rule 48 (BreakStatement -> BREAK ; .)
    (               reduce using rule 48 (BreakStatement -> BREAK ; .)
    INTL            reduce using rule 48 (BreakStatement -> BREAK ; .)
    BOOLL           reduce using rule 48 (BreakStatement -> BREAK ; .)
    CHARL           reduce using rule 48 (BreakStatement -> BREAK ; .)
    }               reduce using rule 48 (BreakStatement -> BREAK ; .)
    )               reduce using rule 48 (BreakStatement -> BREAK ; .)


state 74

    (53) ReturnStatement -> RETURN Expression . ;

    ;               shift and go to state 110


state 75

    (54) ReturnStatement -> RETURN ; .

    IF              reduce using rule 54 (ReturnStatement -> RETURN ; .)
    FOR             reduce using rule 54 (ReturnStatement -> RETURN ; .)
    WHILE           reduce using rule 54 (ReturnStatement -> RETURN ; .)
    BREAK           reduce using rule 54 (ReturnStatement -> RETURN ; .)
    RETURN          reduce using rule 54 (ReturnStatement -> RETURN ; .)
    ;               reduce using rule 54 (ReturnStatement -> RETURN ; .)
    ID              reduce using rule 54 (ReturnStatement -> RETURN ; .)
    (               reduce using rule 54 (ReturnStatement -> RETURN ; .)
    INTL            reduce using rule 54 (ReturnStatement -> RETURN ; .)
    BOOLL           reduce using rule 54 (ReturnStatement -> RETURN ; .)
    CHARL           reduce using rule 54 (ReturnStatement -> RETURN ; .)
    }               reduce using rule 54 (ReturnStatement -> RETURN ; .)
    )               reduce using rule 54 (ReturnStatement -> RETURN ; .)


state 76

    (35) BinaryExpressionPrio7 -> BinaryExpressionPrio6 NotEqual . BinaryExpressionPrio7
    (35) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7
    (36) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 Equal BinaryExpressionPrio7
    (37) BinaryExpressionPrio7 -> . BinaryExpressionPrio6
    (30) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6
    (31) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6
    (32) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Less BinaryExpressionPrio6
    (33) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Greater BinaryExpressionPrio6
    (34) BinaryExpressionPrio6 -> . BinaryExpressionPrio4
    (27) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Add BinaryExpressionPrio4
    (28) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Sub BinaryExpressionPrio4
    (29) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (23) BinaryExpressionPrio3 -> . UnaryExpression Mul BinaryExpressionPrio3
    (24) BinaryExpressionPrio3 -> . UnaryExpression Div BinaryExpressionPrio3
    (25) BinaryExpressionPrio3 -> . UnaryExpression Mod BinaryExpressionPrio3
    (26) BinaryExpressionPrio3 -> . UnaryExpression
    (40) UnaryExpression -> . FunctionCall
    (41) UnaryExpression -> . Id
    (42) UnaryExpression -> . Literal
    (43) UnaryExpression -> . ( Expression )
    (39) FunctionCall -> . Id ( ArgumentListR )
    (8) Id -> . ID
    (12) Literal -> . IntLiteral
    (13) Literal -> . BoolLiteral
    (14) Literal -> . CharLiteral
    (9) IntLiteral -> . INTL
    (2) BoolLiteral -> . BOOLL
    (3) CharLiteral -> . CHARL

    (               shift and go to state 44
    ID              shift and go to state 8
    INTL            shift and go to state 48
    BOOLL           shift and go to state 59
    CHARL           shift and go to state 60

    BinaryExpressionPrio6          shift and go to state 50
    BinaryExpressionPrio7          shift and go to state 111
    BinaryExpressionPrio4          shift and go to state 51
    BinaryExpressionPrio3          shift and go to state 52
    UnaryExpression                shift and go to state 53
    FunctionCall                   shift and go to state 54
    Id                             shift and go to state 69
    Literal                        shift and go to state 55
    IntLiteral                     shift and go to state 56
    BoolLiteral                    shift and go to state 57
    CharLiteral                    shift and go to state 58

state 77

    (36) BinaryExpressionPrio7 -> BinaryExpressionPrio6 Equal . BinaryExpressionPrio7
    (35) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7
    (36) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 Equal BinaryExpressionPrio7
    (37) BinaryExpressionPrio7 -> . BinaryExpressionPrio6
    (30) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6
    (31) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6
    (32) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Less BinaryExpressionPrio6
    (33) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Greater BinaryExpressionPrio6
    (34) BinaryExpressionPrio6 -> . BinaryExpressionPrio4
    (27) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Add BinaryExpressionPrio4
    (28) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Sub BinaryExpressionPrio4
    (29) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (23) BinaryExpressionPrio3 -> . UnaryExpression Mul BinaryExpressionPrio3
    (24) BinaryExpressionPrio3 -> . UnaryExpression Div BinaryExpressionPrio3
    (25) BinaryExpressionPrio3 -> . UnaryExpression Mod BinaryExpressionPrio3
    (26) BinaryExpressionPrio3 -> . UnaryExpression
    (40) UnaryExpression -> . FunctionCall
    (41) UnaryExpression -> . Id
    (42) UnaryExpression -> . Literal
    (43) UnaryExpression -> . ( Expression )
    (39) FunctionCall -> . Id ( ArgumentListR )
    (8) Id -> . ID
    (12) Literal -> . IntLiteral
    (13) Literal -> . BoolLiteral
    (14) Literal -> . CharLiteral
    (9) IntLiteral -> . INTL
    (2) BoolLiteral -> . BOOLL
    (3) CharLiteral -> . CHARL

    (               shift and go to state 44
    ID              shift and go to state 8
    INTL            shift and go to state 48
    BOOLL           shift and go to state 59
    CHARL           shift and go to state 60

    BinaryExpressionPrio6          shift and go to state 50
    BinaryExpressionPrio7          shift and go to state 112
    BinaryExpressionPrio4          shift and go to state 51
    BinaryExpressionPrio3          shift and go to state 52
    UnaryExpression                shift and go to state 53
    FunctionCall                   shift and go to state 54
    Id                             shift and go to state 69
    Literal                        shift and go to state 55
    IntLiteral                     shift and go to state 56
    BoolLiteral                    shift and go to state 57
    CharLiteral                    shift and go to state 58

state 78

    (17) NotEqual -> NE .

    (               reduce using rule 17 (NotEqual -> NE .)
    ID              reduce using rule 17 (NotEqual -> NE .)
    INTL            reduce using rule 17 (NotEqual -> NE .)
    BOOLL           reduce using rule 17 (NotEqual -> NE .)
    CHARL           reduce using rule 17 (NotEqual -> NE .)


state 79

    (5) Equal -> EQ .

    (               reduce using rule 5 (Equal -> EQ .)
    ID              reduce using rule 5 (Equal -> EQ .)
    INTL            reduce using rule 5 (Equal -> EQ .)
    BOOLL           reduce using rule 5 (Equal -> EQ .)
    CHARL           reduce using rule 5 (Equal -> EQ .)


state 80

    (30) BinaryExpressionPrio6 -> BinaryExpressionPrio4 LessEqual . BinaryExpressionPrio6
    (30) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6
    (31) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6
    (32) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Less BinaryExpressionPrio6
    (33) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Greater BinaryExpressionPrio6
    (34) BinaryExpressionPrio6 -> . BinaryExpressionPrio4
    (27) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Add BinaryExpressionPrio4
    (28) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Sub BinaryExpressionPrio4
    (29) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (23) BinaryExpressionPrio3 -> . UnaryExpression Mul BinaryExpressionPrio3
    (24) BinaryExpressionPrio3 -> . UnaryExpression Div BinaryExpressionPrio3
    (25) BinaryExpressionPrio3 -> . UnaryExpression Mod BinaryExpressionPrio3
    (26) BinaryExpressionPrio3 -> . UnaryExpression
    (40) UnaryExpression -> . FunctionCall
    (41) UnaryExpression -> . Id
    (42) UnaryExpression -> . Literal
    (43) UnaryExpression -> . ( Expression )
    (39) FunctionCall -> . Id ( ArgumentListR )
    (8) Id -> . ID
    (12) Literal -> . IntLiteral
    (13) Literal -> . BoolLiteral
    (14) Literal -> . CharLiteral
    (9) IntLiteral -> . INTL
    (2) BoolLiteral -> . BOOLL
    (3) CharLiteral -> . CHARL

    (               shift and go to state 44
    ID              shift and go to state 8
    INTL            shift and go to state 48
    BOOLL           shift and go to state 59
    CHARL           shift and go to state 60

    BinaryExpressionPrio4          shift and go to state 51
    BinaryExpressionPrio6          shift and go to state 113
    BinaryExpressionPrio3          shift and go to state 52
    UnaryExpression                shift and go to state 53
    FunctionCall                   shift and go to state 54
    Id                             shift and go to state 69
    Literal                        shift and go to state 55
    IntLiteral                     shift and go to state 56
    BoolLiteral                    shift and go to state 57
    CharLiteral                    shift and go to state 58

state 81

    (31) BinaryExpressionPrio6 -> BinaryExpressionPrio4 GreaterEqual . BinaryExpressionPrio6
    (30) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6
    (31) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6
    (32) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Less BinaryExpressionPrio6
    (33) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Greater BinaryExpressionPrio6
    (34) BinaryExpressionPrio6 -> . BinaryExpressionPrio4
    (27) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Add BinaryExpressionPrio4
    (28) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Sub BinaryExpressionPrio4
    (29) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (23) BinaryExpressionPrio3 -> . UnaryExpression Mul BinaryExpressionPrio3
    (24) BinaryExpressionPrio3 -> . UnaryExpression Div BinaryExpressionPrio3
    (25) BinaryExpressionPrio3 -> . UnaryExpression Mod BinaryExpressionPrio3
    (26) BinaryExpressionPrio3 -> . UnaryExpression
    (40) UnaryExpression -> . FunctionCall
    (41) UnaryExpression -> . Id
    (42) UnaryExpression -> . Literal
    (43) UnaryExpression -> . ( Expression )
    (39) FunctionCall -> . Id ( ArgumentListR )
    (8) Id -> . ID
    (12) Literal -> . IntLiteral
    (13) Literal -> . BoolLiteral
    (14) Literal -> . CharLiteral
    (9) IntLiteral -> . INTL
    (2) BoolLiteral -> . BOOLL
    (3) CharLiteral -> . CHARL

    (               shift and go to state 44
    ID              shift and go to state 8
    INTL            shift and go to state 48
    BOOLL           shift and go to state 59
    CHARL           shift and go to state 60

    BinaryExpressionPrio4          shift and go to state 51
    BinaryExpressionPrio6          shift and go to state 114
    BinaryExpressionPrio3          shift and go to state 52
    UnaryExpression                shift and go to state 53
    FunctionCall                   shift and go to state 54
    Id                             shift and go to state 69
    Literal                        shift and go to state 55
    IntLiteral                     shift and go to state 56
    BoolLiteral                    shift and go to state 57
    CharLiteral                    shift and go to state 58

state 82

    (32) BinaryExpressionPrio6 -> BinaryExpressionPrio4 Less . BinaryExpressionPrio6
    (30) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6
    (31) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6
    (32) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Less BinaryExpressionPrio6
    (33) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Greater BinaryExpressionPrio6
    (34) BinaryExpressionPrio6 -> . BinaryExpressionPrio4
    (27) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Add BinaryExpressionPrio4
    (28) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Sub BinaryExpressionPrio4
    (29) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (23) BinaryExpressionPrio3 -> . UnaryExpression Mul BinaryExpressionPrio3
    (24) BinaryExpressionPrio3 -> . UnaryExpression Div BinaryExpressionPrio3
    (25) BinaryExpressionPrio3 -> . UnaryExpression Mod BinaryExpressionPrio3
    (26) BinaryExpressionPrio3 -> . UnaryExpression
    (40) UnaryExpression -> . FunctionCall
    (41) UnaryExpression -> . Id
    (42) UnaryExpression -> . Literal
    (43) UnaryExpression -> . ( Expression )
    (39) FunctionCall -> . Id ( ArgumentListR )
    (8) Id -> . ID
    (12) Literal -> . IntLiteral
    (13) Literal -> . BoolLiteral
    (14) Literal -> . CharLiteral
    (9) IntLiteral -> . INTL
    (2) BoolLiteral -> . BOOLL
    (3) CharLiteral -> . CHARL

    (               shift and go to state 44
    ID              shift and go to state 8
    INTL            shift and go to state 48
    BOOLL           shift and go to state 59
    CHARL           shift and go to state 60

    BinaryExpressionPrio4          shift and go to state 51
    BinaryExpressionPrio6          shift and go to state 115
    BinaryExpressionPrio3          shift and go to state 52
    UnaryExpression                shift and go to state 53
    FunctionCall                   shift and go to state 54
    Id                             shift and go to state 69
    Literal                        shift and go to state 55
    IntLiteral                     shift and go to state 56
    BoolLiteral                    shift and go to state 57
    CharLiteral                    shift and go to state 58

state 83

    (33) BinaryExpressionPrio6 -> BinaryExpressionPrio4 Greater . BinaryExpressionPrio6
    (30) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6
    (31) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6
    (32) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Less BinaryExpressionPrio6
    (33) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Greater BinaryExpressionPrio6
    (34) BinaryExpressionPrio6 -> . BinaryExpressionPrio4
    (27) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Add BinaryExpressionPrio4
    (28) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Sub BinaryExpressionPrio4
    (29) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (23) BinaryExpressionPrio3 -> . UnaryExpression Mul BinaryExpressionPrio3
    (24) BinaryExpressionPrio3 -> . UnaryExpression Div BinaryExpressionPrio3
    (25) BinaryExpressionPrio3 -> . UnaryExpression Mod BinaryExpressionPrio3
    (26) BinaryExpressionPrio3 -> . UnaryExpression
    (40) UnaryExpression -> . FunctionCall
    (41) UnaryExpression -> . Id
    (42) UnaryExpression -> . Literal
    (43) UnaryExpression -> . ( Expression )
    (39) FunctionCall -> . Id ( ArgumentListR )
    (8) Id -> . ID
    (12) Literal -> . IntLiteral
    (13) Literal -> . BoolLiteral
    (14) Literal -> . CharLiteral
    (9) IntLiteral -> . INTL
    (2) BoolLiteral -> . BOOLL
    (3) CharLiteral -> . CHARL

    (               shift and go to state 44
    ID              shift and go to state 8
    INTL            shift and go to state 48
    BOOLL           shift and go to state 59
    CHARL           shift and go to state 60

    BinaryExpressionPrio4          shift and go to state 51
    BinaryExpressionPrio6          shift and go to state 116
    BinaryExpressionPrio3          shift and go to state 52
    UnaryExpression                shift and go to state 53
    FunctionCall                   shift and go to state 54
    Id                             shift and go to state 69
    Literal                        shift and go to state 55
    IntLiteral                     shift and go to state 56
    BoolLiteral                    shift and go to state 57
    CharLiteral                    shift and go to state 58

state 84

    (11) LessEqual -> GEQ .

    (               reduce using rule 11 (LessEqual -> GEQ .)
    ID              reduce using rule 11 (LessEqual -> GEQ .)
    INTL            reduce using rule 11 (LessEqual -> GEQ .)
    BOOLL           reduce using rule 11 (LessEqual -> GEQ .)
    CHARL           reduce using rule 11 (LessEqual -> GEQ .)


state 85

    (7) GreaterEqual -> LEQ .

    (               reduce using rule 7 (GreaterEqual -> LEQ .)
    ID              reduce using rule 7 (GreaterEqual -> LEQ .)
    INTL            reduce using rule 7 (GreaterEqual -> LEQ .)
    BOOLL           reduce using rule 7 (GreaterEqual -> LEQ .)
    CHARL           reduce using rule 7 (GreaterEqual -> LEQ .)


state 86

    (10) Less -> LT .

    (               reduce using rule 10 (Less -> LT .)
    ID              reduce using rule 10 (Less -> LT .)
    INTL            reduce using rule 10 (Less -> LT .)
    BOOLL           reduce using rule 10 (Less -> LT .)
    CHARL           reduce using rule 10 (Less -> LT .)


state 87

    (6) Greater -> GT .

    (               reduce using rule 6 (Greater -> GT .)
    ID              reduce using rule 6 (Greater -> GT .)
    INTL            reduce using rule 6 (Greater -> GT .)
    BOOLL           reduce using rule 6 (Greater -> GT .)
    CHARL           reduce using rule 6 (Greater -> GT .)


state 88

    (27) BinaryExpressionPrio4 -> BinaryExpressionPrio3 Add . BinaryExpressionPrio4
    (27) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Add BinaryExpressionPrio4
    (28) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Sub BinaryExpressionPrio4
    (29) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (23) BinaryExpressionPrio3 -> . UnaryExpression Mul BinaryExpressionPrio3
    (24) BinaryExpressionPrio3 -> . UnaryExpression Div BinaryExpressionPrio3
    (25) BinaryExpressionPrio3 -> . UnaryExpression Mod BinaryExpressionPrio3
    (26) BinaryExpressionPrio3 -> . UnaryExpression
    (40) UnaryExpression -> . FunctionCall
    (41) UnaryExpression -> . Id
    (42) UnaryExpression -> . Literal
    (43) UnaryExpression -> . ( Expression )
    (39) FunctionCall -> . Id ( ArgumentListR )
    (8) Id -> . ID
    (12) Literal -> . IntLiteral
    (13) Literal -> . BoolLiteral
    (14) Literal -> . CharLiteral
    (9) IntLiteral -> . INTL
    (2) BoolLiteral -> . BOOLL
    (3) CharLiteral -> . CHARL

    (               shift and go to state 44
    ID              shift and go to state 8
    INTL            shift and go to state 48
    BOOLL           shift and go to state 59
    CHARL           shift and go to state 60

    BinaryExpressionPrio3          shift and go to state 52
    BinaryExpressionPrio4          shift and go to state 117
    UnaryExpression                shift and go to state 53
    FunctionCall                   shift and go to state 54
    Id                             shift and go to state 69
    Literal                        shift and go to state 55
    IntLiteral                     shift and go to state 56
    BoolLiteral                    shift and go to state 57
    CharLiteral                    shift and go to state 58

state 89

    (28) BinaryExpressionPrio4 -> BinaryExpressionPrio3 Sub . BinaryExpressionPrio4
    (27) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Add BinaryExpressionPrio4
    (28) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Sub BinaryExpressionPrio4
    (29) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (23) BinaryExpressionPrio3 -> . UnaryExpression Mul BinaryExpressionPrio3
    (24) BinaryExpressionPrio3 -> . UnaryExpression Div BinaryExpressionPrio3
    (25) BinaryExpressionPrio3 -> . UnaryExpression Mod BinaryExpressionPrio3
    (26) BinaryExpressionPrio3 -> . UnaryExpression
    (40) UnaryExpression -> . FunctionCall
    (41) UnaryExpression -> . Id
    (42) UnaryExpression -> . Literal
    (43) UnaryExpression -> . ( Expression )
    (39) FunctionCall -> . Id ( ArgumentListR )
    (8) Id -> . ID
    (12) Literal -> . IntLiteral
    (13) Literal -> . BoolLiteral
    (14) Literal -> . CharLiteral
    (9) IntLiteral -> . INTL
    (2) BoolLiteral -> . BOOLL
    (3) CharLiteral -> . CHARL

    (               shift and go to state 44
    ID              shift and go to state 8
    INTL            shift and go to state 48
    BOOLL           shift and go to state 59
    CHARL           shift and go to state 60

    BinaryExpressionPrio3          shift and go to state 52
    BinaryExpressionPrio4          shift and go to state 118
    UnaryExpression                shift and go to state 53
    FunctionCall                   shift and go to state 54
    Id                             shift and go to state 69
    Literal                        shift and go to state 55
    IntLiteral                     shift and go to state 56
    BoolLiteral                    shift and go to state 57
    CharLiteral                    shift and go to state 58

state 90

    (1) Add -> + .

    (               reduce using rule 1 (Add -> + .)
    ID              reduce using rule 1 (Add -> + .)
    INTL            reduce using rule 1 (Add -> + .)
    BOOLL           reduce using rule 1 (Add -> + .)
    CHARL           reduce using rule 1 (Add -> + .)


state 91

    (18) Sub -> - .

    (               reduce using rule 18 (Sub -> - .)
    ID              reduce using rule 18 (Sub -> - .)
    INTL            reduce using rule 18 (Sub -> - .)
    BOOLL           reduce using rule 18 (Sub -> - .)
    CHARL           reduce using rule 18 (Sub -> - .)


state 92

    (23) BinaryExpressionPrio3 -> UnaryExpression Mul . BinaryExpressionPrio3
    (23) BinaryExpressionPrio3 -> . UnaryExpression Mul BinaryExpressionPrio3
    (24) BinaryExpressionPrio3 -> . UnaryExpression Div BinaryExpressionPrio3
    (25) BinaryExpressionPrio3 -> . UnaryExpression Mod BinaryExpressionPrio3
    (26) BinaryExpressionPrio3 -> . UnaryExpression
    (40) UnaryExpression -> . FunctionCall
    (41) UnaryExpression -> . Id
    (42) UnaryExpression -> . Literal
    (43) UnaryExpression -> . ( Expression )
    (39) FunctionCall -> . Id ( ArgumentListR )
    (8) Id -> . ID
    (12) Literal -> . IntLiteral
    (13) Literal -> . BoolLiteral
    (14) Literal -> . CharLiteral
    (9) IntLiteral -> . INTL
    (2) BoolLiteral -> . BOOLL
    (3) CharLiteral -> . CHARL

    (               shift and go to state 44
    ID              shift and go to state 8
    INTL            shift and go to state 48
    BOOLL           shift and go to state 59
    CHARL           shift and go to state 60

    UnaryExpression                shift and go to state 53
    BinaryExpressionPrio3          shift and go to state 119
    FunctionCall                   shift and go to state 54
    Id                             shift and go to state 69
    Literal                        shift and go to state 55
    IntLiteral                     shift and go to state 56
    BoolLiteral                    shift and go to state 57
    CharLiteral                    shift and go to state 58

state 93

    (24) BinaryExpressionPrio3 -> UnaryExpression Div . BinaryExpressionPrio3
    (23) BinaryExpressionPrio3 -> . UnaryExpression Mul BinaryExpressionPrio3
    (24) BinaryExpressionPrio3 -> . UnaryExpression Div BinaryExpressionPrio3
    (25) BinaryExpressionPrio3 -> . UnaryExpression Mod BinaryExpressionPrio3
    (26) BinaryExpressionPrio3 -> . UnaryExpression
    (40) UnaryExpression -> . FunctionCall
    (41) UnaryExpression -> . Id
    (42) UnaryExpression -> . Literal
    (43) UnaryExpression -> . ( Expression )
    (39) FunctionCall -> . Id ( ArgumentListR )
    (8) Id -> . ID
    (12) Literal -> . IntLiteral
    (13) Literal -> . BoolLiteral
    (14) Literal -> . CharLiteral
    (9) IntLiteral -> . INTL
    (2) BoolLiteral -> . BOOLL
    (3) CharLiteral -> . CHARL

    (               shift and go to state 44
    ID              shift and go to state 8
    INTL            shift and go to state 48
    BOOLL           shift and go to state 59
    CHARL           shift and go to state 60

    UnaryExpression                shift and go to state 53
    BinaryExpressionPrio3          shift and go to state 120
    FunctionCall                   shift and go to state 54
    Id                             shift and go to state 69
    Literal                        shift and go to state 55
    IntLiteral                     shift and go to state 56
    BoolLiteral                    shift and go to state 57
    CharLiteral                    shift and go to state 58

state 94

    (25) BinaryExpressionPrio3 -> UnaryExpression Mod . BinaryExpressionPrio3
    (23) BinaryExpressionPrio3 -> . UnaryExpression Mul BinaryExpressionPrio3
    (24) BinaryExpressionPrio3 -> . UnaryExpression Div BinaryExpressionPrio3
    (25) BinaryExpressionPrio3 -> . UnaryExpression Mod BinaryExpressionPrio3
    (26) BinaryExpressionPrio3 -> . UnaryExpression
    (40) UnaryExpression -> . FunctionCall
    (41) UnaryExpression -> . Id
    (42) UnaryExpression -> . Literal
    (43) UnaryExpression -> . ( Expression )
    (39) FunctionCall -> . Id ( ArgumentListR )
    (8) Id -> . ID
    (12) Literal -> . IntLiteral
    (13) Literal -> . BoolLiteral
    (14) Literal -> . CharLiteral
    (9) IntLiteral -> . INTL
    (2) BoolLiteral -> . BOOLL
    (3) CharLiteral -> . CHARL

    (               shift and go to state 44
    ID              shift and go to state 8
    INTL            shift and go to state 48
    BOOLL           shift and go to state 59
    CHARL           shift and go to state 60

    UnaryExpression                shift and go to state 53
    BinaryExpressionPrio3          shift and go to state 121
    FunctionCall                   shift and go to state 54
    Id                             shift and go to state 69
    Literal                        shift and go to state 55
    IntLiteral                     shift and go to state 56
    BoolLiteral                    shift and go to state 57
    CharLiteral                    shift and go to state 58

state 95

    (16) Mul -> * .

    (               reduce using rule 16 (Mul -> * .)
    ID              reduce using rule 16 (Mul -> * .)
    INTL            reduce using rule 16 (Mul -> * .)
    BOOLL           reduce using rule 16 (Mul -> * .)
    CHARL           reduce using rule 16 (Mul -> * .)


state 96

    (4) Div -> / .

    (               reduce using rule 4 (Div -> / .)
    ID              reduce using rule 4 (Div -> / .)
    INTL            reduce using rule 4 (Div -> / .)
    BOOLL           reduce using rule 4 (Div -> / .)
    CHARL           reduce using rule 4 (Div -> / .)


state 97

    (15) Mod -> % .

    (               reduce using rule 15 (Mod -> % .)
    ID              reduce using rule 15 (Mod -> % .)
    INTL            reduce using rule 15 (Mod -> % .)
    BOOLL           reduce using rule 15 (Mod -> % .)
    CHARL           reduce using rule 15 (Mod -> % .)


state 98

    (49) DeclarationAssignmentStatement -> Id Id = . Expression ;
    (38) Expression -> . BinaryExpressionPrio7
    (35) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7
    (36) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 Equal BinaryExpressionPrio7
    (37) BinaryExpressionPrio7 -> . BinaryExpressionPrio6
    (30) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6
    (31) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6
    (32) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Less BinaryExpressionPrio6
    (33) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Greater BinaryExpressionPrio6
    (34) BinaryExpressionPrio6 -> . BinaryExpressionPrio4
    (27) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Add BinaryExpressionPrio4
    (28) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Sub BinaryExpressionPrio4
    (29) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (23) BinaryExpressionPrio3 -> . UnaryExpression Mul BinaryExpressionPrio3
    (24) BinaryExpressionPrio3 -> . UnaryExpression Div BinaryExpressionPrio3
    (25) BinaryExpressionPrio3 -> . UnaryExpression Mod BinaryExpressionPrio3
    (26) BinaryExpressionPrio3 -> . UnaryExpression
    (40) UnaryExpression -> . FunctionCall
    (41) UnaryExpression -> . Id
    (42) UnaryExpression -> . Literal
    (43) UnaryExpression -> . ( Expression )
    (39) FunctionCall -> . Id ( ArgumentListR )
    (8) Id -> . ID
    (12) Literal -> . IntLiteral
    (13) Literal -> . BoolLiteral
    (14) Literal -> . CharLiteral
    (9) IntLiteral -> . INTL
    (2) BoolLiteral -> . BOOLL
    (3) CharLiteral -> . CHARL

    (               shift and go to state 44
    ID              shift and go to state 8
    INTL            shift and go to state 48
    BOOLL           shift and go to state 59
    CHARL           shift and go to state 60

    Id                             shift and go to state 69
    Expression                     shift and go to state 122
    BinaryExpressionPrio7          shift and go to state 42
    BinaryExpressionPrio6          shift and go to state 50
    BinaryExpressionPrio4          shift and go to state 51
    BinaryExpressionPrio3          shift and go to state 52
    UnaryExpression                shift and go to state 53
    FunctionCall                   shift and go to state 54
    Literal                        shift and go to state 55
    IntLiteral                     shift and go to state 56
    BoolLiteral                    shift and go to state 57
    CharLiteral                    shift and go to state 58

state 99

    (50) DeclarationStatement -> Id Id ; .

    IF              reduce using rule 50 (DeclarationStatement -> Id Id ; .)
    FOR             reduce using rule 50 (DeclarationStatement -> Id Id ; .)
    WHILE           reduce using rule 50 (DeclarationStatement -> Id Id ; .)
    BREAK           reduce using rule 50 (DeclarationStatement -> Id Id ; .)
    RETURN          reduce using rule 50 (DeclarationStatement -> Id Id ; .)
    ;               reduce using rule 50 (DeclarationStatement -> Id Id ; .)
    ID              reduce using rule 50 (DeclarationStatement -> Id Id ; .)
    (               reduce using rule 50 (DeclarationStatement -> Id Id ; .)
    INTL            reduce using rule 50 (DeclarationStatement -> Id Id ; .)
    BOOLL           reduce using rule 50 (DeclarationStatement -> Id Id ; .)
    CHARL           reduce using rule 50 (DeclarationStatement -> Id Id ; .)
    }               reduce using rule 50 (DeclarationStatement -> Id Id ; .)
    )               reduce using rule 50 (DeclarationStatement -> Id Id ; .)


state 100

    (44) AssignmentStatement -> Id = Expression . ;
    (45) AssignmentStatement -> Id = Expression .

  ! shift/reduce conflict for ; resolved as shift
    ;               shift and go to state 123
    IF              reduce using rule 45 (AssignmentStatement -> Id = Expression .)
    FOR             reduce using rule 45 (AssignmentStatement -> Id = Expression .)
    WHILE           reduce using rule 45 (AssignmentStatement -> Id = Expression .)
    BREAK           reduce using rule 45 (AssignmentStatement -> Id = Expression .)
    RETURN          reduce using rule 45 (AssignmentStatement -> Id = Expression .)
    ID              reduce using rule 45 (AssignmentStatement -> Id = Expression .)
    (               reduce using rule 45 (AssignmentStatement -> Id = Expression .)
    INTL            reduce using rule 45 (AssignmentStatement -> Id = Expression .)
    BOOLL           reduce using rule 45 (AssignmentStatement -> Id = Expression .)
    CHARL           reduce using rule 45 (AssignmentStatement -> Id = Expression .)
    }               reduce using rule 45 (AssignmentStatement -> Id = Expression .)
    )               reduce using rule 45 (AssignmentStatement -> Id = Expression .)

  ! ;               [ reduce using rule 45 (AssignmentStatement -> Id = Expression .) ]


state 101

    (39) FunctionCall -> Id ( ArgumentListR . )

    )               shift and go to state 124


state 102

    (20) ArgumentListR -> Argument . , ArgumentListR
    (21) ArgumentListR -> Argument .

    ,               shift and go to state 125
    )               reduce using rule 21 (ArgumentListR -> Argument .)


state 103

    (22) ArgumentListR -> empty .

    )               reduce using rule 22 (ArgumentListR -> empty .)


state 104

    (19) Argument -> Expression .

    ,               reduce using rule 19 (Argument -> Expression .)
    )               reduce using rule 19 (Argument -> Expression .)


state 105

    (52) IfElseStatement -> IF ( Expression . ) Block ELSE Block

    )               shift and go to state 126


state 106

    (43) UnaryExpression -> ( Expression ) .

    *               reduce using rule 43 (UnaryExpression -> ( Expression ) .)
    /               reduce using rule 43 (UnaryExpression -> ( Expression ) .)
    %               reduce using rule 43 (UnaryExpression -> ( Expression ) .)
    +               reduce using rule 43 (UnaryExpression -> ( Expression ) .)
    -               reduce using rule 43 (UnaryExpression -> ( Expression ) .)
    GEQ             reduce using rule 43 (UnaryExpression -> ( Expression ) .)
    LEQ             reduce using rule 43 (UnaryExpression -> ( Expression ) .)
    LT              reduce using rule 43 (UnaryExpression -> ( Expression ) .)
    GT              reduce using rule 43 (UnaryExpression -> ( Expression ) .)
    NE              reduce using rule 43 (UnaryExpression -> ( Expression ) .)
    EQ              reduce using rule 43 (UnaryExpression -> ( Expression ) .)
    ;               reduce using rule 43 (UnaryExpression -> ( Expression ) .)
    )               reduce using rule 43 (UnaryExpression -> ( Expression ) .)
    IF              reduce using rule 43 (UnaryExpression -> ( Expression ) .)
    FOR             reduce using rule 43 (UnaryExpression -> ( Expression ) .)
    WHILE           reduce using rule 43 (UnaryExpression -> ( Expression ) .)
    BREAK           reduce using rule 43 (UnaryExpression -> ( Expression ) .)
    RETURN          reduce using rule 43 (UnaryExpression -> ( Expression ) .)
    ID              reduce using rule 43 (UnaryExpression -> ( Expression ) .)
    (               reduce using rule 43 (UnaryExpression -> ( Expression ) .)
    INTL            reduce using rule 43 (UnaryExpression -> ( Expression ) .)
    BOOLL           reduce using rule 43 (UnaryExpression -> ( Expression ) .)
    CHARL           reduce using rule 43 (UnaryExpression -> ( Expression ) .)
    }               reduce using rule 43 (UnaryExpression -> ( Expression ) .)
    ,               reduce using rule 43 (UnaryExpression -> ( Expression ) .)


state 107

    (51) ForStatement -> FOR ( Statement . Expression ; Statement ) Block
    (38) Expression -> . BinaryExpressionPrio7
    (35) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7
    (36) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 Equal BinaryExpressionPrio7
    (37) BinaryExpressionPrio7 -> . BinaryExpressionPrio6
    (30) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6
    (31) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6
    (32) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Less BinaryExpressionPrio6
    (33) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Greater BinaryExpressionPrio6
    (34) BinaryExpressionPrio6 -> . BinaryExpressionPrio4
    (27) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Add BinaryExpressionPrio4
    (28) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Sub BinaryExpressionPrio4
    (29) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (23) BinaryExpressionPrio3 -> . UnaryExpression Mul BinaryExpressionPrio3
    (24) BinaryExpressionPrio3 -> . UnaryExpression Div BinaryExpressionPrio3
    (25) BinaryExpressionPrio3 -> . UnaryExpression Mod BinaryExpressionPrio3
    (26) BinaryExpressionPrio3 -> . UnaryExpression
    (40) UnaryExpression -> . FunctionCall
    (41) UnaryExpression -> . Id
    (42) UnaryExpression -> . Literal
    (43) UnaryExpression -> . ( Expression )
    (39) FunctionCall -> . Id ( ArgumentListR )
    (8) Id -> . ID
    (12) Literal -> . IntLiteral
    (13) Literal -> . BoolLiteral
    (14) Literal -> . CharLiteral
    (9) IntLiteral -> . INTL
    (2) BoolLiteral -> . BOOLL
    (3) CharLiteral -> . CHARL

    (               shift and go to state 44
    ID              shift and go to state 8
    INTL            shift and go to state 48
    BOOLL           shift and go to state 59
    CHARL           shift and go to state 60

    Expression                     shift and go to state 127
    BinaryExpressionPrio7          shift and go to state 42
    BinaryExpressionPrio6          shift and go to state 50
    BinaryExpressionPrio4          shift and go to state 51
    BinaryExpressionPrio3          shift and go to state 52
    UnaryExpression                shift and go to state 53
    FunctionCall                   shift and go to state 54
    Id                             shift and go to state 69
    Literal                        shift and go to state 55
    IntLiteral                     shift and go to state 56
    BoolLiteral                    shift and go to state 57
    CharLiteral                    shift and go to state 58

state 108

    (67) WhileStatement -> WHILE ( Expression . ) Block

    )               shift and go to state 128


state 109

    (47) BreakStatement -> BREAK INTL ; .

    IF              reduce using rule 47 (BreakStatement -> BREAK INTL ; .)
    FOR             reduce using rule 47 (BreakStatement -> BREAK INTL ; .)
    WHILE           reduce using rule 47 (BreakStatement -> BREAK INTL ; .)
    BREAK           reduce using rule 47 (BreakStatement -> BREAK INTL ; .)
    RETURN          reduce using rule 47 (BreakStatement -> BREAK INTL ; .)
    ;               reduce using rule 47 (BreakStatement -> BREAK INTL ; .)
    ID              reduce using rule 47 (BreakStatement -> BREAK INTL ; .)
    (               reduce using rule 47 (BreakStatement -> BREAK INTL ; .)
    INTL            reduce using rule 47 (BreakStatement -> BREAK INTL ; .)
    BOOLL           reduce using rule 47 (BreakStatement -> BREAK INTL ; .)
    CHARL           reduce using rule 47 (BreakStatement -> BREAK INTL ; .)
    }               reduce using rule 47 (BreakStatement -> BREAK INTL ; .)
    )               reduce using rule 47 (BreakStatement -> BREAK INTL ; .)


state 110

    (53) ReturnStatement -> RETURN Expression ; .

    IF              reduce using rule 53 (ReturnStatement -> RETURN Expression ; .)
    FOR             reduce using rule 53 (ReturnStatement -> RETURN Expression ; .)
    WHILE           reduce using rule 53 (ReturnStatement -> RETURN Expression ; .)
    BREAK           reduce using rule 53 (ReturnStatement -> RETURN Expression ; .)
    RETURN          reduce using rule 53 (ReturnStatement -> RETURN Expression ; .)
    ;               reduce using rule 53 (ReturnStatement -> RETURN Expression ; .)
    ID              reduce using rule 53 (ReturnStatement -> RETURN Expression ; .)
    (               reduce using rule 53 (ReturnStatement -> RETURN Expression ; .)
    INTL            reduce using rule 53 (ReturnStatement -> RETURN Expression ; .)
    BOOLL           reduce using rule 53 (ReturnStatement -> RETURN Expression ; .)
    CHARL           reduce using rule 53 (ReturnStatement -> RETURN Expression ; .)
    }               reduce using rule 53 (ReturnStatement -> RETURN Expression ; .)
    )               reduce using rule 53 (ReturnStatement -> RETURN Expression ; .)


state 111

    (35) BinaryExpressionPrio7 -> BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7 .

    ;               reduce using rule 35 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7 .)
    )               reduce using rule 35 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7 .)
    IF              reduce using rule 35 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7 .)
    FOR             reduce using rule 35 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7 .)
    WHILE           reduce using rule 35 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7 .)
    BREAK           reduce using rule 35 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7 .)
    RETURN          reduce using rule 35 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7 .)
    ID              reduce using rule 35 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7 .)
    (               reduce using rule 35 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7 .)
    INTL            reduce using rule 35 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7 .)
    BOOLL           reduce using rule 35 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7 .)
    CHARL           reduce using rule 35 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7 .)
    }               reduce using rule 35 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7 .)
    ,               reduce using rule 35 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7 .)


state 112

    (36) BinaryExpressionPrio7 -> BinaryExpressionPrio6 Equal BinaryExpressionPrio7 .

    ;               reduce using rule 36 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 Equal BinaryExpressionPrio7 .)
    )               reduce using rule 36 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 Equal BinaryExpressionPrio7 .)
    IF              reduce using rule 36 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 Equal BinaryExpressionPrio7 .)
    FOR             reduce using rule 36 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 Equal BinaryExpressionPrio7 .)
    WHILE           reduce using rule 36 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 Equal BinaryExpressionPrio7 .)
    BREAK           reduce using rule 36 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 Equal BinaryExpressionPrio7 .)
    RETURN          reduce using rule 36 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 Equal BinaryExpressionPrio7 .)
    ID              reduce using rule 36 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 Equal BinaryExpressionPrio7 .)
    (               reduce using rule 36 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 Equal BinaryExpressionPrio7 .)
    INTL            reduce using rule 36 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 Equal BinaryExpressionPrio7 .)
    BOOLL           reduce using rule 36 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 Equal BinaryExpressionPrio7 .)
    CHARL           reduce using rule 36 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 Equal BinaryExpressionPrio7 .)
    }               reduce using rule 36 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 Equal BinaryExpressionPrio7 .)
    ,               reduce using rule 36 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 Equal BinaryExpressionPrio7 .)


state 113

    (30) BinaryExpressionPrio6 -> BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6 .

    NE              reduce using rule 30 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6 .)
    EQ              reduce using rule 30 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6 .)
    ;               reduce using rule 30 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6 .)
    )               reduce using rule 30 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6 .)
    IF              reduce using rule 30 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6 .)
    FOR             reduce using rule 30 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6 .)
    WHILE           reduce using rule 30 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6 .)
    BREAK           reduce using rule 30 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6 .)
    RETURN          reduce using rule 30 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6 .)
    ID              reduce using rule 30 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6 .)
    (               reduce using rule 30 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6 .)
    INTL            reduce using rule 30 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6 .)
    BOOLL           reduce using rule 30 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6 .)
    CHARL           reduce using rule 30 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6 .)
    }               reduce using rule 30 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6 .)
    ,               reduce using rule 30 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6 .)


state 114

    (31) BinaryExpressionPrio6 -> BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6 .

    NE              reduce using rule 31 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6 .)
    EQ              reduce using rule 31 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6 .)
    ;               reduce using rule 31 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6 .)
    )               reduce using rule 31 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6 .)
    IF              reduce using rule 31 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6 .)
    FOR             reduce using rule 31 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6 .)
    WHILE           reduce using rule 31 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6 .)
    BREAK           reduce using rule 31 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6 .)
    RETURN          reduce using rule 31 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6 .)
    ID              reduce using rule 31 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6 .)
    (               reduce using rule 31 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6 .)
    INTL            reduce using rule 31 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6 .)
    BOOLL           reduce using rule 31 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6 .)
    CHARL           reduce using rule 31 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6 .)
    }               reduce using rule 31 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6 .)
    ,               reduce using rule 31 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6 .)


state 115

    (32) BinaryExpressionPrio6 -> BinaryExpressionPrio4 Less BinaryExpressionPrio6 .

    NE              reduce using rule 32 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Less BinaryExpressionPrio6 .)
    EQ              reduce using rule 32 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Less BinaryExpressionPrio6 .)
    ;               reduce using rule 32 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Less BinaryExpressionPrio6 .)
    )               reduce using rule 32 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Less BinaryExpressionPrio6 .)
    IF              reduce using rule 32 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Less BinaryExpressionPrio6 .)
    FOR             reduce using rule 32 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Less BinaryExpressionPrio6 .)
    WHILE           reduce using rule 32 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Less BinaryExpressionPrio6 .)
    BREAK           reduce using rule 32 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Less BinaryExpressionPrio6 .)
    RETURN          reduce using rule 32 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Less BinaryExpressionPrio6 .)
    ID              reduce using rule 32 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Less BinaryExpressionPrio6 .)
    (               reduce using rule 32 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Less BinaryExpressionPrio6 .)
    INTL            reduce using rule 32 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Less BinaryExpressionPrio6 .)
    BOOLL           reduce using rule 32 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Less BinaryExpressionPrio6 .)
    CHARL           reduce using rule 32 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Less BinaryExpressionPrio6 .)
    }               reduce using rule 32 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Less BinaryExpressionPrio6 .)
    ,               reduce using rule 32 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Less BinaryExpressionPrio6 .)


state 116

    (33) BinaryExpressionPrio6 -> BinaryExpressionPrio4 Greater BinaryExpressionPrio6 .

    NE              reduce using rule 33 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Greater BinaryExpressionPrio6 .)
    EQ              reduce using rule 33 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Greater BinaryExpressionPrio6 .)
    ;               reduce using rule 33 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Greater BinaryExpressionPrio6 .)
    )               reduce using rule 33 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Greater BinaryExpressionPrio6 .)
    IF              reduce using rule 33 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Greater BinaryExpressionPrio6 .)
    FOR             reduce using rule 33 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Greater BinaryExpressionPrio6 .)
    WHILE           reduce using rule 33 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Greater BinaryExpressionPrio6 .)
    BREAK           reduce using rule 33 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Greater BinaryExpressionPrio6 .)
    RETURN          reduce using rule 33 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Greater BinaryExpressionPrio6 .)
    ID              reduce using rule 33 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Greater BinaryExpressionPrio6 .)
    (               reduce using rule 33 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Greater BinaryExpressionPrio6 .)
    INTL            reduce using rule 33 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Greater BinaryExpressionPrio6 .)
    BOOLL           reduce using rule 33 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Greater BinaryExpressionPrio6 .)
    CHARL           reduce using rule 33 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Greater BinaryExpressionPrio6 .)
    }               reduce using rule 33 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Greater BinaryExpressionPrio6 .)
    ,               reduce using rule 33 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Greater BinaryExpressionPrio6 .)


state 117

    (27) BinaryExpressionPrio4 -> BinaryExpressionPrio3 Add BinaryExpressionPrio4 .

    GEQ             reduce using rule 27 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Add BinaryExpressionPrio4 .)
    LEQ             reduce using rule 27 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Add BinaryExpressionPrio4 .)
    LT              reduce using rule 27 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Add BinaryExpressionPrio4 .)
    GT              reduce using rule 27 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Add BinaryExpressionPrio4 .)
    NE              reduce using rule 27 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Add BinaryExpressionPrio4 .)
    EQ              reduce using rule 27 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Add BinaryExpressionPrio4 .)
    ;               reduce using rule 27 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Add BinaryExpressionPrio4 .)
    )               reduce using rule 27 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Add BinaryExpressionPrio4 .)
    IF              reduce using rule 27 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Add BinaryExpressionPrio4 .)
    FOR             reduce using rule 27 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Add BinaryExpressionPrio4 .)
    WHILE           reduce using rule 27 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Add BinaryExpressionPrio4 .)
    BREAK           reduce using rule 27 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Add BinaryExpressionPrio4 .)
    RETURN          reduce using rule 27 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Add BinaryExpressionPrio4 .)
    ID              reduce using rule 27 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Add BinaryExpressionPrio4 .)
    (               reduce using rule 27 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Add BinaryExpressionPrio4 .)
    INTL            reduce using rule 27 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Add BinaryExpressionPrio4 .)
    BOOLL           reduce using rule 27 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Add BinaryExpressionPrio4 .)
    CHARL           reduce using rule 27 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Add BinaryExpressionPrio4 .)
    }               reduce using rule 27 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Add BinaryExpressionPrio4 .)
    ,               reduce using rule 27 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Add BinaryExpressionPrio4 .)


state 118

    (28) BinaryExpressionPrio4 -> BinaryExpressionPrio3 Sub BinaryExpressionPrio4 .

    GEQ             reduce using rule 28 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Sub BinaryExpressionPrio4 .)
    LEQ             reduce using rule 28 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Sub BinaryExpressionPrio4 .)
    LT              reduce using rule 28 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Sub BinaryExpressionPrio4 .)
    GT              reduce using rule 28 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Sub BinaryExpressionPrio4 .)
    NE              reduce using rule 28 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Sub BinaryExpressionPrio4 .)
    EQ              reduce using rule 28 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Sub BinaryExpressionPrio4 .)
    ;               reduce using rule 28 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Sub BinaryExpressionPrio4 .)
    )               reduce using rule 28 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Sub BinaryExpressionPrio4 .)
    IF              reduce using rule 28 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Sub BinaryExpressionPrio4 .)
    FOR             reduce using rule 28 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Sub BinaryExpressionPrio4 .)
    WHILE           reduce using rule 28 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Sub BinaryExpressionPrio4 .)
    BREAK           reduce using rule 28 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Sub BinaryExpressionPrio4 .)
    RETURN          reduce using rule 28 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Sub BinaryExpressionPrio4 .)
    ID              reduce using rule 28 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Sub BinaryExpressionPrio4 .)
    (               reduce using rule 28 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Sub BinaryExpressionPrio4 .)
    INTL            reduce using rule 28 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Sub BinaryExpressionPrio4 .)
    BOOLL           reduce using rule 28 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Sub BinaryExpressionPrio4 .)
    CHARL           reduce using rule 28 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Sub BinaryExpressionPrio4 .)
    }               reduce using rule 28 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Sub BinaryExpressionPrio4 .)
    ,               reduce using rule 28 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Sub BinaryExpressionPrio4 .)


state 119

    (23) BinaryExpressionPrio3 -> UnaryExpression Mul BinaryExpressionPrio3 .

    +               reduce using rule 23 (BinaryExpressionPrio3 -> UnaryExpression Mul BinaryExpressionPrio3 .)
    -               reduce using rule 23 (BinaryExpressionPrio3 -> UnaryExpression Mul BinaryExpressionPrio3 .)
    GEQ             reduce using rule 23 (BinaryExpressionPrio3 -> UnaryExpression Mul BinaryExpressionPrio3 .)
    LEQ             reduce using rule 23 (BinaryExpressionPrio3 -> UnaryExpression Mul BinaryExpressionPrio3 .)
    LT              reduce using rule 23 (BinaryExpressionPrio3 -> UnaryExpression Mul BinaryExpressionPrio3 .)
    GT              reduce using rule 23 (BinaryExpressionPrio3 -> UnaryExpression Mul BinaryExpressionPrio3 .)
    NE              reduce using rule 23 (BinaryExpressionPrio3 -> UnaryExpression Mul BinaryExpressionPrio3 .)
    EQ              reduce using rule 23 (BinaryExpressionPrio3 -> UnaryExpression Mul BinaryExpressionPrio3 .)
    ;               reduce using rule 23 (BinaryExpressionPrio3 -> UnaryExpression Mul BinaryExpressionPrio3 .)
    )               reduce using rule 23 (BinaryExpressionPrio3 -> UnaryExpression Mul BinaryExpressionPrio3 .)
    IF              reduce using rule 23 (BinaryExpressionPrio3 -> UnaryExpression Mul BinaryExpressionPrio3 .)
    FOR             reduce using rule 23 (BinaryExpressionPrio3 -> UnaryExpression Mul BinaryExpressionPrio3 .)
    WHILE           reduce using rule 23 (BinaryExpressionPrio3 -> UnaryExpression Mul BinaryExpressionPrio3 .)
    BREAK           reduce using rule 23 (BinaryExpressionPrio3 -> UnaryExpression Mul BinaryExpressionPrio3 .)
    RETURN          reduce using rule 23 (BinaryExpressionPrio3 -> UnaryExpression Mul BinaryExpressionPrio3 .)
    ID              reduce using rule 23 (BinaryExpressionPrio3 -> UnaryExpression Mul BinaryExpressionPrio3 .)
    (               reduce using rule 23 (BinaryExpressionPrio3 -> UnaryExpression Mul BinaryExpressionPrio3 .)
    INTL            reduce using rule 23 (BinaryExpressionPrio3 -> UnaryExpression Mul BinaryExpressionPrio3 .)
    BOOLL           reduce using rule 23 (BinaryExpressionPrio3 -> UnaryExpression Mul BinaryExpressionPrio3 .)
    CHARL           reduce using rule 23 (BinaryExpressionPrio3 -> UnaryExpression Mul BinaryExpressionPrio3 .)
    }               reduce using rule 23 (BinaryExpressionPrio3 -> UnaryExpression Mul BinaryExpressionPrio3 .)
    ,               reduce using rule 23 (BinaryExpressionPrio3 -> UnaryExpression Mul BinaryExpressionPrio3 .)


state 120

    (24) BinaryExpressionPrio3 -> UnaryExpression Div BinaryExpressionPrio3 .

    +               reduce using rule 24 (BinaryExpressionPrio3 -> UnaryExpression Div BinaryExpressionPrio3 .)
    -               reduce using rule 24 (BinaryExpressionPrio3 -> UnaryExpression Div BinaryExpressionPrio3 .)
    GEQ             reduce using rule 24 (BinaryExpressionPrio3 -> UnaryExpression Div BinaryExpressionPrio3 .)
    LEQ             reduce using rule 24 (BinaryExpressionPrio3 -> UnaryExpression Div BinaryExpressionPrio3 .)
    LT              reduce using rule 24 (BinaryExpressionPrio3 -> UnaryExpression Div BinaryExpressionPrio3 .)
    GT              reduce using rule 24 (BinaryExpressionPrio3 -> UnaryExpression Div BinaryExpressionPrio3 .)
    NE              reduce using rule 24 (BinaryExpressionPrio3 -> UnaryExpression Div BinaryExpressionPrio3 .)
    EQ              reduce using rule 24 (BinaryExpressionPrio3 -> UnaryExpression Div BinaryExpressionPrio3 .)
    ;               reduce using rule 24 (BinaryExpressionPrio3 -> UnaryExpression Div BinaryExpressionPrio3 .)
    )               reduce using rule 24 (BinaryExpressionPrio3 -> UnaryExpression Div BinaryExpressionPrio3 .)
    IF              reduce using rule 24 (BinaryExpressionPrio3 -> UnaryExpression Div BinaryExpressionPrio3 .)
    FOR             reduce using rule 24 (BinaryExpressionPrio3 -> UnaryExpression Div BinaryExpressionPrio3 .)
    WHILE           reduce using rule 24 (BinaryExpressionPrio3 -> UnaryExpression Div BinaryExpressionPrio3 .)
    BREAK           reduce using rule 24 (BinaryExpressionPrio3 -> UnaryExpression Div BinaryExpressionPrio3 .)
    RETURN          reduce using rule 24 (BinaryExpressionPrio3 -> UnaryExpression Div BinaryExpressionPrio3 .)
    ID              reduce using rule 24 (BinaryExpressionPrio3 -> UnaryExpression Div BinaryExpressionPrio3 .)
    (               reduce using rule 24 (BinaryExpressionPrio3 -> UnaryExpression Div BinaryExpressionPrio3 .)
    INTL            reduce using rule 24 (BinaryExpressionPrio3 -> UnaryExpression Div BinaryExpressionPrio3 .)
    BOOLL           reduce using rule 24 (BinaryExpressionPrio3 -> UnaryExpression Div BinaryExpressionPrio3 .)
    CHARL           reduce using rule 24 (BinaryExpressionPrio3 -> UnaryExpression Div BinaryExpressionPrio3 .)
    }               reduce using rule 24 (BinaryExpressionPrio3 -> UnaryExpression Div BinaryExpressionPrio3 .)
    ,               reduce using rule 24 (BinaryExpressionPrio3 -> UnaryExpression Div BinaryExpressionPrio3 .)


state 121

    (25) BinaryExpressionPrio3 -> UnaryExpression Mod BinaryExpressionPrio3 .

    +               reduce using rule 25 (BinaryExpressionPrio3 -> UnaryExpression Mod BinaryExpressionPrio3 .)
    -               reduce using rule 25 (BinaryExpressionPrio3 -> UnaryExpression Mod BinaryExpressionPrio3 .)
    GEQ             reduce using rule 25 (BinaryExpressionPrio3 -> UnaryExpression Mod BinaryExpressionPrio3 .)
    LEQ             reduce using rule 25 (BinaryExpressionPrio3 -> UnaryExpression Mod BinaryExpressionPrio3 .)
    LT              reduce using rule 25 (BinaryExpressionPrio3 -> UnaryExpression Mod BinaryExpressionPrio3 .)
    GT              reduce using rule 25 (BinaryExpressionPrio3 -> UnaryExpression Mod BinaryExpressionPrio3 .)
    NE              reduce using rule 25 (BinaryExpressionPrio3 -> UnaryExpression Mod BinaryExpressionPrio3 .)
    EQ              reduce using rule 25 (BinaryExpressionPrio3 -> UnaryExpression Mod BinaryExpressionPrio3 .)
    ;               reduce using rule 25 (BinaryExpressionPrio3 -> UnaryExpression Mod BinaryExpressionPrio3 .)
    )               reduce using rule 25 (BinaryExpressionPrio3 -> UnaryExpression Mod BinaryExpressionPrio3 .)
    IF              reduce using rule 25 (BinaryExpressionPrio3 -> UnaryExpression Mod BinaryExpressionPrio3 .)
    FOR             reduce using rule 25 (BinaryExpressionPrio3 -> UnaryExpression Mod BinaryExpressionPrio3 .)
    WHILE           reduce using rule 25 (BinaryExpressionPrio3 -> UnaryExpression Mod BinaryExpressionPrio3 .)
    BREAK           reduce using rule 25 (BinaryExpressionPrio3 -> UnaryExpression Mod BinaryExpressionPrio3 .)
    RETURN          reduce using rule 25 (BinaryExpressionPrio3 -> UnaryExpression Mod BinaryExpressionPrio3 .)
    ID              reduce using rule 25 (BinaryExpressionPrio3 -> UnaryExpression Mod BinaryExpressionPrio3 .)
    (               reduce using rule 25 (BinaryExpressionPrio3 -> UnaryExpression Mod BinaryExpressionPrio3 .)
    INTL            reduce using rule 25 (BinaryExpressionPrio3 -> UnaryExpression Mod BinaryExpressionPrio3 .)
    BOOLL           reduce using rule 25 (BinaryExpressionPrio3 -> UnaryExpression Mod BinaryExpressionPrio3 .)
    CHARL           reduce using rule 25 (BinaryExpressionPrio3 -> UnaryExpression Mod BinaryExpressionPrio3 .)
    }               reduce using rule 25 (BinaryExpressionPrio3 -> UnaryExpression Mod BinaryExpressionPrio3 .)
    ,               reduce using rule 25 (BinaryExpressionPrio3 -> UnaryExpression Mod BinaryExpressionPrio3 .)


state 122

    (49) DeclarationAssignmentStatement -> Id Id = Expression . ;

    ;               shift and go to state 129


state 123

    (44) AssignmentStatement -> Id = Expression ; .

    IF              reduce using rule 44 (AssignmentStatement -> Id = Expression ; .)
    FOR             reduce using rule 44 (AssignmentStatement -> Id = Expression ; .)
    WHILE           reduce using rule 44 (AssignmentStatement -> Id = Expression ; .)
    BREAK           reduce using rule 44 (AssignmentStatement -> Id = Expression ; .)
    RETURN          reduce using rule 44 (AssignmentStatement -> Id = Expression ; .)
    ;               reduce using rule 44 (AssignmentStatement -> Id = Expression ; .)
    ID              reduce using rule 44 (AssignmentStatement -> Id = Expression ; .)
    (               reduce using rule 44 (AssignmentStatement -> Id = Expression ; .)
    INTL            reduce using rule 44 (AssignmentStatement -> Id = Expression ; .)
    BOOLL           reduce using rule 44 (AssignmentStatement -> Id = Expression ; .)
    CHARL           reduce using rule 44 (AssignmentStatement -> Id = Expression ; .)
    }               reduce using rule 44 (AssignmentStatement -> Id = Expression ; .)
    )               reduce using rule 44 (AssignmentStatement -> Id = Expression ; .)


state 124

    (39) FunctionCall -> Id ( ArgumentListR ) .

    *               reduce using rule 39 (FunctionCall -> Id ( ArgumentListR ) .)
    /               reduce using rule 39 (FunctionCall -> Id ( ArgumentListR ) .)
    %               reduce using rule 39 (FunctionCall -> Id ( ArgumentListR ) .)
    +               reduce using rule 39 (FunctionCall -> Id ( ArgumentListR ) .)
    -               reduce using rule 39 (FunctionCall -> Id ( ArgumentListR ) .)
    GEQ             reduce using rule 39 (FunctionCall -> Id ( ArgumentListR ) .)
    LEQ             reduce using rule 39 (FunctionCall -> Id ( ArgumentListR ) .)
    LT              reduce using rule 39 (FunctionCall -> Id ( ArgumentListR ) .)
    GT              reduce using rule 39 (FunctionCall -> Id ( ArgumentListR ) .)
    NE              reduce using rule 39 (FunctionCall -> Id ( ArgumentListR ) .)
    EQ              reduce using rule 39 (FunctionCall -> Id ( ArgumentListR ) .)
    ;               reduce using rule 39 (FunctionCall -> Id ( ArgumentListR ) .)
    )               reduce using rule 39 (FunctionCall -> Id ( ArgumentListR ) .)
    IF              reduce using rule 39 (FunctionCall -> Id ( ArgumentListR ) .)
    FOR             reduce using rule 39 (FunctionCall -> Id ( ArgumentListR ) .)
    WHILE           reduce using rule 39 (FunctionCall -> Id ( ArgumentListR ) .)
    BREAK           reduce using rule 39 (FunctionCall -> Id ( ArgumentListR ) .)
    RETURN          reduce using rule 39 (FunctionCall -> Id ( ArgumentListR ) .)
    ID              reduce using rule 39 (FunctionCall -> Id ( ArgumentListR ) .)
    (               reduce using rule 39 (FunctionCall -> Id ( ArgumentListR ) .)
    INTL            reduce using rule 39 (FunctionCall -> Id ( ArgumentListR ) .)
    BOOLL           reduce using rule 39 (FunctionCall -> Id ( ArgumentListR ) .)
    CHARL           reduce using rule 39 (FunctionCall -> Id ( ArgumentListR ) .)
    }               reduce using rule 39 (FunctionCall -> Id ( ArgumentListR ) .)
    ,               reduce using rule 39 (FunctionCall -> Id ( ArgumentListR ) .)


state 125

    (20) ArgumentListR -> Argument , . ArgumentListR
    (20) ArgumentListR -> . Argument , ArgumentListR
    (21) ArgumentListR -> . Argument
    (22) ArgumentListR -> . empty
    (19) Argument -> . Expression
    (79) empty -> .
    (38) Expression -> . BinaryExpressionPrio7
    (35) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7
    (36) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 Equal BinaryExpressionPrio7
    (37) BinaryExpressionPrio7 -> . BinaryExpressionPrio6
    (30) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6
    (31) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6
    (32) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Less BinaryExpressionPrio6
    (33) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Greater BinaryExpressionPrio6
    (34) BinaryExpressionPrio6 -> . BinaryExpressionPrio4
    (27) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Add BinaryExpressionPrio4
    (28) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Sub BinaryExpressionPrio4
    (29) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (23) BinaryExpressionPrio3 -> . UnaryExpression Mul BinaryExpressionPrio3
    (24) BinaryExpressionPrio3 -> . UnaryExpression Div BinaryExpressionPrio3
    (25) BinaryExpressionPrio3 -> . UnaryExpression Mod BinaryExpressionPrio3
    (26) BinaryExpressionPrio3 -> . UnaryExpression
    (40) UnaryExpression -> . FunctionCall
    (41) UnaryExpression -> . Id
    (42) UnaryExpression -> . Literal
    (43) UnaryExpression -> . ( Expression )
    (39) FunctionCall -> . Id ( ArgumentListR )
    (8) Id -> . ID
    (12) Literal -> . IntLiteral
    (13) Literal -> . BoolLiteral
    (14) Literal -> . CharLiteral
    (9) IntLiteral -> . INTL
    (2) BoolLiteral -> . BOOLL
    (3) CharLiteral -> . CHARL

    )               reduce using rule 79 (empty -> .)
    (               shift and go to state 44
    ID              shift and go to state 8
    INTL            shift and go to state 48
    BOOLL           shift and go to state 59
    CHARL           shift and go to state 60

    Argument                       shift and go to state 102
    ArgumentListR                  shift and go to state 130
    empty                          shift and go to state 103
    Expression                     shift and go to state 104
    BinaryExpressionPrio7          shift and go to state 42
    BinaryExpressionPrio6          shift and go to state 50
    BinaryExpressionPrio4          shift and go to state 51
    BinaryExpressionPrio3          shift and go to state 52
    UnaryExpression                shift and go to state 53
    FunctionCall                   shift and go to state 54
    Id                             shift and go to state 69
    Literal                        shift and go to state 55
    IntLiteral                     shift and go to state 56
    BoolLiteral                    shift and go to state 57
    CharLiteral                    shift and go to state 58

state 126

    (52) IfElseStatement -> IF ( Expression ) . Block ELSE Block
    (68) Block -> . { StatementListR }

    {               shift and go to state 25

    Block                          shift and go to state 131

state 127

    (51) ForStatement -> FOR ( Statement Expression . ; Statement ) Block

    ;               shift and go to state 132


state 128

    (67) WhileStatement -> WHILE ( Expression ) . Block
    (68) Block -> . { StatementListR }

    {               shift and go to state 25

    Block                          shift and go to state 133

state 129

    (49) DeclarationAssignmentStatement -> Id Id = Expression ; .

    IF              reduce using rule 49 (DeclarationAssignmentStatement -> Id Id = Expression ; .)
    FOR             reduce using rule 49 (DeclarationAssignmentStatement -> Id Id = Expression ; .)
    WHILE           reduce using rule 49 (DeclarationAssignmentStatement -> Id Id = Expression ; .)
    BREAK           reduce using rule 49 (DeclarationAssignmentStatement -> Id Id = Expression ; .)
    RETURN          reduce using rule 49 (DeclarationAssignmentStatement -> Id Id = Expression ; .)
    ;               reduce using rule 49 (DeclarationAssignmentStatement -> Id Id = Expression ; .)
    ID              reduce using rule 49 (DeclarationAssignmentStatement -> Id Id = Expression ; .)
    (               reduce using rule 49 (DeclarationAssignmentStatement -> Id Id = Expression ; .)
    INTL            reduce using rule 49 (DeclarationAssignmentStatement -> Id Id = Expression ; .)
    BOOLL           reduce using rule 49 (DeclarationAssignmentStatement -> Id Id = Expression ; .)
    CHARL           reduce using rule 49 (DeclarationAssignmentStatement -> Id Id = Expression ; .)
    }               reduce using rule 49 (DeclarationAssignmentStatement -> Id Id = Expression ; .)
    )               reduce using rule 49 (DeclarationAssignmentStatement -> Id Id = Expression ; .)


state 130

    (20) ArgumentListR -> Argument , ArgumentListR .

    )               reduce using rule 20 (ArgumentListR -> Argument , ArgumentListR .)


state 131

    (52) IfElseStatement -> IF ( Expression ) Block . ELSE Block

    ELSE            shift and go to state 134


state 132

    (51) ForStatement -> FOR ( Statement Expression ; . Statement ) Block
    (55) Statement -> . AssignmentStatement
    (56) Statement -> . DeclarationAssignmentStatement
    (57) Statement -> . Expression ;
    (58) Statement -> . DeclarationStatement
    (59) Statement -> . IfElseStatement
    (60) Statement -> . ForStatement
    (61) Statement -> . WhileStatement
    (62) Statement -> . BreakStatement
    (63) Statement -> . ReturnStatement
    (64) Statement -> . BlankStatement
    (44) AssignmentStatement -> . Id = Expression ;
    (45) AssignmentStatement -> . Id = Expression
    (49) DeclarationAssignmentStatement -> . Id Id = Expression ;
    (38) Expression -> . BinaryExpressionPrio7
    (50) DeclarationStatement -> . Id Id ;
    (52) IfElseStatement -> . IF ( Expression ) Block ELSE Block
    (51) ForStatement -> . FOR ( Statement Expression ; Statement ) Block
    (67) WhileStatement -> . WHILE ( Expression ) Block
    (47) BreakStatement -> . BREAK INTL ;
    (48) BreakStatement -> . BREAK ;
    (53) ReturnStatement -> . RETURN Expression ;
    (54) ReturnStatement -> . RETURN ;
    (46) BlankStatement -> . ;
    (8) Id -> . ID
    (35) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7
    (36) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 Equal BinaryExpressionPrio7
    (37) BinaryExpressionPrio7 -> . BinaryExpressionPrio6
    (30) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6
    (31) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6
    (32) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Less BinaryExpressionPrio6
    (33) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Greater BinaryExpressionPrio6
    (34) BinaryExpressionPrio6 -> . BinaryExpressionPrio4
    (27) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Add BinaryExpressionPrio4
    (28) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Sub BinaryExpressionPrio4
    (29) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (23) BinaryExpressionPrio3 -> . UnaryExpression Mul BinaryExpressionPrio3
    (24) BinaryExpressionPrio3 -> . UnaryExpression Div BinaryExpressionPrio3
    (25) BinaryExpressionPrio3 -> . UnaryExpression Mod BinaryExpressionPrio3
    (26) BinaryExpressionPrio3 -> . UnaryExpression
    (40) UnaryExpression -> . FunctionCall
    (41) UnaryExpression -> . Id
    (42) UnaryExpression -> . Literal
    (43) UnaryExpression -> . ( Expression )
    (39) FunctionCall -> . Id ( ArgumentListR )
    (12) Literal -> . IntLiteral
    (13) Literal -> . BoolLiteral
    (14) Literal -> . CharLiteral
    (9) IntLiteral -> . INTL
    (2) BoolLiteral -> . BOOLL
    (3) CharLiteral -> . CHARL

    IF              shift and go to state 43
    FOR             shift and go to state 45
    WHILE           shift and go to state 46
    BREAK           shift and go to state 47
    RETURN          shift and go to state 49
    ;               shift and go to state 33
    ID              shift and go to state 8
    (               shift and go to state 44
    INTL            shift and go to state 48
    BOOLL           shift and go to state 59
    CHARL           shift and go to state 60

    Statement                      shift and go to state 135
    Expression                     shift and go to state 32
    AssignmentStatement            shift and go to state 30
    DeclarationAssignmentStatement shift and go to state 31
    DeclarationStatement           shift and go to state 34
    IfElseStatement                shift and go to state 35
    ForStatement                   shift and go to state 36
    WhileStatement                 shift and go to state 37
    BreakStatement                 shift and go to state 38
    ReturnStatement                shift and go to state 39
    BlankStatement                 shift and go to state 40
    Id                             shift and go to state 41
    BinaryExpressionPrio7          shift and go to state 42
    BinaryExpressionPrio6          shift and go to state 50
    BinaryExpressionPrio4          shift and go to state 51
    BinaryExpressionPrio3          shift and go to state 52
    UnaryExpression                shift and go to state 53
    FunctionCall                   shift and go to state 54
    Literal                        shift and go to state 55
    IntLiteral                     shift and go to state 56
    BoolLiteral                    shift and go to state 57
    CharLiteral                    shift and go to state 58

state 133

    (67) WhileStatement -> WHILE ( Expression ) Block .

    IF              reduce using rule 67 (WhileStatement -> WHILE ( Expression ) Block .)
    FOR             reduce using rule 67 (WhileStatement -> WHILE ( Expression ) Block .)
    WHILE           reduce using rule 67 (WhileStatement -> WHILE ( Expression ) Block .)
    BREAK           reduce using rule 67 (WhileStatement -> WHILE ( Expression ) Block .)
    RETURN          reduce using rule 67 (WhileStatement -> WHILE ( Expression ) Block .)
    ;               reduce using rule 67 (WhileStatement -> WHILE ( Expression ) Block .)
    ID              reduce using rule 67 (WhileStatement -> WHILE ( Expression ) Block .)
    (               reduce using rule 67 (WhileStatement -> WHILE ( Expression ) Block .)
    INTL            reduce using rule 67 (WhileStatement -> WHILE ( Expression ) Block .)
    BOOLL           reduce using rule 67 (WhileStatement -> WHILE ( Expression ) Block .)
    CHARL           reduce using rule 67 (WhileStatement -> WHILE ( Expression ) Block .)
    }               reduce using rule 67 (WhileStatement -> WHILE ( Expression ) Block .)
    )               reduce using rule 67 (WhileStatement -> WHILE ( Expression ) Block .)


state 134

    (52) IfElseStatement -> IF ( Expression ) Block ELSE . Block
    (68) Block -> . { StatementListR }

    {               shift and go to state 25

    Block                          shift and go to state 136

state 135

    (51) ForStatement -> FOR ( Statement Expression ; Statement . ) Block

    )               shift and go to state 137


state 136

    (52) IfElseStatement -> IF ( Expression ) Block ELSE Block .

    IF              reduce using rule 52 (IfElseStatement -> IF ( Expression ) Block ELSE Block .)
    FOR             reduce using rule 52 (IfElseStatement -> IF ( Expression ) Block ELSE Block .)
    WHILE           reduce using rule 52 (IfElseStatement -> IF ( Expression ) Block ELSE Block .)
    BREAK           reduce using rule 52 (IfElseStatement -> IF ( Expression ) Block ELSE Block .)
    RETURN          reduce using rule 52 (IfElseStatement -> IF ( Expression ) Block ELSE Block .)
    ;               reduce using rule 52 (IfElseStatement -> IF ( Expression ) Block ELSE Block .)
    ID              reduce using rule 52 (IfElseStatement -> IF ( Expression ) Block ELSE Block .)
    (               reduce using rule 52 (IfElseStatement -> IF ( Expression ) Block ELSE Block .)
    INTL            reduce using rule 52 (IfElseStatement -> IF ( Expression ) Block ELSE Block .)
    BOOLL           reduce using rule 52 (IfElseStatement -> IF ( Expression ) Block ELSE Block .)
    CHARL           reduce using rule 52 (IfElseStatement -> IF ( Expression ) Block ELSE Block .)
    }               reduce using rule 52 (IfElseStatement -> IF ( Expression ) Block ELSE Block .)
    )               reduce using rule 52 (IfElseStatement -> IF ( Expression ) Block ELSE Block .)


state 137

    (51) ForStatement -> FOR ( Statement Expression ; Statement ) . Block
    (68) Block -> . { StatementListR }

    {               shift and go to state 25

    Block                          shift and go to state 138

state 138

    (51) ForStatement -> FOR ( Statement Expression ; Statement ) Block .

    IF              reduce using rule 51 (ForStatement -> FOR ( Statement Expression ; Statement ) Block .)
    FOR             reduce using rule 51 (ForStatement -> FOR ( Statement Expression ; Statement ) Block .)
    WHILE           reduce using rule 51 (ForStatement -> FOR ( Statement Expression ; Statement ) Block .)
    BREAK           reduce using rule 51 (ForStatement -> FOR ( Statement Expression ; Statement ) Block .)
    RETURN          reduce using rule 51 (ForStatement -> FOR ( Statement Expression ; Statement ) Block .)
    ;               reduce using rule 51 (ForStatement -> FOR ( Statement Expression ; Statement ) Block .)
    ID              reduce using rule 51 (ForStatement -> FOR ( Statement Expression ; Statement ) Block .)
    (               reduce using rule 51 (ForStatement -> FOR ( Statement Expression ; Statement ) Block .)
    INTL            reduce using rule 51 (ForStatement -> FOR ( Statement Expression ; Statement ) Block .)
    BOOLL           reduce using rule 51 (ForStatement -> FOR ( Statement Expression ; Statement ) Block .)
    CHARL           reduce using rule 51 (ForStatement -> FOR ( Statement Expression ; Statement ) Block .)
    }               reduce using rule 51 (ForStatement -> FOR ( Statement Expression ; Statement ) Block .)
    )               reduce using rule 51 (ForStatement -> FOR ( Statement Expression ; Statement ) Block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ( in state 69 resolved as shift
WARNING: shift/reduce conflict for ; in state 100 resolved as shift
