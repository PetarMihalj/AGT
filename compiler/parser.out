Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ADD
    BEQ
    BREAK
    COMMENT
    CONTINUE
    DIV
    ELSE
    EQ
    FOR
    IF
    LEQ
    LPAREN
    MUL
    NEQ
    RETURN
    RPAREN
    SUB
    WHILE

Grammar

Rule 0     S' -> CompilationUnit
Rule 1     Block -> { }
Rule 2     BoolLiteral -> BOOLL
Rule 3     CharLiteral -> CHARL
Rule 4     CompilationUnit -> DefinitionList
Rule 5     DefinitionList -> FunctionDefinition DefinitionList
Rule 6     DefinitionList -> empty
Rule 7     FunctionDefinition -> TypeName ID ( ParameterList ) Block
Rule 8     IntLiteral -> INTL
Rule 9     Literal -> IntLiteral
Rule 10    Literal -> BoolLiteral
Rule 11    Literal -> CharLiteral
Rule 12    Parameter -> TypeName ID
Rule 13    ParameterList -> Parameter , ParameterList
Rule 14    ParameterList -> Parameter
Rule 15    ParameterList -> empty
Rule 16    TypeName -> ID
Rule 17    empty -> <empty>

Terminals, with rules where they appear

(                    : 7
)                    : 7
,                    : 13
ADD                  : 
BEQ                  : 
BOOLL                : 2
BREAK                : 
CHARL                : 3
COMMENT              : 
CONTINUE             : 
DIV                  : 
ELSE                 : 
EQ                   : 
FOR                  : 
ID                   : 7 12 16
IF                   : 
INTL                 : 8
LEQ                  : 
LPAREN               : 
MUL                  : 
NEQ                  : 
RETURN               : 
RPAREN               : 
SUB                  : 
WHILE                : 
error                : 
{                    : 1
}                    : 1

Nonterminals, with rules where they appear

Block                : 7
BoolLiteral          : 10
CharLiteral          : 11
CompilationUnit      : 0
DefinitionList       : 4 5
FunctionDefinition   : 5
IntLiteral           : 9
Literal              : 
Parameter            : 13 14
ParameterList        : 7 13
TypeName             : 7 12
empty                : 6 15

Parsing method: LALR

state 0

    (0) S' -> . CompilationUnit
    (4) CompilationUnit -> . DefinitionList
    (5) DefinitionList -> . FunctionDefinition DefinitionList
    (6) DefinitionList -> . empty
    (7) FunctionDefinition -> . TypeName ID ( ParameterList ) Block
    (17) empty -> .
    (16) TypeName -> . ID

    $end            reduce using rule 17 (empty -> .)
    ID              shift and go to state 6

    CompilationUnit                shift and go to state 1
    DefinitionList                 shift and go to state 2
    FunctionDefinition             shift and go to state 3
    empty                          shift and go to state 4
    TypeName                       shift and go to state 5

state 1

    (0) S' -> CompilationUnit .



state 2

    (4) CompilationUnit -> DefinitionList .

    $end            reduce using rule 4 (CompilationUnit -> DefinitionList .)


state 3

    (5) DefinitionList -> FunctionDefinition . DefinitionList
    (5) DefinitionList -> . FunctionDefinition DefinitionList
    (6) DefinitionList -> . empty
    (7) FunctionDefinition -> . TypeName ID ( ParameterList ) Block
    (17) empty -> .
    (16) TypeName -> . ID

    $end            reduce using rule 17 (empty -> .)
    ID              shift and go to state 6

    FunctionDefinition             shift and go to state 3
    DefinitionList                 shift and go to state 7
    empty                          shift and go to state 4
    TypeName                       shift and go to state 5

state 4

    (6) DefinitionList -> empty .

    $end            reduce using rule 6 (DefinitionList -> empty .)


state 5

    (7) FunctionDefinition -> TypeName . ID ( ParameterList ) Block

    ID              shift and go to state 8


state 6

    (16) TypeName -> ID .

    ID              reduce using rule 16 (TypeName -> ID .)


state 7

    (5) DefinitionList -> FunctionDefinition DefinitionList .

    $end            reduce using rule 5 (DefinitionList -> FunctionDefinition DefinitionList .)


state 8

    (7) FunctionDefinition -> TypeName ID . ( ParameterList ) Block

    (               shift and go to state 9


state 9

    (7) FunctionDefinition -> TypeName ID ( . ParameterList ) Block
    (13) ParameterList -> . Parameter , ParameterList
    (14) ParameterList -> . Parameter
    (15) ParameterList -> . empty
    (12) Parameter -> . TypeName ID
    (17) empty -> .
    (16) TypeName -> . ID

    )               reduce using rule 17 (empty -> .)
    ID              shift and go to state 6

    TypeName                       shift and go to state 10
    ParameterList                  shift and go to state 11
    Parameter                      shift and go to state 12
    empty                          shift and go to state 13

state 10

    (12) Parameter -> TypeName . ID

    ID              shift and go to state 14


state 11

    (7) FunctionDefinition -> TypeName ID ( ParameterList . ) Block

    )               shift and go to state 15


state 12

    (13) ParameterList -> Parameter . , ParameterList
    (14) ParameterList -> Parameter .

    ,               shift and go to state 16
    )               reduce using rule 14 (ParameterList -> Parameter .)


state 13

    (15) ParameterList -> empty .

    )               reduce using rule 15 (ParameterList -> empty .)


state 14

    (12) Parameter -> TypeName ID .

    ,               reduce using rule 12 (Parameter -> TypeName ID .)
    )               reduce using rule 12 (Parameter -> TypeName ID .)


state 15

    (7) FunctionDefinition -> TypeName ID ( ParameterList ) . Block
    (1) Block -> . { }

    {               shift and go to state 18

    Block                          shift and go to state 17

state 16

    (13) ParameterList -> Parameter , . ParameterList
    (13) ParameterList -> . Parameter , ParameterList
    (14) ParameterList -> . Parameter
    (15) ParameterList -> . empty
    (12) Parameter -> . TypeName ID
    (17) empty -> .
    (16) TypeName -> . ID

    )               reduce using rule 17 (empty -> .)
    ID              shift and go to state 6

    Parameter                      shift and go to state 12
    ParameterList                  shift and go to state 19
    empty                          shift and go to state 13
    TypeName                       shift and go to state 10

state 17

    (7) FunctionDefinition -> TypeName ID ( ParameterList ) Block .

    ID              reduce using rule 7 (FunctionDefinition -> TypeName ID ( ParameterList ) Block .)
    $end            reduce using rule 7 (FunctionDefinition -> TypeName ID ( ParameterList ) Block .)


state 18

    (1) Block -> { . }

    }               shift and go to state 20


state 19

    (13) ParameterList -> Parameter , ParameterList .

    )               reduce using rule 13 (ParameterList -> Parameter , ParameterList .)


state 20

    (1) Block -> { } .

    ID              reduce using rule 1 (Block -> { } .)
    $end            reduce using rule 1 (Block -> { } .)

