Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> CompilationUnit
Rule 1     Argument -> Expression
Rule 2     ArgumentListR -> Argument COMMA ArgumentListR
Rule 3     ArgumentListR -> Argument
Rule 4     ArgumentListR -> empty
Rule 5     AssignmentStatement -> Expression ASSIGNMENT Expression SEMICOLON
Rule 6     AssignmentStatement -> Expression ASSIGNMENT Expression
Rule 7     BinaryExpression -> Expression PLUS Expression
Rule 8     BinaryExpression -> Expression MINUS Expression
Rule 9     BinaryExpression -> Expression TIMES Expression
Rule 10    BinaryExpression -> Expression DIVIDE Expression
Rule 11    BinaryExpression -> Expression MOD Expression
Rule 12    BinaryExpression -> Expression LEQ Expression
Rule 13    BinaryExpression -> Expression GEQ Expression
Rule 14    BinaryExpression -> Expression LT Expression
Rule 15    BinaryExpression -> Expression GT Expression
Rule 16    BinaryExpression -> Expression EQ Expression
Rule 17    BinaryExpression -> Expression NE Expression
Rule 18    BinaryExpression -> Expression DOT Expression
Rule 19    BlankStatement -> ;
Rule 20    Block -> LBRACE StatementListR RBRACE
Rule 21    BlockStatement -> Block
Rule 22    BoolLiteral -> BOOLL
Rule 23    BracketCall -> Expression LBRACKET Expression RBRACKET
Rule 24    BreakStatement -> BREAK INTL SEMICOLON
Rule 25    BreakStatement -> BREAK SEMICOLON
Rule 26    CompilationUnit -> DefinitionListR
Rule 27    DeclarationAssignmentStatement -> Type Id ASSIGNMENT Expression SEMICOLON
Rule 28    DeclarationFunctionCallStatement -> Type FunctionCall SEMICOLON
Rule 29    DeclarationStatement -> Type Id SEMICOLON
Rule 30    DefinitionListR -> FunctionDefinition DefinitionListR
Rule 31    DefinitionListR -> StructDefinition DefinitionListR
Rule 32    DefinitionListR -> empty
Rule 33    Expression -> BinaryExpression
Rule 34    Expression -> UnaryExpression
Rule 35    ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block
Rule 36    FunctionCall -> Id LPAREN ArgumentListR RPAREN
Rule 37    FunctionDefinition -> Type Id LPAREN ParameterListR RPAREN Block
Rule 38    Id -> ID
Rule 39    IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block
Rule 40    IntLiteral -> INTL
Rule 41    Literal -> IntLiteral
Rule 42    Literal -> BoolLiteral
Rule 43    Parameter -> Type Id
Rule 44    ParameterListR -> Parameter COMMA ParameterListR
Rule 45    ParameterListR -> Parameter
Rule 46    ParameterListR -> empty
Rule 47    PointerListR -> TIMES PointerListR
Rule 48    PointerListR -> empty
Rule 49    ReturnStatement -> RETURN Expression SEMICOLON
Rule 50    ReturnStatement -> RETURN SEMICOLON
Rule 51    Statement -> AssignmentStatement
Rule 52    Statement -> DeclarationAssignmentStatement
Rule 53    Statement -> DeclarationFunctionCallStatement
Rule 54    Statement -> DeclarationStatement
Rule 55    Statement -> Expression SEMICOLON
Rule 56    Statement -> IfElseStatement
Rule 57    Statement -> ForStatement
Rule 58    Statement -> WhileStatement
Rule 59    Statement -> BreakStatement
Rule 60    Statement -> ReturnStatement
Rule 61    Statement -> BlockStatement
Rule 62    Statement -> BlankStatement
Rule 63    StatementListR -> Statement StatementListR
Rule 64    StatementListR -> empty
Rule 65    StructDefinition -> STRUCT Id LBRACE StructMemberListR RBRACE
Rule 66    StructMember -> Type Id SEMICOLON
Rule 67    StructMemberListR -> StructMember StructMemberListR
Rule 68    StructMemberListR -> empty
Rule 69    Type -> Id PointerListR
Rule 70    UnaryExpression -> Id
Rule 71    UnaryExpression -> Literal
Rule 72    UnaryExpression -> FunctionCall
Rule 73    UnaryExpression -> BracketCall
Rule 74    UnaryExpression -> LPAREN Expression RPAREN
Rule 75    UnaryExpression -> TIMES Expression
Rule 76    UnaryExpression -> AMPERSAND Expression
Rule 77    WhileStatement -> WHILE LPAREN Expression RPAREN Block
Rule 78    empty -> <empty>

Terminals, with rules where they appear

;                    : 19
AMPERSAND            : 76
ASSIGNMENT           : 5 6 27
BOOLL                : 22
BREAK                : 24 25
COMMA                : 2 44
DIVIDE               : 10
DOT                  : 18
ELSE                 : 39
EQ                   : 16
FOR                  : 35
GEQ                  : 13
GT                   : 15
ID                   : 38
IF                   : 39
INTL                 : 24 40
LBRACE               : 20 65
LBRACKET             : 23
LEQ                  : 12
LPAREN               : 35 36 37 39 74 77
LT                   : 14
MINUS                : 8
MOD                  : 11
NE                   : 17
PLUS                 : 7
RBRACE               : 20 65
RBRACKET             : 23
RETURN               : 49 50
RPAREN               : 35 36 37 39 74 77
SEMICOLON            : 5 24 25 27 28 29 35 49 50 55 66
STRUCT               : 65
TIMES                : 9 47 75
WHILE                : 77
error                : 

Nonterminals, with rules where they appear

Argument             : 2 3
ArgumentListR        : 2 36
AssignmentStatement  : 51
BinaryExpression     : 33
BlankStatement       : 62
Block                : 21 35 37 39 39 77
BlockStatement       : 61
BoolLiteral          : 42
BracketCall          : 73
BreakStatement       : 59
CompilationUnit      : 0
DeclarationAssignmentStatement : 52
DeclarationFunctionCallStatement : 53
DeclarationStatement : 54
DefinitionListR      : 26 30 31
Expression           : 1 5 5 6 6 7 7 8 8 9 9 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17 17 18 18 23 23 27 35 39 49 55 74 75 76 77
ForStatement         : 57
FunctionCall         : 28 72
FunctionDefinition   : 30
Id                   : 27 29 36 37 43 65 66 69 70
IfElseStatement      : 56
IntLiteral           : 41
Literal              : 71
Parameter            : 44 45
ParameterListR       : 37 44
PointerListR         : 47 69
ReturnStatement      : 60
Statement            : 35 35 63
StatementListR       : 20 63
StructDefinition     : 31
StructMember         : 67
StructMemberListR    : 65 67
Type                 : 27 28 29 37 43 66
UnaryExpression      : 34
WhileStatement       : 58
empty                : 4 32 46 48 64 68

Parsing method: LALR

state 0

    (0) S' -> . CompilationUnit
    (26) CompilationUnit -> . DefinitionListR
    (30) DefinitionListR -> . FunctionDefinition DefinitionListR
    (31) DefinitionListR -> . StructDefinition DefinitionListR
    (32) DefinitionListR -> . empty
    (37) FunctionDefinition -> . Type Id LPAREN ParameterListR RPAREN Block
    (65) StructDefinition -> . STRUCT Id LBRACE StructMemberListR RBRACE
    (78) empty -> .
    (69) Type -> . Id PointerListR
    (38) Id -> . ID

    STRUCT          shift and go to state 8
    $end            reduce using rule 78 (empty -> .)
    ID              shift and go to state 9

    CompilationUnit                shift and go to state 1
    DefinitionListR                shift and go to state 2
    FunctionDefinition             shift and go to state 3
    StructDefinition               shift and go to state 4
    empty                          shift and go to state 5
    Type                           shift and go to state 6
    Id                             shift and go to state 7

state 1

    (0) S' -> CompilationUnit .



state 2

    (26) CompilationUnit -> DefinitionListR .

    $end            reduce using rule 26 (CompilationUnit -> DefinitionListR .)


state 3

    (30) DefinitionListR -> FunctionDefinition . DefinitionListR
    (30) DefinitionListR -> . FunctionDefinition DefinitionListR
    (31) DefinitionListR -> . StructDefinition DefinitionListR
    (32) DefinitionListR -> . empty
    (37) FunctionDefinition -> . Type Id LPAREN ParameterListR RPAREN Block
    (65) StructDefinition -> . STRUCT Id LBRACE StructMemberListR RBRACE
    (78) empty -> .
    (69) Type -> . Id PointerListR
    (38) Id -> . ID

    STRUCT          shift and go to state 8
    $end            reduce using rule 78 (empty -> .)
    ID              shift and go to state 9

    FunctionDefinition             shift and go to state 3
    DefinitionListR                shift and go to state 10
    StructDefinition               shift and go to state 4
    empty                          shift and go to state 5
    Type                           shift and go to state 6
    Id                             shift and go to state 7

state 4

    (31) DefinitionListR -> StructDefinition . DefinitionListR
    (30) DefinitionListR -> . FunctionDefinition DefinitionListR
    (31) DefinitionListR -> . StructDefinition DefinitionListR
    (32) DefinitionListR -> . empty
    (37) FunctionDefinition -> . Type Id LPAREN ParameterListR RPAREN Block
    (65) StructDefinition -> . STRUCT Id LBRACE StructMemberListR RBRACE
    (78) empty -> .
    (69) Type -> . Id PointerListR
    (38) Id -> . ID

    STRUCT          shift and go to state 8
    $end            reduce using rule 78 (empty -> .)
    ID              shift and go to state 9

    StructDefinition               shift and go to state 4
    DefinitionListR                shift and go to state 11
    FunctionDefinition             shift and go to state 3
    empty                          shift and go to state 5
    Type                           shift and go to state 6
    Id                             shift and go to state 7

state 5

    (32) DefinitionListR -> empty .

    $end            reduce using rule 32 (DefinitionListR -> empty .)


state 6

    (37) FunctionDefinition -> Type . Id LPAREN ParameterListR RPAREN Block
    (38) Id -> . ID

    ID              shift and go to state 9

    Id                             shift and go to state 12

state 7

    (69) Type -> Id . PointerListR
    (47) PointerListR -> . TIMES PointerListR
    (48) PointerListR -> . empty
    (78) empty -> .

    TIMES           shift and go to state 14
    ID              reduce using rule 78 (empty -> .)

    PointerListR                   shift and go to state 13
    empty                          shift and go to state 15

state 8

    (65) StructDefinition -> STRUCT . Id LBRACE StructMemberListR RBRACE
    (38) Id -> . ID

    ID              shift and go to state 9

    Id                             shift and go to state 16

state 9

    (38) Id -> ID .

    TIMES           reduce using rule 38 (Id -> ID .)
    ID              reduce using rule 38 (Id -> ID .)
    LPAREN          reduce using rule 38 (Id -> ID .)
    LBRACE          reduce using rule 38 (Id -> ID .)
    COMMA           reduce using rule 38 (Id -> ID .)
    RPAREN          reduce using rule 38 (Id -> ID .)
    SEMICOLON       reduce using rule 38 (Id -> ID .)
    ASSIGNMENT      reduce using rule 38 (Id -> ID .)
    PLUS            reduce using rule 38 (Id -> ID .)
    MINUS           reduce using rule 38 (Id -> ID .)
    DIVIDE          reduce using rule 38 (Id -> ID .)
    MOD             reduce using rule 38 (Id -> ID .)
    LEQ             reduce using rule 38 (Id -> ID .)
    GEQ             reduce using rule 38 (Id -> ID .)
    LT              reduce using rule 38 (Id -> ID .)
    GT              reduce using rule 38 (Id -> ID .)
    EQ              reduce using rule 38 (Id -> ID .)
    NE              reduce using rule 38 (Id -> ID .)
    DOT             reduce using rule 38 (Id -> ID .)
    LBRACKET        reduce using rule 38 (Id -> ID .)
    IF              reduce using rule 38 (Id -> ID .)
    FOR             reduce using rule 38 (Id -> ID .)
    WHILE           reduce using rule 38 (Id -> ID .)
    BREAK           reduce using rule 38 (Id -> ID .)
    RETURN          reduce using rule 38 (Id -> ID .)
    ;               reduce using rule 38 (Id -> ID .)
    AMPERSAND       reduce using rule 38 (Id -> ID .)
    INTL            reduce using rule 38 (Id -> ID .)
    BOOLL           reduce using rule 38 (Id -> ID .)
    RBRACE          reduce using rule 38 (Id -> ID .)
    RBRACKET        reduce using rule 38 (Id -> ID .)


state 10

    (30) DefinitionListR -> FunctionDefinition DefinitionListR .

    $end            reduce using rule 30 (DefinitionListR -> FunctionDefinition DefinitionListR .)


state 11

    (31) DefinitionListR -> StructDefinition DefinitionListR .

    $end            reduce using rule 31 (DefinitionListR -> StructDefinition DefinitionListR .)


state 12

    (37) FunctionDefinition -> Type Id . LPAREN ParameterListR RPAREN Block

    LPAREN          shift and go to state 17


state 13

    (69) Type -> Id PointerListR .

    ID              reduce using rule 69 (Type -> Id PointerListR .)


state 14

    (47) PointerListR -> TIMES . PointerListR
    (47) PointerListR -> . TIMES PointerListR
    (48) PointerListR -> . empty
    (78) empty -> .

    TIMES           shift and go to state 14
    ID              reduce using rule 78 (empty -> .)

    PointerListR                   shift and go to state 18
    empty                          shift and go to state 15

state 15

    (48) PointerListR -> empty .

    ID              reduce using rule 48 (PointerListR -> empty .)


state 16

    (65) StructDefinition -> STRUCT Id . LBRACE StructMemberListR RBRACE

    LBRACE          shift and go to state 19


state 17

    (37) FunctionDefinition -> Type Id LPAREN . ParameterListR RPAREN Block
    (44) ParameterListR -> . Parameter COMMA ParameterListR
    (45) ParameterListR -> . Parameter
    (46) ParameterListR -> . empty
    (43) Parameter -> . Type Id
    (78) empty -> .
    (69) Type -> . Id PointerListR
    (38) Id -> . ID

    RPAREN          reduce using rule 78 (empty -> .)
    ID              shift and go to state 9

    Type                           shift and go to state 20
    Id                             shift and go to state 7
    ParameterListR                 shift and go to state 21
    Parameter                      shift and go to state 22
    empty                          shift and go to state 23

state 18

    (47) PointerListR -> TIMES PointerListR .

    ID              reduce using rule 47 (PointerListR -> TIMES PointerListR .)


state 19

    (65) StructDefinition -> STRUCT Id LBRACE . StructMemberListR RBRACE
    (67) StructMemberListR -> . StructMember StructMemberListR
    (68) StructMemberListR -> . empty
    (66) StructMember -> . Type Id SEMICOLON
    (78) empty -> .
    (69) Type -> . Id PointerListR
    (38) Id -> . ID

    RBRACE          reduce using rule 78 (empty -> .)
    ID              shift and go to state 9

    Id                             shift and go to state 7
    StructMemberListR              shift and go to state 24
    StructMember                   shift and go to state 25
    empty                          shift and go to state 26
    Type                           shift and go to state 27

state 20

    (43) Parameter -> Type . Id
    (38) Id -> . ID

    ID              shift and go to state 9

    Id                             shift and go to state 28

state 21

    (37) FunctionDefinition -> Type Id LPAREN ParameterListR . RPAREN Block

    RPAREN          shift and go to state 29


state 22

    (44) ParameterListR -> Parameter . COMMA ParameterListR
    (45) ParameterListR -> Parameter .

    COMMA           shift and go to state 30
    RPAREN          reduce using rule 45 (ParameterListR -> Parameter .)


state 23

    (46) ParameterListR -> empty .

    RPAREN          reduce using rule 46 (ParameterListR -> empty .)


state 24

    (65) StructDefinition -> STRUCT Id LBRACE StructMemberListR . RBRACE

    RBRACE          shift and go to state 31


state 25

    (67) StructMemberListR -> StructMember . StructMemberListR
    (67) StructMemberListR -> . StructMember StructMemberListR
    (68) StructMemberListR -> . empty
    (66) StructMember -> . Type Id SEMICOLON
    (78) empty -> .
    (69) Type -> . Id PointerListR
    (38) Id -> . ID

    RBRACE          reduce using rule 78 (empty -> .)
    ID              shift and go to state 9

    StructMember                   shift and go to state 25
    StructMemberListR              shift and go to state 32
    empty                          shift and go to state 26
    Type                           shift and go to state 27
    Id                             shift and go to state 7

state 26

    (68) StructMemberListR -> empty .

    RBRACE          reduce using rule 68 (StructMemberListR -> empty .)


state 27

    (66) StructMember -> Type . Id SEMICOLON
    (38) Id -> . ID

    ID              shift and go to state 9

    Id                             shift and go to state 33

state 28

    (43) Parameter -> Type Id .

    COMMA           reduce using rule 43 (Parameter -> Type Id .)
    RPAREN          reduce using rule 43 (Parameter -> Type Id .)


state 29

    (37) FunctionDefinition -> Type Id LPAREN ParameterListR RPAREN . Block
    (20) Block -> . LBRACE StatementListR RBRACE

    LBRACE          shift and go to state 35

    Block                          shift and go to state 34

state 30

    (44) ParameterListR -> Parameter COMMA . ParameterListR
    (44) ParameterListR -> . Parameter COMMA ParameterListR
    (45) ParameterListR -> . Parameter
    (46) ParameterListR -> . empty
    (43) Parameter -> . Type Id
    (78) empty -> .
    (69) Type -> . Id PointerListR
    (38) Id -> . ID

    RPAREN          reduce using rule 78 (empty -> .)
    ID              shift and go to state 9

    Parameter                      shift and go to state 22
    ParameterListR                 shift and go to state 36
    empty                          shift and go to state 23
    Type                           shift and go to state 20
    Id                             shift and go to state 7

state 31

    (65) StructDefinition -> STRUCT Id LBRACE StructMemberListR RBRACE .

    STRUCT          reduce using rule 65 (StructDefinition -> STRUCT Id LBRACE StructMemberListR RBRACE .)
    ID              reduce using rule 65 (StructDefinition -> STRUCT Id LBRACE StructMemberListR RBRACE .)
    $end            reduce using rule 65 (StructDefinition -> STRUCT Id LBRACE StructMemberListR RBRACE .)


state 32

    (67) StructMemberListR -> StructMember StructMemberListR .

    RBRACE          reduce using rule 67 (StructMemberListR -> StructMember StructMemberListR .)


state 33

    (66) StructMember -> Type Id . SEMICOLON

    SEMICOLON       shift and go to state 37


state 34

    (37) FunctionDefinition -> Type Id LPAREN ParameterListR RPAREN Block .

    STRUCT          reduce using rule 37 (FunctionDefinition -> Type Id LPAREN ParameterListR RPAREN Block .)
    ID              reduce using rule 37 (FunctionDefinition -> Type Id LPAREN ParameterListR RPAREN Block .)
    $end            reduce using rule 37 (FunctionDefinition -> Type Id LPAREN ParameterListR RPAREN Block .)


state 35

    (20) Block -> LBRACE . StatementListR RBRACE
    (63) StatementListR -> . Statement StatementListR
    (64) StatementListR -> . empty
    (51) Statement -> . AssignmentStatement
    (52) Statement -> . DeclarationAssignmentStatement
    (53) Statement -> . DeclarationFunctionCallStatement
    (54) Statement -> . DeclarationStatement
    (55) Statement -> . Expression SEMICOLON
    (56) Statement -> . IfElseStatement
    (57) Statement -> . ForStatement
    (58) Statement -> . WhileStatement
    (59) Statement -> . BreakStatement
    (60) Statement -> . ReturnStatement
    (61) Statement -> . BlockStatement
    (62) Statement -> . BlankStatement
    (78) empty -> .
    (5) AssignmentStatement -> . Expression ASSIGNMENT Expression SEMICOLON
    (6) AssignmentStatement -> . Expression ASSIGNMENT Expression
    (27) DeclarationAssignmentStatement -> . Type Id ASSIGNMENT Expression SEMICOLON
    (28) DeclarationFunctionCallStatement -> . Type FunctionCall SEMICOLON
    (29) DeclarationStatement -> . Type Id SEMICOLON
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (39) IfElseStatement -> . IF LPAREN Expression RPAREN Block ELSE Block
    (35) ForStatement -> . FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block
    (77) WhileStatement -> . WHILE LPAREN Expression RPAREN Block
    (24) BreakStatement -> . BREAK INTL SEMICOLON
    (25) BreakStatement -> . BREAK SEMICOLON
    (49) ReturnStatement -> . RETURN Expression SEMICOLON
    (50) ReturnStatement -> . RETURN SEMICOLON
    (21) BlockStatement -> . Block
    (19) BlankStatement -> . ;
    (69) Type -> . Id PointerListR
    (7) BinaryExpression -> . Expression PLUS Expression
    (8) BinaryExpression -> . Expression MINUS Expression
    (9) BinaryExpression -> . Expression TIMES Expression
    (10) BinaryExpression -> . Expression DIVIDE Expression
    (11) BinaryExpression -> . Expression MOD Expression
    (12) BinaryExpression -> . Expression LEQ Expression
    (13) BinaryExpression -> . Expression GEQ Expression
    (14) BinaryExpression -> . Expression LT Expression
    (15) BinaryExpression -> . Expression GT Expression
    (16) BinaryExpression -> . Expression EQ Expression
    (17) BinaryExpression -> . Expression NE Expression
    (18) BinaryExpression -> . Expression DOT Expression
    (70) UnaryExpression -> . Id
    (71) UnaryExpression -> . Literal
    (72) UnaryExpression -> . FunctionCall
    (73) UnaryExpression -> . BracketCall
    (74) UnaryExpression -> . LPAREN Expression RPAREN
    (75) UnaryExpression -> . TIMES Expression
    (76) UnaryExpression -> . AMPERSAND Expression
    (20) Block -> . LBRACE StatementListR RBRACE
    (38) Id -> . ID
    (41) Literal -> . IntLiteral
    (42) Literal -> . BoolLiteral
    (36) FunctionCall -> . Id LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (40) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL

    RBRACE          reduce using rule 78 (empty -> .)
    IF              shift and go to state 58
    FOR             shift and go to state 61
    WHILE           shift and go to state 62
    BREAK           shift and go to state 63
    RETURN          shift and go to state 65
    ;               shift and go to state 66
    LPAREN          shift and go to state 59
    TIMES           shift and go to state 67
    AMPERSAND       shift and go to state 70
    LBRACE          shift and go to state 35
    ID              shift and go to state 9
    INTL            shift and go to state 64
    BOOLL           shift and go to state 73

    StatementListR                 shift and go to state 38
    Statement                      shift and go to state 39
    empty                          shift and go to state 40
    AssignmentStatement            shift and go to state 41
    DeclarationAssignmentStatement shift and go to state 42
    DeclarationFunctionCallStatement shift and go to state 43
    DeclarationStatement           shift and go to state 44
    Expression                     shift and go to state 45
    IfElseStatement                shift and go to state 46
    ForStatement                   shift and go to state 47
    WhileStatement                 shift and go to state 48
    BreakStatement                 shift and go to state 49
    ReturnStatement                shift and go to state 50
    BlockStatement                 shift and go to state 51
    BlankStatement                 shift and go to state 52
    Type                           shift and go to state 53
    Id                             shift and go to state 54
    FunctionCall                   shift and go to state 55
    BinaryExpression               shift and go to state 56
    UnaryExpression                shift and go to state 57
    Block                          shift and go to state 60
    Literal                        shift and go to state 68
    BracketCall                    shift and go to state 69
    IntLiteral                     shift and go to state 71
    BoolLiteral                    shift and go to state 72

state 36

    (44) ParameterListR -> Parameter COMMA ParameterListR .

    RPAREN          reduce using rule 44 (ParameterListR -> Parameter COMMA ParameterListR .)


state 37

    (66) StructMember -> Type Id SEMICOLON .

    ID              reduce using rule 66 (StructMember -> Type Id SEMICOLON .)
    RBRACE          reduce using rule 66 (StructMember -> Type Id SEMICOLON .)


state 38

    (20) Block -> LBRACE StatementListR . RBRACE

    RBRACE          shift and go to state 74


state 39

    (63) StatementListR -> Statement . StatementListR
    (63) StatementListR -> . Statement StatementListR
    (64) StatementListR -> . empty
    (51) Statement -> . AssignmentStatement
    (52) Statement -> . DeclarationAssignmentStatement
    (53) Statement -> . DeclarationFunctionCallStatement
    (54) Statement -> . DeclarationStatement
    (55) Statement -> . Expression SEMICOLON
    (56) Statement -> . IfElseStatement
    (57) Statement -> . ForStatement
    (58) Statement -> . WhileStatement
    (59) Statement -> . BreakStatement
    (60) Statement -> . ReturnStatement
    (61) Statement -> . BlockStatement
    (62) Statement -> . BlankStatement
    (78) empty -> .
    (5) AssignmentStatement -> . Expression ASSIGNMENT Expression SEMICOLON
    (6) AssignmentStatement -> . Expression ASSIGNMENT Expression
    (27) DeclarationAssignmentStatement -> . Type Id ASSIGNMENT Expression SEMICOLON
    (28) DeclarationFunctionCallStatement -> . Type FunctionCall SEMICOLON
    (29) DeclarationStatement -> . Type Id SEMICOLON
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (39) IfElseStatement -> . IF LPAREN Expression RPAREN Block ELSE Block
    (35) ForStatement -> . FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block
    (77) WhileStatement -> . WHILE LPAREN Expression RPAREN Block
    (24) BreakStatement -> . BREAK INTL SEMICOLON
    (25) BreakStatement -> . BREAK SEMICOLON
    (49) ReturnStatement -> . RETURN Expression SEMICOLON
    (50) ReturnStatement -> . RETURN SEMICOLON
    (21) BlockStatement -> . Block
    (19) BlankStatement -> . ;
    (69) Type -> . Id PointerListR
    (7) BinaryExpression -> . Expression PLUS Expression
    (8) BinaryExpression -> . Expression MINUS Expression
    (9) BinaryExpression -> . Expression TIMES Expression
    (10) BinaryExpression -> . Expression DIVIDE Expression
    (11) BinaryExpression -> . Expression MOD Expression
    (12) BinaryExpression -> . Expression LEQ Expression
    (13) BinaryExpression -> . Expression GEQ Expression
    (14) BinaryExpression -> . Expression LT Expression
    (15) BinaryExpression -> . Expression GT Expression
    (16) BinaryExpression -> . Expression EQ Expression
    (17) BinaryExpression -> . Expression NE Expression
    (18) BinaryExpression -> . Expression DOT Expression
    (70) UnaryExpression -> . Id
    (71) UnaryExpression -> . Literal
    (72) UnaryExpression -> . FunctionCall
    (73) UnaryExpression -> . BracketCall
    (74) UnaryExpression -> . LPAREN Expression RPAREN
    (75) UnaryExpression -> . TIMES Expression
    (76) UnaryExpression -> . AMPERSAND Expression
    (20) Block -> . LBRACE StatementListR RBRACE
    (38) Id -> . ID
    (41) Literal -> . IntLiteral
    (42) Literal -> . BoolLiteral
    (36) FunctionCall -> . Id LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (40) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL

    RBRACE          reduce using rule 78 (empty -> .)
    IF              shift and go to state 58
    FOR             shift and go to state 61
    WHILE           shift and go to state 62
    BREAK           shift and go to state 63
    RETURN          shift and go to state 65
    ;               shift and go to state 66
    LPAREN          shift and go to state 59
    TIMES           shift and go to state 67
    AMPERSAND       shift and go to state 70
    LBRACE          shift and go to state 35
    ID              shift and go to state 9
    INTL            shift and go to state 64
    BOOLL           shift and go to state 73

    Statement                      shift and go to state 39
    StatementListR                 shift and go to state 75
    empty                          shift and go to state 40
    AssignmentStatement            shift and go to state 41
    DeclarationAssignmentStatement shift and go to state 42
    DeclarationFunctionCallStatement shift and go to state 43
    DeclarationStatement           shift and go to state 44
    Expression                     shift and go to state 45
    IfElseStatement                shift and go to state 46
    ForStatement                   shift and go to state 47
    WhileStatement                 shift and go to state 48
    BreakStatement                 shift and go to state 49
    ReturnStatement                shift and go to state 50
    BlockStatement                 shift and go to state 51
    BlankStatement                 shift and go to state 52
    Type                           shift and go to state 53
    Id                             shift and go to state 54
    FunctionCall                   shift and go to state 55
    BinaryExpression               shift and go to state 56
    UnaryExpression                shift and go to state 57
    Block                          shift and go to state 60
    Literal                        shift and go to state 68
    BracketCall                    shift and go to state 69
    IntLiteral                     shift and go to state 71
    BoolLiteral                    shift and go to state 72

state 40

    (64) StatementListR -> empty .

    RBRACE          reduce using rule 64 (StatementListR -> empty .)


state 41

    (51) Statement -> AssignmentStatement .

    IF              reduce using rule 51 (Statement -> AssignmentStatement .)
    FOR             reduce using rule 51 (Statement -> AssignmentStatement .)
    WHILE           reduce using rule 51 (Statement -> AssignmentStatement .)
    BREAK           reduce using rule 51 (Statement -> AssignmentStatement .)
    RETURN          reduce using rule 51 (Statement -> AssignmentStatement .)
    ;               reduce using rule 51 (Statement -> AssignmentStatement .)
    LPAREN          reduce using rule 51 (Statement -> AssignmentStatement .)
    TIMES           reduce using rule 51 (Statement -> AssignmentStatement .)
    AMPERSAND       reduce using rule 51 (Statement -> AssignmentStatement .)
    LBRACE          reduce using rule 51 (Statement -> AssignmentStatement .)
    ID              reduce using rule 51 (Statement -> AssignmentStatement .)
    INTL            reduce using rule 51 (Statement -> AssignmentStatement .)
    BOOLL           reduce using rule 51 (Statement -> AssignmentStatement .)
    RBRACE          reduce using rule 51 (Statement -> AssignmentStatement .)
    RPAREN          reduce using rule 51 (Statement -> AssignmentStatement .)


state 42

    (52) Statement -> DeclarationAssignmentStatement .

    IF              reduce using rule 52 (Statement -> DeclarationAssignmentStatement .)
    FOR             reduce using rule 52 (Statement -> DeclarationAssignmentStatement .)
    WHILE           reduce using rule 52 (Statement -> DeclarationAssignmentStatement .)
    BREAK           reduce using rule 52 (Statement -> DeclarationAssignmentStatement .)
    RETURN          reduce using rule 52 (Statement -> DeclarationAssignmentStatement .)
    ;               reduce using rule 52 (Statement -> DeclarationAssignmentStatement .)
    LPAREN          reduce using rule 52 (Statement -> DeclarationAssignmentStatement .)
    TIMES           reduce using rule 52 (Statement -> DeclarationAssignmentStatement .)
    AMPERSAND       reduce using rule 52 (Statement -> DeclarationAssignmentStatement .)
    LBRACE          reduce using rule 52 (Statement -> DeclarationAssignmentStatement .)
    ID              reduce using rule 52 (Statement -> DeclarationAssignmentStatement .)
    INTL            reduce using rule 52 (Statement -> DeclarationAssignmentStatement .)
    BOOLL           reduce using rule 52 (Statement -> DeclarationAssignmentStatement .)
    RBRACE          reduce using rule 52 (Statement -> DeclarationAssignmentStatement .)
    RPAREN          reduce using rule 52 (Statement -> DeclarationAssignmentStatement .)


state 43

    (53) Statement -> DeclarationFunctionCallStatement .

    IF              reduce using rule 53 (Statement -> DeclarationFunctionCallStatement .)
    FOR             reduce using rule 53 (Statement -> DeclarationFunctionCallStatement .)
    WHILE           reduce using rule 53 (Statement -> DeclarationFunctionCallStatement .)
    BREAK           reduce using rule 53 (Statement -> DeclarationFunctionCallStatement .)
    RETURN          reduce using rule 53 (Statement -> DeclarationFunctionCallStatement .)
    ;               reduce using rule 53 (Statement -> DeclarationFunctionCallStatement .)
    LPAREN          reduce using rule 53 (Statement -> DeclarationFunctionCallStatement .)
    TIMES           reduce using rule 53 (Statement -> DeclarationFunctionCallStatement .)
    AMPERSAND       reduce using rule 53 (Statement -> DeclarationFunctionCallStatement .)
    LBRACE          reduce using rule 53 (Statement -> DeclarationFunctionCallStatement .)
    ID              reduce using rule 53 (Statement -> DeclarationFunctionCallStatement .)
    INTL            reduce using rule 53 (Statement -> DeclarationFunctionCallStatement .)
    BOOLL           reduce using rule 53 (Statement -> DeclarationFunctionCallStatement .)
    RBRACE          reduce using rule 53 (Statement -> DeclarationFunctionCallStatement .)
    RPAREN          reduce using rule 53 (Statement -> DeclarationFunctionCallStatement .)


state 44

    (54) Statement -> DeclarationStatement .

    IF              reduce using rule 54 (Statement -> DeclarationStatement .)
    FOR             reduce using rule 54 (Statement -> DeclarationStatement .)
    WHILE           reduce using rule 54 (Statement -> DeclarationStatement .)
    BREAK           reduce using rule 54 (Statement -> DeclarationStatement .)
    RETURN          reduce using rule 54 (Statement -> DeclarationStatement .)
    ;               reduce using rule 54 (Statement -> DeclarationStatement .)
    LPAREN          reduce using rule 54 (Statement -> DeclarationStatement .)
    TIMES           reduce using rule 54 (Statement -> DeclarationStatement .)
    AMPERSAND       reduce using rule 54 (Statement -> DeclarationStatement .)
    LBRACE          reduce using rule 54 (Statement -> DeclarationStatement .)
    ID              reduce using rule 54 (Statement -> DeclarationStatement .)
    INTL            reduce using rule 54 (Statement -> DeclarationStatement .)
    BOOLL           reduce using rule 54 (Statement -> DeclarationStatement .)
    RBRACE          reduce using rule 54 (Statement -> DeclarationStatement .)
    RPAREN          reduce using rule 54 (Statement -> DeclarationStatement .)


state 45

    (55) Statement -> Expression . SEMICOLON
    (5) AssignmentStatement -> Expression . ASSIGNMENT Expression SEMICOLON
    (6) AssignmentStatement -> Expression . ASSIGNMENT Expression
    (7) BinaryExpression -> Expression . PLUS Expression
    (8) BinaryExpression -> Expression . MINUS Expression
    (9) BinaryExpression -> Expression . TIMES Expression
    (10) BinaryExpression -> Expression . DIVIDE Expression
    (11) BinaryExpression -> Expression . MOD Expression
    (12) BinaryExpression -> Expression . LEQ Expression
    (13) BinaryExpression -> Expression . GEQ Expression
    (14) BinaryExpression -> Expression . LT Expression
    (15) BinaryExpression -> Expression . GT Expression
    (16) BinaryExpression -> Expression . EQ Expression
    (17) BinaryExpression -> Expression . NE Expression
    (18) BinaryExpression -> Expression . DOT Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET

    SEMICOLON       shift and go to state 76
    ASSIGNMENT      shift and go to state 77
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    TIMES           shift and go to state 80
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 82
    LEQ             shift and go to state 83
    GEQ             shift and go to state 84
    LT              shift and go to state 85
    GT              shift and go to state 86
    EQ              shift and go to state 87
    NE              shift and go to state 88
    DOT             shift and go to state 89
    LBRACKET        shift and go to state 90


state 46

    (56) Statement -> IfElseStatement .

    IF              reduce using rule 56 (Statement -> IfElseStatement .)
    FOR             reduce using rule 56 (Statement -> IfElseStatement .)
    WHILE           reduce using rule 56 (Statement -> IfElseStatement .)
    BREAK           reduce using rule 56 (Statement -> IfElseStatement .)
    RETURN          reduce using rule 56 (Statement -> IfElseStatement .)
    ;               reduce using rule 56 (Statement -> IfElseStatement .)
    LPAREN          reduce using rule 56 (Statement -> IfElseStatement .)
    TIMES           reduce using rule 56 (Statement -> IfElseStatement .)
    AMPERSAND       reduce using rule 56 (Statement -> IfElseStatement .)
    LBRACE          reduce using rule 56 (Statement -> IfElseStatement .)
    ID              reduce using rule 56 (Statement -> IfElseStatement .)
    INTL            reduce using rule 56 (Statement -> IfElseStatement .)
    BOOLL           reduce using rule 56 (Statement -> IfElseStatement .)
    RBRACE          reduce using rule 56 (Statement -> IfElseStatement .)
    RPAREN          reduce using rule 56 (Statement -> IfElseStatement .)


state 47

    (57) Statement -> ForStatement .

    IF              reduce using rule 57 (Statement -> ForStatement .)
    FOR             reduce using rule 57 (Statement -> ForStatement .)
    WHILE           reduce using rule 57 (Statement -> ForStatement .)
    BREAK           reduce using rule 57 (Statement -> ForStatement .)
    RETURN          reduce using rule 57 (Statement -> ForStatement .)
    ;               reduce using rule 57 (Statement -> ForStatement .)
    LPAREN          reduce using rule 57 (Statement -> ForStatement .)
    TIMES           reduce using rule 57 (Statement -> ForStatement .)
    AMPERSAND       reduce using rule 57 (Statement -> ForStatement .)
    LBRACE          reduce using rule 57 (Statement -> ForStatement .)
    ID              reduce using rule 57 (Statement -> ForStatement .)
    INTL            reduce using rule 57 (Statement -> ForStatement .)
    BOOLL           reduce using rule 57 (Statement -> ForStatement .)
    RBRACE          reduce using rule 57 (Statement -> ForStatement .)
    RPAREN          reduce using rule 57 (Statement -> ForStatement .)


state 48

    (58) Statement -> WhileStatement .

    IF              reduce using rule 58 (Statement -> WhileStatement .)
    FOR             reduce using rule 58 (Statement -> WhileStatement .)
    WHILE           reduce using rule 58 (Statement -> WhileStatement .)
    BREAK           reduce using rule 58 (Statement -> WhileStatement .)
    RETURN          reduce using rule 58 (Statement -> WhileStatement .)
    ;               reduce using rule 58 (Statement -> WhileStatement .)
    LPAREN          reduce using rule 58 (Statement -> WhileStatement .)
    TIMES           reduce using rule 58 (Statement -> WhileStatement .)
    AMPERSAND       reduce using rule 58 (Statement -> WhileStatement .)
    LBRACE          reduce using rule 58 (Statement -> WhileStatement .)
    ID              reduce using rule 58 (Statement -> WhileStatement .)
    INTL            reduce using rule 58 (Statement -> WhileStatement .)
    BOOLL           reduce using rule 58 (Statement -> WhileStatement .)
    RBRACE          reduce using rule 58 (Statement -> WhileStatement .)
    RPAREN          reduce using rule 58 (Statement -> WhileStatement .)


state 49

    (59) Statement -> BreakStatement .

    IF              reduce using rule 59 (Statement -> BreakStatement .)
    FOR             reduce using rule 59 (Statement -> BreakStatement .)
    WHILE           reduce using rule 59 (Statement -> BreakStatement .)
    BREAK           reduce using rule 59 (Statement -> BreakStatement .)
    RETURN          reduce using rule 59 (Statement -> BreakStatement .)
    ;               reduce using rule 59 (Statement -> BreakStatement .)
    LPAREN          reduce using rule 59 (Statement -> BreakStatement .)
    TIMES           reduce using rule 59 (Statement -> BreakStatement .)
    AMPERSAND       reduce using rule 59 (Statement -> BreakStatement .)
    LBRACE          reduce using rule 59 (Statement -> BreakStatement .)
    ID              reduce using rule 59 (Statement -> BreakStatement .)
    INTL            reduce using rule 59 (Statement -> BreakStatement .)
    BOOLL           reduce using rule 59 (Statement -> BreakStatement .)
    RBRACE          reduce using rule 59 (Statement -> BreakStatement .)
    RPAREN          reduce using rule 59 (Statement -> BreakStatement .)


state 50

    (60) Statement -> ReturnStatement .

    IF              reduce using rule 60 (Statement -> ReturnStatement .)
    FOR             reduce using rule 60 (Statement -> ReturnStatement .)
    WHILE           reduce using rule 60 (Statement -> ReturnStatement .)
    BREAK           reduce using rule 60 (Statement -> ReturnStatement .)
    RETURN          reduce using rule 60 (Statement -> ReturnStatement .)
    ;               reduce using rule 60 (Statement -> ReturnStatement .)
    LPAREN          reduce using rule 60 (Statement -> ReturnStatement .)
    TIMES           reduce using rule 60 (Statement -> ReturnStatement .)
    AMPERSAND       reduce using rule 60 (Statement -> ReturnStatement .)
    LBRACE          reduce using rule 60 (Statement -> ReturnStatement .)
    ID              reduce using rule 60 (Statement -> ReturnStatement .)
    INTL            reduce using rule 60 (Statement -> ReturnStatement .)
    BOOLL           reduce using rule 60 (Statement -> ReturnStatement .)
    RBRACE          reduce using rule 60 (Statement -> ReturnStatement .)
    RPAREN          reduce using rule 60 (Statement -> ReturnStatement .)


state 51

    (61) Statement -> BlockStatement .

    IF              reduce using rule 61 (Statement -> BlockStatement .)
    FOR             reduce using rule 61 (Statement -> BlockStatement .)
    WHILE           reduce using rule 61 (Statement -> BlockStatement .)
    BREAK           reduce using rule 61 (Statement -> BlockStatement .)
    RETURN          reduce using rule 61 (Statement -> BlockStatement .)
    ;               reduce using rule 61 (Statement -> BlockStatement .)
    LPAREN          reduce using rule 61 (Statement -> BlockStatement .)
    TIMES           reduce using rule 61 (Statement -> BlockStatement .)
    AMPERSAND       reduce using rule 61 (Statement -> BlockStatement .)
    LBRACE          reduce using rule 61 (Statement -> BlockStatement .)
    ID              reduce using rule 61 (Statement -> BlockStatement .)
    INTL            reduce using rule 61 (Statement -> BlockStatement .)
    BOOLL           reduce using rule 61 (Statement -> BlockStatement .)
    RBRACE          reduce using rule 61 (Statement -> BlockStatement .)
    RPAREN          reduce using rule 61 (Statement -> BlockStatement .)


state 52

    (62) Statement -> BlankStatement .

    IF              reduce using rule 62 (Statement -> BlankStatement .)
    FOR             reduce using rule 62 (Statement -> BlankStatement .)
    WHILE           reduce using rule 62 (Statement -> BlankStatement .)
    BREAK           reduce using rule 62 (Statement -> BlankStatement .)
    RETURN          reduce using rule 62 (Statement -> BlankStatement .)
    ;               reduce using rule 62 (Statement -> BlankStatement .)
    LPAREN          reduce using rule 62 (Statement -> BlankStatement .)
    TIMES           reduce using rule 62 (Statement -> BlankStatement .)
    AMPERSAND       reduce using rule 62 (Statement -> BlankStatement .)
    LBRACE          reduce using rule 62 (Statement -> BlankStatement .)
    ID              reduce using rule 62 (Statement -> BlankStatement .)
    INTL            reduce using rule 62 (Statement -> BlankStatement .)
    BOOLL           reduce using rule 62 (Statement -> BlankStatement .)
    RBRACE          reduce using rule 62 (Statement -> BlankStatement .)
    RPAREN          reduce using rule 62 (Statement -> BlankStatement .)


state 53

    (27) DeclarationAssignmentStatement -> Type . Id ASSIGNMENT Expression SEMICOLON
    (28) DeclarationFunctionCallStatement -> Type . FunctionCall SEMICOLON
    (29) DeclarationStatement -> Type . Id SEMICOLON
    (38) Id -> . ID
    (36) FunctionCall -> . Id LPAREN ArgumentListR RPAREN

    ID              shift and go to state 9

    Id                             shift and go to state 91
    FunctionCall                   shift and go to state 92

state 54

    (69) Type -> Id . PointerListR
    (70) UnaryExpression -> Id .
    (36) FunctionCall -> Id . LPAREN ArgumentListR RPAREN
    (47) PointerListR -> . TIMES PointerListR
    (48) PointerListR -> . empty
    (78) empty -> .

  ! shift/reduce conflict for TIMES resolved as shift
    SEMICOLON       reduce using rule 70 (UnaryExpression -> Id .)
    ASSIGNMENT      reduce using rule 70 (UnaryExpression -> Id .)
    PLUS            reduce using rule 70 (UnaryExpression -> Id .)
    MINUS           reduce using rule 70 (UnaryExpression -> Id .)
    DIVIDE          reduce using rule 70 (UnaryExpression -> Id .)
    MOD             reduce using rule 70 (UnaryExpression -> Id .)
    LEQ             reduce using rule 70 (UnaryExpression -> Id .)
    GEQ             reduce using rule 70 (UnaryExpression -> Id .)
    LT              reduce using rule 70 (UnaryExpression -> Id .)
    GT              reduce using rule 70 (UnaryExpression -> Id .)
    EQ              reduce using rule 70 (UnaryExpression -> Id .)
    NE              reduce using rule 70 (UnaryExpression -> Id .)
    DOT             reduce using rule 70 (UnaryExpression -> Id .)
    LBRACKET        reduce using rule 70 (UnaryExpression -> Id .)
    LPAREN          shift and go to state 93
    TIMES           shift and go to state 14
    ID              reduce using rule 78 (empty -> .)

  ! TIMES           [ reduce using rule 70 (UnaryExpression -> Id .) ]

    PointerListR                   shift and go to state 13
    empty                          shift and go to state 15

state 55

    (72) UnaryExpression -> FunctionCall .

    SEMICOLON       reduce using rule 72 (UnaryExpression -> FunctionCall .)
    ASSIGNMENT      reduce using rule 72 (UnaryExpression -> FunctionCall .)
    PLUS            reduce using rule 72 (UnaryExpression -> FunctionCall .)
    MINUS           reduce using rule 72 (UnaryExpression -> FunctionCall .)
    TIMES           reduce using rule 72 (UnaryExpression -> FunctionCall .)
    DIVIDE          reduce using rule 72 (UnaryExpression -> FunctionCall .)
    MOD             reduce using rule 72 (UnaryExpression -> FunctionCall .)
    LEQ             reduce using rule 72 (UnaryExpression -> FunctionCall .)
    GEQ             reduce using rule 72 (UnaryExpression -> FunctionCall .)
    LT              reduce using rule 72 (UnaryExpression -> FunctionCall .)
    GT              reduce using rule 72 (UnaryExpression -> FunctionCall .)
    EQ              reduce using rule 72 (UnaryExpression -> FunctionCall .)
    NE              reduce using rule 72 (UnaryExpression -> FunctionCall .)
    DOT             reduce using rule 72 (UnaryExpression -> FunctionCall .)
    LBRACKET        reduce using rule 72 (UnaryExpression -> FunctionCall .)
    RPAREN          reduce using rule 72 (UnaryExpression -> FunctionCall .)
    IF              reduce using rule 72 (UnaryExpression -> FunctionCall .)
    FOR             reduce using rule 72 (UnaryExpression -> FunctionCall .)
    WHILE           reduce using rule 72 (UnaryExpression -> FunctionCall .)
    BREAK           reduce using rule 72 (UnaryExpression -> FunctionCall .)
    RETURN          reduce using rule 72 (UnaryExpression -> FunctionCall .)
    ;               reduce using rule 72 (UnaryExpression -> FunctionCall .)
    LPAREN          reduce using rule 72 (UnaryExpression -> FunctionCall .)
    AMPERSAND       reduce using rule 72 (UnaryExpression -> FunctionCall .)
    LBRACE          reduce using rule 72 (UnaryExpression -> FunctionCall .)
    ID              reduce using rule 72 (UnaryExpression -> FunctionCall .)
    INTL            reduce using rule 72 (UnaryExpression -> FunctionCall .)
    BOOLL           reduce using rule 72 (UnaryExpression -> FunctionCall .)
    RBRACE          reduce using rule 72 (UnaryExpression -> FunctionCall .)
    RBRACKET        reduce using rule 72 (UnaryExpression -> FunctionCall .)
    COMMA           reduce using rule 72 (UnaryExpression -> FunctionCall .)


state 56

    (33) Expression -> BinaryExpression .

    SEMICOLON       reduce using rule 33 (Expression -> BinaryExpression .)
    ASSIGNMENT      reduce using rule 33 (Expression -> BinaryExpression .)
    PLUS            reduce using rule 33 (Expression -> BinaryExpression .)
    MINUS           reduce using rule 33 (Expression -> BinaryExpression .)
    TIMES           reduce using rule 33 (Expression -> BinaryExpression .)
    DIVIDE          reduce using rule 33 (Expression -> BinaryExpression .)
    MOD             reduce using rule 33 (Expression -> BinaryExpression .)
    LEQ             reduce using rule 33 (Expression -> BinaryExpression .)
    GEQ             reduce using rule 33 (Expression -> BinaryExpression .)
    LT              reduce using rule 33 (Expression -> BinaryExpression .)
    GT              reduce using rule 33 (Expression -> BinaryExpression .)
    EQ              reduce using rule 33 (Expression -> BinaryExpression .)
    NE              reduce using rule 33 (Expression -> BinaryExpression .)
    DOT             reduce using rule 33 (Expression -> BinaryExpression .)
    LBRACKET        reduce using rule 33 (Expression -> BinaryExpression .)
    RPAREN          reduce using rule 33 (Expression -> BinaryExpression .)
    IF              reduce using rule 33 (Expression -> BinaryExpression .)
    FOR             reduce using rule 33 (Expression -> BinaryExpression .)
    WHILE           reduce using rule 33 (Expression -> BinaryExpression .)
    BREAK           reduce using rule 33 (Expression -> BinaryExpression .)
    RETURN          reduce using rule 33 (Expression -> BinaryExpression .)
    ;               reduce using rule 33 (Expression -> BinaryExpression .)
    LPAREN          reduce using rule 33 (Expression -> BinaryExpression .)
    AMPERSAND       reduce using rule 33 (Expression -> BinaryExpression .)
    LBRACE          reduce using rule 33 (Expression -> BinaryExpression .)
    ID              reduce using rule 33 (Expression -> BinaryExpression .)
    INTL            reduce using rule 33 (Expression -> BinaryExpression .)
    BOOLL           reduce using rule 33 (Expression -> BinaryExpression .)
    RBRACE          reduce using rule 33 (Expression -> BinaryExpression .)
    RBRACKET        reduce using rule 33 (Expression -> BinaryExpression .)
    COMMA           reduce using rule 33 (Expression -> BinaryExpression .)


state 57

    (34) Expression -> UnaryExpression .

    SEMICOLON       reduce using rule 34 (Expression -> UnaryExpression .)
    ASSIGNMENT      reduce using rule 34 (Expression -> UnaryExpression .)
    PLUS            reduce using rule 34 (Expression -> UnaryExpression .)
    MINUS           reduce using rule 34 (Expression -> UnaryExpression .)
    TIMES           reduce using rule 34 (Expression -> UnaryExpression .)
    DIVIDE          reduce using rule 34 (Expression -> UnaryExpression .)
    MOD             reduce using rule 34 (Expression -> UnaryExpression .)
    LEQ             reduce using rule 34 (Expression -> UnaryExpression .)
    GEQ             reduce using rule 34 (Expression -> UnaryExpression .)
    LT              reduce using rule 34 (Expression -> UnaryExpression .)
    GT              reduce using rule 34 (Expression -> UnaryExpression .)
    EQ              reduce using rule 34 (Expression -> UnaryExpression .)
    NE              reduce using rule 34 (Expression -> UnaryExpression .)
    DOT             reduce using rule 34 (Expression -> UnaryExpression .)
    LBRACKET        reduce using rule 34 (Expression -> UnaryExpression .)
    RPAREN          reduce using rule 34 (Expression -> UnaryExpression .)
    IF              reduce using rule 34 (Expression -> UnaryExpression .)
    FOR             reduce using rule 34 (Expression -> UnaryExpression .)
    WHILE           reduce using rule 34 (Expression -> UnaryExpression .)
    BREAK           reduce using rule 34 (Expression -> UnaryExpression .)
    RETURN          reduce using rule 34 (Expression -> UnaryExpression .)
    ;               reduce using rule 34 (Expression -> UnaryExpression .)
    LPAREN          reduce using rule 34 (Expression -> UnaryExpression .)
    AMPERSAND       reduce using rule 34 (Expression -> UnaryExpression .)
    LBRACE          reduce using rule 34 (Expression -> UnaryExpression .)
    ID              reduce using rule 34 (Expression -> UnaryExpression .)
    INTL            reduce using rule 34 (Expression -> UnaryExpression .)
    BOOLL           reduce using rule 34 (Expression -> UnaryExpression .)
    RBRACE          reduce using rule 34 (Expression -> UnaryExpression .)
    RBRACKET        reduce using rule 34 (Expression -> UnaryExpression .)
    COMMA           reduce using rule 34 (Expression -> UnaryExpression .)


state 58

    (39) IfElseStatement -> IF . LPAREN Expression RPAREN Block ELSE Block

    LPAREN          shift and go to state 94


state 59

    (74) UnaryExpression -> LPAREN . Expression RPAREN
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (7) BinaryExpression -> . Expression PLUS Expression
    (8) BinaryExpression -> . Expression MINUS Expression
    (9) BinaryExpression -> . Expression TIMES Expression
    (10) BinaryExpression -> . Expression DIVIDE Expression
    (11) BinaryExpression -> . Expression MOD Expression
    (12) BinaryExpression -> . Expression LEQ Expression
    (13) BinaryExpression -> . Expression GEQ Expression
    (14) BinaryExpression -> . Expression LT Expression
    (15) BinaryExpression -> . Expression GT Expression
    (16) BinaryExpression -> . Expression EQ Expression
    (17) BinaryExpression -> . Expression NE Expression
    (18) BinaryExpression -> . Expression DOT Expression
    (70) UnaryExpression -> . Id
    (71) UnaryExpression -> . Literal
    (72) UnaryExpression -> . FunctionCall
    (73) UnaryExpression -> . BracketCall
    (74) UnaryExpression -> . LPAREN Expression RPAREN
    (75) UnaryExpression -> . TIMES Expression
    (76) UnaryExpression -> . AMPERSAND Expression
    (38) Id -> . ID
    (41) Literal -> . IntLiteral
    (42) Literal -> . BoolLiteral
    (36) FunctionCall -> . Id LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (40) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL

    LPAREN          shift and go to state 59
    TIMES           shift and go to state 67
    AMPERSAND       shift and go to state 70
    ID              shift and go to state 9
    INTL            shift and go to state 64
    BOOLL           shift and go to state 73

    Expression                     shift and go to state 95
    BinaryExpression               shift and go to state 56
    UnaryExpression                shift and go to state 57
    Id                             shift and go to state 96
    Literal                        shift and go to state 68
    FunctionCall                   shift and go to state 55
    BracketCall                    shift and go to state 69
    IntLiteral                     shift and go to state 71
    BoolLiteral                    shift and go to state 72

state 60

    (21) BlockStatement -> Block .

    IF              reduce using rule 21 (BlockStatement -> Block .)
    FOR             reduce using rule 21 (BlockStatement -> Block .)
    WHILE           reduce using rule 21 (BlockStatement -> Block .)
    BREAK           reduce using rule 21 (BlockStatement -> Block .)
    RETURN          reduce using rule 21 (BlockStatement -> Block .)
    ;               reduce using rule 21 (BlockStatement -> Block .)
    LPAREN          reduce using rule 21 (BlockStatement -> Block .)
    TIMES           reduce using rule 21 (BlockStatement -> Block .)
    AMPERSAND       reduce using rule 21 (BlockStatement -> Block .)
    LBRACE          reduce using rule 21 (BlockStatement -> Block .)
    ID              reduce using rule 21 (BlockStatement -> Block .)
    INTL            reduce using rule 21 (BlockStatement -> Block .)
    BOOLL           reduce using rule 21 (BlockStatement -> Block .)
    RBRACE          reduce using rule 21 (BlockStatement -> Block .)
    RPAREN          reduce using rule 21 (BlockStatement -> Block .)


state 61

    (35) ForStatement -> FOR . LPAREN Statement Expression SEMICOLON Statement RPAREN Block

    LPAREN          shift and go to state 97


state 62

    (77) WhileStatement -> WHILE . LPAREN Expression RPAREN Block

    LPAREN          shift and go to state 98


state 63

    (24) BreakStatement -> BREAK . INTL SEMICOLON
    (25) BreakStatement -> BREAK . SEMICOLON

    INTL            shift and go to state 99
    SEMICOLON       shift and go to state 100


state 64

    (40) IntLiteral -> INTL .

    SEMICOLON       reduce using rule 40 (IntLiteral -> INTL .)
    ASSIGNMENT      reduce using rule 40 (IntLiteral -> INTL .)
    PLUS            reduce using rule 40 (IntLiteral -> INTL .)
    MINUS           reduce using rule 40 (IntLiteral -> INTL .)
    TIMES           reduce using rule 40 (IntLiteral -> INTL .)
    DIVIDE          reduce using rule 40 (IntLiteral -> INTL .)
    MOD             reduce using rule 40 (IntLiteral -> INTL .)
    LEQ             reduce using rule 40 (IntLiteral -> INTL .)
    GEQ             reduce using rule 40 (IntLiteral -> INTL .)
    LT              reduce using rule 40 (IntLiteral -> INTL .)
    GT              reduce using rule 40 (IntLiteral -> INTL .)
    EQ              reduce using rule 40 (IntLiteral -> INTL .)
    NE              reduce using rule 40 (IntLiteral -> INTL .)
    DOT             reduce using rule 40 (IntLiteral -> INTL .)
    LBRACKET        reduce using rule 40 (IntLiteral -> INTL .)
    RPAREN          reduce using rule 40 (IntLiteral -> INTL .)
    IF              reduce using rule 40 (IntLiteral -> INTL .)
    FOR             reduce using rule 40 (IntLiteral -> INTL .)
    WHILE           reduce using rule 40 (IntLiteral -> INTL .)
    BREAK           reduce using rule 40 (IntLiteral -> INTL .)
    RETURN          reduce using rule 40 (IntLiteral -> INTL .)
    ;               reduce using rule 40 (IntLiteral -> INTL .)
    LPAREN          reduce using rule 40 (IntLiteral -> INTL .)
    AMPERSAND       reduce using rule 40 (IntLiteral -> INTL .)
    LBRACE          reduce using rule 40 (IntLiteral -> INTL .)
    ID              reduce using rule 40 (IntLiteral -> INTL .)
    INTL            reduce using rule 40 (IntLiteral -> INTL .)
    BOOLL           reduce using rule 40 (IntLiteral -> INTL .)
    RBRACE          reduce using rule 40 (IntLiteral -> INTL .)
    RBRACKET        reduce using rule 40 (IntLiteral -> INTL .)
    COMMA           reduce using rule 40 (IntLiteral -> INTL .)


state 65

    (49) ReturnStatement -> RETURN . Expression SEMICOLON
    (50) ReturnStatement -> RETURN . SEMICOLON
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (7) BinaryExpression -> . Expression PLUS Expression
    (8) BinaryExpression -> . Expression MINUS Expression
    (9) BinaryExpression -> . Expression TIMES Expression
    (10) BinaryExpression -> . Expression DIVIDE Expression
    (11) BinaryExpression -> . Expression MOD Expression
    (12) BinaryExpression -> . Expression LEQ Expression
    (13) BinaryExpression -> . Expression GEQ Expression
    (14) BinaryExpression -> . Expression LT Expression
    (15) BinaryExpression -> . Expression GT Expression
    (16) BinaryExpression -> . Expression EQ Expression
    (17) BinaryExpression -> . Expression NE Expression
    (18) BinaryExpression -> . Expression DOT Expression
    (70) UnaryExpression -> . Id
    (71) UnaryExpression -> . Literal
    (72) UnaryExpression -> . FunctionCall
    (73) UnaryExpression -> . BracketCall
    (74) UnaryExpression -> . LPAREN Expression RPAREN
    (75) UnaryExpression -> . TIMES Expression
    (76) UnaryExpression -> . AMPERSAND Expression
    (38) Id -> . ID
    (41) Literal -> . IntLiteral
    (42) Literal -> . BoolLiteral
    (36) FunctionCall -> . Id LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (40) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL

    SEMICOLON       shift and go to state 102
    LPAREN          shift and go to state 59
    TIMES           shift and go to state 67
    AMPERSAND       shift and go to state 70
    ID              shift and go to state 9
    INTL            shift and go to state 64
    BOOLL           shift and go to state 73

    Expression                     shift and go to state 101
    BinaryExpression               shift and go to state 56
    UnaryExpression                shift and go to state 57
    Id                             shift and go to state 96
    Literal                        shift and go to state 68
    FunctionCall                   shift and go to state 55
    BracketCall                    shift and go to state 69
    IntLiteral                     shift and go to state 71
    BoolLiteral                    shift and go to state 72

state 66

    (19) BlankStatement -> ; .

    IF              reduce using rule 19 (BlankStatement -> ; .)
    FOR             reduce using rule 19 (BlankStatement -> ; .)
    WHILE           reduce using rule 19 (BlankStatement -> ; .)
    BREAK           reduce using rule 19 (BlankStatement -> ; .)
    RETURN          reduce using rule 19 (BlankStatement -> ; .)
    ;               reduce using rule 19 (BlankStatement -> ; .)
    LPAREN          reduce using rule 19 (BlankStatement -> ; .)
    TIMES           reduce using rule 19 (BlankStatement -> ; .)
    AMPERSAND       reduce using rule 19 (BlankStatement -> ; .)
    LBRACE          reduce using rule 19 (BlankStatement -> ; .)
    ID              reduce using rule 19 (BlankStatement -> ; .)
    INTL            reduce using rule 19 (BlankStatement -> ; .)
    BOOLL           reduce using rule 19 (BlankStatement -> ; .)
    RBRACE          reduce using rule 19 (BlankStatement -> ; .)
    RPAREN          reduce using rule 19 (BlankStatement -> ; .)


state 67

    (75) UnaryExpression -> TIMES . Expression
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (7) BinaryExpression -> . Expression PLUS Expression
    (8) BinaryExpression -> . Expression MINUS Expression
    (9) BinaryExpression -> . Expression TIMES Expression
    (10) BinaryExpression -> . Expression DIVIDE Expression
    (11) BinaryExpression -> . Expression MOD Expression
    (12) BinaryExpression -> . Expression LEQ Expression
    (13) BinaryExpression -> . Expression GEQ Expression
    (14) BinaryExpression -> . Expression LT Expression
    (15) BinaryExpression -> . Expression GT Expression
    (16) BinaryExpression -> . Expression EQ Expression
    (17) BinaryExpression -> . Expression NE Expression
    (18) BinaryExpression -> . Expression DOT Expression
    (70) UnaryExpression -> . Id
    (71) UnaryExpression -> . Literal
    (72) UnaryExpression -> . FunctionCall
    (73) UnaryExpression -> . BracketCall
    (74) UnaryExpression -> . LPAREN Expression RPAREN
    (75) UnaryExpression -> . TIMES Expression
    (76) UnaryExpression -> . AMPERSAND Expression
    (38) Id -> . ID
    (41) Literal -> . IntLiteral
    (42) Literal -> . BoolLiteral
    (36) FunctionCall -> . Id LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (40) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL

    LPAREN          shift and go to state 59
    TIMES           shift and go to state 67
    AMPERSAND       shift and go to state 70
    ID              shift and go to state 9
    INTL            shift and go to state 64
    BOOLL           shift and go to state 73

    Expression                     shift and go to state 103
    BinaryExpression               shift and go to state 56
    UnaryExpression                shift and go to state 57
    Id                             shift and go to state 96
    Literal                        shift and go to state 68
    FunctionCall                   shift and go to state 55
    BracketCall                    shift and go to state 69
    IntLiteral                     shift and go to state 71
    BoolLiteral                    shift and go to state 72

state 68

    (71) UnaryExpression -> Literal .

    SEMICOLON       reduce using rule 71 (UnaryExpression -> Literal .)
    ASSIGNMENT      reduce using rule 71 (UnaryExpression -> Literal .)
    PLUS            reduce using rule 71 (UnaryExpression -> Literal .)
    MINUS           reduce using rule 71 (UnaryExpression -> Literal .)
    TIMES           reduce using rule 71 (UnaryExpression -> Literal .)
    DIVIDE          reduce using rule 71 (UnaryExpression -> Literal .)
    MOD             reduce using rule 71 (UnaryExpression -> Literal .)
    LEQ             reduce using rule 71 (UnaryExpression -> Literal .)
    GEQ             reduce using rule 71 (UnaryExpression -> Literal .)
    LT              reduce using rule 71 (UnaryExpression -> Literal .)
    GT              reduce using rule 71 (UnaryExpression -> Literal .)
    EQ              reduce using rule 71 (UnaryExpression -> Literal .)
    NE              reduce using rule 71 (UnaryExpression -> Literal .)
    DOT             reduce using rule 71 (UnaryExpression -> Literal .)
    LBRACKET        reduce using rule 71 (UnaryExpression -> Literal .)
    RPAREN          reduce using rule 71 (UnaryExpression -> Literal .)
    IF              reduce using rule 71 (UnaryExpression -> Literal .)
    FOR             reduce using rule 71 (UnaryExpression -> Literal .)
    WHILE           reduce using rule 71 (UnaryExpression -> Literal .)
    BREAK           reduce using rule 71 (UnaryExpression -> Literal .)
    RETURN          reduce using rule 71 (UnaryExpression -> Literal .)
    ;               reduce using rule 71 (UnaryExpression -> Literal .)
    LPAREN          reduce using rule 71 (UnaryExpression -> Literal .)
    AMPERSAND       reduce using rule 71 (UnaryExpression -> Literal .)
    LBRACE          reduce using rule 71 (UnaryExpression -> Literal .)
    ID              reduce using rule 71 (UnaryExpression -> Literal .)
    INTL            reduce using rule 71 (UnaryExpression -> Literal .)
    BOOLL           reduce using rule 71 (UnaryExpression -> Literal .)
    RBRACE          reduce using rule 71 (UnaryExpression -> Literal .)
    RBRACKET        reduce using rule 71 (UnaryExpression -> Literal .)
    COMMA           reduce using rule 71 (UnaryExpression -> Literal .)


state 69

    (73) UnaryExpression -> BracketCall .

    SEMICOLON       reduce using rule 73 (UnaryExpression -> BracketCall .)
    ASSIGNMENT      reduce using rule 73 (UnaryExpression -> BracketCall .)
    PLUS            reduce using rule 73 (UnaryExpression -> BracketCall .)
    MINUS           reduce using rule 73 (UnaryExpression -> BracketCall .)
    TIMES           reduce using rule 73 (UnaryExpression -> BracketCall .)
    DIVIDE          reduce using rule 73 (UnaryExpression -> BracketCall .)
    MOD             reduce using rule 73 (UnaryExpression -> BracketCall .)
    LEQ             reduce using rule 73 (UnaryExpression -> BracketCall .)
    GEQ             reduce using rule 73 (UnaryExpression -> BracketCall .)
    LT              reduce using rule 73 (UnaryExpression -> BracketCall .)
    GT              reduce using rule 73 (UnaryExpression -> BracketCall .)
    EQ              reduce using rule 73 (UnaryExpression -> BracketCall .)
    NE              reduce using rule 73 (UnaryExpression -> BracketCall .)
    DOT             reduce using rule 73 (UnaryExpression -> BracketCall .)
    LBRACKET        reduce using rule 73 (UnaryExpression -> BracketCall .)
    RPAREN          reduce using rule 73 (UnaryExpression -> BracketCall .)
    IF              reduce using rule 73 (UnaryExpression -> BracketCall .)
    FOR             reduce using rule 73 (UnaryExpression -> BracketCall .)
    WHILE           reduce using rule 73 (UnaryExpression -> BracketCall .)
    BREAK           reduce using rule 73 (UnaryExpression -> BracketCall .)
    RETURN          reduce using rule 73 (UnaryExpression -> BracketCall .)
    ;               reduce using rule 73 (UnaryExpression -> BracketCall .)
    LPAREN          reduce using rule 73 (UnaryExpression -> BracketCall .)
    AMPERSAND       reduce using rule 73 (UnaryExpression -> BracketCall .)
    LBRACE          reduce using rule 73 (UnaryExpression -> BracketCall .)
    ID              reduce using rule 73 (UnaryExpression -> BracketCall .)
    INTL            reduce using rule 73 (UnaryExpression -> BracketCall .)
    BOOLL           reduce using rule 73 (UnaryExpression -> BracketCall .)
    RBRACE          reduce using rule 73 (UnaryExpression -> BracketCall .)
    RBRACKET        reduce using rule 73 (UnaryExpression -> BracketCall .)
    COMMA           reduce using rule 73 (UnaryExpression -> BracketCall .)


state 70

    (76) UnaryExpression -> AMPERSAND . Expression
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (7) BinaryExpression -> . Expression PLUS Expression
    (8) BinaryExpression -> . Expression MINUS Expression
    (9) BinaryExpression -> . Expression TIMES Expression
    (10) BinaryExpression -> . Expression DIVIDE Expression
    (11) BinaryExpression -> . Expression MOD Expression
    (12) BinaryExpression -> . Expression LEQ Expression
    (13) BinaryExpression -> . Expression GEQ Expression
    (14) BinaryExpression -> . Expression LT Expression
    (15) BinaryExpression -> . Expression GT Expression
    (16) BinaryExpression -> . Expression EQ Expression
    (17) BinaryExpression -> . Expression NE Expression
    (18) BinaryExpression -> . Expression DOT Expression
    (70) UnaryExpression -> . Id
    (71) UnaryExpression -> . Literal
    (72) UnaryExpression -> . FunctionCall
    (73) UnaryExpression -> . BracketCall
    (74) UnaryExpression -> . LPAREN Expression RPAREN
    (75) UnaryExpression -> . TIMES Expression
    (76) UnaryExpression -> . AMPERSAND Expression
    (38) Id -> . ID
    (41) Literal -> . IntLiteral
    (42) Literal -> . BoolLiteral
    (36) FunctionCall -> . Id LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (40) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL

    LPAREN          shift and go to state 59
    TIMES           shift and go to state 67
    AMPERSAND       shift and go to state 70
    ID              shift and go to state 9
    INTL            shift and go to state 64
    BOOLL           shift and go to state 73

    Expression                     shift and go to state 104
    BinaryExpression               shift and go to state 56
    UnaryExpression                shift and go to state 57
    Id                             shift and go to state 96
    Literal                        shift and go to state 68
    FunctionCall                   shift and go to state 55
    BracketCall                    shift and go to state 69
    IntLiteral                     shift and go to state 71
    BoolLiteral                    shift and go to state 72

state 71

    (41) Literal -> IntLiteral .

    SEMICOLON       reduce using rule 41 (Literal -> IntLiteral .)
    ASSIGNMENT      reduce using rule 41 (Literal -> IntLiteral .)
    PLUS            reduce using rule 41 (Literal -> IntLiteral .)
    MINUS           reduce using rule 41 (Literal -> IntLiteral .)
    TIMES           reduce using rule 41 (Literal -> IntLiteral .)
    DIVIDE          reduce using rule 41 (Literal -> IntLiteral .)
    MOD             reduce using rule 41 (Literal -> IntLiteral .)
    LEQ             reduce using rule 41 (Literal -> IntLiteral .)
    GEQ             reduce using rule 41 (Literal -> IntLiteral .)
    LT              reduce using rule 41 (Literal -> IntLiteral .)
    GT              reduce using rule 41 (Literal -> IntLiteral .)
    EQ              reduce using rule 41 (Literal -> IntLiteral .)
    NE              reduce using rule 41 (Literal -> IntLiteral .)
    DOT             reduce using rule 41 (Literal -> IntLiteral .)
    LBRACKET        reduce using rule 41 (Literal -> IntLiteral .)
    RPAREN          reduce using rule 41 (Literal -> IntLiteral .)
    IF              reduce using rule 41 (Literal -> IntLiteral .)
    FOR             reduce using rule 41 (Literal -> IntLiteral .)
    WHILE           reduce using rule 41 (Literal -> IntLiteral .)
    BREAK           reduce using rule 41 (Literal -> IntLiteral .)
    RETURN          reduce using rule 41 (Literal -> IntLiteral .)
    ;               reduce using rule 41 (Literal -> IntLiteral .)
    LPAREN          reduce using rule 41 (Literal -> IntLiteral .)
    AMPERSAND       reduce using rule 41 (Literal -> IntLiteral .)
    LBRACE          reduce using rule 41 (Literal -> IntLiteral .)
    ID              reduce using rule 41 (Literal -> IntLiteral .)
    INTL            reduce using rule 41 (Literal -> IntLiteral .)
    BOOLL           reduce using rule 41 (Literal -> IntLiteral .)
    RBRACE          reduce using rule 41 (Literal -> IntLiteral .)
    RBRACKET        reduce using rule 41 (Literal -> IntLiteral .)
    COMMA           reduce using rule 41 (Literal -> IntLiteral .)


state 72

    (42) Literal -> BoolLiteral .

    SEMICOLON       reduce using rule 42 (Literal -> BoolLiteral .)
    ASSIGNMENT      reduce using rule 42 (Literal -> BoolLiteral .)
    PLUS            reduce using rule 42 (Literal -> BoolLiteral .)
    MINUS           reduce using rule 42 (Literal -> BoolLiteral .)
    TIMES           reduce using rule 42 (Literal -> BoolLiteral .)
    DIVIDE          reduce using rule 42 (Literal -> BoolLiteral .)
    MOD             reduce using rule 42 (Literal -> BoolLiteral .)
    LEQ             reduce using rule 42 (Literal -> BoolLiteral .)
    GEQ             reduce using rule 42 (Literal -> BoolLiteral .)
    LT              reduce using rule 42 (Literal -> BoolLiteral .)
    GT              reduce using rule 42 (Literal -> BoolLiteral .)
    EQ              reduce using rule 42 (Literal -> BoolLiteral .)
    NE              reduce using rule 42 (Literal -> BoolLiteral .)
    DOT             reduce using rule 42 (Literal -> BoolLiteral .)
    LBRACKET        reduce using rule 42 (Literal -> BoolLiteral .)
    RPAREN          reduce using rule 42 (Literal -> BoolLiteral .)
    IF              reduce using rule 42 (Literal -> BoolLiteral .)
    FOR             reduce using rule 42 (Literal -> BoolLiteral .)
    WHILE           reduce using rule 42 (Literal -> BoolLiteral .)
    BREAK           reduce using rule 42 (Literal -> BoolLiteral .)
    RETURN          reduce using rule 42 (Literal -> BoolLiteral .)
    ;               reduce using rule 42 (Literal -> BoolLiteral .)
    LPAREN          reduce using rule 42 (Literal -> BoolLiteral .)
    AMPERSAND       reduce using rule 42 (Literal -> BoolLiteral .)
    LBRACE          reduce using rule 42 (Literal -> BoolLiteral .)
    ID              reduce using rule 42 (Literal -> BoolLiteral .)
    INTL            reduce using rule 42 (Literal -> BoolLiteral .)
    BOOLL           reduce using rule 42 (Literal -> BoolLiteral .)
    RBRACE          reduce using rule 42 (Literal -> BoolLiteral .)
    RBRACKET        reduce using rule 42 (Literal -> BoolLiteral .)
    COMMA           reduce using rule 42 (Literal -> BoolLiteral .)


state 73

    (22) BoolLiteral -> BOOLL .

    SEMICOLON       reduce using rule 22 (BoolLiteral -> BOOLL .)
    ASSIGNMENT      reduce using rule 22 (BoolLiteral -> BOOLL .)
    PLUS            reduce using rule 22 (BoolLiteral -> BOOLL .)
    MINUS           reduce using rule 22 (BoolLiteral -> BOOLL .)
    TIMES           reduce using rule 22 (BoolLiteral -> BOOLL .)
    DIVIDE          reduce using rule 22 (BoolLiteral -> BOOLL .)
    MOD             reduce using rule 22 (BoolLiteral -> BOOLL .)
    LEQ             reduce using rule 22 (BoolLiteral -> BOOLL .)
    GEQ             reduce using rule 22 (BoolLiteral -> BOOLL .)
    LT              reduce using rule 22 (BoolLiteral -> BOOLL .)
    GT              reduce using rule 22 (BoolLiteral -> BOOLL .)
    EQ              reduce using rule 22 (BoolLiteral -> BOOLL .)
    NE              reduce using rule 22 (BoolLiteral -> BOOLL .)
    DOT             reduce using rule 22 (BoolLiteral -> BOOLL .)
    LBRACKET        reduce using rule 22 (BoolLiteral -> BOOLL .)
    RPAREN          reduce using rule 22 (BoolLiteral -> BOOLL .)
    IF              reduce using rule 22 (BoolLiteral -> BOOLL .)
    FOR             reduce using rule 22 (BoolLiteral -> BOOLL .)
    WHILE           reduce using rule 22 (BoolLiteral -> BOOLL .)
    BREAK           reduce using rule 22 (BoolLiteral -> BOOLL .)
    RETURN          reduce using rule 22 (BoolLiteral -> BOOLL .)
    ;               reduce using rule 22 (BoolLiteral -> BOOLL .)
    LPAREN          reduce using rule 22 (BoolLiteral -> BOOLL .)
    AMPERSAND       reduce using rule 22 (BoolLiteral -> BOOLL .)
    LBRACE          reduce using rule 22 (BoolLiteral -> BOOLL .)
    ID              reduce using rule 22 (BoolLiteral -> BOOLL .)
    INTL            reduce using rule 22 (BoolLiteral -> BOOLL .)
    BOOLL           reduce using rule 22 (BoolLiteral -> BOOLL .)
    RBRACE          reduce using rule 22 (BoolLiteral -> BOOLL .)
    RBRACKET        reduce using rule 22 (BoolLiteral -> BOOLL .)
    COMMA           reduce using rule 22 (BoolLiteral -> BOOLL .)


state 74

    (20) Block -> LBRACE StatementListR RBRACE .

    STRUCT          reduce using rule 20 (Block -> LBRACE StatementListR RBRACE .)
    ID              reduce using rule 20 (Block -> LBRACE StatementListR RBRACE .)
    $end            reduce using rule 20 (Block -> LBRACE StatementListR RBRACE .)
    IF              reduce using rule 20 (Block -> LBRACE StatementListR RBRACE .)
    FOR             reduce using rule 20 (Block -> LBRACE StatementListR RBRACE .)
    WHILE           reduce using rule 20 (Block -> LBRACE StatementListR RBRACE .)
    BREAK           reduce using rule 20 (Block -> LBRACE StatementListR RBRACE .)
    RETURN          reduce using rule 20 (Block -> LBRACE StatementListR RBRACE .)
    ;               reduce using rule 20 (Block -> LBRACE StatementListR RBRACE .)
    LPAREN          reduce using rule 20 (Block -> LBRACE StatementListR RBRACE .)
    TIMES           reduce using rule 20 (Block -> LBRACE StatementListR RBRACE .)
    AMPERSAND       reduce using rule 20 (Block -> LBRACE StatementListR RBRACE .)
    LBRACE          reduce using rule 20 (Block -> LBRACE StatementListR RBRACE .)
    INTL            reduce using rule 20 (Block -> LBRACE StatementListR RBRACE .)
    BOOLL           reduce using rule 20 (Block -> LBRACE StatementListR RBRACE .)
    RBRACE          reduce using rule 20 (Block -> LBRACE StatementListR RBRACE .)
    ELSE            reduce using rule 20 (Block -> LBRACE StatementListR RBRACE .)
    RPAREN          reduce using rule 20 (Block -> LBRACE StatementListR RBRACE .)


state 75

    (63) StatementListR -> Statement StatementListR .

    RBRACE          reduce using rule 63 (StatementListR -> Statement StatementListR .)


state 76

    (55) Statement -> Expression SEMICOLON .

    IF              reduce using rule 55 (Statement -> Expression SEMICOLON .)
    FOR             reduce using rule 55 (Statement -> Expression SEMICOLON .)
    WHILE           reduce using rule 55 (Statement -> Expression SEMICOLON .)
    BREAK           reduce using rule 55 (Statement -> Expression SEMICOLON .)
    RETURN          reduce using rule 55 (Statement -> Expression SEMICOLON .)
    ;               reduce using rule 55 (Statement -> Expression SEMICOLON .)
    LPAREN          reduce using rule 55 (Statement -> Expression SEMICOLON .)
    TIMES           reduce using rule 55 (Statement -> Expression SEMICOLON .)
    AMPERSAND       reduce using rule 55 (Statement -> Expression SEMICOLON .)
    LBRACE          reduce using rule 55 (Statement -> Expression SEMICOLON .)
    ID              reduce using rule 55 (Statement -> Expression SEMICOLON .)
    INTL            reduce using rule 55 (Statement -> Expression SEMICOLON .)
    BOOLL           reduce using rule 55 (Statement -> Expression SEMICOLON .)
    RBRACE          reduce using rule 55 (Statement -> Expression SEMICOLON .)
    RPAREN          reduce using rule 55 (Statement -> Expression SEMICOLON .)


state 77

    (5) AssignmentStatement -> Expression ASSIGNMENT . Expression SEMICOLON
    (6) AssignmentStatement -> Expression ASSIGNMENT . Expression
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (7) BinaryExpression -> . Expression PLUS Expression
    (8) BinaryExpression -> . Expression MINUS Expression
    (9) BinaryExpression -> . Expression TIMES Expression
    (10) BinaryExpression -> . Expression DIVIDE Expression
    (11) BinaryExpression -> . Expression MOD Expression
    (12) BinaryExpression -> . Expression LEQ Expression
    (13) BinaryExpression -> . Expression GEQ Expression
    (14) BinaryExpression -> . Expression LT Expression
    (15) BinaryExpression -> . Expression GT Expression
    (16) BinaryExpression -> . Expression EQ Expression
    (17) BinaryExpression -> . Expression NE Expression
    (18) BinaryExpression -> . Expression DOT Expression
    (70) UnaryExpression -> . Id
    (71) UnaryExpression -> . Literal
    (72) UnaryExpression -> . FunctionCall
    (73) UnaryExpression -> . BracketCall
    (74) UnaryExpression -> . LPAREN Expression RPAREN
    (75) UnaryExpression -> . TIMES Expression
    (76) UnaryExpression -> . AMPERSAND Expression
    (38) Id -> . ID
    (41) Literal -> . IntLiteral
    (42) Literal -> . BoolLiteral
    (36) FunctionCall -> . Id LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (40) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL

    LPAREN          shift and go to state 59
    TIMES           shift and go to state 67
    AMPERSAND       shift and go to state 70
    ID              shift and go to state 9
    INTL            shift and go to state 64
    BOOLL           shift and go to state 73

    Expression                     shift and go to state 105
    BinaryExpression               shift and go to state 56
    UnaryExpression                shift and go to state 57
    Id                             shift and go to state 96
    Literal                        shift and go to state 68
    FunctionCall                   shift and go to state 55
    BracketCall                    shift and go to state 69
    IntLiteral                     shift and go to state 71
    BoolLiteral                    shift and go to state 72

state 78

    (7) BinaryExpression -> Expression PLUS . Expression
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (7) BinaryExpression -> . Expression PLUS Expression
    (8) BinaryExpression -> . Expression MINUS Expression
    (9) BinaryExpression -> . Expression TIMES Expression
    (10) BinaryExpression -> . Expression DIVIDE Expression
    (11) BinaryExpression -> . Expression MOD Expression
    (12) BinaryExpression -> . Expression LEQ Expression
    (13) BinaryExpression -> . Expression GEQ Expression
    (14) BinaryExpression -> . Expression LT Expression
    (15) BinaryExpression -> . Expression GT Expression
    (16) BinaryExpression -> . Expression EQ Expression
    (17) BinaryExpression -> . Expression NE Expression
    (18) BinaryExpression -> . Expression DOT Expression
    (70) UnaryExpression -> . Id
    (71) UnaryExpression -> . Literal
    (72) UnaryExpression -> . FunctionCall
    (73) UnaryExpression -> . BracketCall
    (74) UnaryExpression -> . LPAREN Expression RPAREN
    (75) UnaryExpression -> . TIMES Expression
    (76) UnaryExpression -> . AMPERSAND Expression
    (38) Id -> . ID
    (41) Literal -> . IntLiteral
    (42) Literal -> . BoolLiteral
    (36) FunctionCall -> . Id LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (40) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL

    LPAREN          shift and go to state 59
    TIMES           shift and go to state 67
    AMPERSAND       shift and go to state 70
    ID              shift and go to state 9
    INTL            shift and go to state 64
    BOOLL           shift and go to state 73

    Expression                     shift and go to state 106
    BinaryExpression               shift and go to state 56
    UnaryExpression                shift and go to state 57
    Id                             shift and go to state 96
    Literal                        shift and go to state 68
    FunctionCall                   shift and go to state 55
    BracketCall                    shift and go to state 69
    IntLiteral                     shift and go to state 71
    BoolLiteral                    shift and go to state 72

state 79

    (8) BinaryExpression -> Expression MINUS . Expression
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (7) BinaryExpression -> . Expression PLUS Expression
    (8) BinaryExpression -> . Expression MINUS Expression
    (9) BinaryExpression -> . Expression TIMES Expression
    (10) BinaryExpression -> . Expression DIVIDE Expression
    (11) BinaryExpression -> . Expression MOD Expression
    (12) BinaryExpression -> . Expression LEQ Expression
    (13) BinaryExpression -> . Expression GEQ Expression
    (14) BinaryExpression -> . Expression LT Expression
    (15) BinaryExpression -> . Expression GT Expression
    (16) BinaryExpression -> . Expression EQ Expression
    (17) BinaryExpression -> . Expression NE Expression
    (18) BinaryExpression -> . Expression DOT Expression
    (70) UnaryExpression -> . Id
    (71) UnaryExpression -> . Literal
    (72) UnaryExpression -> . FunctionCall
    (73) UnaryExpression -> . BracketCall
    (74) UnaryExpression -> . LPAREN Expression RPAREN
    (75) UnaryExpression -> . TIMES Expression
    (76) UnaryExpression -> . AMPERSAND Expression
    (38) Id -> . ID
    (41) Literal -> . IntLiteral
    (42) Literal -> . BoolLiteral
    (36) FunctionCall -> . Id LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (40) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL

    LPAREN          shift and go to state 59
    TIMES           shift and go to state 67
    AMPERSAND       shift and go to state 70
    ID              shift and go to state 9
    INTL            shift and go to state 64
    BOOLL           shift and go to state 73

    Expression                     shift and go to state 107
    BinaryExpression               shift and go to state 56
    UnaryExpression                shift and go to state 57
    Id                             shift and go to state 96
    Literal                        shift and go to state 68
    FunctionCall                   shift and go to state 55
    BracketCall                    shift and go to state 69
    IntLiteral                     shift and go to state 71
    BoolLiteral                    shift and go to state 72

state 80

    (9) BinaryExpression -> Expression TIMES . Expression
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (7) BinaryExpression -> . Expression PLUS Expression
    (8) BinaryExpression -> . Expression MINUS Expression
    (9) BinaryExpression -> . Expression TIMES Expression
    (10) BinaryExpression -> . Expression DIVIDE Expression
    (11) BinaryExpression -> . Expression MOD Expression
    (12) BinaryExpression -> . Expression LEQ Expression
    (13) BinaryExpression -> . Expression GEQ Expression
    (14) BinaryExpression -> . Expression LT Expression
    (15) BinaryExpression -> . Expression GT Expression
    (16) BinaryExpression -> . Expression EQ Expression
    (17) BinaryExpression -> . Expression NE Expression
    (18) BinaryExpression -> . Expression DOT Expression
    (70) UnaryExpression -> . Id
    (71) UnaryExpression -> . Literal
    (72) UnaryExpression -> . FunctionCall
    (73) UnaryExpression -> . BracketCall
    (74) UnaryExpression -> . LPAREN Expression RPAREN
    (75) UnaryExpression -> . TIMES Expression
    (76) UnaryExpression -> . AMPERSAND Expression
    (38) Id -> . ID
    (41) Literal -> . IntLiteral
    (42) Literal -> . BoolLiteral
    (36) FunctionCall -> . Id LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (40) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL

    LPAREN          shift and go to state 59
    TIMES           shift and go to state 67
    AMPERSAND       shift and go to state 70
    ID              shift and go to state 9
    INTL            shift and go to state 64
    BOOLL           shift and go to state 73

    Expression                     shift and go to state 108
    BinaryExpression               shift and go to state 56
    UnaryExpression                shift and go to state 57
    Id                             shift and go to state 96
    Literal                        shift and go to state 68
    FunctionCall                   shift and go to state 55
    BracketCall                    shift and go to state 69
    IntLiteral                     shift and go to state 71
    BoolLiteral                    shift and go to state 72

state 81

    (10) BinaryExpression -> Expression DIVIDE . Expression
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (7) BinaryExpression -> . Expression PLUS Expression
    (8) BinaryExpression -> . Expression MINUS Expression
    (9) BinaryExpression -> . Expression TIMES Expression
    (10) BinaryExpression -> . Expression DIVIDE Expression
    (11) BinaryExpression -> . Expression MOD Expression
    (12) BinaryExpression -> . Expression LEQ Expression
    (13) BinaryExpression -> . Expression GEQ Expression
    (14) BinaryExpression -> . Expression LT Expression
    (15) BinaryExpression -> . Expression GT Expression
    (16) BinaryExpression -> . Expression EQ Expression
    (17) BinaryExpression -> . Expression NE Expression
    (18) BinaryExpression -> . Expression DOT Expression
    (70) UnaryExpression -> . Id
    (71) UnaryExpression -> . Literal
    (72) UnaryExpression -> . FunctionCall
    (73) UnaryExpression -> . BracketCall
    (74) UnaryExpression -> . LPAREN Expression RPAREN
    (75) UnaryExpression -> . TIMES Expression
    (76) UnaryExpression -> . AMPERSAND Expression
    (38) Id -> . ID
    (41) Literal -> . IntLiteral
    (42) Literal -> . BoolLiteral
    (36) FunctionCall -> . Id LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (40) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL

    LPAREN          shift and go to state 59
    TIMES           shift and go to state 67
    AMPERSAND       shift and go to state 70
    ID              shift and go to state 9
    INTL            shift and go to state 64
    BOOLL           shift and go to state 73

    Expression                     shift and go to state 109
    BinaryExpression               shift and go to state 56
    UnaryExpression                shift and go to state 57
    Id                             shift and go to state 96
    Literal                        shift and go to state 68
    FunctionCall                   shift and go to state 55
    BracketCall                    shift and go to state 69
    IntLiteral                     shift and go to state 71
    BoolLiteral                    shift and go to state 72

state 82

    (11) BinaryExpression -> Expression MOD . Expression
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (7) BinaryExpression -> . Expression PLUS Expression
    (8) BinaryExpression -> . Expression MINUS Expression
    (9) BinaryExpression -> . Expression TIMES Expression
    (10) BinaryExpression -> . Expression DIVIDE Expression
    (11) BinaryExpression -> . Expression MOD Expression
    (12) BinaryExpression -> . Expression LEQ Expression
    (13) BinaryExpression -> . Expression GEQ Expression
    (14) BinaryExpression -> . Expression LT Expression
    (15) BinaryExpression -> . Expression GT Expression
    (16) BinaryExpression -> . Expression EQ Expression
    (17) BinaryExpression -> . Expression NE Expression
    (18) BinaryExpression -> . Expression DOT Expression
    (70) UnaryExpression -> . Id
    (71) UnaryExpression -> . Literal
    (72) UnaryExpression -> . FunctionCall
    (73) UnaryExpression -> . BracketCall
    (74) UnaryExpression -> . LPAREN Expression RPAREN
    (75) UnaryExpression -> . TIMES Expression
    (76) UnaryExpression -> . AMPERSAND Expression
    (38) Id -> . ID
    (41) Literal -> . IntLiteral
    (42) Literal -> . BoolLiteral
    (36) FunctionCall -> . Id LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (40) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL

    LPAREN          shift and go to state 59
    TIMES           shift and go to state 67
    AMPERSAND       shift and go to state 70
    ID              shift and go to state 9
    INTL            shift and go to state 64
    BOOLL           shift and go to state 73

    Expression                     shift and go to state 110
    BinaryExpression               shift and go to state 56
    UnaryExpression                shift and go to state 57
    Id                             shift and go to state 96
    Literal                        shift and go to state 68
    FunctionCall                   shift and go to state 55
    BracketCall                    shift and go to state 69
    IntLiteral                     shift and go to state 71
    BoolLiteral                    shift and go to state 72

state 83

    (12) BinaryExpression -> Expression LEQ . Expression
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (7) BinaryExpression -> . Expression PLUS Expression
    (8) BinaryExpression -> . Expression MINUS Expression
    (9) BinaryExpression -> . Expression TIMES Expression
    (10) BinaryExpression -> . Expression DIVIDE Expression
    (11) BinaryExpression -> . Expression MOD Expression
    (12) BinaryExpression -> . Expression LEQ Expression
    (13) BinaryExpression -> . Expression GEQ Expression
    (14) BinaryExpression -> . Expression LT Expression
    (15) BinaryExpression -> . Expression GT Expression
    (16) BinaryExpression -> . Expression EQ Expression
    (17) BinaryExpression -> . Expression NE Expression
    (18) BinaryExpression -> . Expression DOT Expression
    (70) UnaryExpression -> . Id
    (71) UnaryExpression -> . Literal
    (72) UnaryExpression -> . FunctionCall
    (73) UnaryExpression -> . BracketCall
    (74) UnaryExpression -> . LPAREN Expression RPAREN
    (75) UnaryExpression -> . TIMES Expression
    (76) UnaryExpression -> . AMPERSAND Expression
    (38) Id -> . ID
    (41) Literal -> . IntLiteral
    (42) Literal -> . BoolLiteral
    (36) FunctionCall -> . Id LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (40) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL

    LPAREN          shift and go to state 59
    TIMES           shift and go to state 67
    AMPERSAND       shift and go to state 70
    ID              shift and go to state 9
    INTL            shift and go to state 64
    BOOLL           shift and go to state 73

    Expression                     shift and go to state 111
    BinaryExpression               shift and go to state 56
    UnaryExpression                shift and go to state 57
    Id                             shift and go to state 96
    Literal                        shift and go to state 68
    FunctionCall                   shift and go to state 55
    BracketCall                    shift and go to state 69
    IntLiteral                     shift and go to state 71
    BoolLiteral                    shift and go to state 72

state 84

    (13) BinaryExpression -> Expression GEQ . Expression
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (7) BinaryExpression -> . Expression PLUS Expression
    (8) BinaryExpression -> . Expression MINUS Expression
    (9) BinaryExpression -> . Expression TIMES Expression
    (10) BinaryExpression -> . Expression DIVIDE Expression
    (11) BinaryExpression -> . Expression MOD Expression
    (12) BinaryExpression -> . Expression LEQ Expression
    (13) BinaryExpression -> . Expression GEQ Expression
    (14) BinaryExpression -> . Expression LT Expression
    (15) BinaryExpression -> . Expression GT Expression
    (16) BinaryExpression -> . Expression EQ Expression
    (17) BinaryExpression -> . Expression NE Expression
    (18) BinaryExpression -> . Expression DOT Expression
    (70) UnaryExpression -> . Id
    (71) UnaryExpression -> . Literal
    (72) UnaryExpression -> . FunctionCall
    (73) UnaryExpression -> . BracketCall
    (74) UnaryExpression -> . LPAREN Expression RPAREN
    (75) UnaryExpression -> . TIMES Expression
    (76) UnaryExpression -> . AMPERSAND Expression
    (38) Id -> . ID
    (41) Literal -> . IntLiteral
    (42) Literal -> . BoolLiteral
    (36) FunctionCall -> . Id LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (40) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL

    LPAREN          shift and go to state 59
    TIMES           shift and go to state 67
    AMPERSAND       shift and go to state 70
    ID              shift and go to state 9
    INTL            shift and go to state 64
    BOOLL           shift and go to state 73

    Expression                     shift and go to state 112
    BinaryExpression               shift and go to state 56
    UnaryExpression                shift and go to state 57
    Id                             shift and go to state 96
    Literal                        shift and go to state 68
    FunctionCall                   shift and go to state 55
    BracketCall                    shift and go to state 69
    IntLiteral                     shift and go to state 71
    BoolLiteral                    shift and go to state 72

state 85

    (14) BinaryExpression -> Expression LT . Expression
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (7) BinaryExpression -> . Expression PLUS Expression
    (8) BinaryExpression -> . Expression MINUS Expression
    (9) BinaryExpression -> . Expression TIMES Expression
    (10) BinaryExpression -> . Expression DIVIDE Expression
    (11) BinaryExpression -> . Expression MOD Expression
    (12) BinaryExpression -> . Expression LEQ Expression
    (13) BinaryExpression -> . Expression GEQ Expression
    (14) BinaryExpression -> . Expression LT Expression
    (15) BinaryExpression -> . Expression GT Expression
    (16) BinaryExpression -> . Expression EQ Expression
    (17) BinaryExpression -> . Expression NE Expression
    (18) BinaryExpression -> . Expression DOT Expression
    (70) UnaryExpression -> . Id
    (71) UnaryExpression -> . Literal
    (72) UnaryExpression -> . FunctionCall
    (73) UnaryExpression -> . BracketCall
    (74) UnaryExpression -> . LPAREN Expression RPAREN
    (75) UnaryExpression -> . TIMES Expression
    (76) UnaryExpression -> . AMPERSAND Expression
    (38) Id -> . ID
    (41) Literal -> . IntLiteral
    (42) Literal -> . BoolLiteral
    (36) FunctionCall -> . Id LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (40) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL

    LPAREN          shift and go to state 59
    TIMES           shift and go to state 67
    AMPERSAND       shift and go to state 70
    ID              shift and go to state 9
    INTL            shift and go to state 64
    BOOLL           shift and go to state 73

    Expression                     shift and go to state 113
    BinaryExpression               shift and go to state 56
    UnaryExpression                shift and go to state 57
    Id                             shift and go to state 96
    Literal                        shift and go to state 68
    FunctionCall                   shift and go to state 55
    BracketCall                    shift and go to state 69
    IntLiteral                     shift and go to state 71
    BoolLiteral                    shift and go to state 72

state 86

    (15) BinaryExpression -> Expression GT . Expression
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (7) BinaryExpression -> . Expression PLUS Expression
    (8) BinaryExpression -> . Expression MINUS Expression
    (9) BinaryExpression -> . Expression TIMES Expression
    (10) BinaryExpression -> . Expression DIVIDE Expression
    (11) BinaryExpression -> . Expression MOD Expression
    (12) BinaryExpression -> . Expression LEQ Expression
    (13) BinaryExpression -> . Expression GEQ Expression
    (14) BinaryExpression -> . Expression LT Expression
    (15) BinaryExpression -> . Expression GT Expression
    (16) BinaryExpression -> . Expression EQ Expression
    (17) BinaryExpression -> . Expression NE Expression
    (18) BinaryExpression -> . Expression DOT Expression
    (70) UnaryExpression -> . Id
    (71) UnaryExpression -> . Literal
    (72) UnaryExpression -> . FunctionCall
    (73) UnaryExpression -> . BracketCall
    (74) UnaryExpression -> . LPAREN Expression RPAREN
    (75) UnaryExpression -> . TIMES Expression
    (76) UnaryExpression -> . AMPERSAND Expression
    (38) Id -> . ID
    (41) Literal -> . IntLiteral
    (42) Literal -> . BoolLiteral
    (36) FunctionCall -> . Id LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (40) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL

    LPAREN          shift and go to state 59
    TIMES           shift and go to state 67
    AMPERSAND       shift and go to state 70
    ID              shift and go to state 9
    INTL            shift and go to state 64
    BOOLL           shift and go to state 73

    Expression                     shift and go to state 114
    BinaryExpression               shift and go to state 56
    UnaryExpression                shift and go to state 57
    Id                             shift and go to state 96
    Literal                        shift and go to state 68
    FunctionCall                   shift and go to state 55
    BracketCall                    shift and go to state 69
    IntLiteral                     shift and go to state 71
    BoolLiteral                    shift and go to state 72

state 87

    (16) BinaryExpression -> Expression EQ . Expression
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (7) BinaryExpression -> . Expression PLUS Expression
    (8) BinaryExpression -> . Expression MINUS Expression
    (9) BinaryExpression -> . Expression TIMES Expression
    (10) BinaryExpression -> . Expression DIVIDE Expression
    (11) BinaryExpression -> . Expression MOD Expression
    (12) BinaryExpression -> . Expression LEQ Expression
    (13) BinaryExpression -> . Expression GEQ Expression
    (14) BinaryExpression -> . Expression LT Expression
    (15) BinaryExpression -> . Expression GT Expression
    (16) BinaryExpression -> . Expression EQ Expression
    (17) BinaryExpression -> . Expression NE Expression
    (18) BinaryExpression -> . Expression DOT Expression
    (70) UnaryExpression -> . Id
    (71) UnaryExpression -> . Literal
    (72) UnaryExpression -> . FunctionCall
    (73) UnaryExpression -> . BracketCall
    (74) UnaryExpression -> . LPAREN Expression RPAREN
    (75) UnaryExpression -> . TIMES Expression
    (76) UnaryExpression -> . AMPERSAND Expression
    (38) Id -> . ID
    (41) Literal -> . IntLiteral
    (42) Literal -> . BoolLiteral
    (36) FunctionCall -> . Id LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (40) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL

    LPAREN          shift and go to state 59
    TIMES           shift and go to state 67
    AMPERSAND       shift and go to state 70
    ID              shift and go to state 9
    INTL            shift and go to state 64
    BOOLL           shift and go to state 73

    Expression                     shift and go to state 115
    BinaryExpression               shift and go to state 56
    UnaryExpression                shift and go to state 57
    Id                             shift and go to state 96
    Literal                        shift and go to state 68
    FunctionCall                   shift and go to state 55
    BracketCall                    shift and go to state 69
    IntLiteral                     shift and go to state 71
    BoolLiteral                    shift and go to state 72

state 88

    (17) BinaryExpression -> Expression NE . Expression
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (7) BinaryExpression -> . Expression PLUS Expression
    (8) BinaryExpression -> . Expression MINUS Expression
    (9) BinaryExpression -> . Expression TIMES Expression
    (10) BinaryExpression -> . Expression DIVIDE Expression
    (11) BinaryExpression -> . Expression MOD Expression
    (12) BinaryExpression -> . Expression LEQ Expression
    (13) BinaryExpression -> . Expression GEQ Expression
    (14) BinaryExpression -> . Expression LT Expression
    (15) BinaryExpression -> . Expression GT Expression
    (16) BinaryExpression -> . Expression EQ Expression
    (17) BinaryExpression -> . Expression NE Expression
    (18) BinaryExpression -> . Expression DOT Expression
    (70) UnaryExpression -> . Id
    (71) UnaryExpression -> . Literal
    (72) UnaryExpression -> . FunctionCall
    (73) UnaryExpression -> . BracketCall
    (74) UnaryExpression -> . LPAREN Expression RPAREN
    (75) UnaryExpression -> . TIMES Expression
    (76) UnaryExpression -> . AMPERSAND Expression
    (38) Id -> . ID
    (41) Literal -> . IntLiteral
    (42) Literal -> . BoolLiteral
    (36) FunctionCall -> . Id LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (40) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL

    LPAREN          shift and go to state 59
    TIMES           shift and go to state 67
    AMPERSAND       shift and go to state 70
    ID              shift and go to state 9
    INTL            shift and go to state 64
    BOOLL           shift and go to state 73

    Expression                     shift and go to state 116
    BinaryExpression               shift and go to state 56
    UnaryExpression                shift and go to state 57
    Id                             shift and go to state 96
    Literal                        shift and go to state 68
    FunctionCall                   shift and go to state 55
    BracketCall                    shift and go to state 69
    IntLiteral                     shift and go to state 71
    BoolLiteral                    shift and go to state 72

state 89

    (18) BinaryExpression -> Expression DOT . Expression
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (7) BinaryExpression -> . Expression PLUS Expression
    (8) BinaryExpression -> . Expression MINUS Expression
    (9) BinaryExpression -> . Expression TIMES Expression
    (10) BinaryExpression -> . Expression DIVIDE Expression
    (11) BinaryExpression -> . Expression MOD Expression
    (12) BinaryExpression -> . Expression LEQ Expression
    (13) BinaryExpression -> . Expression GEQ Expression
    (14) BinaryExpression -> . Expression LT Expression
    (15) BinaryExpression -> . Expression GT Expression
    (16) BinaryExpression -> . Expression EQ Expression
    (17) BinaryExpression -> . Expression NE Expression
    (18) BinaryExpression -> . Expression DOT Expression
    (70) UnaryExpression -> . Id
    (71) UnaryExpression -> . Literal
    (72) UnaryExpression -> . FunctionCall
    (73) UnaryExpression -> . BracketCall
    (74) UnaryExpression -> . LPAREN Expression RPAREN
    (75) UnaryExpression -> . TIMES Expression
    (76) UnaryExpression -> . AMPERSAND Expression
    (38) Id -> . ID
    (41) Literal -> . IntLiteral
    (42) Literal -> . BoolLiteral
    (36) FunctionCall -> . Id LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (40) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL

    LPAREN          shift and go to state 59
    TIMES           shift and go to state 67
    AMPERSAND       shift and go to state 70
    ID              shift and go to state 9
    INTL            shift and go to state 64
    BOOLL           shift and go to state 73

    Expression                     shift and go to state 117
    BinaryExpression               shift and go to state 56
    UnaryExpression                shift and go to state 57
    Id                             shift and go to state 96
    Literal                        shift and go to state 68
    FunctionCall                   shift and go to state 55
    BracketCall                    shift and go to state 69
    IntLiteral                     shift and go to state 71
    BoolLiteral                    shift and go to state 72

state 90

    (23) BracketCall -> Expression LBRACKET . Expression RBRACKET
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (7) BinaryExpression -> . Expression PLUS Expression
    (8) BinaryExpression -> . Expression MINUS Expression
    (9) BinaryExpression -> . Expression TIMES Expression
    (10) BinaryExpression -> . Expression DIVIDE Expression
    (11) BinaryExpression -> . Expression MOD Expression
    (12) BinaryExpression -> . Expression LEQ Expression
    (13) BinaryExpression -> . Expression GEQ Expression
    (14) BinaryExpression -> . Expression LT Expression
    (15) BinaryExpression -> . Expression GT Expression
    (16) BinaryExpression -> . Expression EQ Expression
    (17) BinaryExpression -> . Expression NE Expression
    (18) BinaryExpression -> . Expression DOT Expression
    (70) UnaryExpression -> . Id
    (71) UnaryExpression -> . Literal
    (72) UnaryExpression -> . FunctionCall
    (73) UnaryExpression -> . BracketCall
    (74) UnaryExpression -> . LPAREN Expression RPAREN
    (75) UnaryExpression -> . TIMES Expression
    (76) UnaryExpression -> . AMPERSAND Expression
    (38) Id -> . ID
    (41) Literal -> . IntLiteral
    (42) Literal -> . BoolLiteral
    (36) FunctionCall -> . Id LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (40) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL

    LPAREN          shift and go to state 59
    TIMES           shift and go to state 67
    AMPERSAND       shift and go to state 70
    ID              shift and go to state 9
    INTL            shift and go to state 64
    BOOLL           shift and go to state 73

    Expression                     shift and go to state 118
    BinaryExpression               shift and go to state 56
    UnaryExpression                shift and go to state 57
    Id                             shift and go to state 96
    Literal                        shift and go to state 68
    FunctionCall                   shift and go to state 55
    BracketCall                    shift and go to state 69
    IntLiteral                     shift and go to state 71
    BoolLiteral                    shift and go to state 72

state 91

    (27) DeclarationAssignmentStatement -> Type Id . ASSIGNMENT Expression SEMICOLON
    (29) DeclarationStatement -> Type Id . SEMICOLON
    (36) FunctionCall -> Id . LPAREN ArgumentListR RPAREN

    ASSIGNMENT      shift and go to state 119
    SEMICOLON       shift and go to state 120
    LPAREN          shift and go to state 93


state 92

    (28) DeclarationFunctionCallStatement -> Type FunctionCall . SEMICOLON

    SEMICOLON       shift and go to state 121


state 93

    (36) FunctionCall -> Id LPAREN . ArgumentListR RPAREN
    (2) ArgumentListR -> . Argument COMMA ArgumentListR
    (3) ArgumentListR -> . Argument
    (4) ArgumentListR -> . empty
    (1) Argument -> . Expression
    (78) empty -> .
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (7) BinaryExpression -> . Expression PLUS Expression
    (8) BinaryExpression -> . Expression MINUS Expression
    (9) BinaryExpression -> . Expression TIMES Expression
    (10) BinaryExpression -> . Expression DIVIDE Expression
    (11) BinaryExpression -> . Expression MOD Expression
    (12) BinaryExpression -> . Expression LEQ Expression
    (13) BinaryExpression -> . Expression GEQ Expression
    (14) BinaryExpression -> . Expression LT Expression
    (15) BinaryExpression -> . Expression GT Expression
    (16) BinaryExpression -> . Expression EQ Expression
    (17) BinaryExpression -> . Expression NE Expression
    (18) BinaryExpression -> . Expression DOT Expression
    (70) UnaryExpression -> . Id
    (71) UnaryExpression -> . Literal
    (72) UnaryExpression -> . FunctionCall
    (73) UnaryExpression -> . BracketCall
    (74) UnaryExpression -> . LPAREN Expression RPAREN
    (75) UnaryExpression -> . TIMES Expression
    (76) UnaryExpression -> . AMPERSAND Expression
    (38) Id -> . ID
    (41) Literal -> . IntLiteral
    (42) Literal -> . BoolLiteral
    (36) FunctionCall -> . Id LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (40) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL

    RPAREN          reduce using rule 78 (empty -> .)
    LPAREN          shift and go to state 59
    TIMES           shift and go to state 67
    AMPERSAND       shift and go to state 70
    ID              shift and go to state 9
    INTL            shift and go to state 64
    BOOLL           shift and go to state 73

    Id                             shift and go to state 96
    ArgumentListR                  shift and go to state 122
    Argument                       shift and go to state 123
    empty                          shift and go to state 124
    Expression                     shift and go to state 125
    BinaryExpression               shift and go to state 56
    UnaryExpression                shift and go to state 57
    Literal                        shift and go to state 68
    FunctionCall                   shift and go to state 55
    BracketCall                    shift and go to state 69
    IntLiteral                     shift and go to state 71
    BoolLiteral                    shift and go to state 72

state 94

    (39) IfElseStatement -> IF LPAREN . Expression RPAREN Block ELSE Block
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (7) BinaryExpression -> . Expression PLUS Expression
    (8) BinaryExpression -> . Expression MINUS Expression
    (9) BinaryExpression -> . Expression TIMES Expression
    (10) BinaryExpression -> . Expression DIVIDE Expression
    (11) BinaryExpression -> . Expression MOD Expression
    (12) BinaryExpression -> . Expression LEQ Expression
    (13) BinaryExpression -> . Expression GEQ Expression
    (14) BinaryExpression -> . Expression LT Expression
    (15) BinaryExpression -> . Expression GT Expression
    (16) BinaryExpression -> . Expression EQ Expression
    (17) BinaryExpression -> . Expression NE Expression
    (18) BinaryExpression -> . Expression DOT Expression
    (70) UnaryExpression -> . Id
    (71) UnaryExpression -> . Literal
    (72) UnaryExpression -> . FunctionCall
    (73) UnaryExpression -> . BracketCall
    (74) UnaryExpression -> . LPAREN Expression RPAREN
    (75) UnaryExpression -> . TIMES Expression
    (76) UnaryExpression -> . AMPERSAND Expression
    (38) Id -> . ID
    (41) Literal -> . IntLiteral
    (42) Literal -> . BoolLiteral
    (36) FunctionCall -> . Id LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (40) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL

    LPAREN          shift and go to state 59
    TIMES           shift and go to state 67
    AMPERSAND       shift and go to state 70
    ID              shift and go to state 9
    INTL            shift and go to state 64
    BOOLL           shift and go to state 73

    Expression                     shift and go to state 126
    BinaryExpression               shift and go to state 56
    UnaryExpression                shift and go to state 57
    Id                             shift and go to state 96
    Literal                        shift and go to state 68
    FunctionCall                   shift and go to state 55
    BracketCall                    shift and go to state 69
    IntLiteral                     shift and go to state 71
    BoolLiteral                    shift and go to state 72

state 95

    (74) UnaryExpression -> LPAREN Expression . RPAREN
    (7) BinaryExpression -> Expression . PLUS Expression
    (8) BinaryExpression -> Expression . MINUS Expression
    (9) BinaryExpression -> Expression . TIMES Expression
    (10) BinaryExpression -> Expression . DIVIDE Expression
    (11) BinaryExpression -> Expression . MOD Expression
    (12) BinaryExpression -> Expression . LEQ Expression
    (13) BinaryExpression -> Expression . GEQ Expression
    (14) BinaryExpression -> Expression . LT Expression
    (15) BinaryExpression -> Expression . GT Expression
    (16) BinaryExpression -> Expression . EQ Expression
    (17) BinaryExpression -> Expression . NE Expression
    (18) BinaryExpression -> Expression . DOT Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET

    RPAREN          shift and go to state 127
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    TIMES           shift and go to state 80
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 82
    LEQ             shift and go to state 83
    GEQ             shift and go to state 84
    LT              shift and go to state 85
    GT              shift and go to state 86
    EQ              shift and go to state 87
    NE              shift and go to state 88
    DOT             shift and go to state 89
    LBRACKET        shift and go to state 90


state 96

    (70) UnaryExpression -> Id .
    (36) FunctionCall -> Id . LPAREN ArgumentListR RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    RPAREN          reduce using rule 70 (UnaryExpression -> Id .)
    PLUS            reduce using rule 70 (UnaryExpression -> Id .)
    MINUS           reduce using rule 70 (UnaryExpression -> Id .)
    TIMES           reduce using rule 70 (UnaryExpression -> Id .)
    DIVIDE          reduce using rule 70 (UnaryExpression -> Id .)
    MOD             reduce using rule 70 (UnaryExpression -> Id .)
    LEQ             reduce using rule 70 (UnaryExpression -> Id .)
    GEQ             reduce using rule 70 (UnaryExpression -> Id .)
    LT              reduce using rule 70 (UnaryExpression -> Id .)
    GT              reduce using rule 70 (UnaryExpression -> Id .)
    EQ              reduce using rule 70 (UnaryExpression -> Id .)
    NE              reduce using rule 70 (UnaryExpression -> Id .)
    DOT             reduce using rule 70 (UnaryExpression -> Id .)
    LBRACKET        reduce using rule 70 (UnaryExpression -> Id .)
    SEMICOLON       reduce using rule 70 (UnaryExpression -> Id .)
    ASSIGNMENT      reduce using rule 70 (UnaryExpression -> Id .)
    IF              reduce using rule 70 (UnaryExpression -> Id .)
    FOR             reduce using rule 70 (UnaryExpression -> Id .)
    WHILE           reduce using rule 70 (UnaryExpression -> Id .)
    BREAK           reduce using rule 70 (UnaryExpression -> Id .)
    RETURN          reduce using rule 70 (UnaryExpression -> Id .)
    ;               reduce using rule 70 (UnaryExpression -> Id .)
    AMPERSAND       reduce using rule 70 (UnaryExpression -> Id .)
    LBRACE          reduce using rule 70 (UnaryExpression -> Id .)
    ID              reduce using rule 70 (UnaryExpression -> Id .)
    INTL            reduce using rule 70 (UnaryExpression -> Id .)
    BOOLL           reduce using rule 70 (UnaryExpression -> Id .)
    RBRACE          reduce using rule 70 (UnaryExpression -> Id .)
    RBRACKET        reduce using rule 70 (UnaryExpression -> Id .)
    COMMA           reduce using rule 70 (UnaryExpression -> Id .)
    LPAREN          shift and go to state 93

  ! LPAREN          [ reduce using rule 70 (UnaryExpression -> Id .) ]


state 97

    (35) ForStatement -> FOR LPAREN . Statement Expression SEMICOLON Statement RPAREN Block
    (51) Statement -> . AssignmentStatement
    (52) Statement -> . DeclarationAssignmentStatement
    (53) Statement -> . DeclarationFunctionCallStatement
    (54) Statement -> . DeclarationStatement
    (55) Statement -> . Expression SEMICOLON
    (56) Statement -> . IfElseStatement
    (57) Statement -> . ForStatement
    (58) Statement -> . WhileStatement
    (59) Statement -> . BreakStatement
    (60) Statement -> . ReturnStatement
    (61) Statement -> . BlockStatement
    (62) Statement -> . BlankStatement
    (5) AssignmentStatement -> . Expression ASSIGNMENT Expression SEMICOLON
    (6) AssignmentStatement -> . Expression ASSIGNMENT Expression
    (27) DeclarationAssignmentStatement -> . Type Id ASSIGNMENT Expression SEMICOLON
    (28) DeclarationFunctionCallStatement -> . Type FunctionCall SEMICOLON
    (29) DeclarationStatement -> . Type Id SEMICOLON
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (39) IfElseStatement -> . IF LPAREN Expression RPAREN Block ELSE Block
    (35) ForStatement -> . FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block
    (77) WhileStatement -> . WHILE LPAREN Expression RPAREN Block
    (24) BreakStatement -> . BREAK INTL SEMICOLON
    (25) BreakStatement -> . BREAK SEMICOLON
    (49) ReturnStatement -> . RETURN Expression SEMICOLON
    (50) ReturnStatement -> . RETURN SEMICOLON
    (21) BlockStatement -> . Block
    (19) BlankStatement -> . ;
    (69) Type -> . Id PointerListR
    (7) BinaryExpression -> . Expression PLUS Expression
    (8) BinaryExpression -> . Expression MINUS Expression
    (9) BinaryExpression -> . Expression TIMES Expression
    (10) BinaryExpression -> . Expression DIVIDE Expression
    (11) BinaryExpression -> . Expression MOD Expression
    (12) BinaryExpression -> . Expression LEQ Expression
    (13) BinaryExpression -> . Expression GEQ Expression
    (14) BinaryExpression -> . Expression LT Expression
    (15) BinaryExpression -> . Expression GT Expression
    (16) BinaryExpression -> . Expression EQ Expression
    (17) BinaryExpression -> . Expression NE Expression
    (18) BinaryExpression -> . Expression DOT Expression
    (70) UnaryExpression -> . Id
    (71) UnaryExpression -> . Literal
    (72) UnaryExpression -> . FunctionCall
    (73) UnaryExpression -> . BracketCall
    (74) UnaryExpression -> . LPAREN Expression RPAREN
    (75) UnaryExpression -> . TIMES Expression
    (76) UnaryExpression -> . AMPERSAND Expression
    (20) Block -> . LBRACE StatementListR RBRACE
    (38) Id -> . ID
    (41) Literal -> . IntLiteral
    (42) Literal -> . BoolLiteral
    (36) FunctionCall -> . Id LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (40) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL

    IF              shift and go to state 58
    FOR             shift and go to state 61
    WHILE           shift and go to state 62
    BREAK           shift and go to state 63
    RETURN          shift and go to state 65
    ;               shift and go to state 66
    LPAREN          shift and go to state 59
    TIMES           shift and go to state 67
    AMPERSAND       shift and go to state 70
    LBRACE          shift and go to state 35
    ID              shift and go to state 9
    INTL            shift and go to state 64
    BOOLL           shift and go to state 73

    Statement                      shift and go to state 128
    Expression                     shift and go to state 45
    Block                          shift and go to state 60
    AssignmentStatement            shift and go to state 41
    DeclarationAssignmentStatement shift and go to state 42
    DeclarationFunctionCallStatement shift and go to state 43
    DeclarationStatement           shift and go to state 44
    IfElseStatement                shift and go to state 46
    ForStatement                   shift and go to state 47
    WhileStatement                 shift and go to state 48
    BreakStatement                 shift and go to state 49
    ReturnStatement                shift and go to state 50
    BlockStatement                 shift and go to state 51
    BlankStatement                 shift and go to state 52
    Type                           shift and go to state 53
    Id                             shift and go to state 54
    FunctionCall                   shift and go to state 55
    BinaryExpression               shift and go to state 56
    UnaryExpression                shift and go to state 57
    Literal                        shift and go to state 68
    BracketCall                    shift and go to state 69
    IntLiteral                     shift and go to state 71
    BoolLiteral                    shift and go to state 72

state 98

    (77) WhileStatement -> WHILE LPAREN . Expression RPAREN Block
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (7) BinaryExpression -> . Expression PLUS Expression
    (8) BinaryExpression -> . Expression MINUS Expression
    (9) BinaryExpression -> . Expression TIMES Expression
    (10) BinaryExpression -> . Expression DIVIDE Expression
    (11) BinaryExpression -> . Expression MOD Expression
    (12) BinaryExpression -> . Expression LEQ Expression
    (13) BinaryExpression -> . Expression GEQ Expression
    (14) BinaryExpression -> . Expression LT Expression
    (15) BinaryExpression -> . Expression GT Expression
    (16) BinaryExpression -> . Expression EQ Expression
    (17) BinaryExpression -> . Expression NE Expression
    (18) BinaryExpression -> . Expression DOT Expression
    (70) UnaryExpression -> . Id
    (71) UnaryExpression -> . Literal
    (72) UnaryExpression -> . FunctionCall
    (73) UnaryExpression -> . BracketCall
    (74) UnaryExpression -> . LPAREN Expression RPAREN
    (75) UnaryExpression -> . TIMES Expression
    (76) UnaryExpression -> . AMPERSAND Expression
    (38) Id -> . ID
    (41) Literal -> . IntLiteral
    (42) Literal -> . BoolLiteral
    (36) FunctionCall -> . Id LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (40) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL

    LPAREN          shift and go to state 59
    TIMES           shift and go to state 67
    AMPERSAND       shift and go to state 70
    ID              shift and go to state 9
    INTL            shift and go to state 64
    BOOLL           shift and go to state 73

    Expression                     shift and go to state 129
    BinaryExpression               shift and go to state 56
    UnaryExpression                shift and go to state 57
    Id                             shift and go to state 96
    Literal                        shift and go to state 68
    FunctionCall                   shift and go to state 55
    BracketCall                    shift and go to state 69
    IntLiteral                     shift and go to state 71
    BoolLiteral                    shift and go to state 72

state 99

    (24) BreakStatement -> BREAK INTL . SEMICOLON

    SEMICOLON       shift and go to state 130


state 100

    (25) BreakStatement -> BREAK SEMICOLON .

    IF              reduce using rule 25 (BreakStatement -> BREAK SEMICOLON .)
    FOR             reduce using rule 25 (BreakStatement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 25 (BreakStatement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 25 (BreakStatement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 25 (BreakStatement -> BREAK SEMICOLON .)
    ;               reduce using rule 25 (BreakStatement -> BREAK SEMICOLON .)
    LPAREN          reduce using rule 25 (BreakStatement -> BREAK SEMICOLON .)
    TIMES           reduce using rule 25 (BreakStatement -> BREAK SEMICOLON .)
    AMPERSAND       reduce using rule 25 (BreakStatement -> BREAK SEMICOLON .)
    LBRACE          reduce using rule 25 (BreakStatement -> BREAK SEMICOLON .)
    ID              reduce using rule 25 (BreakStatement -> BREAK SEMICOLON .)
    INTL            reduce using rule 25 (BreakStatement -> BREAK SEMICOLON .)
    BOOLL           reduce using rule 25 (BreakStatement -> BREAK SEMICOLON .)
    RBRACE          reduce using rule 25 (BreakStatement -> BREAK SEMICOLON .)
    RPAREN          reduce using rule 25 (BreakStatement -> BREAK SEMICOLON .)


state 101

    (49) ReturnStatement -> RETURN Expression . SEMICOLON
    (7) BinaryExpression -> Expression . PLUS Expression
    (8) BinaryExpression -> Expression . MINUS Expression
    (9) BinaryExpression -> Expression . TIMES Expression
    (10) BinaryExpression -> Expression . DIVIDE Expression
    (11) BinaryExpression -> Expression . MOD Expression
    (12) BinaryExpression -> Expression . LEQ Expression
    (13) BinaryExpression -> Expression . GEQ Expression
    (14) BinaryExpression -> Expression . LT Expression
    (15) BinaryExpression -> Expression . GT Expression
    (16) BinaryExpression -> Expression . EQ Expression
    (17) BinaryExpression -> Expression . NE Expression
    (18) BinaryExpression -> Expression . DOT Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET

    SEMICOLON       shift and go to state 131
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    TIMES           shift and go to state 80
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 82
    LEQ             shift and go to state 83
    GEQ             shift and go to state 84
    LT              shift and go to state 85
    GT              shift and go to state 86
    EQ              shift and go to state 87
    NE              shift and go to state 88
    DOT             shift and go to state 89
    LBRACKET        shift and go to state 90


state 102

    (50) ReturnStatement -> RETURN SEMICOLON .

    IF              reduce using rule 50 (ReturnStatement -> RETURN SEMICOLON .)
    FOR             reduce using rule 50 (ReturnStatement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 50 (ReturnStatement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 50 (ReturnStatement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 50 (ReturnStatement -> RETURN SEMICOLON .)
    ;               reduce using rule 50 (ReturnStatement -> RETURN SEMICOLON .)
    LPAREN          reduce using rule 50 (ReturnStatement -> RETURN SEMICOLON .)
    TIMES           reduce using rule 50 (ReturnStatement -> RETURN SEMICOLON .)
    AMPERSAND       reduce using rule 50 (ReturnStatement -> RETURN SEMICOLON .)
    LBRACE          reduce using rule 50 (ReturnStatement -> RETURN SEMICOLON .)
    ID              reduce using rule 50 (ReturnStatement -> RETURN SEMICOLON .)
    INTL            reduce using rule 50 (ReturnStatement -> RETURN SEMICOLON .)
    BOOLL           reduce using rule 50 (ReturnStatement -> RETURN SEMICOLON .)
    RBRACE          reduce using rule 50 (ReturnStatement -> RETURN SEMICOLON .)
    RPAREN          reduce using rule 50 (ReturnStatement -> RETURN SEMICOLON .)


state 103

    (75) UnaryExpression -> TIMES Expression .
    (7) BinaryExpression -> Expression . PLUS Expression
    (8) BinaryExpression -> Expression . MINUS Expression
    (9) BinaryExpression -> Expression . TIMES Expression
    (10) BinaryExpression -> Expression . DIVIDE Expression
    (11) BinaryExpression -> Expression . MOD Expression
    (12) BinaryExpression -> Expression . LEQ Expression
    (13) BinaryExpression -> Expression . GEQ Expression
    (14) BinaryExpression -> Expression . LT Expression
    (15) BinaryExpression -> Expression . GT Expression
    (16) BinaryExpression -> Expression . EQ Expression
    (17) BinaryExpression -> Expression . NE Expression
    (18) BinaryExpression -> Expression . DOT Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET

    SEMICOLON       reduce using rule 75 (UnaryExpression -> TIMES Expression .)
    ASSIGNMENT      reduce using rule 75 (UnaryExpression -> TIMES Expression .)
    PLUS            reduce using rule 75 (UnaryExpression -> TIMES Expression .)
    MINUS           reduce using rule 75 (UnaryExpression -> TIMES Expression .)
    TIMES           reduce using rule 75 (UnaryExpression -> TIMES Expression .)
    DIVIDE          reduce using rule 75 (UnaryExpression -> TIMES Expression .)
    MOD             reduce using rule 75 (UnaryExpression -> TIMES Expression .)
    DOT             reduce using rule 75 (UnaryExpression -> TIMES Expression .)
    LBRACKET        reduce using rule 75 (UnaryExpression -> TIMES Expression .)
    RPAREN          reduce using rule 75 (UnaryExpression -> TIMES Expression .)
    IF              reduce using rule 75 (UnaryExpression -> TIMES Expression .)
    FOR             reduce using rule 75 (UnaryExpression -> TIMES Expression .)
    WHILE           reduce using rule 75 (UnaryExpression -> TIMES Expression .)
    BREAK           reduce using rule 75 (UnaryExpression -> TIMES Expression .)
    RETURN          reduce using rule 75 (UnaryExpression -> TIMES Expression .)
    ;               reduce using rule 75 (UnaryExpression -> TIMES Expression .)
    LPAREN          reduce using rule 75 (UnaryExpression -> TIMES Expression .)
    AMPERSAND       reduce using rule 75 (UnaryExpression -> TIMES Expression .)
    LBRACE          reduce using rule 75 (UnaryExpression -> TIMES Expression .)
    ID              reduce using rule 75 (UnaryExpression -> TIMES Expression .)
    INTL            reduce using rule 75 (UnaryExpression -> TIMES Expression .)
    BOOLL           reduce using rule 75 (UnaryExpression -> TIMES Expression .)
    RBRACE          reduce using rule 75 (UnaryExpression -> TIMES Expression .)
    RBRACKET        reduce using rule 75 (UnaryExpression -> TIMES Expression .)
    COMMA           reduce using rule 75 (UnaryExpression -> TIMES Expression .)
    LEQ             shift and go to state 83
    GEQ             shift and go to state 84
    LT              shift and go to state 85
    GT              shift and go to state 86
    EQ              shift and go to state 87
    NE              shift and go to state 88

  ! LEQ             [ reduce using rule 75 (UnaryExpression -> TIMES Expression .) ]
  ! GEQ             [ reduce using rule 75 (UnaryExpression -> TIMES Expression .) ]
  ! LT              [ reduce using rule 75 (UnaryExpression -> TIMES Expression .) ]
  ! GT              [ reduce using rule 75 (UnaryExpression -> TIMES Expression .) ]
  ! EQ              [ reduce using rule 75 (UnaryExpression -> TIMES Expression .) ]
  ! NE              [ reduce using rule 75 (UnaryExpression -> TIMES Expression .) ]
  ! PLUS            [ shift and go to state 78 ]
  ! MINUS           [ shift and go to state 79 ]
  ! TIMES           [ shift and go to state 80 ]
  ! DIVIDE          [ shift and go to state 81 ]
  ! MOD             [ shift and go to state 82 ]
  ! DOT             [ shift and go to state 89 ]
  ! LBRACKET        [ shift and go to state 90 ]


state 104

    (76) UnaryExpression -> AMPERSAND Expression .
    (7) BinaryExpression -> Expression . PLUS Expression
    (8) BinaryExpression -> Expression . MINUS Expression
    (9) BinaryExpression -> Expression . TIMES Expression
    (10) BinaryExpression -> Expression . DIVIDE Expression
    (11) BinaryExpression -> Expression . MOD Expression
    (12) BinaryExpression -> Expression . LEQ Expression
    (13) BinaryExpression -> Expression . GEQ Expression
    (14) BinaryExpression -> Expression . LT Expression
    (15) BinaryExpression -> Expression . GT Expression
    (16) BinaryExpression -> Expression . EQ Expression
    (17) BinaryExpression -> Expression . NE Expression
    (18) BinaryExpression -> Expression . DOT Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LEQ resolved as shift
  ! shift/reduce conflict for GEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    SEMICOLON       reduce using rule 76 (UnaryExpression -> AMPERSAND Expression .)
    ASSIGNMENT      reduce using rule 76 (UnaryExpression -> AMPERSAND Expression .)
    RPAREN          reduce using rule 76 (UnaryExpression -> AMPERSAND Expression .)
    IF              reduce using rule 76 (UnaryExpression -> AMPERSAND Expression .)
    FOR             reduce using rule 76 (UnaryExpression -> AMPERSAND Expression .)
    WHILE           reduce using rule 76 (UnaryExpression -> AMPERSAND Expression .)
    BREAK           reduce using rule 76 (UnaryExpression -> AMPERSAND Expression .)
    RETURN          reduce using rule 76 (UnaryExpression -> AMPERSAND Expression .)
    ;               reduce using rule 76 (UnaryExpression -> AMPERSAND Expression .)
    LPAREN          reduce using rule 76 (UnaryExpression -> AMPERSAND Expression .)
    AMPERSAND       reduce using rule 76 (UnaryExpression -> AMPERSAND Expression .)
    LBRACE          reduce using rule 76 (UnaryExpression -> AMPERSAND Expression .)
    ID              reduce using rule 76 (UnaryExpression -> AMPERSAND Expression .)
    INTL            reduce using rule 76 (UnaryExpression -> AMPERSAND Expression .)
    BOOLL           reduce using rule 76 (UnaryExpression -> AMPERSAND Expression .)
    RBRACE          reduce using rule 76 (UnaryExpression -> AMPERSAND Expression .)
    RBRACKET        reduce using rule 76 (UnaryExpression -> AMPERSAND Expression .)
    COMMA           reduce using rule 76 (UnaryExpression -> AMPERSAND Expression .)
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    TIMES           shift and go to state 80
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 82
    LEQ             shift and go to state 83
    GEQ             shift and go to state 84
    LT              shift and go to state 85
    GT              shift and go to state 86
    EQ              shift and go to state 87
    NE              shift and go to state 88
    DOT             shift and go to state 89
    LBRACKET        shift and go to state 90

  ! PLUS            [ reduce using rule 76 (UnaryExpression -> AMPERSAND Expression .) ]
  ! MINUS           [ reduce using rule 76 (UnaryExpression -> AMPERSAND Expression .) ]
  ! TIMES           [ reduce using rule 76 (UnaryExpression -> AMPERSAND Expression .) ]
  ! DIVIDE          [ reduce using rule 76 (UnaryExpression -> AMPERSAND Expression .) ]
  ! MOD             [ reduce using rule 76 (UnaryExpression -> AMPERSAND Expression .) ]
  ! LEQ             [ reduce using rule 76 (UnaryExpression -> AMPERSAND Expression .) ]
  ! GEQ             [ reduce using rule 76 (UnaryExpression -> AMPERSAND Expression .) ]
  ! LT              [ reduce using rule 76 (UnaryExpression -> AMPERSAND Expression .) ]
  ! GT              [ reduce using rule 76 (UnaryExpression -> AMPERSAND Expression .) ]
  ! EQ              [ reduce using rule 76 (UnaryExpression -> AMPERSAND Expression .) ]
  ! NE              [ reduce using rule 76 (UnaryExpression -> AMPERSAND Expression .) ]
  ! DOT             [ reduce using rule 76 (UnaryExpression -> AMPERSAND Expression .) ]
  ! LBRACKET        [ reduce using rule 76 (UnaryExpression -> AMPERSAND Expression .) ]


state 105

    (5) AssignmentStatement -> Expression ASSIGNMENT Expression . SEMICOLON
    (6) AssignmentStatement -> Expression ASSIGNMENT Expression .
    (7) BinaryExpression -> Expression . PLUS Expression
    (8) BinaryExpression -> Expression . MINUS Expression
    (9) BinaryExpression -> Expression . TIMES Expression
    (10) BinaryExpression -> Expression . DIVIDE Expression
    (11) BinaryExpression -> Expression . MOD Expression
    (12) BinaryExpression -> Expression . LEQ Expression
    (13) BinaryExpression -> Expression . GEQ Expression
    (14) BinaryExpression -> Expression . LT Expression
    (15) BinaryExpression -> Expression . GT Expression
    (16) BinaryExpression -> Expression . EQ Expression
    (17) BinaryExpression -> Expression . NE Expression
    (18) BinaryExpression -> Expression . DOT Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET

  ! shift/reduce conflict for TIMES resolved as shift
    SEMICOLON       shift and go to state 132
    IF              reduce using rule 6 (AssignmentStatement -> Expression ASSIGNMENT Expression .)
    FOR             reduce using rule 6 (AssignmentStatement -> Expression ASSIGNMENT Expression .)
    WHILE           reduce using rule 6 (AssignmentStatement -> Expression ASSIGNMENT Expression .)
    BREAK           reduce using rule 6 (AssignmentStatement -> Expression ASSIGNMENT Expression .)
    RETURN          reduce using rule 6 (AssignmentStatement -> Expression ASSIGNMENT Expression .)
    ;               reduce using rule 6 (AssignmentStatement -> Expression ASSIGNMENT Expression .)
    LPAREN          reduce using rule 6 (AssignmentStatement -> Expression ASSIGNMENT Expression .)
    AMPERSAND       reduce using rule 6 (AssignmentStatement -> Expression ASSIGNMENT Expression .)
    LBRACE          reduce using rule 6 (AssignmentStatement -> Expression ASSIGNMENT Expression .)
    ID              reduce using rule 6 (AssignmentStatement -> Expression ASSIGNMENT Expression .)
    INTL            reduce using rule 6 (AssignmentStatement -> Expression ASSIGNMENT Expression .)
    BOOLL           reduce using rule 6 (AssignmentStatement -> Expression ASSIGNMENT Expression .)
    RBRACE          reduce using rule 6 (AssignmentStatement -> Expression ASSIGNMENT Expression .)
    RPAREN          reduce using rule 6 (AssignmentStatement -> Expression ASSIGNMENT Expression .)
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    TIMES           shift and go to state 80
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 82
    LEQ             shift and go to state 83
    GEQ             shift and go to state 84
    LT              shift and go to state 85
    GT              shift and go to state 86
    EQ              shift and go to state 87
    NE              shift and go to state 88
    DOT             shift and go to state 89
    LBRACKET        shift and go to state 90

  ! TIMES           [ reduce using rule 6 (AssignmentStatement -> Expression ASSIGNMENT Expression .) ]


state 106

    (7) BinaryExpression -> Expression PLUS Expression .
    (7) BinaryExpression -> Expression . PLUS Expression
    (8) BinaryExpression -> Expression . MINUS Expression
    (9) BinaryExpression -> Expression . TIMES Expression
    (10) BinaryExpression -> Expression . DIVIDE Expression
    (11) BinaryExpression -> Expression . MOD Expression
    (12) BinaryExpression -> Expression . LEQ Expression
    (13) BinaryExpression -> Expression . GEQ Expression
    (14) BinaryExpression -> Expression . LT Expression
    (15) BinaryExpression -> Expression . GT Expression
    (16) BinaryExpression -> Expression . EQ Expression
    (17) BinaryExpression -> Expression . NE Expression
    (18) BinaryExpression -> Expression . DOT Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET

    SEMICOLON       reduce using rule 7 (BinaryExpression -> Expression PLUS Expression .)
    ASSIGNMENT      reduce using rule 7 (BinaryExpression -> Expression PLUS Expression .)
    PLUS            reduce using rule 7 (BinaryExpression -> Expression PLUS Expression .)
    MINUS           reduce using rule 7 (BinaryExpression -> Expression PLUS Expression .)
    DOT             reduce using rule 7 (BinaryExpression -> Expression PLUS Expression .)
    LBRACKET        reduce using rule 7 (BinaryExpression -> Expression PLUS Expression .)
    RPAREN          reduce using rule 7 (BinaryExpression -> Expression PLUS Expression .)
    IF              reduce using rule 7 (BinaryExpression -> Expression PLUS Expression .)
    FOR             reduce using rule 7 (BinaryExpression -> Expression PLUS Expression .)
    WHILE           reduce using rule 7 (BinaryExpression -> Expression PLUS Expression .)
    BREAK           reduce using rule 7 (BinaryExpression -> Expression PLUS Expression .)
    RETURN          reduce using rule 7 (BinaryExpression -> Expression PLUS Expression .)
    ;               reduce using rule 7 (BinaryExpression -> Expression PLUS Expression .)
    LPAREN          reduce using rule 7 (BinaryExpression -> Expression PLUS Expression .)
    AMPERSAND       reduce using rule 7 (BinaryExpression -> Expression PLUS Expression .)
    LBRACE          reduce using rule 7 (BinaryExpression -> Expression PLUS Expression .)
    ID              reduce using rule 7 (BinaryExpression -> Expression PLUS Expression .)
    INTL            reduce using rule 7 (BinaryExpression -> Expression PLUS Expression .)
    BOOLL           reduce using rule 7 (BinaryExpression -> Expression PLUS Expression .)
    RBRACE          reduce using rule 7 (BinaryExpression -> Expression PLUS Expression .)
    RBRACKET        reduce using rule 7 (BinaryExpression -> Expression PLUS Expression .)
    COMMA           reduce using rule 7 (BinaryExpression -> Expression PLUS Expression .)
    TIMES           shift and go to state 80
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 82
    LEQ             shift and go to state 83
    GEQ             shift and go to state 84
    LT              shift and go to state 85
    GT              shift and go to state 86
    EQ              shift and go to state 87
    NE              shift and go to state 88

  ! TIMES           [ reduce using rule 7 (BinaryExpression -> Expression PLUS Expression .) ]
  ! DIVIDE          [ reduce using rule 7 (BinaryExpression -> Expression PLUS Expression .) ]
  ! MOD             [ reduce using rule 7 (BinaryExpression -> Expression PLUS Expression .) ]
  ! LEQ             [ reduce using rule 7 (BinaryExpression -> Expression PLUS Expression .) ]
  ! GEQ             [ reduce using rule 7 (BinaryExpression -> Expression PLUS Expression .) ]
  ! LT              [ reduce using rule 7 (BinaryExpression -> Expression PLUS Expression .) ]
  ! GT              [ reduce using rule 7 (BinaryExpression -> Expression PLUS Expression .) ]
  ! EQ              [ reduce using rule 7 (BinaryExpression -> Expression PLUS Expression .) ]
  ! NE              [ reduce using rule 7 (BinaryExpression -> Expression PLUS Expression .) ]
  ! PLUS            [ shift and go to state 78 ]
  ! MINUS           [ shift and go to state 79 ]
  ! DOT             [ shift and go to state 89 ]
  ! LBRACKET        [ shift and go to state 90 ]


state 107

    (8) BinaryExpression -> Expression MINUS Expression .
    (7) BinaryExpression -> Expression . PLUS Expression
    (8) BinaryExpression -> Expression . MINUS Expression
    (9) BinaryExpression -> Expression . TIMES Expression
    (10) BinaryExpression -> Expression . DIVIDE Expression
    (11) BinaryExpression -> Expression . MOD Expression
    (12) BinaryExpression -> Expression . LEQ Expression
    (13) BinaryExpression -> Expression . GEQ Expression
    (14) BinaryExpression -> Expression . LT Expression
    (15) BinaryExpression -> Expression . GT Expression
    (16) BinaryExpression -> Expression . EQ Expression
    (17) BinaryExpression -> Expression . NE Expression
    (18) BinaryExpression -> Expression . DOT Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET

    SEMICOLON       reduce using rule 8 (BinaryExpression -> Expression MINUS Expression .)
    ASSIGNMENT      reduce using rule 8 (BinaryExpression -> Expression MINUS Expression .)
    PLUS            reduce using rule 8 (BinaryExpression -> Expression MINUS Expression .)
    MINUS           reduce using rule 8 (BinaryExpression -> Expression MINUS Expression .)
    DOT             reduce using rule 8 (BinaryExpression -> Expression MINUS Expression .)
    LBRACKET        reduce using rule 8 (BinaryExpression -> Expression MINUS Expression .)
    RPAREN          reduce using rule 8 (BinaryExpression -> Expression MINUS Expression .)
    IF              reduce using rule 8 (BinaryExpression -> Expression MINUS Expression .)
    FOR             reduce using rule 8 (BinaryExpression -> Expression MINUS Expression .)
    WHILE           reduce using rule 8 (BinaryExpression -> Expression MINUS Expression .)
    BREAK           reduce using rule 8 (BinaryExpression -> Expression MINUS Expression .)
    RETURN          reduce using rule 8 (BinaryExpression -> Expression MINUS Expression .)
    ;               reduce using rule 8 (BinaryExpression -> Expression MINUS Expression .)
    LPAREN          reduce using rule 8 (BinaryExpression -> Expression MINUS Expression .)
    AMPERSAND       reduce using rule 8 (BinaryExpression -> Expression MINUS Expression .)
    LBRACE          reduce using rule 8 (BinaryExpression -> Expression MINUS Expression .)
    ID              reduce using rule 8 (BinaryExpression -> Expression MINUS Expression .)
    INTL            reduce using rule 8 (BinaryExpression -> Expression MINUS Expression .)
    BOOLL           reduce using rule 8 (BinaryExpression -> Expression MINUS Expression .)
    RBRACE          reduce using rule 8 (BinaryExpression -> Expression MINUS Expression .)
    RBRACKET        reduce using rule 8 (BinaryExpression -> Expression MINUS Expression .)
    COMMA           reduce using rule 8 (BinaryExpression -> Expression MINUS Expression .)
    TIMES           shift and go to state 80
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 82
    LEQ             shift and go to state 83
    GEQ             shift and go to state 84
    LT              shift and go to state 85
    GT              shift and go to state 86
    EQ              shift and go to state 87
    NE              shift and go to state 88

  ! TIMES           [ reduce using rule 8 (BinaryExpression -> Expression MINUS Expression .) ]
  ! DIVIDE          [ reduce using rule 8 (BinaryExpression -> Expression MINUS Expression .) ]
  ! MOD             [ reduce using rule 8 (BinaryExpression -> Expression MINUS Expression .) ]
  ! LEQ             [ reduce using rule 8 (BinaryExpression -> Expression MINUS Expression .) ]
  ! GEQ             [ reduce using rule 8 (BinaryExpression -> Expression MINUS Expression .) ]
  ! LT              [ reduce using rule 8 (BinaryExpression -> Expression MINUS Expression .) ]
  ! GT              [ reduce using rule 8 (BinaryExpression -> Expression MINUS Expression .) ]
  ! EQ              [ reduce using rule 8 (BinaryExpression -> Expression MINUS Expression .) ]
  ! NE              [ reduce using rule 8 (BinaryExpression -> Expression MINUS Expression .) ]
  ! PLUS            [ shift and go to state 78 ]
  ! MINUS           [ shift and go to state 79 ]
  ! DOT             [ shift and go to state 89 ]
  ! LBRACKET        [ shift and go to state 90 ]


state 108

    (9) BinaryExpression -> Expression TIMES Expression .
    (7) BinaryExpression -> Expression . PLUS Expression
    (8) BinaryExpression -> Expression . MINUS Expression
    (9) BinaryExpression -> Expression . TIMES Expression
    (10) BinaryExpression -> Expression . DIVIDE Expression
    (11) BinaryExpression -> Expression . MOD Expression
    (12) BinaryExpression -> Expression . LEQ Expression
    (13) BinaryExpression -> Expression . GEQ Expression
    (14) BinaryExpression -> Expression . LT Expression
    (15) BinaryExpression -> Expression . GT Expression
    (16) BinaryExpression -> Expression . EQ Expression
    (17) BinaryExpression -> Expression . NE Expression
    (18) BinaryExpression -> Expression . DOT Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET

    SEMICOLON       reduce using rule 9 (BinaryExpression -> Expression TIMES Expression .)
    ASSIGNMENT      reduce using rule 9 (BinaryExpression -> Expression TIMES Expression .)
    PLUS            reduce using rule 9 (BinaryExpression -> Expression TIMES Expression .)
    MINUS           reduce using rule 9 (BinaryExpression -> Expression TIMES Expression .)
    TIMES           reduce using rule 9 (BinaryExpression -> Expression TIMES Expression .)
    DIVIDE          reduce using rule 9 (BinaryExpression -> Expression TIMES Expression .)
    MOD             reduce using rule 9 (BinaryExpression -> Expression TIMES Expression .)
    DOT             reduce using rule 9 (BinaryExpression -> Expression TIMES Expression .)
    LBRACKET        reduce using rule 9 (BinaryExpression -> Expression TIMES Expression .)
    RPAREN          reduce using rule 9 (BinaryExpression -> Expression TIMES Expression .)
    IF              reduce using rule 9 (BinaryExpression -> Expression TIMES Expression .)
    FOR             reduce using rule 9 (BinaryExpression -> Expression TIMES Expression .)
    WHILE           reduce using rule 9 (BinaryExpression -> Expression TIMES Expression .)
    BREAK           reduce using rule 9 (BinaryExpression -> Expression TIMES Expression .)
    RETURN          reduce using rule 9 (BinaryExpression -> Expression TIMES Expression .)
    ;               reduce using rule 9 (BinaryExpression -> Expression TIMES Expression .)
    LPAREN          reduce using rule 9 (BinaryExpression -> Expression TIMES Expression .)
    AMPERSAND       reduce using rule 9 (BinaryExpression -> Expression TIMES Expression .)
    LBRACE          reduce using rule 9 (BinaryExpression -> Expression TIMES Expression .)
    ID              reduce using rule 9 (BinaryExpression -> Expression TIMES Expression .)
    INTL            reduce using rule 9 (BinaryExpression -> Expression TIMES Expression .)
    BOOLL           reduce using rule 9 (BinaryExpression -> Expression TIMES Expression .)
    RBRACE          reduce using rule 9 (BinaryExpression -> Expression TIMES Expression .)
    RBRACKET        reduce using rule 9 (BinaryExpression -> Expression TIMES Expression .)
    COMMA           reduce using rule 9 (BinaryExpression -> Expression TIMES Expression .)
    LEQ             shift and go to state 83
    GEQ             shift and go to state 84
    LT              shift and go to state 85
    GT              shift and go to state 86
    EQ              shift and go to state 87
    NE              shift and go to state 88

  ! LEQ             [ reduce using rule 9 (BinaryExpression -> Expression TIMES Expression .) ]
  ! GEQ             [ reduce using rule 9 (BinaryExpression -> Expression TIMES Expression .) ]
  ! LT              [ reduce using rule 9 (BinaryExpression -> Expression TIMES Expression .) ]
  ! GT              [ reduce using rule 9 (BinaryExpression -> Expression TIMES Expression .) ]
  ! EQ              [ reduce using rule 9 (BinaryExpression -> Expression TIMES Expression .) ]
  ! NE              [ reduce using rule 9 (BinaryExpression -> Expression TIMES Expression .) ]
  ! PLUS            [ shift and go to state 78 ]
  ! MINUS           [ shift and go to state 79 ]
  ! TIMES           [ shift and go to state 80 ]
  ! DIVIDE          [ shift and go to state 81 ]
  ! MOD             [ shift and go to state 82 ]
  ! DOT             [ shift and go to state 89 ]
  ! LBRACKET        [ shift and go to state 90 ]


state 109

    (10) BinaryExpression -> Expression DIVIDE Expression .
    (7) BinaryExpression -> Expression . PLUS Expression
    (8) BinaryExpression -> Expression . MINUS Expression
    (9) BinaryExpression -> Expression . TIMES Expression
    (10) BinaryExpression -> Expression . DIVIDE Expression
    (11) BinaryExpression -> Expression . MOD Expression
    (12) BinaryExpression -> Expression . LEQ Expression
    (13) BinaryExpression -> Expression . GEQ Expression
    (14) BinaryExpression -> Expression . LT Expression
    (15) BinaryExpression -> Expression . GT Expression
    (16) BinaryExpression -> Expression . EQ Expression
    (17) BinaryExpression -> Expression . NE Expression
    (18) BinaryExpression -> Expression . DOT Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET

    SEMICOLON       reduce using rule 10 (BinaryExpression -> Expression DIVIDE Expression .)
    ASSIGNMENT      reduce using rule 10 (BinaryExpression -> Expression DIVIDE Expression .)
    PLUS            reduce using rule 10 (BinaryExpression -> Expression DIVIDE Expression .)
    MINUS           reduce using rule 10 (BinaryExpression -> Expression DIVIDE Expression .)
    TIMES           reduce using rule 10 (BinaryExpression -> Expression DIVIDE Expression .)
    DIVIDE          reduce using rule 10 (BinaryExpression -> Expression DIVIDE Expression .)
    MOD             reduce using rule 10 (BinaryExpression -> Expression DIVIDE Expression .)
    DOT             reduce using rule 10 (BinaryExpression -> Expression DIVIDE Expression .)
    LBRACKET        reduce using rule 10 (BinaryExpression -> Expression DIVIDE Expression .)
    RPAREN          reduce using rule 10 (BinaryExpression -> Expression DIVIDE Expression .)
    IF              reduce using rule 10 (BinaryExpression -> Expression DIVIDE Expression .)
    FOR             reduce using rule 10 (BinaryExpression -> Expression DIVIDE Expression .)
    WHILE           reduce using rule 10 (BinaryExpression -> Expression DIVIDE Expression .)
    BREAK           reduce using rule 10 (BinaryExpression -> Expression DIVIDE Expression .)
    RETURN          reduce using rule 10 (BinaryExpression -> Expression DIVIDE Expression .)
    ;               reduce using rule 10 (BinaryExpression -> Expression DIVIDE Expression .)
    LPAREN          reduce using rule 10 (BinaryExpression -> Expression DIVIDE Expression .)
    AMPERSAND       reduce using rule 10 (BinaryExpression -> Expression DIVIDE Expression .)
    LBRACE          reduce using rule 10 (BinaryExpression -> Expression DIVIDE Expression .)
    ID              reduce using rule 10 (BinaryExpression -> Expression DIVIDE Expression .)
    INTL            reduce using rule 10 (BinaryExpression -> Expression DIVIDE Expression .)
    BOOLL           reduce using rule 10 (BinaryExpression -> Expression DIVIDE Expression .)
    RBRACE          reduce using rule 10 (BinaryExpression -> Expression DIVIDE Expression .)
    RBRACKET        reduce using rule 10 (BinaryExpression -> Expression DIVIDE Expression .)
    COMMA           reduce using rule 10 (BinaryExpression -> Expression DIVIDE Expression .)
    LEQ             shift and go to state 83
    GEQ             shift and go to state 84
    LT              shift and go to state 85
    GT              shift and go to state 86
    EQ              shift and go to state 87
    NE              shift and go to state 88

  ! LEQ             [ reduce using rule 10 (BinaryExpression -> Expression DIVIDE Expression .) ]
  ! GEQ             [ reduce using rule 10 (BinaryExpression -> Expression DIVIDE Expression .) ]
  ! LT              [ reduce using rule 10 (BinaryExpression -> Expression DIVIDE Expression .) ]
  ! GT              [ reduce using rule 10 (BinaryExpression -> Expression DIVIDE Expression .) ]
  ! EQ              [ reduce using rule 10 (BinaryExpression -> Expression DIVIDE Expression .) ]
  ! NE              [ reduce using rule 10 (BinaryExpression -> Expression DIVIDE Expression .) ]
  ! PLUS            [ shift and go to state 78 ]
  ! MINUS           [ shift and go to state 79 ]
  ! TIMES           [ shift and go to state 80 ]
  ! DIVIDE          [ shift and go to state 81 ]
  ! MOD             [ shift and go to state 82 ]
  ! DOT             [ shift and go to state 89 ]
  ! LBRACKET        [ shift and go to state 90 ]


state 110

    (11) BinaryExpression -> Expression MOD Expression .
    (7) BinaryExpression -> Expression . PLUS Expression
    (8) BinaryExpression -> Expression . MINUS Expression
    (9) BinaryExpression -> Expression . TIMES Expression
    (10) BinaryExpression -> Expression . DIVIDE Expression
    (11) BinaryExpression -> Expression . MOD Expression
    (12) BinaryExpression -> Expression . LEQ Expression
    (13) BinaryExpression -> Expression . GEQ Expression
    (14) BinaryExpression -> Expression . LT Expression
    (15) BinaryExpression -> Expression . GT Expression
    (16) BinaryExpression -> Expression . EQ Expression
    (17) BinaryExpression -> Expression . NE Expression
    (18) BinaryExpression -> Expression . DOT Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET

    SEMICOLON       reduce using rule 11 (BinaryExpression -> Expression MOD Expression .)
    ASSIGNMENT      reduce using rule 11 (BinaryExpression -> Expression MOD Expression .)
    PLUS            reduce using rule 11 (BinaryExpression -> Expression MOD Expression .)
    MINUS           reduce using rule 11 (BinaryExpression -> Expression MOD Expression .)
    TIMES           reduce using rule 11 (BinaryExpression -> Expression MOD Expression .)
    DIVIDE          reduce using rule 11 (BinaryExpression -> Expression MOD Expression .)
    MOD             reduce using rule 11 (BinaryExpression -> Expression MOD Expression .)
    DOT             reduce using rule 11 (BinaryExpression -> Expression MOD Expression .)
    LBRACKET        reduce using rule 11 (BinaryExpression -> Expression MOD Expression .)
    RPAREN          reduce using rule 11 (BinaryExpression -> Expression MOD Expression .)
    IF              reduce using rule 11 (BinaryExpression -> Expression MOD Expression .)
    FOR             reduce using rule 11 (BinaryExpression -> Expression MOD Expression .)
    WHILE           reduce using rule 11 (BinaryExpression -> Expression MOD Expression .)
    BREAK           reduce using rule 11 (BinaryExpression -> Expression MOD Expression .)
    RETURN          reduce using rule 11 (BinaryExpression -> Expression MOD Expression .)
    ;               reduce using rule 11 (BinaryExpression -> Expression MOD Expression .)
    LPAREN          reduce using rule 11 (BinaryExpression -> Expression MOD Expression .)
    AMPERSAND       reduce using rule 11 (BinaryExpression -> Expression MOD Expression .)
    LBRACE          reduce using rule 11 (BinaryExpression -> Expression MOD Expression .)
    ID              reduce using rule 11 (BinaryExpression -> Expression MOD Expression .)
    INTL            reduce using rule 11 (BinaryExpression -> Expression MOD Expression .)
    BOOLL           reduce using rule 11 (BinaryExpression -> Expression MOD Expression .)
    RBRACE          reduce using rule 11 (BinaryExpression -> Expression MOD Expression .)
    RBRACKET        reduce using rule 11 (BinaryExpression -> Expression MOD Expression .)
    COMMA           reduce using rule 11 (BinaryExpression -> Expression MOD Expression .)
    LEQ             shift and go to state 83
    GEQ             shift and go to state 84
    LT              shift and go to state 85
    GT              shift and go to state 86
    EQ              shift and go to state 87
    NE              shift and go to state 88

  ! LEQ             [ reduce using rule 11 (BinaryExpression -> Expression MOD Expression .) ]
  ! GEQ             [ reduce using rule 11 (BinaryExpression -> Expression MOD Expression .) ]
  ! LT              [ reduce using rule 11 (BinaryExpression -> Expression MOD Expression .) ]
  ! GT              [ reduce using rule 11 (BinaryExpression -> Expression MOD Expression .) ]
  ! EQ              [ reduce using rule 11 (BinaryExpression -> Expression MOD Expression .) ]
  ! NE              [ reduce using rule 11 (BinaryExpression -> Expression MOD Expression .) ]
  ! PLUS            [ shift and go to state 78 ]
  ! MINUS           [ shift and go to state 79 ]
  ! TIMES           [ shift and go to state 80 ]
  ! DIVIDE          [ shift and go to state 81 ]
  ! MOD             [ shift and go to state 82 ]
  ! DOT             [ shift and go to state 89 ]
  ! LBRACKET        [ shift and go to state 90 ]


state 111

    (12) BinaryExpression -> Expression LEQ Expression .
    (7) BinaryExpression -> Expression . PLUS Expression
    (8) BinaryExpression -> Expression . MINUS Expression
    (9) BinaryExpression -> Expression . TIMES Expression
    (10) BinaryExpression -> Expression . DIVIDE Expression
    (11) BinaryExpression -> Expression . MOD Expression
    (12) BinaryExpression -> Expression . LEQ Expression
    (13) BinaryExpression -> Expression . GEQ Expression
    (14) BinaryExpression -> Expression . LT Expression
    (15) BinaryExpression -> Expression . GT Expression
    (16) BinaryExpression -> Expression . EQ Expression
    (17) BinaryExpression -> Expression . NE Expression
    (18) BinaryExpression -> Expression . DOT Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET

    SEMICOLON       reduce using rule 12 (BinaryExpression -> Expression LEQ Expression .)
    ASSIGNMENT      reduce using rule 12 (BinaryExpression -> Expression LEQ Expression .)
    PLUS            reduce using rule 12 (BinaryExpression -> Expression LEQ Expression .)
    MINUS           reduce using rule 12 (BinaryExpression -> Expression LEQ Expression .)
    TIMES           reduce using rule 12 (BinaryExpression -> Expression LEQ Expression .)
    DIVIDE          reduce using rule 12 (BinaryExpression -> Expression LEQ Expression .)
    MOD             reduce using rule 12 (BinaryExpression -> Expression LEQ Expression .)
    LEQ             reduce using rule 12 (BinaryExpression -> Expression LEQ Expression .)
    GEQ             reduce using rule 12 (BinaryExpression -> Expression LEQ Expression .)
    LT              reduce using rule 12 (BinaryExpression -> Expression LEQ Expression .)
    GT              reduce using rule 12 (BinaryExpression -> Expression LEQ Expression .)
    EQ              reduce using rule 12 (BinaryExpression -> Expression LEQ Expression .)
    NE              reduce using rule 12 (BinaryExpression -> Expression LEQ Expression .)
    DOT             reduce using rule 12 (BinaryExpression -> Expression LEQ Expression .)
    LBRACKET        reduce using rule 12 (BinaryExpression -> Expression LEQ Expression .)
    RPAREN          reduce using rule 12 (BinaryExpression -> Expression LEQ Expression .)
    IF              reduce using rule 12 (BinaryExpression -> Expression LEQ Expression .)
    FOR             reduce using rule 12 (BinaryExpression -> Expression LEQ Expression .)
    WHILE           reduce using rule 12 (BinaryExpression -> Expression LEQ Expression .)
    BREAK           reduce using rule 12 (BinaryExpression -> Expression LEQ Expression .)
    RETURN          reduce using rule 12 (BinaryExpression -> Expression LEQ Expression .)
    ;               reduce using rule 12 (BinaryExpression -> Expression LEQ Expression .)
    LPAREN          reduce using rule 12 (BinaryExpression -> Expression LEQ Expression .)
    AMPERSAND       reduce using rule 12 (BinaryExpression -> Expression LEQ Expression .)
    LBRACE          reduce using rule 12 (BinaryExpression -> Expression LEQ Expression .)
    ID              reduce using rule 12 (BinaryExpression -> Expression LEQ Expression .)
    INTL            reduce using rule 12 (BinaryExpression -> Expression LEQ Expression .)
    BOOLL           reduce using rule 12 (BinaryExpression -> Expression LEQ Expression .)
    RBRACE          reduce using rule 12 (BinaryExpression -> Expression LEQ Expression .)
    RBRACKET        reduce using rule 12 (BinaryExpression -> Expression LEQ Expression .)
    COMMA           reduce using rule 12 (BinaryExpression -> Expression LEQ Expression .)

  ! PLUS            [ shift and go to state 78 ]
  ! MINUS           [ shift and go to state 79 ]
  ! TIMES           [ shift and go to state 80 ]
  ! DIVIDE          [ shift and go to state 81 ]
  ! MOD             [ shift and go to state 82 ]
  ! LEQ             [ shift and go to state 83 ]
  ! GEQ             [ shift and go to state 84 ]
  ! LT              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! EQ              [ shift and go to state 87 ]
  ! NE              [ shift and go to state 88 ]
  ! DOT             [ shift and go to state 89 ]
  ! LBRACKET        [ shift and go to state 90 ]


state 112

    (13) BinaryExpression -> Expression GEQ Expression .
    (7) BinaryExpression -> Expression . PLUS Expression
    (8) BinaryExpression -> Expression . MINUS Expression
    (9) BinaryExpression -> Expression . TIMES Expression
    (10) BinaryExpression -> Expression . DIVIDE Expression
    (11) BinaryExpression -> Expression . MOD Expression
    (12) BinaryExpression -> Expression . LEQ Expression
    (13) BinaryExpression -> Expression . GEQ Expression
    (14) BinaryExpression -> Expression . LT Expression
    (15) BinaryExpression -> Expression . GT Expression
    (16) BinaryExpression -> Expression . EQ Expression
    (17) BinaryExpression -> Expression . NE Expression
    (18) BinaryExpression -> Expression . DOT Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET

    SEMICOLON       reduce using rule 13 (BinaryExpression -> Expression GEQ Expression .)
    ASSIGNMENT      reduce using rule 13 (BinaryExpression -> Expression GEQ Expression .)
    PLUS            reduce using rule 13 (BinaryExpression -> Expression GEQ Expression .)
    MINUS           reduce using rule 13 (BinaryExpression -> Expression GEQ Expression .)
    TIMES           reduce using rule 13 (BinaryExpression -> Expression GEQ Expression .)
    DIVIDE          reduce using rule 13 (BinaryExpression -> Expression GEQ Expression .)
    MOD             reduce using rule 13 (BinaryExpression -> Expression GEQ Expression .)
    LEQ             reduce using rule 13 (BinaryExpression -> Expression GEQ Expression .)
    GEQ             reduce using rule 13 (BinaryExpression -> Expression GEQ Expression .)
    LT              reduce using rule 13 (BinaryExpression -> Expression GEQ Expression .)
    GT              reduce using rule 13 (BinaryExpression -> Expression GEQ Expression .)
    EQ              reduce using rule 13 (BinaryExpression -> Expression GEQ Expression .)
    NE              reduce using rule 13 (BinaryExpression -> Expression GEQ Expression .)
    DOT             reduce using rule 13 (BinaryExpression -> Expression GEQ Expression .)
    LBRACKET        reduce using rule 13 (BinaryExpression -> Expression GEQ Expression .)
    RPAREN          reduce using rule 13 (BinaryExpression -> Expression GEQ Expression .)
    IF              reduce using rule 13 (BinaryExpression -> Expression GEQ Expression .)
    FOR             reduce using rule 13 (BinaryExpression -> Expression GEQ Expression .)
    WHILE           reduce using rule 13 (BinaryExpression -> Expression GEQ Expression .)
    BREAK           reduce using rule 13 (BinaryExpression -> Expression GEQ Expression .)
    RETURN          reduce using rule 13 (BinaryExpression -> Expression GEQ Expression .)
    ;               reduce using rule 13 (BinaryExpression -> Expression GEQ Expression .)
    LPAREN          reduce using rule 13 (BinaryExpression -> Expression GEQ Expression .)
    AMPERSAND       reduce using rule 13 (BinaryExpression -> Expression GEQ Expression .)
    LBRACE          reduce using rule 13 (BinaryExpression -> Expression GEQ Expression .)
    ID              reduce using rule 13 (BinaryExpression -> Expression GEQ Expression .)
    INTL            reduce using rule 13 (BinaryExpression -> Expression GEQ Expression .)
    BOOLL           reduce using rule 13 (BinaryExpression -> Expression GEQ Expression .)
    RBRACE          reduce using rule 13 (BinaryExpression -> Expression GEQ Expression .)
    RBRACKET        reduce using rule 13 (BinaryExpression -> Expression GEQ Expression .)
    COMMA           reduce using rule 13 (BinaryExpression -> Expression GEQ Expression .)

  ! PLUS            [ shift and go to state 78 ]
  ! MINUS           [ shift and go to state 79 ]
  ! TIMES           [ shift and go to state 80 ]
  ! DIVIDE          [ shift and go to state 81 ]
  ! MOD             [ shift and go to state 82 ]
  ! LEQ             [ shift and go to state 83 ]
  ! GEQ             [ shift and go to state 84 ]
  ! LT              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! EQ              [ shift and go to state 87 ]
  ! NE              [ shift and go to state 88 ]
  ! DOT             [ shift and go to state 89 ]
  ! LBRACKET        [ shift and go to state 90 ]


state 113

    (14) BinaryExpression -> Expression LT Expression .
    (7) BinaryExpression -> Expression . PLUS Expression
    (8) BinaryExpression -> Expression . MINUS Expression
    (9) BinaryExpression -> Expression . TIMES Expression
    (10) BinaryExpression -> Expression . DIVIDE Expression
    (11) BinaryExpression -> Expression . MOD Expression
    (12) BinaryExpression -> Expression . LEQ Expression
    (13) BinaryExpression -> Expression . GEQ Expression
    (14) BinaryExpression -> Expression . LT Expression
    (15) BinaryExpression -> Expression . GT Expression
    (16) BinaryExpression -> Expression . EQ Expression
    (17) BinaryExpression -> Expression . NE Expression
    (18) BinaryExpression -> Expression . DOT Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET

    SEMICOLON       reduce using rule 14 (BinaryExpression -> Expression LT Expression .)
    ASSIGNMENT      reduce using rule 14 (BinaryExpression -> Expression LT Expression .)
    PLUS            reduce using rule 14 (BinaryExpression -> Expression LT Expression .)
    MINUS           reduce using rule 14 (BinaryExpression -> Expression LT Expression .)
    TIMES           reduce using rule 14 (BinaryExpression -> Expression LT Expression .)
    DIVIDE          reduce using rule 14 (BinaryExpression -> Expression LT Expression .)
    MOD             reduce using rule 14 (BinaryExpression -> Expression LT Expression .)
    LEQ             reduce using rule 14 (BinaryExpression -> Expression LT Expression .)
    GEQ             reduce using rule 14 (BinaryExpression -> Expression LT Expression .)
    LT              reduce using rule 14 (BinaryExpression -> Expression LT Expression .)
    GT              reduce using rule 14 (BinaryExpression -> Expression LT Expression .)
    EQ              reduce using rule 14 (BinaryExpression -> Expression LT Expression .)
    NE              reduce using rule 14 (BinaryExpression -> Expression LT Expression .)
    DOT             reduce using rule 14 (BinaryExpression -> Expression LT Expression .)
    LBRACKET        reduce using rule 14 (BinaryExpression -> Expression LT Expression .)
    RPAREN          reduce using rule 14 (BinaryExpression -> Expression LT Expression .)
    IF              reduce using rule 14 (BinaryExpression -> Expression LT Expression .)
    FOR             reduce using rule 14 (BinaryExpression -> Expression LT Expression .)
    WHILE           reduce using rule 14 (BinaryExpression -> Expression LT Expression .)
    BREAK           reduce using rule 14 (BinaryExpression -> Expression LT Expression .)
    RETURN          reduce using rule 14 (BinaryExpression -> Expression LT Expression .)
    ;               reduce using rule 14 (BinaryExpression -> Expression LT Expression .)
    LPAREN          reduce using rule 14 (BinaryExpression -> Expression LT Expression .)
    AMPERSAND       reduce using rule 14 (BinaryExpression -> Expression LT Expression .)
    LBRACE          reduce using rule 14 (BinaryExpression -> Expression LT Expression .)
    ID              reduce using rule 14 (BinaryExpression -> Expression LT Expression .)
    INTL            reduce using rule 14 (BinaryExpression -> Expression LT Expression .)
    BOOLL           reduce using rule 14 (BinaryExpression -> Expression LT Expression .)
    RBRACE          reduce using rule 14 (BinaryExpression -> Expression LT Expression .)
    RBRACKET        reduce using rule 14 (BinaryExpression -> Expression LT Expression .)
    COMMA           reduce using rule 14 (BinaryExpression -> Expression LT Expression .)

  ! PLUS            [ shift and go to state 78 ]
  ! MINUS           [ shift and go to state 79 ]
  ! TIMES           [ shift and go to state 80 ]
  ! DIVIDE          [ shift and go to state 81 ]
  ! MOD             [ shift and go to state 82 ]
  ! LEQ             [ shift and go to state 83 ]
  ! GEQ             [ shift and go to state 84 ]
  ! LT              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! EQ              [ shift and go to state 87 ]
  ! NE              [ shift and go to state 88 ]
  ! DOT             [ shift and go to state 89 ]
  ! LBRACKET        [ shift and go to state 90 ]


state 114

    (15) BinaryExpression -> Expression GT Expression .
    (7) BinaryExpression -> Expression . PLUS Expression
    (8) BinaryExpression -> Expression . MINUS Expression
    (9) BinaryExpression -> Expression . TIMES Expression
    (10) BinaryExpression -> Expression . DIVIDE Expression
    (11) BinaryExpression -> Expression . MOD Expression
    (12) BinaryExpression -> Expression . LEQ Expression
    (13) BinaryExpression -> Expression . GEQ Expression
    (14) BinaryExpression -> Expression . LT Expression
    (15) BinaryExpression -> Expression . GT Expression
    (16) BinaryExpression -> Expression . EQ Expression
    (17) BinaryExpression -> Expression . NE Expression
    (18) BinaryExpression -> Expression . DOT Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET

    SEMICOLON       reduce using rule 15 (BinaryExpression -> Expression GT Expression .)
    ASSIGNMENT      reduce using rule 15 (BinaryExpression -> Expression GT Expression .)
    PLUS            reduce using rule 15 (BinaryExpression -> Expression GT Expression .)
    MINUS           reduce using rule 15 (BinaryExpression -> Expression GT Expression .)
    TIMES           reduce using rule 15 (BinaryExpression -> Expression GT Expression .)
    DIVIDE          reduce using rule 15 (BinaryExpression -> Expression GT Expression .)
    MOD             reduce using rule 15 (BinaryExpression -> Expression GT Expression .)
    LEQ             reduce using rule 15 (BinaryExpression -> Expression GT Expression .)
    GEQ             reduce using rule 15 (BinaryExpression -> Expression GT Expression .)
    LT              reduce using rule 15 (BinaryExpression -> Expression GT Expression .)
    GT              reduce using rule 15 (BinaryExpression -> Expression GT Expression .)
    EQ              reduce using rule 15 (BinaryExpression -> Expression GT Expression .)
    NE              reduce using rule 15 (BinaryExpression -> Expression GT Expression .)
    DOT             reduce using rule 15 (BinaryExpression -> Expression GT Expression .)
    LBRACKET        reduce using rule 15 (BinaryExpression -> Expression GT Expression .)
    RPAREN          reduce using rule 15 (BinaryExpression -> Expression GT Expression .)
    IF              reduce using rule 15 (BinaryExpression -> Expression GT Expression .)
    FOR             reduce using rule 15 (BinaryExpression -> Expression GT Expression .)
    WHILE           reduce using rule 15 (BinaryExpression -> Expression GT Expression .)
    BREAK           reduce using rule 15 (BinaryExpression -> Expression GT Expression .)
    RETURN          reduce using rule 15 (BinaryExpression -> Expression GT Expression .)
    ;               reduce using rule 15 (BinaryExpression -> Expression GT Expression .)
    LPAREN          reduce using rule 15 (BinaryExpression -> Expression GT Expression .)
    AMPERSAND       reduce using rule 15 (BinaryExpression -> Expression GT Expression .)
    LBRACE          reduce using rule 15 (BinaryExpression -> Expression GT Expression .)
    ID              reduce using rule 15 (BinaryExpression -> Expression GT Expression .)
    INTL            reduce using rule 15 (BinaryExpression -> Expression GT Expression .)
    BOOLL           reduce using rule 15 (BinaryExpression -> Expression GT Expression .)
    RBRACE          reduce using rule 15 (BinaryExpression -> Expression GT Expression .)
    RBRACKET        reduce using rule 15 (BinaryExpression -> Expression GT Expression .)
    COMMA           reduce using rule 15 (BinaryExpression -> Expression GT Expression .)

  ! PLUS            [ shift and go to state 78 ]
  ! MINUS           [ shift and go to state 79 ]
  ! TIMES           [ shift and go to state 80 ]
  ! DIVIDE          [ shift and go to state 81 ]
  ! MOD             [ shift and go to state 82 ]
  ! LEQ             [ shift and go to state 83 ]
  ! GEQ             [ shift and go to state 84 ]
  ! LT              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! EQ              [ shift and go to state 87 ]
  ! NE              [ shift and go to state 88 ]
  ! DOT             [ shift and go to state 89 ]
  ! LBRACKET        [ shift and go to state 90 ]


state 115

    (16) BinaryExpression -> Expression EQ Expression .
    (7) BinaryExpression -> Expression . PLUS Expression
    (8) BinaryExpression -> Expression . MINUS Expression
    (9) BinaryExpression -> Expression . TIMES Expression
    (10) BinaryExpression -> Expression . DIVIDE Expression
    (11) BinaryExpression -> Expression . MOD Expression
    (12) BinaryExpression -> Expression . LEQ Expression
    (13) BinaryExpression -> Expression . GEQ Expression
    (14) BinaryExpression -> Expression . LT Expression
    (15) BinaryExpression -> Expression . GT Expression
    (16) BinaryExpression -> Expression . EQ Expression
    (17) BinaryExpression -> Expression . NE Expression
    (18) BinaryExpression -> Expression . DOT Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET

    SEMICOLON       reduce using rule 16 (BinaryExpression -> Expression EQ Expression .)
    ASSIGNMENT      reduce using rule 16 (BinaryExpression -> Expression EQ Expression .)
    PLUS            reduce using rule 16 (BinaryExpression -> Expression EQ Expression .)
    MINUS           reduce using rule 16 (BinaryExpression -> Expression EQ Expression .)
    TIMES           reduce using rule 16 (BinaryExpression -> Expression EQ Expression .)
    DIVIDE          reduce using rule 16 (BinaryExpression -> Expression EQ Expression .)
    MOD             reduce using rule 16 (BinaryExpression -> Expression EQ Expression .)
    LEQ             reduce using rule 16 (BinaryExpression -> Expression EQ Expression .)
    GEQ             reduce using rule 16 (BinaryExpression -> Expression EQ Expression .)
    LT              reduce using rule 16 (BinaryExpression -> Expression EQ Expression .)
    GT              reduce using rule 16 (BinaryExpression -> Expression EQ Expression .)
    EQ              reduce using rule 16 (BinaryExpression -> Expression EQ Expression .)
    NE              reduce using rule 16 (BinaryExpression -> Expression EQ Expression .)
    DOT             reduce using rule 16 (BinaryExpression -> Expression EQ Expression .)
    LBRACKET        reduce using rule 16 (BinaryExpression -> Expression EQ Expression .)
    RPAREN          reduce using rule 16 (BinaryExpression -> Expression EQ Expression .)
    IF              reduce using rule 16 (BinaryExpression -> Expression EQ Expression .)
    FOR             reduce using rule 16 (BinaryExpression -> Expression EQ Expression .)
    WHILE           reduce using rule 16 (BinaryExpression -> Expression EQ Expression .)
    BREAK           reduce using rule 16 (BinaryExpression -> Expression EQ Expression .)
    RETURN          reduce using rule 16 (BinaryExpression -> Expression EQ Expression .)
    ;               reduce using rule 16 (BinaryExpression -> Expression EQ Expression .)
    LPAREN          reduce using rule 16 (BinaryExpression -> Expression EQ Expression .)
    AMPERSAND       reduce using rule 16 (BinaryExpression -> Expression EQ Expression .)
    LBRACE          reduce using rule 16 (BinaryExpression -> Expression EQ Expression .)
    ID              reduce using rule 16 (BinaryExpression -> Expression EQ Expression .)
    INTL            reduce using rule 16 (BinaryExpression -> Expression EQ Expression .)
    BOOLL           reduce using rule 16 (BinaryExpression -> Expression EQ Expression .)
    RBRACE          reduce using rule 16 (BinaryExpression -> Expression EQ Expression .)
    RBRACKET        reduce using rule 16 (BinaryExpression -> Expression EQ Expression .)
    COMMA           reduce using rule 16 (BinaryExpression -> Expression EQ Expression .)

  ! PLUS            [ shift and go to state 78 ]
  ! MINUS           [ shift and go to state 79 ]
  ! TIMES           [ shift and go to state 80 ]
  ! DIVIDE          [ shift and go to state 81 ]
  ! MOD             [ shift and go to state 82 ]
  ! LEQ             [ shift and go to state 83 ]
  ! GEQ             [ shift and go to state 84 ]
  ! LT              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! EQ              [ shift and go to state 87 ]
  ! NE              [ shift and go to state 88 ]
  ! DOT             [ shift and go to state 89 ]
  ! LBRACKET        [ shift and go to state 90 ]


state 116

    (17) BinaryExpression -> Expression NE Expression .
    (7) BinaryExpression -> Expression . PLUS Expression
    (8) BinaryExpression -> Expression . MINUS Expression
    (9) BinaryExpression -> Expression . TIMES Expression
    (10) BinaryExpression -> Expression . DIVIDE Expression
    (11) BinaryExpression -> Expression . MOD Expression
    (12) BinaryExpression -> Expression . LEQ Expression
    (13) BinaryExpression -> Expression . GEQ Expression
    (14) BinaryExpression -> Expression . LT Expression
    (15) BinaryExpression -> Expression . GT Expression
    (16) BinaryExpression -> Expression . EQ Expression
    (17) BinaryExpression -> Expression . NE Expression
    (18) BinaryExpression -> Expression . DOT Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET

    SEMICOLON       reduce using rule 17 (BinaryExpression -> Expression NE Expression .)
    ASSIGNMENT      reduce using rule 17 (BinaryExpression -> Expression NE Expression .)
    PLUS            reduce using rule 17 (BinaryExpression -> Expression NE Expression .)
    MINUS           reduce using rule 17 (BinaryExpression -> Expression NE Expression .)
    TIMES           reduce using rule 17 (BinaryExpression -> Expression NE Expression .)
    DIVIDE          reduce using rule 17 (BinaryExpression -> Expression NE Expression .)
    MOD             reduce using rule 17 (BinaryExpression -> Expression NE Expression .)
    LEQ             reduce using rule 17 (BinaryExpression -> Expression NE Expression .)
    GEQ             reduce using rule 17 (BinaryExpression -> Expression NE Expression .)
    LT              reduce using rule 17 (BinaryExpression -> Expression NE Expression .)
    GT              reduce using rule 17 (BinaryExpression -> Expression NE Expression .)
    EQ              reduce using rule 17 (BinaryExpression -> Expression NE Expression .)
    NE              reduce using rule 17 (BinaryExpression -> Expression NE Expression .)
    DOT             reduce using rule 17 (BinaryExpression -> Expression NE Expression .)
    LBRACKET        reduce using rule 17 (BinaryExpression -> Expression NE Expression .)
    RPAREN          reduce using rule 17 (BinaryExpression -> Expression NE Expression .)
    IF              reduce using rule 17 (BinaryExpression -> Expression NE Expression .)
    FOR             reduce using rule 17 (BinaryExpression -> Expression NE Expression .)
    WHILE           reduce using rule 17 (BinaryExpression -> Expression NE Expression .)
    BREAK           reduce using rule 17 (BinaryExpression -> Expression NE Expression .)
    RETURN          reduce using rule 17 (BinaryExpression -> Expression NE Expression .)
    ;               reduce using rule 17 (BinaryExpression -> Expression NE Expression .)
    LPAREN          reduce using rule 17 (BinaryExpression -> Expression NE Expression .)
    AMPERSAND       reduce using rule 17 (BinaryExpression -> Expression NE Expression .)
    LBRACE          reduce using rule 17 (BinaryExpression -> Expression NE Expression .)
    ID              reduce using rule 17 (BinaryExpression -> Expression NE Expression .)
    INTL            reduce using rule 17 (BinaryExpression -> Expression NE Expression .)
    BOOLL           reduce using rule 17 (BinaryExpression -> Expression NE Expression .)
    RBRACE          reduce using rule 17 (BinaryExpression -> Expression NE Expression .)
    RBRACKET        reduce using rule 17 (BinaryExpression -> Expression NE Expression .)
    COMMA           reduce using rule 17 (BinaryExpression -> Expression NE Expression .)

  ! PLUS            [ shift and go to state 78 ]
  ! MINUS           [ shift and go to state 79 ]
  ! TIMES           [ shift and go to state 80 ]
  ! DIVIDE          [ shift and go to state 81 ]
  ! MOD             [ shift and go to state 82 ]
  ! LEQ             [ shift and go to state 83 ]
  ! GEQ             [ shift and go to state 84 ]
  ! LT              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! EQ              [ shift and go to state 87 ]
  ! NE              [ shift and go to state 88 ]
  ! DOT             [ shift and go to state 89 ]
  ! LBRACKET        [ shift and go to state 90 ]


state 117

    (18) BinaryExpression -> Expression DOT Expression .
    (7) BinaryExpression -> Expression . PLUS Expression
    (8) BinaryExpression -> Expression . MINUS Expression
    (9) BinaryExpression -> Expression . TIMES Expression
    (10) BinaryExpression -> Expression . DIVIDE Expression
    (11) BinaryExpression -> Expression . MOD Expression
    (12) BinaryExpression -> Expression . LEQ Expression
    (13) BinaryExpression -> Expression . GEQ Expression
    (14) BinaryExpression -> Expression . LT Expression
    (15) BinaryExpression -> Expression . GT Expression
    (16) BinaryExpression -> Expression . EQ Expression
    (17) BinaryExpression -> Expression . NE Expression
    (18) BinaryExpression -> Expression . DOT Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LEQ resolved as shift
  ! shift/reduce conflict for GEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    SEMICOLON       reduce using rule 18 (BinaryExpression -> Expression DOT Expression .)
    ASSIGNMENT      reduce using rule 18 (BinaryExpression -> Expression DOT Expression .)
    RPAREN          reduce using rule 18 (BinaryExpression -> Expression DOT Expression .)
    IF              reduce using rule 18 (BinaryExpression -> Expression DOT Expression .)
    FOR             reduce using rule 18 (BinaryExpression -> Expression DOT Expression .)
    WHILE           reduce using rule 18 (BinaryExpression -> Expression DOT Expression .)
    BREAK           reduce using rule 18 (BinaryExpression -> Expression DOT Expression .)
    RETURN          reduce using rule 18 (BinaryExpression -> Expression DOT Expression .)
    ;               reduce using rule 18 (BinaryExpression -> Expression DOT Expression .)
    LPAREN          reduce using rule 18 (BinaryExpression -> Expression DOT Expression .)
    AMPERSAND       reduce using rule 18 (BinaryExpression -> Expression DOT Expression .)
    LBRACE          reduce using rule 18 (BinaryExpression -> Expression DOT Expression .)
    ID              reduce using rule 18 (BinaryExpression -> Expression DOT Expression .)
    INTL            reduce using rule 18 (BinaryExpression -> Expression DOT Expression .)
    BOOLL           reduce using rule 18 (BinaryExpression -> Expression DOT Expression .)
    RBRACE          reduce using rule 18 (BinaryExpression -> Expression DOT Expression .)
    RBRACKET        reduce using rule 18 (BinaryExpression -> Expression DOT Expression .)
    COMMA           reduce using rule 18 (BinaryExpression -> Expression DOT Expression .)
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    TIMES           shift and go to state 80
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 82
    LEQ             shift and go to state 83
    GEQ             shift and go to state 84
    LT              shift and go to state 85
    GT              shift and go to state 86
    EQ              shift and go to state 87
    NE              shift and go to state 88
    DOT             shift and go to state 89
    LBRACKET        shift and go to state 90

  ! PLUS            [ reduce using rule 18 (BinaryExpression -> Expression DOT Expression .) ]
  ! MINUS           [ reduce using rule 18 (BinaryExpression -> Expression DOT Expression .) ]
  ! TIMES           [ reduce using rule 18 (BinaryExpression -> Expression DOT Expression .) ]
  ! DIVIDE          [ reduce using rule 18 (BinaryExpression -> Expression DOT Expression .) ]
  ! MOD             [ reduce using rule 18 (BinaryExpression -> Expression DOT Expression .) ]
  ! LEQ             [ reduce using rule 18 (BinaryExpression -> Expression DOT Expression .) ]
  ! GEQ             [ reduce using rule 18 (BinaryExpression -> Expression DOT Expression .) ]
  ! LT              [ reduce using rule 18 (BinaryExpression -> Expression DOT Expression .) ]
  ! GT              [ reduce using rule 18 (BinaryExpression -> Expression DOT Expression .) ]
  ! EQ              [ reduce using rule 18 (BinaryExpression -> Expression DOT Expression .) ]
  ! NE              [ reduce using rule 18 (BinaryExpression -> Expression DOT Expression .) ]
  ! DOT             [ reduce using rule 18 (BinaryExpression -> Expression DOT Expression .) ]
  ! LBRACKET        [ reduce using rule 18 (BinaryExpression -> Expression DOT Expression .) ]


state 118

    (23) BracketCall -> Expression LBRACKET Expression . RBRACKET
    (7) BinaryExpression -> Expression . PLUS Expression
    (8) BinaryExpression -> Expression . MINUS Expression
    (9) BinaryExpression -> Expression . TIMES Expression
    (10) BinaryExpression -> Expression . DIVIDE Expression
    (11) BinaryExpression -> Expression . MOD Expression
    (12) BinaryExpression -> Expression . LEQ Expression
    (13) BinaryExpression -> Expression . GEQ Expression
    (14) BinaryExpression -> Expression . LT Expression
    (15) BinaryExpression -> Expression . GT Expression
    (16) BinaryExpression -> Expression . EQ Expression
    (17) BinaryExpression -> Expression . NE Expression
    (18) BinaryExpression -> Expression . DOT Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET

    RBRACKET        shift and go to state 133
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    TIMES           shift and go to state 80
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 82
    LEQ             shift and go to state 83
    GEQ             shift and go to state 84
    LT              shift and go to state 85
    GT              shift and go to state 86
    EQ              shift and go to state 87
    NE              shift and go to state 88
    DOT             shift and go to state 89
    LBRACKET        shift and go to state 90


state 119

    (27) DeclarationAssignmentStatement -> Type Id ASSIGNMENT . Expression SEMICOLON
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (7) BinaryExpression -> . Expression PLUS Expression
    (8) BinaryExpression -> . Expression MINUS Expression
    (9) BinaryExpression -> . Expression TIMES Expression
    (10) BinaryExpression -> . Expression DIVIDE Expression
    (11) BinaryExpression -> . Expression MOD Expression
    (12) BinaryExpression -> . Expression LEQ Expression
    (13) BinaryExpression -> . Expression GEQ Expression
    (14) BinaryExpression -> . Expression LT Expression
    (15) BinaryExpression -> . Expression GT Expression
    (16) BinaryExpression -> . Expression EQ Expression
    (17) BinaryExpression -> . Expression NE Expression
    (18) BinaryExpression -> . Expression DOT Expression
    (70) UnaryExpression -> . Id
    (71) UnaryExpression -> . Literal
    (72) UnaryExpression -> . FunctionCall
    (73) UnaryExpression -> . BracketCall
    (74) UnaryExpression -> . LPAREN Expression RPAREN
    (75) UnaryExpression -> . TIMES Expression
    (76) UnaryExpression -> . AMPERSAND Expression
    (38) Id -> . ID
    (41) Literal -> . IntLiteral
    (42) Literal -> . BoolLiteral
    (36) FunctionCall -> . Id LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (40) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL

    LPAREN          shift and go to state 59
    TIMES           shift and go to state 67
    AMPERSAND       shift and go to state 70
    ID              shift and go to state 9
    INTL            shift and go to state 64
    BOOLL           shift and go to state 73

    Id                             shift and go to state 96
    Expression                     shift and go to state 134
    BinaryExpression               shift and go to state 56
    UnaryExpression                shift and go to state 57
    Literal                        shift and go to state 68
    FunctionCall                   shift and go to state 55
    BracketCall                    shift and go to state 69
    IntLiteral                     shift and go to state 71
    BoolLiteral                    shift and go to state 72

state 120

    (29) DeclarationStatement -> Type Id SEMICOLON .

    IF              reduce using rule 29 (DeclarationStatement -> Type Id SEMICOLON .)
    FOR             reduce using rule 29 (DeclarationStatement -> Type Id SEMICOLON .)
    WHILE           reduce using rule 29 (DeclarationStatement -> Type Id SEMICOLON .)
    BREAK           reduce using rule 29 (DeclarationStatement -> Type Id SEMICOLON .)
    RETURN          reduce using rule 29 (DeclarationStatement -> Type Id SEMICOLON .)
    ;               reduce using rule 29 (DeclarationStatement -> Type Id SEMICOLON .)
    LPAREN          reduce using rule 29 (DeclarationStatement -> Type Id SEMICOLON .)
    TIMES           reduce using rule 29 (DeclarationStatement -> Type Id SEMICOLON .)
    AMPERSAND       reduce using rule 29 (DeclarationStatement -> Type Id SEMICOLON .)
    LBRACE          reduce using rule 29 (DeclarationStatement -> Type Id SEMICOLON .)
    ID              reduce using rule 29 (DeclarationStatement -> Type Id SEMICOLON .)
    INTL            reduce using rule 29 (DeclarationStatement -> Type Id SEMICOLON .)
    BOOLL           reduce using rule 29 (DeclarationStatement -> Type Id SEMICOLON .)
    RBRACE          reduce using rule 29 (DeclarationStatement -> Type Id SEMICOLON .)
    RPAREN          reduce using rule 29 (DeclarationStatement -> Type Id SEMICOLON .)


state 121

    (28) DeclarationFunctionCallStatement -> Type FunctionCall SEMICOLON .

    IF              reduce using rule 28 (DeclarationFunctionCallStatement -> Type FunctionCall SEMICOLON .)
    FOR             reduce using rule 28 (DeclarationFunctionCallStatement -> Type FunctionCall SEMICOLON .)
    WHILE           reduce using rule 28 (DeclarationFunctionCallStatement -> Type FunctionCall SEMICOLON .)
    BREAK           reduce using rule 28 (DeclarationFunctionCallStatement -> Type FunctionCall SEMICOLON .)
    RETURN          reduce using rule 28 (DeclarationFunctionCallStatement -> Type FunctionCall SEMICOLON .)
    ;               reduce using rule 28 (DeclarationFunctionCallStatement -> Type FunctionCall SEMICOLON .)
    LPAREN          reduce using rule 28 (DeclarationFunctionCallStatement -> Type FunctionCall SEMICOLON .)
    TIMES           reduce using rule 28 (DeclarationFunctionCallStatement -> Type FunctionCall SEMICOLON .)
    AMPERSAND       reduce using rule 28 (DeclarationFunctionCallStatement -> Type FunctionCall SEMICOLON .)
    LBRACE          reduce using rule 28 (DeclarationFunctionCallStatement -> Type FunctionCall SEMICOLON .)
    ID              reduce using rule 28 (DeclarationFunctionCallStatement -> Type FunctionCall SEMICOLON .)
    INTL            reduce using rule 28 (DeclarationFunctionCallStatement -> Type FunctionCall SEMICOLON .)
    BOOLL           reduce using rule 28 (DeclarationFunctionCallStatement -> Type FunctionCall SEMICOLON .)
    RBRACE          reduce using rule 28 (DeclarationFunctionCallStatement -> Type FunctionCall SEMICOLON .)
    RPAREN          reduce using rule 28 (DeclarationFunctionCallStatement -> Type FunctionCall SEMICOLON .)


state 122

    (36) FunctionCall -> Id LPAREN ArgumentListR . RPAREN

    RPAREN          shift and go to state 135


state 123

    (2) ArgumentListR -> Argument . COMMA ArgumentListR
    (3) ArgumentListR -> Argument .

    COMMA           shift and go to state 136
    RPAREN          reduce using rule 3 (ArgumentListR -> Argument .)


state 124

    (4) ArgumentListR -> empty .

    RPAREN          reduce using rule 4 (ArgumentListR -> empty .)


state 125

    (1) Argument -> Expression .
    (7) BinaryExpression -> Expression . PLUS Expression
    (8) BinaryExpression -> Expression . MINUS Expression
    (9) BinaryExpression -> Expression . TIMES Expression
    (10) BinaryExpression -> Expression . DIVIDE Expression
    (11) BinaryExpression -> Expression . MOD Expression
    (12) BinaryExpression -> Expression . LEQ Expression
    (13) BinaryExpression -> Expression . GEQ Expression
    (14) BinaryExpression -> Expression . LT Expression
    (15) BinaryExpression -> Expression . GT Expression
    (16) BinaryExpression -> Expression . EQ Expression
    (17) BinaryExpression -> Expression . NE Expression
    (18) BinaryExpression -> Expression . DOT Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET

    COMMA           reduce using rule 1 (Argument -> Expression .)
    RPAREN          reduce using rule 1 (Argument -> Expression .)
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    TIMES           shift and go to state 80
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 82
    LEQ             shift and go to state 83
    GEQ             shift and go to state 84
    LT              shift and go to state 85
    GT              shift and go to state 86
    EQ              shift and go to state 87
    NE              shift and go to state 88
    DOT             shift and go to state 89
    LBRACKET        shift and go to state 90


state 126

    (39) IfElseStatement -> IF LPAREN Expression . RPAREN Block ELSE Block
    (7) BinaryExpression -> Expression . PLUS Expression
    (8) BinaryExpression -> Expression . MINUS Expression
    (9) BinaryExpression -> Expression . TIMES Expression
    (10) BinaryExpression -> Expression . DIVIDE Expression
    (11) BinaryExpression -> Expression . MOD Expression
    (12) BinaryExpression -> Expression . LEQ Expression
    (13) BinaryExpression -> Expression . GEQ Expression
    (14) BinaryExpression -> Expression . LT Expression
    (15) BinaryExpression -> Expression . GT Expression
    (16) BinaryExpression -> Expression . EQ Expression
    (17) BinaryExpression -> Expression . NE Expression
    (18) BinaryExpression -> Expression . DOT Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET

    RPAREN          shift and go to state 137
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    TIMES           shift and go to state 80
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 82
    LEQ             shift and go to state 83
    GEQ             shift and go to state 84
    LT              shift and go to state 85
    GT              shift and go to state 86
    EQ              shift and go to state 87
    NE              shift and go to state 88
    DOT             shift and go to state 89
    LBRACKET        shift and go to state 90


state 127

    (74) UnaryExpression -> LPAREN Expression RPAREN .

    SEMICOLON       reduce using rule 74 (UnaryExpression -> LPAREN Expression RPAREN .)
    ASSIGNMENT      reduce using rule 74 (UnaryExpression -> LPAREN Expression RPAREN .)
    PLUS            reduce using rule 74 (UnaryExpression -> LPAREN Expression RPAREN .)
    MINUS           reduce using rule 74 (UnaryExpression -> LPAREN Expression RPAREN .)
    TIMES           reduce using rule 74 (UnaryExpression -> LPAREN Expression RPAREN .)
    DIVIDE          reduce using rule 74 (UnaryExpression -> LPAREN Expression RPAREN .)
    MOD             reduce using rule 74 (UnaryExpression -> LPAREN Expression RPAREN .)
    LEQ             reduce using rule 74 (UnaryExpression -> LPAREN Expression RPAREN .)
    GEQ             reduce using rule 74 (UnaryExpression -> LPAREN Expression RPAREN .)
    LT              reduce using rule 74 (UnaryExpression -> LPAREN Expression RPAREN .)
    GT              reduce using rule 74 (UnaryExpression -> LPAREN Expression RPAREN .)
    EQ              reduce using rule 74 (UnaryExpression -> LPAREN Expression RPAREN .)
    NE              reduce using rule 74 (UnaryExpression -> LPAREN Expression RPAREN .)
    DOT             reduce using rule 74 (UnaryExpression -> LPAREN Expression RPAREN .)
    LBRACKET        reduce using rule 74 (UnaryExpression -> LPAREN Expression RPAREN .)
    RPAREN          reduce using rule 74 (UnaryExpression -> LPAREN Expression RPAREN .)
    IF              reduce using rule 74 (UnaryExpression -> LPAREN Expression RPAREN .)
    FOR             reduce using rule 74 (UnaryExpression -> LPAREN Expression RPAREN .)
    WHILE           reduce using rule 74 (UnaryExpression -> LPAREN Expression RPAREN .)
    BREAK           reduce using rule 74 (UnaryExpression -> LPAREN Expression RPAREN .)
    RETURN          reduce using rule 74 (UnaryExpression -> LPAREN Expression RPAREN .)
    ;               reduce using rule 74 (UnaryExpression -> LPAREN Expression RPAREN .)
    LPAREN          reduce using rule 74 (UnaryExpression -> LPAREN Expression RPAREN .)
    AMPERSAND       reduce using rule 74 (UnaryExpression -> LPAREN Expression RPAREN .)
    LBRACE          reduce using rule 74 (UnaryExpression -> LPAREN Expression RPAREN .)
    ID              reduce using rule 74 (UnaryExpression -> LPAREN Expression RPAREN .)
    INTL            reduce using rule 74 (UnaryExpression -> LPAREN Expression RPAREN .)
    BOOLL           reduce using rule 74 (UnaryExpression -> LPAREN Expression RPAREN .)
    RBRACE          reduce using rule 74 (UnaryExpression -> LPAREN Expression RPAREN .)
    RBRACKET        reduce using rule 74 (UnaryExpression -> LPAREN Expression RPAREN .)
    COMMA           reduce using rule 74 (UnaryExpression -> LPAREN Expression RPAREN .)


state 128

    (35) ForStatement -> FOR LPAREN Statement . Expression SEMICOLON Statement RPAREN Block
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (7) BinaryExpression -> . Expression PLUS Expression
    (8) BinaryExpression -> . Expression MINUS Expression
    (9) BinaryExpression -> . Expression TIMES Expression
    (10) BinaryExpression -> . Expression DIVIDE Expression
    (11) BinaryExpression -> . Expression MOD Expression
    (12) BinaryExpression -> . Expression LEQ Expression
    (13) BinaryExpression -> . Expression GEQ Expression
    (14) BinaryExpression -> . Expression LT Expression
    (15) BinaryExpression -> . Expression GT Expression
    (16) BinaryExpression -> . Expression EQ Expression
    (17) BinaryExpression -> . Expression NE Expression
    (18) BinaryExpression -> . Expression DOT Expression
    (70) UnaryExpression -> . Id
    (71) UnaryExpression -> . Literal
    (72) UnaryExpression -> . FunctionCall
    (73) UnaryExpression -> . BracketCall
    (74) UnaryExpression -> . LPAREN Expression RPAREN
    (75) UnaryExpression -> . TIMES Expression
    (76) UnaryExpression -> . AMPERSAND Expression
    (38) Id -> . ID
    (41) Literal -> . IntLiteral
    (42) Literal -> . BoolLiteral
    (36) FunctionCall -> . Id LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (40) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL

    LPAREN          shift and go to state 59
    TIMES           shift and go to state 67
    AMPERSAND       shift and go to state 70
    ID              shift and go to state 9
    INTL            shift and go to state 64
    BOOLL           shift and go to state 73

    Expression                     shift and go to state 138
    BinaryExpression               shift and go to state 56
    UnaryExpression                shift and go to state 57
    Id                             shift and go to state 96
    Literal                        shift and go to state 68
    FunctionCall                   shift and go to state 55
    BracketCall                    shift and go to state 69
    IntLiteral                     shift and go to state 71
    BoolLiteral                    shift and go to state 72

state 129

    (77) WhileStatement -> WHILE LPAREN Expression . RPAREN Block
    (7) BinaryExpression -> Expression . PLUS Expression
    (8) BinaryExpression -> Expression . MINUS Expression
    (9) BinaryExpression -> Expression . TIMES Expression
    (10) BinaryExpression -> Expression . DIVIDE Expression
    (11) BinaryExpression -> Expression . MOD Expression
    (12) BinaryExpression -> Expression . LEQ Expression
    (13) BinaryExpression -> Expression . GEQ Expression
    (14) BinaryExpression -> Expression . LT Expression
    (15) BinaryExpression -> Expression . GT Expression
    (16) BinaryExpression -> Expression . EQ Expression
    (17) BinaryExpression -> Expression . NE Expression
    (18) BinaryExpression -> Expression . DOT Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET

    RPAREN          shift and go to state 139
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    TIMES           shift and go to state 80
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 82
    LEQ             shift and go to state 83
    GEQ             shift and go to state 84
    LT              shift and go to state 85
    GT              shift and go to state 86
    EQ              shift and go to state 87
    NE              shift and go to state 88
    DOT             shift and go to state 89
    LBRACKET        shift and go to state 90


state 130

    (24) BreakStatement -> BREAK INTL SEMICOLON .

    IF              reduce using rule 24 (BreakStatement -> BREAK INTL SEMICOLON .)
    FOR             reduce using rule 24 (BreakStatement -> BREAK INTL SEMICOLON .)
    WHILE           reduce using rule 24 (BreakStatement -> BREAK INTL SEMICOLON .)
    BREAK           reduce using rule 24 (BreakStatement -> BREAK INTL SEMICOLON .)
    RETURN          reduce using rule 24 (BreakStatement -> BREAK INTL SEMICOLON .)
    ;               reduce using rule 24 (BreakStatement -> BREAK INTL SEMICOLON .)
    LPAREN          reduce using rule 24 (BreakStatement -> BREAK INTL SEMICOLON .)
    TIMES           reduce using rule 24 (BreakStatement -> BREAK INTL SEMICOLON .)
    AMPERSAND       reduce using rule 24 (BreakStatement -> BREAK INTL SEMICOLON .)
    LBRACE          reduce using rule 24 (BreakStatement -> BREAK INTL SEMICOLON .)
    ID              reduce using rule 24 (BreakStatement -> BREAK INTL SEMICOLON .)
    INTL            reduce using rule 24 (BreakStatement -> BREAK INTL SEMICOLON .)
    BOOLL           reduce using rule 24 (BreakStatement -> BREAK INTL SEMICOLON .)
    RBRACE          reduce using rule 24 (BreakStatement -> BREAK INTL SEMICOLON .)
    RPAREN          reduce using rule 24 (BreakStatement -> BREAK INTL SEMICOLON .)


state 131

    (49) ReturnStatement -> RETURN Expression SEMICOLON .

    IF              reduce using rule 49 (ReturnStatement -> RETURN Expression SEMICOLON .)
    FOR             reduce using rule 49 (ReturnStatement -> RETURN Expression SEMICOLON .)
    WHILE           reduce using rule 49 (ReturnStatement -> RETURN Expression SEMICOLON .)
    BREAK           reduce using rule 49 (ReturnStatement -> RETURN Expression SEMICOLON .)
    RETURN          reduce using rule 49 (ReturnStatement -> RETURN Expression SEMICOLON .)
    ;               reduce using rule 49 (ReturnStatement -> RETURN Expression SEMICOLON .)
    LPAREN          reduce using rule 49 (ReturnStatement -> RETURN Expression SEMICOLON .)
    TIMES           reduce using rule 49 (ReturnStatement -> RETURN Expression SEMICOLON .)
    AMPERSAND       reduce using rule 49 (ReturnStatement -> RETURN Expression SEMICOLON .)
    LBRACE          reduce using rule 49 (ReturnStatement -> RETURN Expression SEMICOLON .)
    ID              reduce using rule 49 (ReturnStatement -> RETURN Expression SEMICOLON .)
    INTL            reduce using rule 49 (ReturnStatement -> RETURN Expression SEMICOLON .)
    BOOLL           reduce using rule 49 (ReturnStatement -> RETURN Expression SEMICOLON .)
    RBRACE          reduce using rule 49 (ReturnStatement -> RETURN Expression SEMICOLON .)
    RPAREN          reduce using rule 49 (ReturnStatement -> RETURN Expression SEMICOLON .)


state 132

    (5) AssignmentStatement -> Expression ASSIGNMENT Expression SEMICOLON .

    IF              reduce using rule 5 (AssignmentStatement -> Expression ASSIGNMENT Expression SEMICOLON .)
    FOR             reduce using rule 5 (AssignmentStatement -> Expression ASSIGNMENT Expression SEMICOLON .)
    WHILE           reduce using rule 5 (AssignmentStatement -> Expression ASSIGNMENT Expression SEMICOLON .)
    BREAK           reduce using rule 5 (AssignmentStatement -> Expression ASSIGNMENT Expression SEMICOLON .)
    RETURN          reduce using rule 5 (AssignmentStatement -> Expression ASSIGNMENT Expression SEMICOLON .)
    ;               reduce using rule 5 (AssignmentStatement -> Expression ASSIGNMENT Expression SEMICOLON .)
    LPAREN          reduce using rule 5 (AssignmentStatement -> Expression ASSIGNMENT Expression SEMICOLON .)
    TIMES           reduce using rule 5 (AssignmentStatement -> Expression ASSIGNMENT Expression SEMICOLON .)
    AMPERSAND       reduce using rule 5 (AssignmentStatement -> Expression ASSIGNMENT Expression SEMICOLON .)
    LBRACE          reduce using rule 5 (AssignmentStatement -> Expression ASSIGNMENT Expression SEMICOLON .)
    ID              reduce using rule 5 (AssignmentStatement -> Expression ASSIGNMENT Expression SEMICOLON .)
    INTL            reduce using rule 5 (AssignmentStatement -> Expression ASSIGNMENT Expression SEMICOLON .)
    BOOLL           reduce using rule 5 (AssignmentStatement -> Expression ASSIGNMENT Expression SEMICOLON .)
    RBRACE          reduce using rule 5 (AssignmentStatement -> Expression ASSIGNMENT Expression SEMICOLON .)
    RPAREN          reduce using rule 5 (AssignmentStatement -> Expression ASSIGNMENT Expression SEMICOLON .)


state 133

    (23) BracketCall -> Expression LBRACKET Expression RBRACKET .

    SEMICOLON       reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    ASSIGNMENT      reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    PLUS            reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    MINUS           reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    TIMES           reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    DIVIDE          reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    MOD             reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    LEQ             reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    GEQ             reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    LT              reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    GT              reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    EQ              reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    NE              reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    DOT             reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    LBRACKET        reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    RPAREN          reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    IF              reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    FOR             reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    WHILE           reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    BREAK           reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    RETURN          reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    ;               reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    LPAREN          reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    AMPERSAND       reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    LBRACE          reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    ID              reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    INTL            reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    BOOLL           reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    RBRACE          reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    RBRACKET        reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    COMMA           reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)


state 134

    (27) DeclarationAssignmentStatement -> Type Id ASSIGNMENT Expression . SEMICOLON
    (7) BinaryExpression -> Expression . PLUS Expression
    (8) BinaryExpression -> Expression . MINUS Expression
    (9) BinaryExpression -> Expression . TIMES Expression
    (10) BinaryExpression -> Expression . DIVIDE Expression
    (11) BinaryExpression -> Expression . MOD Expression
    (12) BinaryExpression -> Expression . LEQ Expression
    (13) BinaryExpression -> Expression . GEQ Expression
    (14) BinaryExpression -> Expression . LT Expression
    (15) BinaryExpression -> Expression . GT Expression
    (16) BinaryExpression -> Expression . EQ Expression
    (17) BinaryExpression -> Expression . NE Expression
    (18) BinaryExpression -> Expression . DOT Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET

    SEMICOLON       shift and go to state 140
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    TIMES           shift and go to state 80
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 82
    LEQ             shift and go to state 83
    GEQ             shift and go to state 84
    LT              shift and go to state 85
    GT              shift and go to state 86
    EQ              shift and go to state 87
    NE              shift and go to state 88
    DOT             shift and go to state 89
    LBRACKET        shift and go to state 90


state 135

    (36) FunctionCall -> Id LPAREN ArgumentListR RPAREN .

    SEMICOLON       reduce using rule 36 (FunctionCall -> Id LPAREN ArgumentListR RPAREN .)
    ASSIGNMENT      reduce using rule 36 (FunctionCall -> Id LPAREN ArgumentListR RPAREN .)
    PLUS            reduce using rule 36 (FunctionCall -> Id LPAREN ArgumentListR RPAREN .)
    MINUS           reduce using rule 36 (FunctionCall -> Id LPAREN ArgumentListR RPAREN .)
    TIMES           reduce using rule 36 (FunctionCall -> Id LPAREN ArgumentListR RPAREN .)
    DIVIDE          reduce using rule 36 (FunctionCall -> Id LPAREN ArgumentListR RPAREN .)
    MOD             reduce using rule 36 (FunctionCall -> Id LPAREN ArgumentListR RPAREN .)
    LEQ             reduce using rule 36 (FunctionCall -> Id LPAREN ArgumentListR RPAREN .)
    GEQ             reduce using rule 36 (FunctionCall -> Id LPAREN ArgumentListR RPAREN .)
    LT              reduce using rule 36 (FunctionCall -> Id LPAREN ArgumentListR RPAREN .)
    GT              reduce using rule 36 (FunctionCall -> Id LPAREN ArgumentListR RPAREN .)
    EQ              reduce using rule 36 (FunctionCall -> Id LPAREN ArgumentListR RPAREN .)
    NE              reduce using rule 36 (FunctionCall -> Id LPAREN ArgumentListR RPAREN .)
    DOT             reduce using rule 36 (FunctionCall -> Id LPAREN ArgumentListR RPAREN .)
    LBRACKET        reduce using rule 36 (FunctionCall -> Id LPAREN ArgumentListR RPAREN .)
    RPAREN          reduce using rule 36 (FunctionCall -> Id LPAREN ArgumentListR RPAREN .)
    IF              reduce using rule 36 (FunctionCall -> Id LPAREN ArgumentListR RPAREN .)
    FOR             reduce using rule 36 (FunctionCall -> Id LPAREN ArgumentListR RPAREN .)
    WHILE           reduce using rule 36 (FunctionCall -> Id LPAREN ArgumentListR RPAREN .)
    BREAK           reduce using rule 36 (FunctionCall -> Id LPAREN ArgumentListR RPAREN .)
    RETURN          reduce using rule 36 (FunctionCall -> Id LPAREN ArgumentListR RPAREN .)
    ;               reduce using rule 36 (FunctionCall -> Id LPAREN ArgumentListR RPAREN .)
    LPAREN          reduce using rule 36 (FunctionCall -> Id LPAREN ArgumentListR RPAREN .)
    AMPERSAND       reduce using rule 36 (FunctionCall -> Id LPAREN ArgumentListR RPAREN .)
    LBRACE          reduce using rule 36 (FunctionCall -> Id LPAREN ArgumentListR RPAREN .)
    ID              reduce using rule 36 (FunctionCall -> Id LPAREN ArgumentListR RPAREN .)
    INTL            reduce using rule 36 (FunctionCall -> Id LPAREN ArgumentListR RPAREN .)
    BOOLL           reduce using rule 36 (FunctionCall -> Id LPAREN ArgumentListR RPAREN .)
    RBRACE          reduce using rule 36 (FunctionCall -> Id LPAREN ArgumentListR RPAREN .)
    RBRACKET        reduce using rule 36 (FunctionCall -> Id LPAREN ArgumentListR RPAREN .)
    COMMA           reduce using rule 36 (FunctionCall -> Id LPAREN ArgumentListR RPAREN .)


state 136

    (2) ArgumentListR -> Argument COMMA . ArgumentListR
    (2) ArgumentListR -> . Argument COMMA ArgumentListR
    (3) ArgumentListR -> . Argument
    (4) ArgumentListR -> . empty
    (1) Argument -> . Expression
    (78) empty -> .
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (7) BinaryExpression -> . Expression PLUS Expression
    (8) BinaryExpression -> . Expression MINUS Expression
    (9) BinaryExpression -> . Expression TIMES Expression
    (10) BinaryExpression -> . Expression DIVIDE Expression
    (11) BinaryExpression -> . Expression MOD Expression
    (12) BinaryExpression -> . Expression LEQ Expression
    (13) BinaryExpression -> . Expression GEQ Expression
    (14) BinaryExpression -> . Expression LT Expression
    (15) BinaryExpression -> . Expression GT Expression
    (16) BinaryExpression -> . Expression EQ Expression
    (17) BinaryExpression -> . Expression NE Expression
    (18) BinaryExpression -> . Expression DOT Expression
    (70) UnaryExpression -> . Id
    (71) UnaryExpression -> . Literal
    (72) UnaryExpression -> . FunctionCall
    (73) UnaryExpression -> . BracketCall
    (74) UnaryExpression -> . LPAREN Expression RPAREN
    (75) UnaryExpression -> . TIMES Expression
    (76) UnaryExpression -> . AMPERSAND Expression
    (38) Id -> . ID
    (41) Literal -> . IntLiteral
    (42) Literal -> . BoolLiteral
    (36) FunctionCall -> . Id LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (40) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL

    RPAREN          reduce using rule 78 (empty -> .)
    LPAREN          shift and go to state 59
    TIMES           shift and go to state 67
    AMPERSAND       shift and go to state 70
    ID              shift and go to state 9
    INTL            shift and go to state 64
    BOOLL           shift and go to state 73

    Argument                       shift and go to state 123
    ArgumentListR                  shift and go to state 141
    empty                          shift and go to state 124
    Expression                     shift and go to state 125
    BinaryExpression               shift and go to state 56
    UnaryExpression                shift and go to state 57
    Id                             shift and go to state 96
    Literal                        shift and go to state 68
    FunctionCall                   shift and go to state 55
    BracketCall                    shift and go to state 69
    IntLiteral                     shift and go to state 71
    BoolLiteral                    shift and go to state 72

state 137

    (39) IfElseStatement -> IF LPAREN Expression RPAREN . Block ELSE Block
    (20) Block -> . LBRACE StatementListR RBRACE

    LBRACE          shift and go to state 35

    Block                          shift and go to state 142

state 138

    (35) ForStatement -> FOR LPAREN Statement Expression . SEMICOLON Statement RPAREN Block
    (7) BinaryExpression -> Expression . PLUS Expression
    (8) BinaryExpression -> Expression . MINUS Expression
    (9) BinaryExpression -> Expression . TIMES Expression
    (10) BinaryExpression -> Expression . DIVIDE Expression
    (11) BinaryExpression -> Expression . MOD Expression
    (12) BinaryExpression -> Expression . LEQ Expression
    (13) BinaryExpression -> Expression . GEQ Expression
    (14) BinaryExpression -> Expression . LT Expression
    (15) BinaryExpression -> Expression . GT Expression
    (16) BinaryExpression -> Expression . EQ Expression
    (17) BinaryExpression -> Expression . NE Expression
    (18) BinaryExpression -> Expression . DOT Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET

    SEMICOLON       shift and go to state 143
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    TIMES           shift and go to state 80
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 82
    LEQ             shift and go to state 83
    GEQ             shift and go to state 84
    LT              shift and go to state 85
    GT              shift and go to state 86
    EQ              shift and go to state 87
    NE              shift and go to state 88
    DOT             shift and go to state 89
    LBRACKET        shift and go to state 90


state 139

    (77) WhileStatement -> WHILE LPAREN Expression RPAREN . Block
    (20) Block -> . LBRACE StatementListR RBRACE

    LBRACE          shift and go to state 35

    Block                          shift and go to state 144

state 140

    (27) DeclarationAssignmentStatement -> Type Id ASSIGNMENT Expression SEMICOLON .

    IF              reduce using rule 27 (DeclarationAssignmentStatement -> Type Id ASSIGNMENT Expression SEMICOLON .)
    FOR             reduce using rule 27 (DeclarationAssignmentStatement -> Type Id ASSIGNMENT Expression SEMICOLON .)
    WHILE           reduce using rule 27 (DeclarationAssignmentStatement -> Type Id ASSIGNMENT Expression SEMICOLON .)
    BREAK           reduce using rule 27 (DeclarationAssignmentStatement -> Type Id ASSIGNMENT Expression SEMICOLON .)
    RETURN          reduce using rule 27 (DeclarationAssignmentStatement -> Type Id ASSIGNMENT Expression SEMICOLON .)
    ;               reduce using rule 27 (DeclarationAssignmentStatement -> Type Id ASSIGNMENT Expression SEMICOLON .)
    LPAREN          reduce using rule 27 (DeclarationAssignmentStatement -> Type Id ASSIGNMENT Expression SEMICOLON .)
    TIMES           reduce using rule 27 (DeclarationAssignmentStatement -> Type Id ASSIGNMENT Expression SEMICOLON .)
    AMPERSAND       reduce using rule 27 (DeclarationAssignmentStatement -> Type Id ASSIGNMENT Expression SEMICOLON .)
    LBRACE          reduce using rule 27 (DeclarationAssignmentStatement -> Type Id ASSIGNMENT Expression SEMICOLON .)
    ID              reduce using rule 27 (DeclarationAssignmentStatement -> Type Id ASSIGNMENT Expression SEMICOLON .)
    INTL            reduce using rule 27 (DeclarationAssignmentStatement -> Type Id ASSIGNMENT Expression SEMICOLON .)
    BOOLL           reduce using rule 27 (DeclarationAssignmentStatement -> Type Id ASSIGNMENT Expression SEMICOLON .)
    RBRACE          reduce using rule 27 (DeclarationAssignmentStatement -> Type Id ASSIGNMENT Expression SEMICOLON .)
    RPAREN          reduce using rule 27 (DeclarationAssignmentStatement -> Type Id ASSIGNMENT Expression SEMICOLON .)


state 141

    (2) ArgumentListR -> Argument COMMA ArgumentListR .

    RPAREN          reduce using rule 2 (ArgumentListR -> Argument COMMA ArgumentListR .)


state 142

    (39) IfElseStatement -> IF LPAREN Expression RPAREN Block . ELSE Block

    ELSE            shift and go to state 145


state 143

    (35) ForStatement -> FOR LPAREN Statement Expression SEMICOLON . Statement RPAREN Block
    (51) Statement -> . AssignmentStatement
    (52) Statement -> . DeclarationAssignmentStatement
    (53) Statement -> . DeclarationFunctionCallStatement
    (54) Statement -> . DeclarationStatement
    (55) Statement -> . Expression SEMICOLON
    (56) Statement -> . IfElseStatement
    (57) Statement -> . ForStatement
    (58) Statement -> . WhileStatement
    (59) Statement -> . BreakStatement
    (60) Statement -> . ReturnStatement
    (61) Statement -> . BlockStatement
    (62) Statement -> . BlankStatement
    (5) AssignmentStatement -> . Expression ASSIGNMENT Expression SEMICOLON
    (6) AssignmentStatement -> . Expression ASSIGNMENT Expression
    (27) DeclarationAssignmentStatement -> . Type Id ASSIGNMENT Expression SEMICOLON
    (28) DeclarationFunctionCallStatement -> . Type FunctionCall SEMICOLON
    (29) DeclarationStatement -> . Type Id SEMICOLON
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (39) IfElseStatement -> . IF LPAREN Expression RPAREN Block ELSE Block
    (35) ForStatement -> . FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block
    (77) WhileStatement -> . WHILE LPAREN Expression RPAREN Block
    (24) BreakStatement -> . BREAK INTL SEMICOLON
    (25) BreakStatement -> . BREAK SEMICOLON
    (49) ReturnStatement -> . RETURN Expression SEMICOLON
    (50) ReturnStatement -> . RETURN SEMICOLON
    (21) BlockStatement -> . Block
    (19) BlankStatement -> . ;
    (69) Type -> . Id PointerListR
    (7) BinaryExpression -> . Expression PLUS Expression
    (8) BinaryExpression -> . Expression MINUS Expression
    (9) BinaryExpression -> . Expression TIMES Expression
    (10) BinaryExpression -> . Expression DIVIDE Expression
    (11) BinaryExpression -> . Expression MOD Expression
    (12) BinaryExpression -> . Expression LEQ Expression
    (13) BinaryExpression -> . Expression GEQ Expression
    (14) BinaryExpression -> . Expression LT Expression
    (15) BinaryExpression -> . Expression GT Expression
    (16) BinaryExpression -> . Expression EQ Expression
    (17) BinaryExpression -> . Expression NE Expression
    (18) BinaryExpression -> . Expression DOT Expression
    (70) UnaryExpression -> . Id
    (71) UnaryExpression -> . Literal
    (72) UnaryExpression -> . FunctionCall
    (73) UnaryExpression -> . BracketCall
    (74) UnaryExpression -> . LPAREN Expression RPAREN
    (75) UnaryExpression -> . TIMES Expression
    (76) UnaryExpression -> . AMPERSAND Expression
    (20) Block -> . LBRACE StatementListR RBRACE
    (38) Id -> . ID
    (41) Literal -> . IntLiteral
    (42) Literal -> . BoolLiteral
    (36) FunctionCall -> . Id LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (40) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL

    IF              shift and go to state 58
    FOR             shift and go to state 61
    WHILE           shift and go to state 62
    BREAK           shift and go to state 63
    RETURN          shift and go to state 65
    ;               shift and go to state 66
    LPAREN          shift and go to state 59
    TIMES           shift and go to state 67
    AMPERSAND       shift and go to state 70
    LBRACE          shift and go to state 35
    ID              shift and go to state 9
    INTL            shift and go to state 64
    BOOLL           shift and go to state 73

    Statement                      shift and go to state 146
    Expression                     shift and go to state 45
    Block                          shift and go to state 60
    AssignmentStatement            shift and go to state 41
    DeclarationAssignmentStatement shift and go to state 42
    DeclarationFunctionCallStatement shift and go to state 43
    DeclarationStatement           shift and go to state 44
    IfElseStatement                shift and go to state 46
    ForStatement                   shift and go to state 47
    WhileStatement                 shift and go to state 48
    BreakStatement                 shift and go to state 49
    ReturnStatement                shift and go to state 50
    BlockStatement                 shift and go to state 51
    BlankStatement                 shift and go to state 52
    Type                           shift and go to state 53
    Id                             shift and go to state 54
    FunctionCall                   shift and go to state 55
    BinaryExpression               shift and go to state 56
    UnaryExpression                shift and go to state 57
    Literal                        shift and go to state 68
    BracketCall                    shift and go to state 69
    IntLiteral                     shift and go to state 71
    BoolLiteral                    shift and go to state 72

state 144

    (77) WhileStatement -> WHILE LPAREN Expression RPAREN Block .

    IF              reduce using rule 77 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    FOR             reduce using rule 77 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    WHILE           reduce using rule 77 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    BREAK           reduce using rule 77 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    RETURN          reduce using rule 77 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    ;               reduce using rule 77 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    LPAREN          reduce using rule 77 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    TIMES           reduce using rule 77 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    AMPERSAND       reduce using rule 77 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    LBRACE          reduce using rule 77 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    ID              reduce using rule 77 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    INTL            reduce using rule 77 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    BOOLL           reduce using rule 77 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    RBRACE          reduce using rule 77 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    RPAREN          reduce using rule 77 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)


state 145

    (39) IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE . Block
    (20) Block -> . LBRACE StatementListR RBRACE

    LBRACE          shift and go to state 35

    Block                          shift and go to state 147

state 146

    (35) ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement . RPAREN Block

    RPAREN          shift and go to state 148


state 147

    (39) IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .

    IF              reduce using rule 39 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)
    FOR             reduce using rule 39 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)
    WHILE           reduce using rule 39 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)
    BREAK           reduce using rule 39 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)
    RETURN          reduce using rule 39 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)
    ;               reduce using rule 39 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)
    LPAREN          reduce using rule 39 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)
    TIMES           reduce using rule 39 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)
    AMPERSAND       reduce using rule 39 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)
    LBRACE          reduce using rule 39 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)
    ID              reduce using rule 39 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)
    INTL            reduce using rule 39 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)
    BOOLL           reduce using rule 39 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)
    RBRACE          reduce using rule 39 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)
    RPAREN          reduce using rule 39 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)


state 148

    (35) ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN . Block
    (20) Block -> . LBRACE StatementListR RBRACE

    LBRACE          shift and go to state 35

    Block                          shift and go to state 149

state 149

    (35) ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .

    IF              reduce using rule 35 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)
    FOR             reduce using rule 35 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)
    WHILE           reduce using rule 35 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)
    BREAK           reduce using rule 35 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)
    RETURN          reduce using rule 35 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)
    ;               reduce using rule 35 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)
    LPAREN          reduce using rule 35 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)
    TIMES           reduce using rule 35 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)
    AMPERSAND       reduce using rule 35 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)
    LBRACE          reduce using rule 35 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)
    ID              reduce using rule 35 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)
    INTL            reduce using rule 35 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)
    BOOLL           reduce using rule 35 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)
    RBRACE          reduce using rule 35 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)
    RPAREN          reduce using rule 35 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for TIMES in state 54 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 96 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 104 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 104 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 104 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 104 resolved as shift
WARNING: shift/reduce conflict for MOD in state 104 resolved as shift
WARNING: shift/reduce conflict for LEQ in state 104 resolved as shift
WARNING: shift/reduce conflict for GEQ in state 104 resolved as shift
WARNING: shift/reduce conflict for LT in state 104 resolved as shift
WARNING: shift/reduce conflict for GT in state 104 resolved as shift
WARNING: shift/reduce conflict for EQ in state 104 resolved as shift
WARNING: shift/reduce conflict for NE in state 104 resolved as shift
WARNING: shift/reduce conflict for DOT in state 104 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 104 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 105 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 117 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 117 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 117 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 117 resolved as shift
WARNING: shift/reduce conflict for MOD in state 117 resolved as shift
WARNING: shift/reduce conflict for LEQ in state 117 resolved as shift
WARNING: shift/reduce conflict for GEQ in state 117 resolved as shift
WARNING: shift/reduce conflict for LT in state 117 resolved as shift
WARNING: shift/reduce conflict for GT in state 117 resolved as shift
WARNING: shift/reduce conflict for EQ in state 117 resolved as shift
WARNING: shift/reduce conflict for NE in state 117 resolved as shift
WARNING: shift/reduce conflict for DOT in state 117 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 117 resolved as shift
