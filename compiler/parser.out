Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> CompilationUnit
Rule 1     BinaryExpressionPrio3 -> UnaryExpression Mul BinaryExpressionPrio3
Rule 2     BinaryExpressionPrio3 -> UnaryExpression Div BinaryExpressionPrio3
Rule 3     BinaryExpressionPrio3 -> UnaryExpression Mod BinaryExpressionPrio3
Rule 4     BinaryExpressionPrio3 -> UnaryExpression
Rule 5     BinaryExpressionPrio4 -> BinaryExpressionPrio3 Add BinaryExpressionPrio4
Rule 6     BinaryExpressionPrio4 -> BinaryExpressionPrio3 Sub BinaryExpressionPrio4
Rule 7     BinaryExpressionPrio4 -> BinaryExpressionPrio3
Rule 8     BinaryExpressionPrio6 -> BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6
Rule 9     BinaryExpressionPrio6 -> BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6
Rule 10    BinaryExpressionPrio6 -> BinaryExpressionPrio4 Less BinaryExpressionPrio6
Rule 11    BinaryExpressionPrio6 -> BinaryExpressionPrio4 Greater BinaryExpressionPrio6
Rule 12    BinaryExpressionPrio6 -> BinaryExpressionPrio4
Rule 13    BinaryExpressionPrio7 -> BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7
Rule 14    BinaryExpressionPrio7 -> BinaryExpressionPrio6 Equal BinaryExpressionPrio7
Rule 15    BinaryExpressionPrio7 -> BinaryExpressionPrio6
Rule 16    Expression -> BinaryExpressionPrio7
Rule 17    BoolLiteral -> BOOLL
Rule 18    CharLiteral -> CHARL
Rule 19    IntLiteral -> INTL
Rule 20    Literal -> IntLiteral
Rule 21    Literal -> BoolLiteral
Rule 22    Literal -> CharLiteral
Rule 23    Add -> +
Rule 24    Dec -> DEC
Rule 25    Div -> /
Rule 26    Equal -> EQ
Rule 27    Greater -> GT
Rule 28    GreaterEqual -> LEQ
Rule 29    Inc -> INC
Rule 30    Less -> LT
Rule 31    LessEqual -> GEQ
Rule 32    Mod -> %
Rule 33    Mul -> *
Rule 34    NotEqual -> NE
Rule 35    Sub -> -
Rule 36    AssignmentStatement -> ID = Expression ;
Rule 37    AssignmentStatement -> ID = Expression
Rule 38    BlankStatement -> ;
Rule 39    BreakStatement -> BREAK INTL ;
Rule 40    BreakStatement -> BREAK ;
Rule 41    DeclarationAssignmentStatement -> TypeName ID = Expression ;
Rule 42    DeclarationStatement -> TypeName ID ;
Rule 43    ForStatement -> FOR ( Statement Expression ; Statement ) Block
Rule 44    IfElseStatement -> IF ( Expression ) Block ELSE Block
Rule 45    ReturnStatement -> RETURN Expression ;
Rule 46    ReturnStatement -> RETURN ;
Rule 47    Statement -> AssignmentStatement
Rule 48    Statement -> DeclarationAssignmentStatement
Rule 49    Statement -> Expression ;
Rule 50    Statement -> DeclarationStatement
Rule 51    Statement -> IfElseStatement
Rule 52    Statement -> ForStatement
Rule 53    Statement -> WhileStatement
Rule 54    Statement -> BreakStatement
Rule 55    Statement -> ReturnStatement
Rule 56    Statement -> BlankStatement
Rule 57    StatementListR -> Statement StatementListR
Rule 58    StatementListR -> empty
Rule 59    WhileStatement -> WHILE ( Expression ) Block
Rule 60    Argument -> Expression
Rule 61    ArgumentListR -> Argument , ArgumentListR
Rule 62    ArgumentListR -> Argument
Rule 63    ArgumentListR -> empty
Rule 64    Block -> { StatementListR }
Rule 65    CompilationUnit -> DefinitionListR
Rule 66    DefinitionListR -> FunctionDefinition DefinitionListR
Rule 67    DefinitionListR -> empty
Rule 68    FunctionDefinition -> TypeName ID ( ParameterListR ) Block
Rule 69    Parameter -> TypeName ID
Rule 70    ParameterListR -> Parameter , ParameterListR
Rule 71    ParameterListR -> Parameter
Rule 72    ParameterListR -> empty
Rule 73    TypeName -> ID
Rule 74    VarName -> ID
Rule 75    DecrementAfter -> VarName Dec
Rule 76    DecrementBefore -> Dec VarName
Rule 77    FunctionCall -> VarName ( ArgumentListR )
Rule 78    IncrementAfter -> VarName Inc
Rule 79    IncrementBefore -> Inc VarName
Rule 80    UnaryExpression -> IncrementAfter
Rule 81    UnaryExpression -> IncrementBefore
Rule 82    UnaryExpression -> DecrementAfter
Rule 83    UnaryExpression -> DecrementBefore
Rule 84    UnaryExpression -> FunctionCall
Rule 85    UnaryExpression -> VarName
Rule 86    UnaryExpression -> Literal
Rule 87    UnaryExpression -> ( Expression )
Rule 88    empty -> <empty>

Terminals, with rules where they appear

%                    : 32
(                    : 43 44 59 68 77 87
)                    : 43 44 59 68 77 87
*                    : 33
+                    : 23
,                    : 61 70
-                    : 35
/                    : 25
;                    : 36 38 39 40 41 42 43 45 46 49
=                    : 36 37 41
BOOLL                : 17
BREAK                : 39 40
CHARL                : 18
DEC                  : 24
ELSE                 : 44
EQ                   : 26
FOR                  : 43
GEQ                  : 31
GT                   : 27
ID                   : 36 37 41 42 68 69 73 74
IF                   : 44
INC                  : 29
INTL                 : 19 39
LEQ                  : 28
LT                   : 30
NE                   : 34
RETURN               : 45 46
WHILE                : 59
error                : 
{                    : 64
}                    : 64

Nonterminals, with rules where they appear

Add                  : 5
Argument             : 61 62
ArgumentListR        : 61 77
AssignmentStatement  : 47
BinaryExpressionPrio3 : 1 2 3 5 6 7
BinaryExpressionPrio4 : 5 6 8 9 10 11 12
BinaryExpressionPrio6 : 8 9 10 11 13 14 15
BinaryExpressionPrio7 : 13 14 16
BlankStatement       : 56
Block                : 43 44 44 59 68
BoolLiteral          : 21
BreakStatement       : 54
CharLiteral          : 22
CompilationUnit      : 0
Dec                  : 75 76
DeclarationAssignmentStatement : 48
DeclarationStatement : 50
DecrementAfter       : 82
DecrementBefore      : 83
DefinitionListR      : 65 66
Div                  : 2
Equal                : 14
Expression           : 36 37 41 43 44 45 49 59 60 87
ForStatement         : 52
FunctionCall         : 84
FunctionDefinition   : 66
Greater              : 11
GreaterEqual         : 9
IfElseStatement      : 51
Inc                  : 78 79
IncrementAfter       : 80
IncrementBefore      : 81
IntLiteral           : 20
Less                 : 10
LessEqual            : 8
Literal              : 86
Mod                  : 3
Mul                  : 1
NotEqual             : 13
Parameter            : 70 71
ParameterListR       : 68 70
ReturnStatement      : 55
Statement            : 43 43 57
StatementListR       : 57 64
Sub                  : 6
TypeName             : 41 42 68 69
UnaryExpression      : 1 2 3 4
VarName              : 75 76 77 78 79 85
WhileStatement       : 53
empty                : 58 63 67 72

Parsing method: LALR

state 0

    (0) S' -> . CompilationUnit
    (65) CompilationUnit -> . DefinitionListR
    (66) DefinitionListR -> . FunctionDefinition DefinitionListR
    (67) DefinitionListR -> . empty
    (68) FunctionDefinition -> . TypeName ID ( ParameterListR ) Block
    (88) empty -> .
    (73) TypeName -> . ID

    $end            reduce using rule 88 (empty -> .)
    ID              shift and go to state 6

    CompilationUnit                shift and go to state 1
    DefinitionListR                shift and go to state 2
    FunctionDefinition             shift and go to state 3
    empty                          shift and go to state 4
    TypeName                       shift and go to state 5

state 1

    (0) S' -> CompilationUnit .



state 2

    (65) CompilationUnit -> DefinitionListR .

    $end            reduce using rule 65 (CompilationUnit -> DefinitionListR .)


state 3

    (66) DefinitionListR -> FunctionDefinition . DefinitionListR
    (66) DefinitionListR -> . FunctionDefinition DefinitionListR
    (67) DefinitionListR -> . empty
    (68) FunctionDefinition -> . TypeName ID ( ParameterListR ) Block
    (88) empty -> .
    (73) TypeName -> . ID

    $end            reduce using rule 88 (empty -> .)
    ID              shift and go to state 6

    FunctionDefinition             shift and go to state 3
    DefinitionListR                shift and go to state 7
    empty                          shift and go to state 4
    TypeName                       shift and go to state 5

state 4

    (67) DefinitionListR -> empty .

    $end            reduce using rule 67 (DefinitionListR -> empty .)


state 5

    (68) FunctionDefinition -> TypeName . ID ( ParameterListR ) Block

    ID              shift and go to state 8


state 6

    (73) TypeName -> ID .

    ID              reduce using rule 73 (TypeName -> ID .)


state 7

    (66) DefinitionListR -> FunctionDefinition DefinitionListR .

    $end            reduce using rule 66 (DefinitionListR -> FunctionDefinition DefinitionListR .)


state 8

    (68) FunctionDefinition -> TypeName ID . ( ParameterListR ) Block

    (               shift and go to state 9


state 9

    (68) FunctionDefinition -> TypeName ID ( . ParameterListR ) Block
    (70) ParameterListR -> . Parameter , ParameterListR
    (71) ParameterListR -> . Parameter
    (72) ParameterListR -> . empty
    (69) Parameter -> . TypeName ID
    (88) empty -> .
    (73) TypeName -> . ID

    )               reduce using rule 88 (empty -> .)
    ID              shift and go to state 6

    TypeName                       shift and go to state 10
    ParameterListR                 shift and go to state 11
    Parameter                      shift and go to state 12
    empty                          shift and go to state 13

state 10

    (69) Parameter -> TypeName . ID

    ID              shift and go to state 14


state 11

    (68) FunctionDefinition -> TypeName ID ( ParameterListR . ) Block

    )               shift and go to state 15


state 12

    (70) ParameterListR -> Parameter . , ParameterListR
    (71) ParameterListR -> Parameter .

    ,               shift and go to state 16
    )               reduce using rule 71 (ParameterListR -> Parameter .)


state 13

    (72) ParameterListR -> empty .

    )               reduce using rule 72 (ParameterListR -> empty .)


state 14

    (69) Parameter -> TypeName ID .

    ,               reduce using rule 69 (Parameter -> TypeName ID .)
    )               reduce using rule 69 (Parameter -> TypeName ID .)


state 15

    (68) FunctionDefinition -> TypeName ID ( ParameterListR ) . Block
    (64) Block -> . { StatementListR }

    {               shift and go to state 18

    Block                          shift and go to state 17

state 16

    (70) ParameterListR -> Parameter , . ParameterListR
    (70) ParameterListR -> . Parameter , ParameterListR
    (71) ParameterListR -> . Parameter
    (72) ParameterListR -> . empty
    (69) Parameter -> . TypeName ID
    (88) empty -> .
    (73) TypeName -> . ID

    )               reduce using rule 88 (empty -> .)
    ID              shift and go to state 6

    Parameter                      shift and go to state 12
    ParameterListR                 shift and go to state 19
    empty                          shift and go to state 13
    TypeName                       shift and go to state 10

state 17

    (68) FunctionDefinition -> TypeName ID ( ParameterListR ) Block .

    ID              reduce using rule 68 (FunctionDefinition -> TypeName ID ( ParameterListR ) Block .)
    $end            reduce using rule 68 (FunctionDefinition -> TypeName ID ( ParameterListR ) Block .)


state 18

    (64) Block -> { . StatementListR }
    (57) StatementListR -> . Statement StatementListR
    (58) StatementListR -> . empty
    (47) Statement -> . AssignmentStatement
    (48) Statement -> . DeclarationAssignmentStatement
    (49) Statement -> . Expression ;
    (50) Statement -> . DeclarationStatement
    (51) Statement -> . IfElseStatement
    (52) Statement -> . ForStatement
    (53) Statement -> . WhileStatement
    (54) Statement -> . BreakStatement
    (55) Statement -> . ReturnStatement
    (56) Statement -> . BlankStatement
    (88) empty -> .
    (36) AssignmentStatement -> . ID = Expression ;
    (37) AssignmentStatement -> . ID = Expression
    (41) DeclarationAssignmentStatement -> . TypeName ID = Expression ;
    (16) Expression -> . BinaryExpressionPrio7
    (42) DeclarationStatement -> . TypeName ID ;
    (44) IfElseStatement -> . IF ( Expression ) Block ELSE Block
    (43) ForStatement -> . FOR ( Statement Expression ; Statement ) Block
    (59) WhileStatement -> . WHILE ( Expression ) Block
    (39) BreakStatement -> . BREAK INTL ;
    (40) BreakStatement -> . BREAK ;
    (45) ReturnStatement -> . RETURN Expression ;
    (46) ReturnStatement -> . RETURN ;
    (38) BlankStatement -> . ;
    (73) TypeName -> . ID
    (13) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7
    (14) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 Equal BinaryExpressionPrio7
    (15) BinaryExpressionPrio7 -> . BinaryExpressionPrio6
    (8) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6
    (9) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6
    (10) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Less BinaryExpressionPrio6
    (11) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Greater BinaryExpressionPrio6
    (12) BinaryExpressionPrio6 -> . BinaryExpressionPrio4
    (5) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Add BinaryExpressionPrio4
    (6) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Sub BinaryExpressionPrio4
    (7) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (1) BinaryExpressionPrio3 -> . UnaryExpression Mul BinaryExpressionPrio3
    (2) BinaryExpressionPrio3 -> . UnaryExpression Div BinaryExpressionPrio3
    (3) BinaryExpressionPrio3 -> . UnaryExpression Mod BinaryExpressionPrio3
    (4) BinaryExpressionPrio3 -> . UnaryExpression
    (80) UnaryExpression -> . IncrementAfter
    (81) UnaryExpression -> . IncrementBefore
    (82) UnaryExpression -> . DecrementAfter
    (83) UnaryExpression -> . DecrementBefore
    (84) UnaryExpression -> . FunctionCall
    (85) UnaryExpression -> . VarName
    (86) UnaryExpression -> . Literal
    (87) UnaryExpression -> . ( Expression )
    (78) IncrementAfter -> . VarName Inc
    (79) IncrementBefore -> . Inc VarName
    (75) DecrementAfter -> . VarName Dec
    (76) DecrementBefore -> . Dec VarName
    (77) FunctionCall -> . VarName ( ArgumentListR )
    (74) VarName -> . ID
    (20) Literal -> . IntLiteral
    (21) Literal -> . BoolLiteral
    (22) Literal -> . CharLiteral
    (29) Inc -> . INC
    (24) Dec -> . DEC
    (19) IntLiteral -> . INTL
    (17) BoolLiteral -> . BOOLL
    (18) CharLiteral -> . CHARL

    }               reduce using rule 88 (empty -> .)
    ID              shift and go to state 34
    IF              shift and go to state 37
    FOR             shift and go to state 39
    WHILE           shift and go to state 40
    BREAK           shift and go to state 41
    RETURN          shift and go to state 43
    ;               shift and go to state 26
    (               shift and go to state 38
    INC             shift and go to state 60
    DEC             shift and go to state 61
    INTL            shift and go to state 42
    BOOLL           shift and go to state 62
    CHARL           shift and go to state 63

    StatementListR                 shift and go to state 20
    Statement                      shift and go to state 21
    empty                          shift and go to state 22
    AssignmentStatement            shift and go to state 23
    DeclarationAssignmentStatement shift and go to state 24
    Expression                     shift and go to state 25
    DeclarationStatement           shift and go to state 27
    IfElseStatement                shift and go to state 28
    ForStatement                   shift and go to state 29
    WhileStatement                 shift and go to state 30
    BreakStatement                 shift and go to state 31
    ReturnStatement                shift and go to state 32
    BlankStatement                 shift and go to state 33
    TypeName                       shift and go to state 35
    BinaryExpressionPrio7          shift and go to state 36
    BinaryExpressionPrio6          shift and go to state 44
    BinaryExpressionPrio4          shift and go to state 45
    BinaryExpressionPrio3          shift and go to state 46
    UnaryExpression                shift and go to state 47
    IncrementAfter                 shift and go to state 48
    IncrementBefore                shift and go to state 49
    DecrementAfter                 shift and go to state 50
    DecrementBefore                shift and go to state 51
    FunctionCall                   shift and go to state 52
    VarName                        shift and go to state 53
    Literal                        shift and go to state 54
    Inc                            shift and go to state 55
    Dec                            shift and go to state 56
    IntLiteral                     shift and go to state 57
    BoolLiteral                    shift and go to state 58
    CharLiteral                    shift and go to state 59

state 19

    (70) ParameterListR -> Parameter , ParameterListR .

    )               reduce using rule 70 (ParameterListR -> Parameter , ParameterListR .)


state 20

    (64) Block -> { StatementListR . }

    }               shift and go to state 64


state 21

    (57) StatementListR -> Statement . StatementListR
    (57) StatementListR -> . Statement StatementListR
    (58) StatementListR -> . empty
    (47) Statement -> . AssignmentStatement
    (48) Statement -> . DeclarationAssignmentStatement
    (49) Statement -> . Expression ;
    (50) Statement -> . DeclarationStatement
    (51) Statement -> . IfElseStatement
    (52) Statement -> . ForStatement
    (53) Statement -> . WhileStatement
    (54) Statement -> . BreakStatement
    (55) Statement -> . ReturnStatement
    (56) Statement -> . BlankStatement
    (88) empty -> .
    (36) AssignmentStatement -> . ID = Expression ;
    (37) AssignmentStatement -> . ID = Expression
    (41) DeclarationAssignmentStatement -> . TypeName ID = Expression ;
    (16) Expression -> . BinaryExpressionPrio7
    (42) DeclarationStatement -> . TypeName ID ;
    (44) IfElseStatement -> . IF ( Expression ) Block ELSE Block
    (43) ForStatement -> . FOR ( Statement Expression ; Statement ) Block
    (59) WhileStatement -> . WHILE ( Expression ) Block
    (39) BreakStatement -> . BREAK INTL ;
    (40) BreakStatement -> . BREAK ;
    (45) ReturnStatement -> . RETURN Expression ;
    (46) ReturnStatement -> . RETURN ;
    (38) BlankStatement -> . ;
    (73) TypeName -> . ID
    (13) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7
    (14) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 Equal BinaryExpressionPrio7
    (15) BinaryExpressionPrio7 -> . BinaryExpressionPrio6
    (8) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6
    (9) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6
    (10) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Less BinaryExpressionPrio6
    (11) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Greater BinaryExpressionPrio6
    (12) BinaryExpressionPrio6 -> . BinaryExpressionPrio4
    (5) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Add BinaryExpressionPrio4
    (6) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Sub BinaryExpressionPrio4
    (7) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (1) BinaryExpressionPrio3 -> . UnaryExpression Mul BinaryExpressionPrio3
    (2) BinaryExpressionPrio3 -> . UnaryExpression Div BinaryExpressionPrio3
    (3) BinaryExpressionPrio3 -> . UnaryExpression Mod BinaryExpressionPrio3
    (4) BinaryExpressionPrio3 -> . UnaryExpression
    (80) UnaryExpression -> . IncrementAfter
    (81) UnaryExpression -> . IncrementBefore
    (82) UnaryExpression -> . DecrementAfter
    (83) UnaryExpression -> . DecrementBefore
    (84) UnaryExpression -> . FunctionCall
    (85) UnaryExpression -> . VarName
    (86) UnaryExpression -> . Literal
    (87) UnaryExpression -> . ( Expression )
    (78) IncrementAfter -> . VarName Inc
    (79) IncrementBefore -> . Inc VarName
    (75) DecrementAfter -> . VarName Dec
    (76) DecrementBefore -> . Dec VarName
    (77) FunctionCall -> . VarName ( ArgumentListR )
    (74) VarName -> . ID
    (20) Literal -> . IntLiteral
    (21) Literal -> . BoolLiteral
    (22) Literal -> . CharLiteral
    (29) Inc -> . INC
    (24) Dec -> . DEC
    (19) IntLiteral -> . INTL
    (17) BoolLiteral -> . BOOLL
    (18) CharLiteral -> . CHARL

    }               reduce using rule 88 (empty -> .)
    ID              shift and go to state 34
    IF              shift and go to state 37
    FOR             shift and go to state 39
    WHILE           shift and go to state 40
    BREAK           shift and go to state 41
    RETURN          shift and go to state 43
    ;               shift and go to state 26
    (               shift and go to state 38
    INC             shift and go to state 60
    DEC             shift and go to state 61
    INTL            shift and go to state 42
    BOOLL           shift and go to state 62
    CHARL           shift and go to state 63

    Statement                      shift and go to state 21
    StatementListR                 shift and go to state 65
    empty                          shift and go to state 22
    AssignmentStatement            shift and go to state 23
    DeclarationAssignmentStatement shift and go to state 24
    Expression                     shift and go to state 25
    DeclarationStatement           shift and go to state 27
    IfElseStatement                shift and go to state 28
    ForStatement                   shift and go to state 29
    WhileStatement                 shift and go to state 30
    BreakStatement                 shift and go to state 31
    ReturnStatement                shift and go to state 32
    BlankStatement                 shift and go to state 33
    TypeName                       shift and go to state 35
    BinaryExpressionPrio7          shift and go to state 36
    BinaryExpressionPrio6          shift and go to state 44
    BinaryExpressionPrio4          shift and go to state 45
    BinaryExpressionPrio3          shift and go to state 46
    UnaryExpression                shift and go to state 47
    IncrementAfter                 shift and go to state 48
    IncrementBefore                shift and go to state 49
    DecrementAfter                 shift and go to state 50
    DecrementBefore                shift and go to state 51
    FunctionCall                   shift and go to state 52
    VarName                        shift and go to state 53
    Literal                        shift and go to state 54
    Inc                            shift and go to state 55
    Dec                            shift and go to state 56
    IntLiteral                     shift and go to state 57
    BoolLiteral                    shift and go to state 58
    CharLiteral                    shift and go to state 59

state 22

    (58) StatementListR -> empty .

    }               reduce using rule 58 (StatementListR -> empty .)


state 23

    (47) Statement -> AssignmentStatement .

    ID              reduce using rule 47 (Statement -> AssignmentStatement .)
    IF              reduce using rule 47 (Statement -> AssignmentStatement .)
    FOR             reduce using rule 47 (Statement -> AssignmentStatement .)
    WHILE           reduce using rule 47 (Statement -> AssignmentStatement .)
    BREAK           reduce using rule 47 (Statement -> AssignmentStatement .)
    RETURN          reduce using rule 47 (Statement -> AssignmentStatement .)
    ;               reduce using rule 47 (Statement -> AssignmentStatement .)
    (               reduce using rule 47 (Statement -> AssignmentStatement .)
    INC             reduce using rule 47 (Statement -> AssignmentStatement .)
    DEC             reduce using rule 47 (Statement -> AssignmentStatement .)
    INTL            reduce using rule 47 (Statement -> AssignmentStatement .)
    BOOLL           reduce using rule 47 (Statement -> AssignmentStatement .)
    CHARL           reduce using rule 47 (Statement -> AssignmentStatement .)
    }               reduce using rule 47 (Statement -> AssignmentStatement .)
    )               reduce using rule 47 (Statement -> AssignmentStatement .)


state 24

    (48) Statement -> DeclarationAssignmentStatement .

    ID              reduce using rule 48 (Statement -> DeclarationAssignmentStatement .)
    IF              reduce using rule 48 (Statement -> DeclarationAssignmentStatement .)
    FOR             reduce using rule 48 (Statement -> DeclarationAssignmentStatement .)
    WHILE           reduce using rule 48 (Statement -> DeclarationAssignmentStatement .)
    BREAK           reduce using rule 48 (Statement -> DeclarationAssignmentStatement .)
    RETURN          reduce using rule 48 (Statement -> DeclarationAssignmentStatement .)
    ;               reduce using rule 48 (Statement -> DeclarationAssignmentStatement .)
    (               reduce using rule 48 (Statement -> DeclarationAssignmentStatement .)
    INC             reduce using rule 48 (Statement -> DeclarationAssignmentStatement .)
    DEC             reduce using rule 48 (Statement -> DeclarationAssignmentStatement .)
    INTL            reduce using rule 48 (Statement -> DeclarationAssignmentStatement .)
    BOOLL           reduce using rule 48 (Statement -> DeclarationAssignmentStatement .)
    CHARL           reduce using rule 48 (Statement -> DeclarationAssignmentStatement .)
    }               reduce using rule 48 (Statement -> DeclarationAssignmentStatement .)
    )               reduce using rule 48 (Statement -> DeclarationAssignmentStatement .)


state 25

    (49) Statement -> Expression . ;

    ;               shift and go to state 66


state 26

    (38) BlankStatement -> ; .

    ID              reduce using rule 38 (BlankStatement -> ; .)
    IF              reduce using rule 38 (BlankStatement -> ; .)
    FOR             reduce using rule 38 (BlankStatement -> ; .)
    WHILE           reduce using rule 38 (BlankStatement -> ; .)
    BREAK           reduce using rule 38 (BlankStatement -> ; .)
    RETURN          reduce using rule 38 (BlankStatement -> ; .)
    ;               reduce using rule 38 (BlankStatement -> ; .)
    (               reduce using rule 38 (BlankStatement -> ; .)
    INC             reduce using rule 38 (BlankStatement -> ; .)
    DEC             reduce using rule 38 (BlankStatement -> ; .)
    INTL            reduce using rule 38 (BlankStatement -> ; .)
    BOOLL           reduce using rule 38 (BlankStatement -> ; .)
    CHARL           reduce using rule 38 (BlankStatement -> ; .)
    }               reduce using rule 38 (BlankStatement -> ; .)
    )               reduce using rule 38 (BlankStatement -> ; .)


state 27

    (50) Statement -> DeclarationStatement .

    ID              reduce using rule 50 (Statement -> DeclarationStatement .)
    IF              reduce using rule 50 (Statement -> DeclarationStatement .)
    FOR             reduce using rule 50 (Statement -> DeclarationStatement .)
    WHILE           reduce using rule 50 (Statement -> DeclarationStatement .)
    BREAK           reduce using rule 50 (Statement -> DeclarationStatement .)
    RETURN          reduce using rule 50 (Statement -> DeclarationStatement .)
    ;               reduce using rule 50 (Statement -> DeclarationStatement .)
    (               reduce using rule 50 (Statement -> DeclarationStatement .)
    INC             reduce using rule 50 (Statement -> DeclarationStatement .)
    DEC             reduce using rule 50 (Statement -> DeclarationStatement .)
    INTL            reduce using rule 50 (Statement -> DeclarationStatement .)
    BOOLL           reduce using rule 50 (Statement -> DeclarationStatement .)
    CHARL           reduce using rule 50 (Statement -> DeclarationStatement .)
    }               reduce using rule 50 (Statement -> DeclarationStatement .)
    )               reduce using rule 50 (Statement -> DeclarationStatement .)


state 28

    (51) Statement -> IfElseStatement .

    ID              reduce using rule 51 (Statement -> IfElseStatement .)
    IF              reduce using rule 51 (Statement -> IfElseStatement .)
    FOR             reduce using rule 51 (Statement -> IfElseStatement .)
    WHILE           reduce using rule 51 (Statement -> IfElseStatement .)
    BREAK           reduce using rule 51 (Statement -> IfElseStatement .)
    RETURN          reduce using rule 51 (Statement -> IfElseStatement .)
    ;               reduce using rule 51 (Statement -> IfElseStatement .)
    (               reduce using rule 51 (Statement -> IfElseStatement .)
    INC             reduce using rule 51 (Statement -> IfElseStatement .)
    DEC             reduce using rule 51 (Statement -> IfElseStatement .)
    INTL            reduce using rule 51 (Statement -> IfElseStatement .)
    BOOLL           reduce using rule 51 (Statement -> IfElseStatement .)
    CHARL           reduce using rule 51 (Statement -> IfElseStatement .)
    }               reduce using rule 51 (Statement -> IfElseStatement .)
    )               reduce using rule 51 (Statement -> IfElseStatement .)


state 29

    (52) Statement -> ForStatement .

    ID              reduce using rule 52 (Statement -> ForStatement .)
    IF              reduce using rule 52 (Statement -> ForStatement .)
    FOR             reduce using rule 52 (Statement -> ForStatement .)
    WHILE           reduce using rule 52 (Statement -> ForStatement .)
    BREAK           reduce using rule 52 (Statement -> ForStatement .)
    RETURN          reduce using rule 52 (Statement -> ForStatement .)
    ;               reduce using rule 52 (Statement -> ForStatement .)
    (               reduce using rule 52 (Statement -> ForStatement .)
    INC             reduce using rule 52 (Statement -> ForStatement .)
    DEC             reduce using rule 52 (Statement -> ForStatement .)
    INTL            reduce using rule 52 (Statement -> ForStatement .)
    BOOLL           reduce using rule 52 (Statement -> ForStatement .)
    CHARL           reduce using rule 52 (Statement -> ForStatement .)
    }               reduce using rule 52 (Statement -> ForStatement .)
    )               reduce using rule 52 (Statement -> ForStatement .)


state 30

    (53) Statement -> WhileStatement .

    ID              reduce using rule 53 (Statement -> WhileStatement .)
    IF              reduce using rule 53 (Statement -> WhileStatement .)
    FOR             reduce using rule 53 (Statement -> WhileStatement .)
    WHILE           reduce using rule 53 (Statement -> WhileStatement .)
    BREAK           reduce using rule 53 (Statement -> WhileStatement .)
    RETURN          reduce using rule 53 (Statement -> WhileStatement .)
    ;               reduce using rule 53 (Statement -> WhileStatement .)
    (               reduce using rule 53 (Statement -> WhileStatement .)
    INC             reduce using rule 53 (Statement -> WhileStatement .)
    DEC             reduce using rule 53 (Statement -> WhileStatement .)
    INTL            reduce using rule 53 (Statement -> WhileStatement .)
    BOOLL           reduce using rule 53 (Statement -> WhileStatement .)
    CHARL           reduce using rule 53 (Statement -> WhileStatement .)
    }               reduce using rule 53 (Statement -> WhileStatement .)
    )               reduce using rule 53 (Statement -> WhileStatement .)


state 31

    (54) Statement -> BreakStatement .

    ID              reduce using rule 54 (Statement -> BreakStatement .)
    IF              reduce using rule 54 (Statement -> BreakStatement .)
    FOR             reduce using rule 54 (Statement -> BreakStatement .)
    WHILE           reduce using rule 54 (Statement -> BreakStatement .)
    BREAK           reduce using rule 54 (Statement -> BreakStatement .)
    RETURN          reduce using rule 54 (Statement -> BreakStatement .)
    ;               reduce using rule 54 (Statement -> BreakStatement .)
    (               reduce using rule 54 (Statement -> BreakStatement .)
    INC             reduce using rule 54 (Statement -> BreakStatement .)
    DEC             reduce using rule 54 (Statement -> BreakStatement .)
    INTL            reduce using rule 54 (Statement -> BreakStatement .)
    BOOLL           reduce using rule 54 (Statement -> BreakStatement .)
    CHARL           reduce using rule 54 (Statement -> BreakStatement .)
    }               reduce using rule 54 (Statement -> BreakStatement .)
    )               reduce using rule 54 (Statement -> BreakStatement .)


state 32

    (55) Statement -> ReturnStatement .

    ID              reduce using rule 55 (Statement -> ReturnStatement .)
    IF              reduce using rule 55 (Statement -> ReturnStatement .)
    FOR             reduce using rule 55 (Statement -> ReturnStatement .)
    WHILE           reduce using rule 55 (Statement -> ReturnStatement .)
    BREAK           reduce using rule 55 (Statement -> ReturnStatement .)
    RETURN          reduce using rule 55 (Statement -> ReturnStatement .)
    ;               reduce using rule 55 (Statement -> ReturnStatement .)
    (               reduce using rule 55 (Statement -> ReturnStatement .)
    INC             reduce using rule 55 (Statement -> ReturnStatement .)
    DEC             reduce using rule 55 (Statement -> ReturnStatement .)
    INTL            reduce using rule 55 (Statement -> ReturnStatement .)
    BOOLL           reduce using rule 55 (Statement -> ReturnStatement .)
    CHARL           reduce using rule 55 (Statement -> ReturnStatement .)
    }               reduce using rule 55 (Statement -> ReturnStatement .)
    )               reduce using rule 55 (Statement -> ReturnStatement .)


state 33

    (56) Statement -> BlankStatement .

    ID              reduce using rule 56 (Statement -> BlankStatement .)
    IF              reduce using rule 56 (Statement -> BlankStatement .)
    FOR             reduce using rule 56 (Statement -> BlankStatement .)
    WHILE           reduce using rule 56 (Statement -> BlankStatement .)
    BREAK           reduce using rule 56 (Statement -> BlankStatement .)
    RETURN          reduce using rule 56 (Statement -> BlankStatement .)
    ;               reduce using rule 56 (Statement -> BlankStatement .)
    (               reduce using rule 56 (Statement -> BlankStatement .)
    INC             reduce using rule 56 (Statement -> BlankStatement .)
    DEC             reduce using rule 56 (Statement -> BlankStatement .)
    INTL            reduce using rule 56 (Statement -> BlankStatement .)
    BOOLL           reduce using rule 56 (Statement -> BlankStatement .)
    CHARL           reduce using rule 56 (Statement -> BlankStatement .)
    }               reduce using rule 56 (Statement -> BlankStatement .)
    )               reduce using rule 56 (Statement -> BlankStatement .)


state 34

    (36) AssignmentStatement -> ID . = Expression ;
    (37) AssignmentStatement -> ID . = Expression
    (73) TypeName -> ID .
    (74) VarName -> ID .

    =               shift and go to state 67
    ID              reduce using rule 73 (TypeName -> ID .)
    (               reduce using rule 74 (VarName -> ID .)
    INC             reduce using rule 74 (VarName -> ID .)
    DEC             reduce using rule 74 (VarName -> ID .)
    *               reduce using rule 74 (VarName -> ID .)
    /               reduce using rule 74 (VarName -> ID .)
    %               reduce using rule 74 (VarName -> ID .)
    +               reduce using rule 74 (VarName -> ID .)
    -               reduce using rule 74 (VarName -> ID .)
    GEQ             reduce using rule 74 (VarName -> ID .)
    LEQ             reduce using rule 74 (VarName -> ID .)
    LT              reduce using rule 74 (VarName -> ID .)
    GT              reduce using rule 74 (VarName -> ID .)
    NE              reduce using rule 74 (VarName -> ID .)
    EQ              reduce using rule 74 (VarName -> ID .)
    ;               reduce using rule 74 (VarName -> ID .)


state 35

    (41) DeclarationAssignmentStatement -> TypeName . ID = Expression ;
    (42) DeclarationStatement -> TypeName . ID ;

    ID              shift and go to state 68


state 36

    (16) Expression -> BinaryExpressionPrio7 .

    ;               reduce using rule 16 (Expression -> BinaryExpressionPrio7 .)
    )               reduce using rule 16 (Expression -> BinaryExpressionPrio7 .)
    ID              reduce using rule 16 (Expression -> BinaryExpressionPrio7 .)
    IF              reduce using rule 16 (Expression -> BinaryExpressionPrio7 .)
    FOR             reduce using rule 16 (Expression -> BinaryExpressionPrio7 .)
    WHILE           reduce using rule 16 (Expression -> BinaryExpressionPrio7 .)
    BREAK           reduce using rule 16 (Expression -> BinaryExpressionPrio7 .)
    RETURN          reduce using rule 16 (Expression -> BinaryExpressionPrio7 .)
    (               reduce using rule 16 (Expression -> BinaryExpressionPrio7 .)
    INC             reduce using rule 16 (Expression -> BinaryExpressionPrio7 .)
    DEC             reduce using rule 16 (Expression -> BinaryExpressionPrio7 .)
    INTL            reduce using rule 16 (Expression -> BinaryExpressionPrio7 .)
    BOOLL           reduce using rule 16 (Expression -> BinaryExpressionPrio7 .)
    CHARL           reduce using rule 16 (Expression -> BinaryExpressionPrio7 .)
    }               reduce using rule 16 (Expression -> BinaryExpressionPrio7 .)
    ,               reduce using rule 16 (Expression -> BinaryExpressionPrio7 .)


state 37

    (44) IfElseStatement -> IF . ( Expression ) Block ELSE Block

    (               shift and go to state 69


state 38

    (87) UnaryExpression -> ( . Expression )
    (16) Expression -> . BinaryExpressionPrio7
    (13) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7
    (14) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 Equal BinaryExpressionPrio7
    (15) BinaryExpressionPrio7 -> . BinaryExpressionPrio6
    (8) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6
    (9) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6
    (10) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Less BinaryExpressionPrio6
    (11) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Greater BinaryExpressionPrio6
    (12) BinaryExpressionPrio6 -> . BinaryExpressionPrio4
    (5) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Add BinaryExpressionPrio4
    (6) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Sub BinaryExpressionPrio4
    (7) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (1) BinaryExpressionPrio3 -> . UnaryExpression Mul BinaryExpressionPrio3
    (2) BinaryExpressionPrio3 -> . UnaryExpression Div BinaryExpressionPrio3
    (3) BinaryExpressionPrio3 -> . UnaryExpression Mod BinaryExpressionPrio3
    (4) BinaryExpressionPrio3 -> . UnaryExpression
    (80) UnaryExpression -> . IncrementAfter
    (81) UnaryExpression -> . IncrementBefore
    (82) UnaryExpression -> . DecrementAfter
    (83) UnaryExpression -> . DecrementBefore
    (84) UnaryExpression -> . FunctionCall
    (85) UnaryExpression -> . VarName
    (86) UnaryExpression -> . Literal
    (87) UnaryExpression -> . ( Expression )
    (78) IncrementAfter -> . VarName Inc
    (79) IncrementBefore -> . Inc VarName
    (75) DecrementAfter -> . VarName Dec
    (76) DecrementBefore -> . Dec VarName
    (77) FunctionCall -> . VarName ( ArgumentListR )
    (74) VarName -> . ID
    (20) Literal -> . IntLiteral
    (21) Literal -> . BoolLiteral
    (22) Literal -> . CharLiteral
    (29) Inc -> . INC
    (24) Dec -> . DEC
    (19) IntLiteral -> . INTL
    (17) BoolLiteral -> . BOOLL
    (18) CharLiteral -> . CHARL

    (               shift and go to state 38
    ID              shift and go to state 71
    INC             shift and go to state 60
    DEC             shift and go to state 61
    INTL            shift and go to state 42
    BOOLL           shift and go to state 62
    CHARL           shift and go to state 63

    Expression                     shift and go to state 70
    BinaryExpressionPrio7          shift and go to state 36
    BinaryExpressionPrio6          shift and go to state 44
    BinaryExpressionPrio4          shift and go to state 45
    BinaryExpressionPrio3          shift and go to state 46
    UnaryExpression                shift and go to state 47
    IncrementAfter                 shift and go to state 48
    IncrementBefore                shift and go to state 49
    DecrementAfter                 shift and go to state 50
    DecrementBefore                shift and go to state 51
    FunctionCall                   shift and go to state 52
    VarName                        shift and go to state 53
    Literal                        shift and go to state 54
    Inc                            shift and go to state 55
    Dec                            shift and go to state 56
    IntLiteral                     shift and go to state 57
    BoolLiteral                    shift and go to state 58
    CharLiteral                    shift and go to state 59

state 39

    (43) ForStatement -> FOR . ( Statement Expression ; Statement ) Block

    (               shift and go to state 72


state 40

    (59) WhileStatement -> WHILE . ( Expression ) Block

    (               shift and go to state 73


state 41

    (39) BreakStatement -> BREAK . INTL ;
    (40) BreakStatement -> BREAK . ;

    INTL            shift and go to state 74
    ;               shift and go to state 75


state 42

    (19) IntLiteral -> INTL .

    *               reduce using rule 19 (IntLiteral -> INTL .)
    /               reduce using rule 19 (IntLiteral -> INTL .)
    %               reduce using rule 19 (IntLiteral -> INTL .)
    +               reduce using rule 19 (IntLiteral -> INTL .)
    -               reduce using rule 19 (IntLiteral -> INTL .)
    GEQ             reduce using rule 19 (IntLiteral -> INTL .)
    LEQ             reduce using rule 19 (IntLiteral -> INTL .)
    LT              reduce using rule 19 (IntLiteral -> INTL .)
    GT              reduce using rule 19 (IntLiteral -> INTL .)
    NE              reduce using rule 19 (IntLiteral -> INTL .)
    EQ              reduce using rule 19 (IntLiteral -> INTL .)
    ;               reduce using rule 19 (IntLiteral -> INTL .)
    )               reduce using rule 19 (IntLiteral -> INTL .)
    ID              reduce using rule 19 (IntLiteral -> INTL .)
    IF              reduce using rule 19 (IntLiteral -> INTL .)
    FOR             reduce using rule 19 (IntLiteral -> INTL .)
    WHILE           reduce using rule 19 (IntLiteral -> INTL .)
    BREAK           reduce using rule 19 (IntLiteral -> INTL .)
    RETURN          reduce using rule 19 (IntLiteral -> INTL .)
    (               reduce using rule 19 (IntLiteral -> INTL .)
    INC             reduce using rule 19 (IntLiteral -> INTL .)
    DEC             reduce using rule 19 (IntLiteral -> INTL .)
    INTL            reduce using rule 19 (IntLiteral -> INTL .)
    BOOLL           reduce using rule 19 (IntLiteral -> INTL .)
    CHARL           reduce using rule 19 (IntLiteral -> INTL .)
    }               reduce using rule 19 (IntLiteral -> INTL .)
    ,               reduce using rule 19 (IntLiteral -> INTL .)


state 43

    (45) ReturnStatement -> RETURN . Expression ;
    (46) ReturnStatement -> RETURN . ;
    (16) Expression -> . BinaryExpressionPrio7
    (13) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7
    (14) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 Equal BinaryExpressionPrio7
    (15) BinaryExpressionPrio7 -> . BinaryExpressionPrio6
    (8) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6
    (9) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6
    (10) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Less BinaryExpressionPrio6
    (11) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Greater BinaryExpressionPrio6
    (12) BinaryExpressionPrio6 -> . BinaryExpressionPrio4
    (5) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Add BinaryExpressionPrio4
    (6) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Sub BinaryExpressionPrio4
    (7) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (1) BinaryExpressionPrio3 -> . UnaryExpression Mul BinaryExpressionPrio3
    (2) BinaryExpressionPrio3 -> . UnaryExpression Div BinaryExpressionPrio3
    (3) BinaryExpressionPrio3 -> . UnaryExpression Mod BinaryExpressionPrio3
    (4) BinaryExpressionPrio3 -> . UnaryExpression
    (80) UnaryExpression -> . IncrementAfter
    (81) UnaryExpression -> . IncrementBefore
    (82) UnaryExpression -> . DecrementAfter
    (83) UnaryExpression -> . DecrementBefore
    (84) UnaryExpression -> . FunctionCall
    (85) UnaryExpression -> . VarName
    (86) UnaryExpression -> . Literal
    (87) UnaryExpression -> . ( Expression )
    (78) IncrementAfter -> . VarName Inc
    (79) IncrementBefore -> . Inc VarName
    (75) DecrementAfter -> . VarName Dec
    (76) DecrementBefore -> . Dec VarName
    (77) FunctionCall -> . VarName ( ArgumentListR )
    (74) VarName -> . ID
    (20) Literal -> . IntLiteral
    (21) Literal -> . BoolLiteral
    (22) Literal -> . CharLiteral
    (29) Inc -> . INC
    (24) Dec -> . DEC
    (19) IntLiteral -> . INTL
    (17) BoolLiteral -> . BOOLL
    (18) CharLiteral -> . CHARL

    ;               shift and go to state 77
    (               shift and go to state 38
    ID              shift and go to state 71
    INC             shift and go to state 60
    DEC             shift and go to state 61
    INTL            shift and go to state 42
    BOOLL           shift and go to state 62
    CHARL           shift and go to state 63

    Expression                     shift and go to state 76
    BinaryExpressionPrio7          shift and go to state 36
    BinaryExpressionPrio6          shift and go to state 44
    BinaryExpressionPrio4          shift and go to state 45
    BinaryExpressionPrio3          shift and go to state 46
    UnaryExpression                shift and go to state 47
    IncrementAfter                 shift and go to state 48
    IncrementBefore                shift and go to state 49
    DecrementAfter                 shift and go to state 50
    DecrementBefore                shift and go to state 51
    FunctionCall                   shift and go to state 52
    VarName                        shift and go to state 53
    Literal                        shift and go to state 54
    Inc                            shift and go to state 55
    Dec                            shift and go to state 56
    IntLiteral                     shift and go to state 57
    BoolLiteral                    shift and go to state 58
    CharLiteral                    shift and go to state 59

state 44

    (13) BinaryExpressionPrio7 -> BinaryExpressionPrio6 . NotEqual BinaryExpressionPrio7
    (14) BinaryExpressionPrio7 -> BinaryExpressionPrio6 . Equal BinaryExpressionPrio7
    (15) BinaryExpressionPrio7 -> BinaryExpressionPrio6 .
    (34) NotEqual -> . NE
    (26) Equal -> . EQ

    ;               reduce using rule 15 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 .)
    )               reduce using rule 15 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 .)
    ID              reduce using rule 15 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 .)
    IF              reduce using rule 15 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 .)
    FOR             reduce using rule 15 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 .)
    WHILE           reduce using rule 15 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 .)
    BREAK           reduce using rule 15 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 .)
    RETURN          reduce using rule 15 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 .)
    (               reduce using rule 15 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 .)
    INC             reduce using rule 15 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 .)
    DEC             reduce using rule 15 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 .)
    INTL            reduce using rule 15 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 .)
    BOOLL           reduce using rule 15 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 .)
    CHARL           reduce using rule 15 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 .)
    }               reduce using rule 15 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 .)
    ,               reduce using rule 15 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 .)
    NE              shift and go to state 80
    EQ              shift and go to state 81

    NotEqual                       shift and go to state 78
    Equal                          shift and go to state 79

state 45

    (8) BinaryExpressionPrio6 -> BinaryExpressionPrio4 . LessEqual BinaryExpressionPrio6
    (9) BinaryExpressionPrio6 -> BinaryExpressionPrio4 . GreaterEqual BinaryExpressionPrio6
    (10) BinaryExpressionPrio6 -> BinaryExpressionPrio4 . Less BinaryExpressionPrio6
    (11) BinaryExpressionPrio6 -> BinaryExpressionPrio4 . Greater BinaryExpressionPrio6
    (12) BinaryExpressionPrio6 -> BinaryExpressionPrio4 .
    (31) LessEqual -> . GEQ
    (28) GreaterEqual -> . LEQ
    (30) Less -> . LT
    (27) Greater -> . GT

    NE              reduce using rule 12 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 .)
    EQ              reduce using rule 12 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 .)
    ;               reduce using rule 12 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 .)
    )               reduce using rule 12 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 .)
    ID              reduce using rule 12 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 .)
    IF              reduce using rule 12 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 .)
    FOR             reduce using rule 12 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 .)
    WHILE           reduce using rule 12 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 .)
    BREAK           reduce using rule 12 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 .)
    RETURN          reduce using rule 12 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 .)
    (               reduce using rule 12 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 .)
    INC             reduce using rule 12 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 .)
    DEC             reduce using rule 12 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 .)
    INTL            reduce using rule 12 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 .)
    BOOLL           reduce using rule 12 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 .)
    CHARL           reduce using rule 12 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 .)
    }               reduce using rule 12 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 .)
    ,               reduce using rule 12 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 .)
    GEQ             shift and go to state 86
    LEQ             shift and go to state 87
    LT              shift and go to state 88
    GT              shift and go to state 89

    LessEqual                      shift and go to state 82
    GreaterEqual                   shift and go to state 83
    Less                           shift and go to state 84
    Greater                        shift and go to state 85

state 46

    (5) BinaryExpressionPrio4 -> BinaryExpressionPrio3 . Add BinaryExpressionPrio4
    (6) BinaryExpressionPrio4 -> BinaryExpressionPrio3 . Sub BinaryExpressionPrio4
    (7) BinaryExpressionPrio4 -> BinaryExpressionPrio3 .
    (23) Add -> . +
    (35) Sub -> . -

    GEQ             reduce using rule 7 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 .)
    LEQ             reduce using rule 7 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 .)
    LT              reduce using rule 7 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 .)
    GT              reduce using rule 7 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 .)
    NE              reduce using rule 7 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 .)
    EQ              reduce using rule 7 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 .)
    ;               reduce using rule 7 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 .)
    )               reduce using rule 7 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 .)
    ID              reduce using rule 7 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 .)
    IF              reduce using rule 7 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 .)
    FOR             reduce using rule 7 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 .)
    WHILE           reduce using rule 7 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 .)
    BREAK           reduce using rule 7 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 .)
    RETURN          reduce using rule 7 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 .)
    (               reduce using rule 7 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 .)
    INC             reduce using rule 7 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 .)
    DEC             reduce using rule 7 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 .)
    INTL            reduce using rule 7 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 .)
    BOOLL           reduce using rule 7 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 .)
    CHARL           reduce using rule 7 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 .)
    }               reduce using rule 7 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 .)
    ,               reduce using rule 7 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 .)
    +               shift and go to state 92
    -               shift and go to state 93

    Add                            shift and go to state 90
    Sub                            shift and go to state 91

state 47

    (1) BinaryExpressionPrio3 -> UnaryExpression . Mul BinaryExpressionPrio3
    (2) BinaryExpressionPrio3 -> UnaryExpression . Div BinaryExpressionPrio3
    (3) BinaryExpressionPrio3 -> UnaryExpression . Mod BinaryExpressionPrio3
    (4) BinaryExpressionPrio3 -> UnaryExpression .
    (33) Mul -> . *
    (25) Div -> . /
    (32) Mod -> . %

    +               reduce using rule 4 (BinaryExpressionPrio3 -> UnaryExpression .)
    -               reduce using rule 4 (BinaryExpressionPrio3 -> UnaryExpression .)
    GEQ             reduce using rule 4 (BinaryExpressionPrio3 -> UnaryExpression .)
    LEQ             reduce using rule 4 (BinaryExpressionPrio3 -> UnaryExpression .)
    LT              reduce using rule 4 (BinaryExpressionPrio3 -> UnaryExpression .)
    GT              reduce using rule 4 (BinaryExpressionPrio3 -> UnaryExpression .)
    NE              reduce using rule 4 (BinaryExpressionPrio3 -> UnaryExpression .)
    EQ              reduce using rule 4 (BinaryExpressionPrio3 -> UnaryExpression .)
    ;               reduce using rule 4 (BinaryExpressionPrio3 -> UnaryExpression .)
    )               reduce using rule 4 (BinaryExpressionPrio3 -> UnaryExpression .)
    ID              reduce using rule 4 (BinaryExpressionPrio3 -> UnaryExpression .)
    IF              reduce using rule 4 (BinaryExpressionPrio3 -> UnaryExpression .)
    FOR             reduce using rule 4 (BinaryExpressionPrio3 -> UnaryExpression .)
    WHILE           reduce using rule 4 (BinaryExpressionPrio3 -> UnaryExpression .)
    BREAK           reduce using rule 4 (BinaryExpressionPrio3 -> UnaryExpression .)
    RETURN          reduce using rule 4 (BinaryExpressionPrio3 -> UnaryExpression .)
    (               reduce using rule 4 (BinaryExpressionPrio3 -> UnaryExpression .)
    INC             reduce using rule 4 (BinaryExpressionPrio3 -> UnaryExpression .)
    DEC             reduce using rule 4 (BinaryExpressionPrio3 -> UnaryExpression .)
    INTL            reduce using rule 4 (BinaryExpressionPrio3 -> UnaryExpression .)
    BOOLL           reduce using rule 4 (BinaryExpressionPrio3 -> UnaryExpression .)
    CHARL           reduce using rule 4 (BinaryExpressionPrio3 -> UnaryExpression .)
    }               reduce using rule 4 (BinaryExpressionPrio3 -> UnaryExpression .)
    ,               reduce using rule 4 (BinaryExpressionPrio3 -> UnaryExpression .)
    *               shift and go to state 97
    /               shift and go to state 98
    %               shift and go to state 99

    Mul                            shift and go to state 94
    Div                            shift and go to state 95
    Mod                            shift and go to state 96

state 48

    (80) UnaryExpression -> IncrementAfter .

    *               reduce using rule 80 (UnaryExpression -> IncrementAfter .)
    /               reduce using rule 80 (UnaryExpression -> IncrementAfter .)
    %               reduce using rule 80 (UnaryExpression -> IncrementAfter .)
    +               reduce using rule 80 (UnaryExpression -> IncrementAfter .)
    -               reduce using rule 80 (UnaryExpression -> IncrementAfter .)
    GEQ             reduce using rule 80 (UnaryExpression -> IncrementAfter .)
    LEQ             reduce using rule 80 (UnaryExpression -> IncrementAfter .)
    LT              reduce using rule 80 (UnaryExpression -> IncrementAfter .)
    GT              reduce using rule 80 (UnaryExpression -> IncrementAfter .)
    NE              reduce using rule 80 (UnaryExpression -> IncrementAfter .)
    EQ              reduce using rule 80 (UnaryExpression -> IncrementAfter .)
    ;               reduce using rule 80 (UnaryExpression -> IncrementAfter .)
    )               reduce using rule 80 (UnaryExpression -> IncrementAfter .)
    ID              reduce using rule 80 (UnaryExpression -> IncrementAfter .)
    IF              reduce using rule 80 (UnaryExpression -> IncrementAfter .)
    FOR             reduce using rule 80 (UnaryExpression -> IncrementAfter .)
    WHILE           reduce using rule 80 (UnaryExpression -> IncrementAfter .)
    BREAK           reduce using rule 80 (UnaryExpression -> IncrementAfter .)
    RETURN          reduce using rule 80 (UnaryExpression -> IncrementAfter .)
    (               reduce using rule 80 (UnaryExpression -> IncrementAfter .)
    INC             reduce using rule 80 (UnaryExpression -> IncrementAfter .)
    DEC             reduce using rule 80 (UnaryExpression -> IncrementAfter .)
    INTL            reduce using rule 80 (UnaryExpression -> IncrementAfter .)
    BOOLL           reduce using rule 80 (UnaryExpression -> IncrementAfter .)
    CHARL           reduce using rule 80 (UnaryExpression -> IncrementAfter .)
    }               reduce using rule 80 (UnaryExpression -> IncrementAfter .)
    ,               reduce using rule 80 (UnaryExpression -> IncrementAfter .)


state 49

    (81) UnaryExpression -> IncrementBefore .

    *               reduce using rule 81 (UnaryExpression -> IncrementBefore .)
    /               reduce using rule 81 (UnaryExpression -> IncrementBefore .)
    %               reduce using rule 81 (UnaryExpression -> IncrementBefore .)
    +               reduce using rule 81 (UnaryExpression -> IncrementBefore .)
    -               reduce using rule 81 (UnaryExpression -> IncrementBefore .)
    GEQ             reduce using rule 81 (UnaryExpression -> IncrementBefore .)
    LEQ             reduce using rule 81 (UnaryExpression -> IncrementBefore .)
    LT              reduce using rule 81 (UnaryExpression -> IncrementBefore .)
    GT              reduce using rule 81 (UnaryExpression -> IncrementBefore .)
    NE              reduce using rule 81 (UnaryExpression -> IncrementBefore .)
    EQ              reduce using rule 81 (UnaryExpression -> IncrementBefore .)
    ;               reduce using rule 81 (UnaryExpression -> IncrementBefore .)
    )               reduce using rule 81 (UnaryExpression -> IncrementBefore .)
    ID              reduce using rule 81 (UnaryExpression -> IncrementBefore .)
    IF              reduce using rule 81 (UnaryExpression -> IncrementBefore .)
    FOR             reduce using rule 81 (UnaryExpression -> IncrementBefore .)
    WHILE           reduce using rule 81 (UnaryExpression -> IncrementBefore .)
    BREAK           reduce using rule 81 (UnaryExpression -> IncrementBefore .)
    RETURN          reduce using rule 81 (UnaryExpression -> IncrementBefore .)
    (               reduce using rule 81 (UnaryExpression -> IncrementBefore .)
    INC             reduce using rule 81 (UnaryExpression -> IncrementBefore .)
    DEC             reduce using rule 81 (UnaryExpression -> IncrementBefore .)
    INTL            reduce using rule 81 (UnaryExpression -> IncrementBefore .)
    BOOLL           reduce using rule 81 (UnaryExpression -> IncrementBefore .)
    CHARL           reduce using rule 81 (UnaryExpression -> IncrementBefore .)
    }               reduce using rule 81 (UnaryExpression -> IncrementBefore .)
    ,               reduce using rule 81 (UnaryExpression -> IncrementBefore .)


state 50

    (82) UnaryExpression -> DecrementAfter .

    *               reduce using rule 82 (UnaryExpression -> DecrementAfter .)
    /               reduce using rule 82 (UnaryExpression -> DecrementAfter .)
    %               reduce using rule 82 (UnaryExpression -> DecrementAfter .)
    +               reduce using rule 82 (UnaryExpression -> DecrementAfter .)
    -               reduce using rule 82 (UnaryExpression -> DecrementAfter .)
    GEQ             reduce using rule 82 (UnaryExpression -> DecrementAfter .)
    LEQ             reduce using rule 82 (UnaryExpression -> DecrementAfter .)
    LT              reduce using rule 82 (UnaryExpression -> DecrementAfter .)
    GT              reduce using rule 82 (UnaryExpression -> DecrementAfter .)
    NE              reduce using rule 82 (UnaryExpression -> DecrementAfter .)
    EQ              reduce using rule 82 (UnaryExpression -> DecrementAfter .)
    ;               reduce using rule 82 (UnaryExpression -> DecrementAfter .)
    )               reduce using rule 82 (UnaryExpression -> DecrementAfter .)
    ID              reduce using rule 82 (UnaryExpression -> DecrementAfter .)
    IF              reduce using rule 82 (UnaryExpression -> DecrementAfter .)
    FOR             reduce using rule 82 (UnaryExpression -> DecrementAfter .)
    WHILE           reduce using rule 82 (UnaryExpression -> DecrementAfter .)
    BREAK           reduce using rule 82 (UnaryExpression -> DecrementAfter .)
    RETURN          reduce using rule 82 (UnaryExpression -> DecrementAfter .)
    (               reduce using rule 82 (UnaryExpression -> DecrementAfter .)
    INC             reduce using rule 82 (UnaryExpression -> DecrementAfter .)
    DEC             reduce using rule 82 (UnaryExpression -> DecrementAfter .)
    INTL            reduce using rule 82 (UnaryExpression -> DecrementAfter .)
    BOOLL           reduce using rule 82 (UnaryExpression -> DecrementAfter .)
    CHARL           reduce using rule 82 (UnaryExpression -> DecrementAfter .)
    }               reduce using rule 82 (UnaryExpression -> DecrementAfter .)
    ,               reduce using rule 82 (UnaryExpression -> DecrementAfter .)


state 51

    (83) UnaryExpression -> DecrementBefore .

    *               reduce using rule 83 (UnaryExpression -> DecrementBefore .)
    /               reduce using rule 83 (UnaryExpression -> DecrementBefore .)
    %               reduce using rule 83 (UnaryExpression -> DecrementBefore .)
    +               reduce using rule 83 (UnaryExpression -> DecrementBefore .)
    -               reduce using rule 83 (UnaryExpression -> DecrementBefore .)
    GEQ             reduce using rule 83 (UnaryExpression -> DecrementBefore .)
    LEQ             reduce using rule 83 (UnaryExpression -> DecrementBefore .)
    LT              reduce using rule 83 (UnaryExpression -> DecrementBefore .)
    GT              reduce using rule 83 (UnaryExpression -> DecrementBefore .)
    NE              reduce using rule 83 (UnaryExpression -> DecrementBefore .)
    EQ              reduce using rule 83 (UnaryExpression -> DecrementBefore .)
    ;               reduce using rule 83 (UnaryExpression -> DecrementBefore .)
    )               reduce using rule 83 (UnaryExpression -> DecrementBefore .)
    ID              reduce using rule 83 (UnaryExpression -> DecrementBefore .)
    IF              reduce using rule 83 (UnaryExpression -> DecrementBefore .)
    FOR             reduce using rule 83 (UnaryExpression -> DecrementBefore .)
    WHILE           reduce using rule 83 (UnaryExpression -> DecrementBefore .)
    BREAK           reduce using rule 83 (UnaryExpression -> DecrementBefore .)
    RETURN          reduce using rule 83 (UnaryExpression -> DecrementBefore .)
    (               reduce using rule 83 (UnaryExpression -> DecrementBefore .)
    INC             reduce using rule 83 (UnaryExpression -> DecrementBefore .)
    DEC             reduce using rule 83 (UnaryExpression -> DecrementBefore .)
    INTL            reduce using rule 83 (UnaryExpression -> DecrementBefore .)
    BOOLL           reduce using rule 83 (UnaryExpression -> DecrementBefore .)
    CHARL           reduce using rule 83 (UnaryExpression -> DecrementBefore .)
    }               reduce using rule 83 (UnaryExpression -> DecrementBefore .)
    ,               reduce using rule 83 (UnaryExpression -> DecrementBefore .)


state 52

    (84) UnaryExpression -> FunctionCall .

    *               reduce using rule 84 (UnaryExpression -> FunctionCall .)
    /               reduce using rule 84 (UnaryExpression -> FunctionCall .)
    %               reduce using rule 84 (UnaryExpression -> FunctionCall .)
    +               reduce using rule 84 (UnaryExpression -> FunctionCall .)
    -               reduce using rule 84 (UnaryExpression -> FunctionCall .)
    GEQ             reduce using rule 84 (UnaryExpression -> FunctionCall .)
    LEQ             reduce using rule 84 (UnaryExpression -> FunctionCall .)
    LT              reduce using rule 84 (UnaryExpression -> FunctionCall .)
    GT              reduce using rule 84 (UnaryExpression -> FunctionCall .)
    NE              reduce using rule 84 (UnaryExpression -> FunctionCall .)
    EQ              reduce using rule 84 (UnaryExpression -> FunctionCall .)
    ;               reduce using rule 84 (UnaryExpression -> FunctionCall .)
    )               reduce using rule 84 (UnaryExpression -> FunctionCall .)
    ID              reduce using rule 84 (UnaryExpression -> FunctionCall .)
    IF              reduce using rule 84 (UnaryExpression -> FunctionCall .)
    FOR             reduce using rule 84 (UnaryExpression -> FunctionCall .)
    WHILE           reduce using rule 84 (UnaryExpression -> FunctionCall .)
    BREAK           reduce using rule 84 (UnaryExpression -> FunctionCall .)
    RETURN          reduce using rule 84 (UnaryExpression -> FunctionCall .)
    (               reduce using rule 84 (UnaryExpression -> FunctionCall .)
    INC             reduce using rule 84 (UnaryExpression -> FunctionCall .)
    DEC             reduce using rule 84 (UnaryExpression -> FunctionCall .)
    INTL            reduce using rule 84 (UnaryExpression -> FunctionCall .)
    BOOLL           reduce using rule 84 (UnaryExpression -> FunctionCall .)
    CHARL           reduce using rule 84 (UnaryExpression -> FunctionCall .)
    }               reduce using rule 84 (UnaryExpression -> FunctionCall .)
    ,               reduce using rule 84 (UnaryExpression -> FunctionCall .)


state 53

    (85) UnaryExpression -> VarName .
    (78) IncrementAfter -> VarName . Inc
    (75) DecrementAfter -> VarName . Dec
    (77) FunctionCall -> VarName . ( ArgumentListR )
    (29) Inc -> . INC
    (24) Dec -> . DEC

  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
    *               reduce using rule 85 (UnaryExpression -> VarName .)
    /               reduce using rule 85 (UnaryExpression -> VarName .)
    %               reduce using rule 85 (UnaryExpression -> VarName .)
    +               reduce using rule 85 (UnaryExpression -> VarName .)
    -               reduce using rule 85 (UnaryExpression -> VarName .)
    GEQ             reduce using rule 85 (UnaryExpression -> VarName .)
    LEQ             reduce using rule 85 (UnaryExpression -> VarName .)
    LT              reduce using rule 85 (UnaryExpression -> VarName .)
    GT              reduce using rule 85 (UnaryExpression -> VarName .)
    NE              reduce using rule 85 (UnaryExpression -> VarName .)
    EQ              reduce using rule 85 (UnaryExpression -> VarName .)
    ;               reduce using rule 85 (UnaryExpression -> VarName .)
    )               reduce using rule 85 (UnaryExpression -> VarName .)
    ID              reduce using rule 85 (UnaryExpression -> VarName .)
    IF              reduce using rule 85 (UnaryExpression -> VarName .)
    FOR             reduce using rule 85 (UnaryExpression -> VarName .)
    WHILE           reduce using rule 85 (UnaryExpression -> VarName .)
    BREAK           reduce using rule 85 (UnaryExpression -> VarName .)
    RETURN          reduce using rule 85 (UnaryExpression -> VarName .)
    INTL            reduce using rule 85 (UnaryExpression -> VarName .)
    BOOLL           reduce using rule 85 (UnaryExpression -> VarName .)
    CHARL           reduce using rule 85 (UnaryExpression -> VarName .)
    }               reduce using rule 85 (UnaryExpression -> VarName .)
    ,               reduce using rule 85 (UnaryExpression -> VarName .)
    (               shift and go to state 102
    INC             shift and go to state 60
    DEC             shift and go to state 61

  ! (               [ reduce using rule 85 (UnaryExpression -> VarName .) ]
  ! INC             [ reduce using rule 85 (UnaryExpression -> VarName .) ]
  ! DEC             [ reduce using rule 85 (UnaryExpression -> VarName .) ]

    Inc                            shift and go to state 100
    Dec                            shift and go to state 101

state 54

    (86) UnaryExpression -> Literal .

    *               reduce using rule 86 (UnaryExpression -> Literal .)
    /               reduce using rule 86 (UnaryExpression -> Literal .)
    %               reduce using rule 86 (UnaryExpression -> Literal .)
    +               reduce using rule 86 (UnaryExpression -> Literal .)
    -               reduce using rule 86 (UnaryExpression -> Literal .)
    GEQ             reduce using rule 86 (UnaryExpression -> Literal .)
    LEQ             reduce using rule 86 (UnaryExpression -> Literal .)
    LT              reduce using rule 86 (UnaryExpression -> Literal .)
    GT              reduce using rule 86 (UnaryExpression -> Literal .)
    NE              reduce using rule 86 (UnaryExpression -> Literal .)
    EQ              reduce using rule 86 (UnaryExpression -> Literal .)
    ;               reduce using rule 86 (UnaryExpression -> Literal .)
    )               reduce using rule 86 (UnaryExpression -> Literal .)
    ID              reduce using rule 86 (UnaryExpression -> Literal .)
    IF              reduce using rule 86 (UnaryExpression -> Literal .)
    FOR             reduce using rule 86 (UnaryExpression -> Literal .)
    WHILE           reduce using rule 86 (UnaryExpression -> Literal .)
    BREAK           reduce using rule 86 (UnaryExpression -> Literal .)
    RETURN          reduce using rule 86 (UnaryExpression -> Literal .)
    (               reduce using rule 86 (UnaryExpression -> Literal .)
    INC             reduce using rule 86 (UnaryExpression -> Literal .)
    DEC             reduce using rule 86 (UnaryExpression -> Literal .)
    INTL            reduce using rule 86 (UnaryExpression -> Literal .)
    BOOLL           reduce using rule 86 (UnaryExpression -> Literal .)
    CHARL           reduce using rule 86 (UnaryExpression -> Literal .)
    }               reduce using rule 86 (UnaryExpression -> Literal .)
    ,               reduce using rule 86 (UnaryExpression -> Literal .)


state 55

    (79) IncrementBefore -> Inc . VarName
    (74) VarName -> . ID

    ID              shift and go to state 71

    VarName                        shift and go to state 103

state 56

    (76) DecrementBefore -> Dec . VarName
    (74) VarName -> . ID

    ID              shift and go to state 71

    VarName                        shift and go to state 104

state 57

    (20) Literal -> IntLiteral .

    *               reduce using rule 20 (Literal -> IntLiteral .)
    /               reduce using rule 20 (Literal -> IntLiteral .)
    %               reduce using rule 20 (Literal -> IntLiteral .)
    +               reduce using rule 20 (Literal -> IntLiteral .)
    -               reduce using rule 20 (Literal -> IntLiteral .)
    GEQ             reduce using rule 20 (Literal -> IntLiteral .)
    LEQ             reduce using rule 20 (Literal -> IntLiteral .)
    LT              reduce using rule 20 (Literal -> IntLiteral .)
    GT              reduce using rule 20 (Literal -> IntLiteral .)
    NE              reduce using rule 20 (Literal -> IntLiteral .)
    EQ              reduce using rule 20 (Literal -> IntLiteral .)
    ;               reduce using rule 20 (Literal -> IntLiteral .)
    )               reduce using rule 20 (Literal -> IntLiteral .)
    ID              reduce using rule 20 (Literal -> IntLiteral .)
    IF              reduce using rule 20 (Literal -> IntLiteral .)
    FOR             reduce using rule 20 (Literal -> IntLiteral .)
    WHILE           reduce using rule 20 (Literal -> IntLiteral .)
    BREAK           reduce using rule 20 (Literal -> IntLiteral .)
    RETURN          reduce using rule 20 (Literal -> IntLiteral .)
    (               reduce using rule 20 (Literal -> IntLiteral .)
    INC             reduce using rule 20 (Literal -> IntLiteral .)
    DEC             reduce using rule 20 (Literal -> IntLiteral .)
    INTL            reduce using rule 20 (Literal -> IntLiteral .)
    BOOLL           reduce using rule 20 (Literal -> IntLiteral .)
    CHARL           reduce using rule 20 (Literal -> IntLiteral .)
    }               reduce using rule 20 (Literal -> IntLiteral .)
    ,               reduce using rule 20 (Literal -> IntLiteral .)


state 58

    (21) Literal -> BoolLiteral .

    *               reduce using rule 21 (Literal -> BoolLiteral .)
    /               reduce using rule 21 (Literal -> BoolLiteral .)
    %               reduce using rule 21 (Literal -> BoolLiteral .)
    +               reduce using rule 21 (Literal -> BoolLiteral .)
    -               reduce using rule 21 (Literal -> BoolLiteral .)
    GEQ             reduce using rule 21 (Literal -> BoolLiteral .)
    LEQ             reduce using rule 21 (Literal -> BoolLiteral .)
    LT              reduce using rule 21 (Literal -> BoolLiteral .)
    GT              reduce using rule 21 (Literal -> BoolLiteral .)
    NE              reduce using rule 21 (Literal -> BoolLiteral .)
    EQ              reduce using rule 21 (Literal -> BoolLiteral .)
    ;               reduce using rule 21 (Literal -> BoolLiteral .)
    )               reduce using rule 21 (Literal -> BoolLiteral .)
    ID              reduce using rule 21 (Literal -> BoolLiteral .)
    IF              reduce using rule 21 (Literal -> BoolLiteral .)
    FOR             reduce using rule 21 (Literal -> BoolLiteral .)
    WHILE           reduce using rule 21 (Literal -> BoolLiteral .)
    BREAK           reduce using rule 21 (Literal -> BoolLiteral .)
    RETURN          reduce using rule 21 (Literal -> BoolLiteral .)
    (               reduce using rule 21 (Literal -> BoolLiteral .)
    INC             reduce using rule 21 (Literal -> BoolLiteral .)
    DEC             reduce using rule 21 (Literal -> BoolLiteral .)
    INTL            reduce using rule 21 (Literal -> BoolLiteral .)
    BOOLL           reduce using rule 21 (Literal -> BoolLiteral .)
    CHARL           reduce using rule 21 (Literal -> BoolLiteral .)
    }               reduce using rule 21 (Literal -> BoolLiteral .)
    ,               reduce using rule 21 (Literal -> BoolLiteral .)


state 59

    (22) Literal -> CharLiteral .

    *               reduce using rule 22 (Literal -> CharLiteral .)
    /               reduce using rule 22 (Literal -> CharLiteral .)
    %               reduce using rule 22 (Literal -> CharLiteral .)
    +               reduce using rule 22 (Literal -> CharLiteral .)
    -               reduce using rule 22 (Literal -> CharLiteral .)
    GEQ             reduce using rule 22 (Literal -> CharLiteral .)
    LEQ             reduce using rule 22 (Literal -> CharLiteral .)
    LT              reduce using rule 22 (Literal -> CharLiteral .)
    GT              reduce using rule 22 (Literal -> CharLiteral .)
    NE              reduce using rule 22 (Literal -> CharLiteral .)
    EQ              reduce using rule 22 (Literal -> CharLiteral .)
    ;               reduce using rule 22 (Literal -> CharLiteral .)
    )               reduce using rule 22 (Literal -> CharLiteral .)
    ID              reduce using rule 22 (Literal -> CharLiteral .)
    IF              reduce using rule 22 (Literal -> CharLiteral .)
    FOR             reduce using rule 22 (Literal -> CharLiteral .)
    WHILE           reduce using rule 22 (Literal -> CharLiteral .)
    BREAK           reduce using rule 22 (Literal -> CharLiteral .)
    RETURN          reduce using rule 22 (Literal -> CharLiteral .)
    (               reduce using rule 22 (Literal -> CharLiteral .)
    INC             reduce using rule 22 (Literal -> CharLiteral .)
    DEC             reduce using rule 22 (Literal -> CharLiteral .)
    INTL            reduce using rule 22 (Literal -> CharLiteral .)
    BOOLL           reduce using rule 22 (Literal -> CharLiteral .)
    CHARL           reduce using rule 22 (Literal -> CharLiteral .)
    }               reduce using rule 22 (Literal -> CharLiteral .)
    ,               reduce using rule 22 (Literal -> CharLiteral .)


state 60

    (29) Inc -> INC .

    ID              reduce using rule 29 (Inc -> INC .)
    *               reduce using rule 29 (Inc -> INC .)
    /               reduce using rule 29 (Inc -> INC .)
    %               reduce using rule 29 (Inc -> INC .)
    +               reduce using rule 29 (Inc -> INC .)
    -               reduce using rule 29 (Inc -> INC .)
    GEQ             reduce using rule 29 (Inc -> INC .)
    LEQ             reduce using rule 29 (Inc -> INC .)
    LT              reduce using rule 29 (Inc -> INC .)
    GT              reduce using rule 29 (Inc -> INC .)
    NE              reduce using rule 29 (Inc -> INC .)
    EQ              reduce using rule 29 (Inc -> INC .)
    ;               reduce using rule 29 (Inc -> INC .)
    )               reduce using rule 29 (Inc -> INC .)
    IF              reduce using rule 29 (Inc -> INC .)
    FOR             reduce using rule 29 (Inc -> INC .)
    WHILE           reduce using rule 29 (Inc -> INC .)
    BREAK           reduce using rule 29 (Inc -> INC .)
    RETURN          reduce using rule 29 (Inc -> INC .)
    (               reduce using rule 29 (Inc -> INC .)
    INC             reduce using rule 29 (Inc -> INC .)
    DEC             reduce using rule 29 (Inc -> INC .)
    INTL            reduce using rule 29 (Inc -> INC .)
    BOOLL           reduce using rule 29 (Inc -> INC .)
    CHARL           reduce using rule 29 (Inc -> INC .)
    }               reduce using rule 29 (Inc -> INC .)
    ,               reduce using rule 29 (Inc -> INC .)


state 61

    (24) Dec -> DEC .

    ID              reduce using rule 24 (Dec -> DEC .)
    *               reduce using rule 24 (Dec -> DEC .)
    /               reduce using rule 24 (Dec -> DEC .)
    %               reduce using rule 24 (Dec -> DEC .)
    +               reduce using rule 24 (Dec -> DEC .)
    -               reduce using rule 24 (Dec -> DEC .)
    GEQ             reduce using rule 24 (Dec -> DEC .)
    LEQ             reduce using rule 24 (Dec -> DEC .)
    LT              reduce using rule 24 (Dec -> DEC .)
    GT              reduce using rule 24 (Dec -> DEC .)
    NE              reduce using rule 24 (Dec -> DEC .)
    EQ              reduce using rule 24 (Dec -> DEC .)
    ;               reduce using rule 24 (Dec -> DEC .)
    )               reduce using rule 24 (Dec -> DEC .)
    IF              reduce using rule 24 (Dec -> DEC .)
    FOR             reduce using rule 24 (Dec -> DEC .)
    WHILE           reduce using rule 24 (Dec -> DEC .)
    BREAK           reduce using rule 24 (Dec -> DEC .)
    RETURN          reduce using rule 24 (Dec -> DEC .)
    (               reduce using rule 24 (Dec -> DEC .)
    INC             reduce using rule 24 (Dec -> DEC .)
    DEC             reduce using rule 24 (Dec -> DEC .)
    INTL            reduce using rule 24 (Dec -> DEC .)
    BOOLL           reduce using rule 24 (Dec -> DEC .)
    CHARL           reduce using rule 24 (Dec -> DEC .)
    }               reduce using rule 24 (Dec -> DEC .)
    ,               reduce using rule 24 (Dec -> DEC .)


state 62

    (17) BoolLiteral -> BOOLL .

    *               reduce using rule 17 (BoolLiteral -> BOOLL .)
    /               reduce using rule 17 (BoolLiteral -> BOOLL .)
    %               reduce using rule 17 (BoolLiteral -> BOOLL .)
    +               reduce using rule 17 (BoolLiteral -> BOOLL .)
    -               reduce using rule 17 (BoolLiteral -> BOOLL .)
    GEQ             reduce using rule 17 (BoolLiteral -> BOOLL .)
    LEQ             reduce using rule 17 (BoolLiteral -> BOOLL .)
    LT              reduce using rule 17 (BoolLiteral -> BOOLL .)
    GT              reduce using rule 17 (BoolLiteral -> BOOLL .)
    NE              reduce using rule 17 (BoolLiteral -> BOOLL .)
    EQ              reduce using rule 17 (BoolLiteral -> BOOLL .)
    ;               reduce using rule 17 (BoolLiteral -> BOOLL .)
    )               reduce using rule 17 (BoolLiteral -> BOOLL .)
    ID              reduce using rule 17 (BoolLiteral -> BOOLL .)
    IF              reduce using rule 17 (BoolLiteral -> BOOLL .)
    FOR             reduce using rule 17 (BoolLiteral -> BOOLL .)
    WHILE           reduce using rule 17 (BoolLiteral -> BOOLL .)
    BREAK           reduce using rule 17 (BoolLiteral -> BOOLL .)
    RETURN          reduce using rule 17 (BoolLiteral -> BOOLL .)
    (               reduce using rule 17 (BoolLiteral -> BOOLL .)
    INC             reduce using rule 17 (BoolLiteral -> BOOLL .)
    DEC             reduce using rule 17 (BoolLiteral -> BOOLL .)
    INTL            reduce using rule 17 (BoolLiteral -> BOOLL .)
    BOOLL           reduce using rule 17 (BoolLiteral -> BOOLL .)
    CHARL           reduce using rule 17 (BoolLiteral -> BOOLL .)
    }               reduce using rule 17 (BoolLiteral -> BOOLL .)
    ,               reduce using rule 17 (BoolLiteral -> BOOLL .)


state 63

    (18) CharLiteral -> CHARL .

    *               reduce using rule 18 (CharLiteral -> CHARL .)
    /               reduce using rule 18 (CharLiteral -> CHARL .)
    %               reduce using rule 18 (CharLiteral -> CHARL .)
    +               reduce using rule 18 (CharLiteral -> CHARL .)
    -               reduce using rule 18 (CharLiteral -> CHARL .)
    GEQ             reduce using rule 18 (CharLiteral -> CHARL .)
    LEQ             reduce using rule 18 (CharLiteral -> CHARL .)
    LT              reduce using rule 18 (CharLiteral -> CHARL .)
    GT              reduce using rule 18 (CharLiteral -> CHARL .)
    NE              reduce using rule 18 (CharLiteral -> CHARL .)
    EQ              reduce using rule 18 (CharLiteral -> CHARL .)
    ;               reduce using rule 18 (CharLiteral -> CHARL .)
    )               reduce using rule 18 (CharLiteral -> CHARL .)
    ID              reduce using rule 18 (CharLiteral -> CHARL .)
    IF              reduce using rule 18 (CharLiteral -> CHARL .)
    FOR             reduce using rule 18 (CharLiteral -> CHARL .)
    WHILE           reduce using rule 18 (CharLiteral -> CHARL .)
    BREAK           reduce using rule 18 (CharLiteral -> CHARL .)
    RETURN          reduce using rule 18 (CharLiteral -> CHARL .)
    (               reduce using rule 18 (CharLiteral -> CHARL .)
    INC             reduce using rule 18 (CharLiteral -> CHARL .)
    DEC             reduce using rule 18 (CharLiteral -> CHARL .)
    INTL            reduce using rule 18 (CharLiteral -> CHARL .)
    BOOLL           reduce using rule 18 (CharLiteral -> CHARL .)
    CHARL           reduce using rule 18 (CharLiteral -> CHARL .)
    }               reduce using rule 18 (CharLiteral -> CHARL .)
    ,               reduce using rule 18 (CharLiteral -> CHARL .)


state 64

    (64) Block -> { StatementListR } .

    ID              reduce using rule 64 (Block -> { StatementListR } .)
    $end            reduce using rule 64 (Block -> { StatementListR } .)
    ELSE            reduce using rule 64 (Block -> { StatementListR } .)
    IF              reduce using rule 64 (Block -> { StatementListR } .)
    FOR             reduce using rule 64 (Block -> { StatementListR } .)
    WHILE           reduce using rule 64 (Block -> { StatementListR } .)
    BREAK           reduce using rule 64 (Block -> { StatementListR } .)
    RETURN          reduce using rule 64 (Block -> { StatementListR } .)
    ;               reduce using rule 64 (Block -> { StatementListR } .)
    (               reduce using rule 64 (Block -> { StatementListR } .)
    INC             reduce using rule 64 (Block -> { StatementListR } .)
    DEC             reduce using rule 64 (Block -> { StatementListR } .)
    INTL            reduce using rule 64 (Block -> { StatementListR } .)
    BOOLL           reduce using rule 64 (Block -> { StatementListR } .)
    CHARL           reduce using rule 64 (Block -> { StatementListR } .)
    }               reduce using rule 64 (Block -> { StatementListR } .)
    )               reduce using rule 64 (Block -> { StatementListR } .)


state 65

    (57) StatementListR -> Statement StatementListR .

    }               reduce using rule 57 (StatementListR -> Statement StatementListR .)


state 66

    (49) Statement -> Expression ; .

    ID              reduce using rule 49 (Statement -> Expression ; .)
    IF              reduce using rule 49 (Statement -> Expression ; .)
    FOR             reduce using rule 49 (Statement -> Expression ; .)
    WHILE           reduce using rule 49 (Statement -> Expression ; .)
    BREAK           reduce using rule 49 (Statement -> Expression ; .)
    RETURN          reduce using rule 49 (Statement -> Expression ; .)
    ;               reduce using rule 49 (Statement -> Expression ; .)
    (               reduce using rule 49 (Statement -> Expression ; .)
    INC             reduce using rule 49 (Statement -> Expression ; .)
    DEC             reduce using rule 49 (Statement -> Expression ; .)
    INTL            reduce using rule 49 (Statement -> Expression ; .)
    BOOLL           reduce using rule 49 (Statement -> Expression ; .)
    CHARL           reduce using rule 49 (Statement -> Expression ; .)
    }               reduce using rule 49 (Statement -> Expression ; .)
    )               reduce using rule 49 (Statement -> Expression ; .)


state 67

    (36) AssignmentStatement -> ID = . Expression ;
    (37) AssignmentStatement -> ID = . Expression
    (16) Expression -> . BinaryExpressionPrio7
    (13) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7
    (14) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 Equal BinaryExpressionPrio7
    (15) BinaryExpressionPrio7 -> . BinaryExpressionPrio6
    (8) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6
    (9) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6
    (10) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Less BinaryExpressionPrio6
    (11) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Greater BinaryExpressionPrio6
    (12) BinaryExpressionPrio6 -> . BinaryExpressionPrio4
    (5) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Add BinaryExpressionPrio4
    (6) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Sub BinaryExpressionPrio4
    (7) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (1) BinaryExpressionPrio3 -> . UnaryExpression Mul BinaryExpressionPrio3
    (2) BinaryExpressionPrio3 -> . UnaryExpression Div BinaryExpressionPrio3
    (3) BinaryExpressionPrio3 -> . UnaryExpression Mod BinaryExpressionPrio3
    (4) BinaryExpressionPrio3 -> . UnaryExpression
    (80) UnaryExpression -> . IncrementAfter
    (81) UnaryExpression -> . IncrementBefore
    (82) UnaryExpression -> . DecrementAfter
    (83) UnaryExpression -> . DecrementBefore
    (84) UnaryExpression -> . FunctionCall
    (85) UnaryExpression -> . VarName
    (86) UnaryExpression -> . Literal
    (87) UnaryExpression -> . ( Expression )
    (78) IncrementAfter -> . VarName Inc
    (79) IncrementBefore -> . Inc VarName
    (75) DecrementAfter -> . VarName Dec
    (76) DecrementBefore -> . Dec VarName
    (77) FunctionCall -> . VarName ( ArgumentListR )
    (74) VarName -> . ID
    (20) Literal -> . IntLiteral
    (21) Literal -> . BoolLiteral
    (22) Literal -> . CharLiteral
    (29) Inc -> . INC
    (24) Dec -> . DEC
    (19) IntLiteral -> . INTL
    (17) BoolLiteral -> . BOOLL
    (18) CharLiteral -> . CHARL

    (               shift and go to state 38
    ID              shift and go to state 71
    INC             shift and go to state 60
    DEC             shift and go to state 61
    INTL            shift and go to state 42
    BOOLL           shift and go to state 62
    CHARL           shift and go to state 63

    Expression                     shift and go to state 105
    BinaryExpressionPrio7          shift and go to state 36
    BinaryExpressionPrio6          shift and go to state 44
    BinaryExpressionPrio4          shift and go to state 45
    BinaryExpressionPrio3          shift and go to state 46
    UnaryExpression                shift and go to state 47
    IncrementAfter                 shift and go to state 48
    IncrementBefore                shift and go to state 49
    DecrementAfter                 shift and go to state 50
    DecrementBefore                shift and go to state 51
    FunctionCall                   shift and go to state 52
    VarName                        shift and go to state 53
    Literal                        shift and go to state 54
    Inc                            shift and go to state 55
    Dec                            shift and go to state 56
    IntLiteral                     shift and go to state 57
    BoolLiteral                    shift and go to state 58
    CharLiteral                    shift and go to state 59

state 68

    (41) DeclarationAssignmentStatement -> TypeName ID . = Expression ;
    (42) DeclarationStatement -> TypeName ID . ;

    =               shift and go to state 106
    ;               shift and go to state 107


state 69

    (44) IfElseStatement -> IF ( . Expression ) Block ELSE Block
    (16) Expression -> . BinaryExpressionPrio7
    (13) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7
    (14) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 Equal BinaryExpressionPrio7
    (15) BinaryExpressionPrio7 -> . BinaryExpressionPrio6
    (8) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6
    (9) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6
    (10) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Less BinaryExpressionPrio6
    (11) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Greater BinaryExpressionPrio6
    (12) BinaryExpressionPrio6 -> . BinaryExpressionPrio4
    (5) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Add BinaryExpressionPrio4
    (6) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Sub BinaryExpressionPrio4
    (7) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (1) BinaryExpressionPrio3 -> . UnaryExpression Mul BinaryExpressionPrio3
    (2) BinaryExpressionPrio3 -> . UnaryExpression Div BinaryExpressionPrio3
    (3) BinaryExpressionPrio3 -> . UnaryExpression Mod BinaryExpressionPrio3
    (4) BinaryExpressionPrio3 -> . UnaryExpression
    (80) UnaryExpression -> . IncrementAfter
    (81) UnaryExpression -> . IncrementBefore
    (82) UnaryExpression -> . DecrementAfter
    (83) UnaryExpression -> . DecrementBefore
    (84) UnaryExpression -> . FunctionCall
    (85) UnaryExpression -> . VarName
    (86) UnaryExpression -> . Literal
    (87) UnaryExpression -> . ( Expression )
    (78) IncrementAfter -> . VarName Inc
    (79) IncrementBefore -> . Inc VarName
    (75) DecrementAfter -> . VarName Dec
    (76) DecrementBefore -> . Dec VarName
    (77) FunctionCall -> . VarName ( ArgumentListR )
    (74) VarName -> . ID
    (20) Literal -> . IntLiteral
    (21) Literal -> . BoolLiteral
    (22) Literal -> . CharLiteral
    (29) Inc -> . INC
    (24) Dec -> . DEC
    (19) IntLiteral -> . INTL
    (17) BoolLiteral -> . BOOLL
    (18) CharLiteral -> . CHARL

    (               shift and go to state 38
    ID              shift and go to state 71
    INC             shift and go to state 60
    DEC             shift and go to state 61
    INTL            shift and go to state 42
    BOOLL           shift and go to state 62
    CHARL           shift and go to state 63

    Expression                     shift and go to state 108
    BinaryExpressionPrio7          shift and go to state 36
    BinaryExpressionPrio6          shift and go to state 44
    BinaryExpressionPrio4          shift and go to state 45
    BinaryExpressionPrio3          shift and go to state 46
    UnaryExpression                shift and go to state 47
    IncrementAfter                 shift and go to state 48
    IncrementBefore                shift and go to state 49
    DecrementAfter                 shift and go to state 50
    DecrementBefore                shift and go to state 51
    FunctionCall                   shift and go to state 52
    VarName                        shift and go to state 53
    Literal                        shift and go to state 54
    Inc                            shift and go to state 55
    Dec                            shift and go to state 56
    IntLiteral                     shift and go to state 57
    BoolLiteral                    shift and go to state 58
    CharLiteral                    shift and go to state 59

state 70

    (87) UnaryExpression -> ( Expression . )

    )               shift and go to state 109


state 71

    (74) VarName -> ID .

    (               reduce using rule 74 (VarName -> ID .)
    INC             reduce using rule 74 (VarName -> ID .)
    DEC             reduce using rule 74 (VarName -> ID .)
    *               reduce using rule 74 (VarName -> ID .)
    /               reduce using rule 74 (VarName -> ID .)
    %               reduce using rule 74 (VarName -> ID .)
    +               reduce using rule 74 (VarName -> ID .)
    -               reduce using rule 74 (VarName -> ID .)
    GEQ             reduce using rule 74 (VarName -> ID .)
    LEQ             reduce using rule 74 (VarName -> ID .)
    LT              reduce using rule 74 (VarName -> ID .)
    GT              reduce using rule 74 (VarName -> ID .)
    NE              reduce using rule 74 (VarName -> ID .)
    EQ              reduce using rule 74 (VarName -> ID .)
    )               reduce using rule 74 (VarName -> ID .)
    ;               reduce using rule 74 (VarName -> ID .)
    ID              reduce using rule 74 (VarName -> ID .)
    IF              reduce using rule 74 (VarName -> ID .)
    FOR             reduce using rule 74 (VarName -> ID .)
    WHILE           reduce using rule 74 (VarName -> ID .)
    BREAK           reduce using rule 74 (VarName -> ID .)
    RETURN          reduce using rule 74 (VarName -> ID .)
    INTL            reduce using rule 74 (VarName -> ID .)
    BOOLL           reduce using rule 74 (VarName -> ID .)
    CHARL           reduce using rule 74 (VarName -> ID .)
    }               reduce using rule 74 (VarName -> ID .)
    ,               reduce using rule 74 (VarName -> ID .)


state 72

    (43) ForStatement -> FOR ( . Statement Expression ; Statement ) Block
    (47) Statement -> . AssignmentStatement
    (48) Statement -> . DeclarationAssignmentStatement
    (49) Statement -> . Expression ;
    (50) Statement -> . DeclarationStatement
    (51) Statement -> . IfElseStatement
    (52) Statement -> . ForStatement
    (53) Statement -> . WhileStatement
    (54) Statement -> . BreakStatement
    (55) Statement -> . ReturnStatement
    (56) Statement -> . BlankStatement
    (36) AssignmentStatement -> . ID = Expression ;
    (37) AssignmentStatement -> . ID = Expression
    (41) DeclarationAssignmentStatement -> . TypeName ID = Expression ;
    (16) Expression -> . BinaryExpressionPrio7
    (42) DeclarationStatement -> . TypeName ID ;
    (44) IfElseStatement -> . IF ( Expression ) Block ELSE Block
    (43) ForStatement -> . FOR ( Statement Expression ; Statement ) Block
    (59) WhileStatement -> . WHILE ( Expression ) Block
    (39) BreakStatement -> . BREAK INTL ;
    (40) BreakStatement -> . BREAK ;
    (45) ReturnStatement -> . RETURN Expression ;
    (46) ReturnStatement -> . RETURN ;
    (38) BlankStatement -> . ;
    (73) TypeName -> . ID
    (13) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7
    (14) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 Equal BinaryExpressionPrio7
    (15) BinaryExpressionPrio7 -> . BinaryExpressionPrio6
    (8) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6
    (9) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6
    (10) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Less BinaryExpressionPrio6
    (11) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Greater BinaryExpressionPrio6
    (12) BinaryExpressionPrio6 -> . BinaryExpressionPrio4
    (5) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Add BinaryExpressionPrio4
    (6) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Sub BinaryExpressionPrio4
    (7) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (1) BinaryExpressionPrio3 -> . UnaryExpression Mul BinaryExpressionPrio3
    (2) BinaryExpressionPrio3 -> . UnaryExpression Div BinaryExpressionPrio3
    (3) BinaryExpressionPrio3 -> . UnaryExpression Mod BinaryExpressionPrio3
    (4) BinaryExpressionPrio3 -> . UnaryExpression
    (80) UnaryExpression -> . IncrementAfter
    (81) UnaryExpression -> . IncrementBefore
    (82) UnaryExpression -> . DecrementAfter
    (83) UnaryExpression -> . DecrementBefore
    (84) UnaryExpression -> . FunctionCall
    (85) UnaryExpression -> . VarName
    (86) UnaryExpression -> . Literal
    (87) UnaryExpression -> . ( Expression )
    (78) IncrementAfter -> . VarName Inc
    (79) IncrementBefore -> . Inc VarName
    (75) DecrementAfter -> . VarName Dec
    (76) DecrementBefore -> . Dec VarName
    (77) FunctionCall -> . VarName ( ArgumentListR )
    (74) VarName -> . ID
    (20) Literal -> . IntLiteral
    (21) Literal -> . BoolLiteral
    (22) Literal -> . CharLiteral
    (29) Inc -> . INC
    (24) Dec -> . DEC
    (19) IntLiteral -> . INTL
    (17) BoolLiteral -> . BOOLL
    (18) CharLiteral -> . CHARL

    ID              shift and go to state 34
    IF              shift and go to state 37
    FOR             shift and go to state 39
    WHILE           shift and go to state 40
    BREAK           shift and go to state 41
    RETURN          shift and go to state 43
    ;               shift and go to state 26
    (               shift and go to state 38
    INC             shift and go to state 60
    DEC             shift and go to state 61
    INTL            shift and go to state 42
    BOOLL           shift and go to state 62
    CHARL           shift and go to state 63

    Statement                      shift and go to state 110
    Expression                     shift and go to state 25
    AssignmentStatement            shift and go to state 23
    DeclarationAssignmentStatement shift and go to state 24
    DeclarationStatement           shift and go to state 27
    IfElseStatement                shift and go to state 28
    ForStatement                   shift and go to state 29
    WhileStatement                 shift and go to state 30
    BreakStatement                 shift and go to state 31
    ReturnStatement                shift and go to state 32
    BlankStatement                 shift and go to state 33
    TypeName                       shift and go to state 35
    BinaryExpressionPrio7          shift and go to state 36
    BinaryExpressionPrio6          shift and go to state 44
    BinaryExpressionPrio4          shift and go to state 45
    BinaryExpressionPrio3          shift and go to state 46
    UnaryExpression                shift and go to state 47
    IncrementAfter                 shift and go to state 48
    IncrementBefore                shift and go to state 49
    DecrementAfter                 shift and go to state 50
    DecrementBefore                shift and go to state 51
    FunctionCall                   shift and go to state 52
    VarName                        shift and go to state 53
    Literal                        shift and go to state 54
    Inc                            shift and go to state 55
    Dec                            shift and go to state 56
    IntLiteral                     shift and go to state 57
    BoolLiteral                    shift and go to state 58
    CharLiteral                    shift and go to state 59

state 73

    (59) WhileStatement -> WHILE ( . Expression ) Block
    (16) Expression -> . BinaryExpressionPrio7
    (13) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7
    (14) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 Equal BinaryExpressionPrio7
    (15) BinaryExpressionPrio7 -> . BinaryExpressionPrio6
    (8) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6
    (9) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6
    (10) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Less BinaryExpressionPrio6
    (11) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Greater BinaryExpressionPrio6
    (12) BinaryExpressionPrio6 -> . BinaryExpressionPrio4
    (5) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Add BinaryExpressionPrio4
    (6) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Sub BinaryExpressionPrio4
    (7) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (1) BinaryExpressionPrio3 -> . UnaryExpression Mul BinaryExpressionPrio3
    (2) BinaryExpressionPrio3 -> . UnaryExpression Div BinaryExpressionPrio3
    (3) BinaryExpressionPrio3 -> . UnaryExpression Mod BinaryExpressionPrio3
    (4) BinaryExpressionPrio3 -> . UnaryExpression
    (80) UnaryExpression -> . IncrementAfter
    (81) UnaryExpression -> . IncrementBefore
    (82) UnaryExpression -> . DecrementAfter
    (83) UnaryExpression -> . DecrementBefore
    (84) UnaryExpression -> . FunctionCall
    (85) UnaryExpression -> . VarName
    (86) UnaryExpression -> . Literal
    (87) UnaryExpression -> . ( Expression )
    (78) IncrementAfter -> . VarName Inc
    (79) IncrementBefore -> . Inc VarName
    (75) DecrementAfter -> . VarName Dec
    (76) DecrementBefore -> . Dec VarName
    (77) FunctionCall -> . VarName ( ArgumentListR )
    (74) VarName -> . ID
    (20) Literal -> . IntLiteral
    (21) Literal -> . BoolLiteral
    (22) Literal -> . CharLiteral
    (29) Inc -> . INC
    (24) Dec -> . DEC
    (19) IntLiteral -> . INTL
    (17) BoolLiteral -> . BOOLL
    (18) CharLiteral -> . CHARL

    (               shift and go to state 38
    ID              shift and go to state 71
    INC             shift and go to state 60
    DEC             shift and go to state 61
    INTL            shift and go to state 42
    BOOLL           shift and go to state 62
    CHARL           shift and go to state 63

    Expression                     shift and go to state 111
    BinaryExpressionPrio7          shift and go to state 36
    BinaryExpressionPrio6          shift and go to state 44
    BinaryExpressionPrio4          shift and go to state 45
    BinaryExpressionPrio3          shift and go to state 46
    UnaryExpression                shift and go to state 47
    IncrementAfter                 shift and go to state 48
    IncrementBefore                shift and go to state 49
    DecrementAfter                 shift and go to state 50
    DecrementBefore                shift and go to state 51
    FunctionCall                   shift and go to state 52
    VarName                        shift and go to state 53
    Literal                        shift and go to state 54
    Inc                            shift and go to state 55
    Dec                            shift and go to state 56
    IntLiteral                     shift and go to state 57
    BoolLiteral                    shift and go to state 58
    CharLiteral                    shift and go to state 59

state 74

    (39) BreakStatement -> BREAK INTL . ;

    ;               shift and go to state 112


state 75

    (40) BreakStatement -> BREAK ; .

    ID              reduce using rule 40 (BreakStatement -> BREAK ; .)
    IF              reduce using rule 40 (BreakStatement -> BREAK ; .)
    FOR             reduce using rule 40 (BreakStatement -> BREAK ; .)
    WHILE           reduce using rule 40 (BreakStatement -> BREAK ; .)
    BREAK           reduce using rule 40 (BreakStatement -> BREAK ; .)
    RETURN          reduce using rule 40 (BreakStatement -> BREAK ; .)
    ;               reduce using rule 40 (BreakStatement -> BREAK ; .)
    (               reduce using rule 40 (BreakStatement -> BREAK ; .)
    INC             reduce using rule 40 (BreakStatement -> BREAK ; .)
    DEC             reduce using rule 40 (BreakStatement -> BREAK ; .)
    INTL            reduce using rule 40 (BreakStatement -> BREAK ; .)
    BOOLL           reduce using rule 40 (BreakStatement -> BREAK ; .)
    CHARL           reduce using rule 40 (BreakStatement -> BREAK ; .)
    }               reduce using rule 40 (BreakStatement -> BREAK ; .)
    )               reduce using rule 40 (BreakStatement -> BREAK ; .)


state 76

    (45) ReturnStatement -> RETURN Expression . ;

    ;               shift and go to state 113


state 77

    (46) ReturnStatement -> RETURN ; .

    ID              reduce using rule 46 (ReturnStatement -> RETURN ; .)
    IF              reduce using rule 46 (ReturnStatement -> RETURN ; .)
    FOR             reduce using rule 46 (ReturnStatement -> RETURN ; .)
    WHILE           reduce using rule 46 (ReturnStatement -> RETURN ; .)
    BREAK           reduce using rule 46 (ReturnStatement -> RETURN ; .)
    RETURN          reduce using rule 46 (ReturnStatement -> RETURN ; .)
    ;               reduce using rule 46 (ReturnStatement -> RETURN ; .)
    (               reduce using rule 46 (ReturnStatement -> RETURN ; .)
    INC             reduce using rule 46 (ReturnStatement -> RETURN ; .)
    DEC             reduce using rule 46 (ReturnStatement -> RETURN ; .)
    INTL            reduce using rule 46 (ReturnStatement -> RETURN ; .)
    BOOLL           reduce using rule 46 (ReturnStatement -> RETURN ; .)
    CHARL           reduce using rule 46 (ReturnStatement -> RETURN ; .)
    }               reduce using rule 46 (ReturnStatement -> RETURN ; .)
    )               reduce using rule 46 (ReturnStatement -> RETURN ; .)


state 78

    (13) BinaryExpressionPrio7 -> BinaryExpressionPrio6 NotEqual . BinaryExpressionPrio7
    (13) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7
    (14) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 Equal BinaryExpressionPrio7
    (15) BinaryExpressionPrio7 -> . BinaryExpressionPrio6
    (8) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6
    (9) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6
    (10) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Less BinaryExpressionPrio6
    (11) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Greater BinaryExpressionPrio6
    (12) BinaryExpressionPrio6 -> . BinaryExpressionPrio4
    (5) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Add BinaryExpressionPrio4
    (6) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Sub BinaryExpressionPrio4
    (7) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (1) BinaryExpressionPrio3 -> . UnaryExpression Mul BinaryExpressionPrio3
    (2) BinaryExpressionPrio3 -> . UnaryExpression Div BinaryExpressionPrio3
    (3) BinaryExpressionPrio3 -> . UnaryExpression Mod BinaryExpressionPrio3
    (4) BinaryExpressionPrio3 -> . UnaryExpression
    (80) UnaryExpression -> . IncrementAfter
    (81) UnaryExpression -> . IncrementBefore
    (82) UnaryExpression -> . DecrementAfter
    (83) UnaryExpression -> . DecrementBefore
    (84) UnaryExpression -> . FunctionCall
    (85) UnaryExpression -> . VarName
    (86) UnaryExpression -> . Literal
    (87) UnaryExpression -> . ( Expression )
    (78) IncrementAfter -> . VarName Inc
    (79) IncrementBefore -> . Inc VarName
    (75) DecrementAfter -> . VarName Dec
    (76) DecrementBefore -> . Dec VarName
    (77) FunctionCall -> . VarName ( ArgumentListR )
    (74) VarName -> . ID
    (20) Literal -> . IntLiteral
    (21) Literal -> . BoolLiteral
    (22) Literal -> . CharLiteral
    (29) Inc -> . INC
    (24) Dec -> . DEC
    (19) IntLiteral -> . INTL
    (17) BoolLiteral -> . BOOLL
    (18) CharLiteral -> . CHARL

    (               shift and go to state 38
    ID              shift and go to state 71
    INC             shift and go to state 60
    DEC             shift and go to state 61
    INTL            shift and go to state 42
    BOOLL           shift and go to state 62
    CHARL           shift and go to state 63

    BinaryExpressionPrio6          shift and go to state 44
    BinaryExpressionPrio7          shift and go to state 114
    BinaryExpressionPrio4          shift and go to state 45
    BinaryExpressionPrio3          shift and go to state 46
    UnaryExpression                shift and go to state 47
    IncrementAfter                 shift and go to state 48
    IncrementBefore                shift and go to state 49
    DecrementAfter                 shift and go to state 50
    DecrementBefore                shift and go to state 51
    FunctionCall                   shift and go to state 52
    VarName                        shift and go to state 53
    Literal                        shift and go to state 54
    Inc                            shift and go to state 55
    Dec                            shift and go to state 56
    IntLiteral                     shift and go to state 57
    BoolLiteral                    shift and go to state 58
    CharLiteral                    shift and go to state 59

state 79

    (14) BinaryExpressionPrio7 -> BinaryExpressionPrio6 Equal . BinaryExpressionPrio7
    (13) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7
    (14) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 Equal BinaryExpressionPrio7
    (15) BinaryExpressionPrio7 -> . BinaryExpressionPrio6
    (8) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6
    (9) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6
    (10) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Less BinaryExpressionPrio6
    (11) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Greater BinaryExpressionPrio6
    (12) BinaryExpressionPrio6 -> . BinaryExpressionPrio4
    (5) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Add BinaryExpressionPrio4
    (6) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Sub BinaryExpressionPrio4
    (7) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (1) BinaryExpressionPrio3 -> . UnaryExpression Mul BinaryExpressionPrio3
    (2) BinaryExpressionPrio3 -> . UnaryExpression Div BinaryExpressionPrio3
    (3) BinaryExpressionPrio3 -> . UnaryExpression Mod BinaryExpressionPrio3
    (4) BinaryExpressionPrio3 -> . UnaryExpression
    (80) UnaryExpression -> . IncrementAfter
    (81) UnaryExpression -> . IncrementBefore
    (82) UnaryExpression -> . DecrementAfter
    (83) UnaryExpression -> . DecrementBefore
    (84) UnaryExpression -> . FunctionCall
    (85) UnaryExpression -> . VarName
    (86) UnaryExpression -> . Literal
    (87) UnaryExpression -> . ( Expression )
    (78) IncrementAfter -> . VarName Inc
    (79) IncrementBefore -> . Inc VarName
    (75) DecrementAfter -> . VarName Dec
    (76) DecrementBefore -> . Dec VarName
    (77) FunctionCall -> . VarName ( ArgumentListR )
    (74) VarName -> . ID
    (20) Literal -> . IntLiteral
    (21) Literal -> . BoolLiteral
    (22) Literal -> . CharLiteral
    (29) Inc -> . INC
    (24) Dec -> . DEC
    (19) IntLiteral -> . INTL
    (17) BoolLiteral -> . BOOLL
    (18) CharLiteral -> . CHARL

    (               shift and go to state 38
    ID              shift and go to state 71
    INC             shift and go to state 60
    DEC             shift and go to state 61
    INTL            shift and go to state 42
    BOOLL           shift and go to state 62
    CHARL           shift and go to state 63

    BinaryExpressionPrio6          shift and go to state 44
    BinaryExpressionPrio7          shift and go to state 115
    BinaryExpressionPrio4          shift and go to state 45
    BinaryExpressionPrio3          shift and go to state 46
    UnaryExpression                shift and go to state 47
    IncrementAfter                 shift and go to state 48
    IncrementBefore                shift and go to state 49
    DecrementAfter                 shift and go to state 50
    DecrementBefore                shift and go to state 51
    FunctionCall                   shift and go to state 52
    VarName                        shift and go to state 53
    Literal                        shift and go to state 54
    Inc                            shift and go to state 55
    Dec                            shift and go to state 56
    IntLiteral                     shift and go to state 57
    BoolLiteral                    shift and go to state 58
    CharLiteral                    shift and go to state 59

state 80

    (34) NotEqual -> NE .

    (               reduce using rule 34 (NotEqual -> NE .)
    ID              reduce using rule 34 (NotEqual -> NE .)
    INC             reduce using rule 34 (NotEqual -> NE .)
    DEC             reduce using rule 34 (NotEqual -> NE .)
    INTL            reduce using rule 34 (NotEqual -> NE .)
    BOOLL           reduce using rule 34 (NotEqual -> NE .)
    CHARL           reduce using rule 34 (NotEqual -> NE .)


state 81

    (26) Equal -> EQ .

    (               reduce using rule 26 (Equal -> EQ .)
    ID              reduce using rule 26 (Equal -> EQ .)
    INC             reduce using rule 26 (Equal -> EQ .)
    DEC             reduce using rule 26 (Equal -> EQ .)
    INTL            reduce using rule 26 (Equal -> EQ .)
    BOOLL           reduce using rule 26 (Equal -> EQ .)
    CHARL           reduce using rule 26 (Equal -> EQ .)


state 82

    (8) BinaryExpressionPrio6 -> BinaryExpressionPrio4 LessEqual . BinaryExpressionPrio6
    (8) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6
    (9) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6
    (10) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Less BinaryExpressionPrio6
    (11) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Greater BinaryExpressionPrio6
    (12) BinaryExpressionPrio6 -> . BinaryExpressionPrio4
    (5) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Add BinaryExpressionPrio4
    (6) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Sub BinaryExpressionPrio4
    (7) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (1) BinaryExpressionPrio3 -> . UnaryExpression Mul BinaryExpressionPrio3
    (2) BinaryExpressionPrio3 -> . UnaryExpression Div BinaryExpressionPrio3
    (3) BinaryExpressionPrio3 -> . UnaryExpression Mod BinaryExpressionPrio3
    (4) BinaryExpressionPrio3 -> . UnaryExpression
    (80) UnaryExpression -> . IncrementAfter
    (81) UnaryExpression -> . IncrementBefore
    (82) UnaryExpression -> . DecrementAfter
    (83) UnaryExpression -> . DecrementBefore
    (84) UnaryExpression -> . FunctionCall
    (85) UnaryExpression -> . VarName
    (86) UnaryExpression -> . Literal
    (87) UnaryExpression -> . ( Expression )
    (78) IncrementAfter -> . VarName Inc
    (79) IncrementBefore -> . Inc VarName
    (75) DecrementAfter -> . VarName Dec
    (76) DecrementBefore -> . Dec VarName
    (77) FunctionCall -> . VarName ( ArgumentListR )
    (74) VarName -> . ID
    (20) Literal -> . IntLiteral
    (21) Literal -> . BoolLiteral
    (22) Literal -> . CharLiteral
    (29) Inc -> . INC
    (24) Dec -> . DEC
    (19) IntLiteral -> . INTL
    (17) BoolLiteral -> . BOOLL
    (18) CharLiteral -> . CHARL

    (               shift and go to state 38
    ID              shift and go to state 71
    INC             shift and go to state 60
    DEC             shift and go to state 61
    INTL            shift and go to state 42
    BOOLL           shift and go to state 62
    CHARL           shift and go to state 63

    BinaryExpressionPrio4          shift and go to state 45
    BinaryExpressionPrio6          shift and go to state 116
    BinaryExpressionPrio3          shift and go to state 46
    UnaryExpression                shift and go to state 47
    IncrementAfter                 shift and go to state 48
    IncrementBefore                shift and go to state 49
    DecrementAfter                 shift and go to state 50
    DecrementBefore                shift and go to state 51
    FunctionCall                   shift and go to state 52
    VarName                        shift and go to state 53
    Literal                        shift and go to state 54
    Inc                            shift and go to state 55
    Dec                            shift and go to state 56
    IntLiteral                     shift and go to state 57
    BoolLiteral                    shift and go to state 58
    CharLiteral                    shift and go to state 59

state 83

    (9) BinaryExpressionPrio6 -> BinaryExpressionPrio4 GreaterEqual . BinaryExpressionPrio6
    (8) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6
    (9) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6
    (10) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Less BinaryExpressionPrio6
    (11) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Greater BinaryExpressionPrio6
    (12) BinaryExpressionPrio6 -> . BinaryExpressionPrio4
    (5) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Add BinaryExpressionPrio4
    (6) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Sub BinaryExpressionPrio4
    (7) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (1) BinaryExpressionPrio3 -> . UnaryExpression Mul BinaryExpressionPrio3
    (2) BinaryExpressionPrio3 -> . UnaryExpression Div BinaryExpressionPrio3
    (3) BinaryExpressionPrio3 -> . UnaryExpression Mod BinaryExpressionPrio3
    (4) BinaryExpressionPrio3 -> . UnaryExpression
    (80) UnaryExpression -> . IncrementAfter
    (81) UnaryExpression -> . IncrementBefore
    (82) UnaryExpression -> . DecrementAfter
    (83) UnaryExpression -> . DecrementBefore
    (84) UnaryExpression -> . FunctionCall
    (85) UnaryExpression -> . VarName
    (86) UnaryExpression -> . Literal
    (87) UnaryExpression -> . ( Expression )
    (78) IncrementAfter -> . VarName Inc
    (79) IncrementBefore -> . Inc VarName
    (75) DecrementAfter -> . VarName Dec
    (76) DecrementBefore -> . Dec VarName
    (77) FunctionCall -> . VarName ( ArgumentListR )
    (74) VarName -> . ID
    (20) Literal -> . IntLiteral
    (21) Literal -> . BoolLiteral
    (22) Literal -> . CharLiteral
    (29) Inc -> . INC
    (24) Dec -> . DEC
    (19) IntLiteral -> . INTL
    (17) BoolLiteral -> . BOOLL
    (18) CharLiteral -> . CHARL

    (               shift and go to state 38
    ID              shift and go to state 71
    INC             shift and go to state 60
    DEC             shift and go to state 61
    INTL            shift and go to state 42
    BOOLL           shift and go to state 62
    CHARL           shift and go to state 63

    BinaryExpressionPrio4          shift and go to state 45
    BinaryExpressionPrio6          shift and go to state 117
    BinaryExpressionPrio3          shift and go to state 46
    UnaryExpression                shift and go to state 47
    IncrementAfter                 shift and go to state 48
    IncrementBefore                shift and go to state 49
    DecrementAfter                 shift and go to state 50
    DecrementBefore                shift and go to state 51
    FunctionCall                   shift and go to state 52
    VarName                        shift and go to state 53
    Literal                        shift and go to state 54
    Inc                            shift and go to state 55
    Dec                            shift and go to state 56
    IntLiteral                     shift and go to state 57
    BoolLiteral                    shift and go to state 58
    CharLiteral                    shift and go to state 59

state 84

    (10) BinaryExpressionPrio6 -> BinaryExpressionPrio4 Less . BinaryExpressionPrio6
    (8) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6
    (9) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6
    (10) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Less BinaryExpressionPrio6
    (11) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Greater BinaryExpressionPrio6
    (12) BinaryExpressionPrio6 -> . BinaryExpressionPrio4
    (5) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Add BinaryExpressionPrio4
    (6) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Sub BinaryExpressionPrio4
    (7) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (1) BinaryExpressionPrio3 -> . UnaryExpression Mul BinaryExpressionPrio3
    (2) BinaryExpressionPrio3 -> . UnaryExpression Div BinaryExpressionPrio3
    (3) BinaryExpressionPrio3 -> . UnaryExpression Mod BinaryExpressionPrio3
    (4) BinaryExpressionPrio3 -> . UnaryExpression
    (80) UnaryExpression -> . IncrementAfter
    (81) UnaryExpression -> . IncrementBefore
    (82) UnaryExpression -> . DecrementAfter
    (83) UnaryExpression -> . DecrementBefore
    (84) UnaryExpression -> . FunctionCall
    (85) UnaryExpression -> . VarName
    (86) UnaryExpression -> . Literal
    (87) UnaryExpression -> . ( Expression )
    (78) IncrementAfter -> . VarName Inc
    (79) IncrementBefore -> . Inc VarName
    (75) DecrementAfter -> . VarName Dec
    (76) DecrementBefore -> . Dec VarName
    (77) FunctionCall -> . VarName ( ArgumentListR )
    (74) VarName -> . ID
    (20) Literal -> . IntLiteral
    (21) Literal -> . BoolLiteral
    (22) Literal -> . CharLiteral
    (29) Inc -> . INC
    (24) Dec -> . DEC
    (19) IntLiteral -> . INTL
    (17) BoolLiteral -> . BOOLL
    (18) CharLiteral -> . CHARL

    (               shift and go to state 38
    ID              shift and go to state 71
    INC             shift and go to state 60
    DEC             shift and go to state 61
    INTL            shift and go to state 42
    BOOLL           shift and go to state 62
    CHARL           shift and go to state 63

    BinaryExpressionPrio4          shift and go to state 45
    BinaryExpressionPrio6          shift and go to state 118
    BinaryExpressionPrio3          shift and go to state 46
    UnaryExpression                shift and go to state 47
    IncrementAfter                 shift and go to state 48
    IncrementBefore                shift and go to state 49
    DecrementAfter                 shift and go to state 50
    DecrementBefore                shift and go to state 51
    FunctionCall                   shift and go to state 52
    VarName                        shift and go to state 53
    Literal                        shift and go to state 54
    Inc                            shift and go to state 55
    Dec                            shift and go to state 56
    IntLiteral                     shift and go to state 57
    BoolLiteral                    shift and go to state 58
    CharLiteral                    shift and go to state 59

state 85

    (11) BinaryExpressionPrio6 -> BinaryExpressionPrio4 Greater . BinaryExpressionPrio6
    (8) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6
    (9) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6
    (10) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Less BinaryExpressionPrio6
    (11) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Greater BinaryExpressionPrio6
    (12) BinaryExpressionPrio6 -> . BinaryExpressionPrio4
    (5) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Add BinaryExpressionPrio4
    (6) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Sub BinaryExpressionPrio4
    (7) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (1) BinaryExpressionPrio3 -> . UnaryExpression Mul BinaryExpressionPrio3
    (2) BinaryExpressionPrio3 -> . UnaryExpression Div BinaryExpressionPrio3
    (3) BinaryExpressionPrio3 -> . UnaryExpression Mod BinaryExpressionPrio3
    (4) BinaryExpressionPrio3 -> . UnaryExpression
    (80) UnaryExpression -> . IncrementAfter
    (81) UnaryExpression -> . IncrementBefore
    (82) UnaryExpression -> . DecrementAfter
    (83) UnaryExpression -> . DecrementBefore
    (84) UnaryExpression -> . FunctionCall
    (85) UnaryExpression -> . VarName
    (86) UnaryExpression -> . Literal
    (87) UnaryExpression -> . ( Expression )
    (78) IncrementAfter -> . VarName Inc
    (79) IncrementBefore -> . Inc VarName
    (75) DecrementAfter -> . VarName Dec
    (76) DecrementBefore -> . Dec VarName
    (77) FunctionCall -> . VarName ( ArgumentListR )
    (74) VarName -> . ID
    (20) Literal -> . IntLiteral
    (21) Literal -> . BoolLiteral
    (22) Literal -> . CharLiteral
    (29) Inc -> . INC
    (24) Dec -> . DEC
    (19) IntLiteral -> . INTL
    (17) BoolLiteral -> . BOOLL
    (18) CharLiteral -> . CHARL

    (               shift and go to state 38
    ID              shift and go to state 71
    INC             shift and go to state 60
    DEC             shift and go to state 61
    INTL            shift and go to state 42
    BOOLL           shift and go to state 62
    CHARL           shift and go to state 63

    BinaryExpressionPrio4          shift and go to state 45
    BinaryExpressionPrio6          shift and go to state 119
    BinaryExpressionPrio3          shift and go to state 46
    UnaryExpression                shift and go to state 47
    IncrementAfter                 shift and go to state 48
    IncrementBefore                shift and go to state 49
    DecrementAfter                 shift and go to state 50
    DecrementBefore                shift and go to state 51
    FunctionCall                   shift and go to state 52
    VarName                        shift and go to state 53
    Literal                        shift and go to state 54
    Inc                            shift and go to state 55
    Dec                            shift and go to state 56
    IntLiteral                     shift and go to state 57
    BoolLiteral                    shift and go to state 58
    CharLiteral                    shift and go to state 59

state 86

    (31) LessEqual -> GEQ .

    (               reduce using rule 31 (LessEqual -> GEQ .)
    ID              reduce using rule 31 (LessEqual -> GEQ .)
    INC             reduce using rule 31 (LessEqual -> GEQ .)
    DEC             reduce using rule 31 (LessEqual -> GEQ .)
    INTL            reduce using rule 31 (LessEqual -> GEQ .)
    BOOLL           reduce using rule 31 (LessEqual -> GEQ .)
    CHARL           reduce using rule 31 (LessEqual -> GEQ .)


state 87

    (28) GreaterEqual -> LEQ .

    (               reduce using rule 28 (GreaterEqual -> LEQ .)
    ID              reduce using rule 28 (GreaterEqual -> LEQ .)
    INC             reduce using rule 28 (GreaterEqual -> LEQ .)
    DEC             reduce using rule 28 (GreaterEqual -> LEQ .)
    INTL            reduce using rule 28 (GreaterEqual -> LEQ .)
    BOOLL           reduce using rule 28 (GreaterEqual -> LEQ .)
    CHARL           reduce using rule 28 (GreaterEqual -> LEQ .)


state 88

    (30) Less -> LT .

    (               reduce using rule 30 (Less -> LT .)
    ID              reduce using rule 30 (Less -> LT .)
    INC             reduce using rule 30 (Less -> LT .)
    DEC             reduce using rule 30 (Less -> LT .)
    INTL            reduce using rule 30 (Less -> LT .)
    BOOLL           reduce using rule 30 (Less -> LT .)
    CHARL           reduce using rule 30 (Less -> LT .)


state 89

    (27) Greater -> GT .

    (               reduce using rule 27 (Greater -> GT .)
    ID              reduce using rule 27 (Greater -> GT .)
    INC             reduce using rule 27 (Greater -> GT .)
    DEC             reduce using rule 27 (Greater -> GT .)
    INTL            reduce using rule 27 (Greater -> GT .)
    BOOLL           reduce using rule 27 (Greater -> GT .)
    CHARL           reduce using rule 27 (Greater -> GT .)


state 90

    (5) BinaryExpressionPrio4 -> BinaryExpressionPrio3 Add . BinaryExpressionPrio4
    (5) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Add BinaryExpressionPrio4
    (6) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Sub BinaryExpressionPrio4
    (7) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (1) BinaryExpressionPrio3 -> . UnaryExpression Mul BinaryExpressionPrio3
    (2) BinaryExpressionPrio3 -> . UnaryExpression Div BinaryExpressionPrio3
    (3) BinaryExpressionPrio3 -> . UnaryExpression Mod BinaryExpressionPrio3
    (4) BinaryExpressionPrio3 -> . UnaryExpression
    (80) UnaryExpression -> . IncrementAfter
    (81) UnaryExpression -> . IncrementBefore
    (82) UnaryExpression -> . DecrementAfter
    (83) UnaryExpression -> . DecrementBefore
    (84) UnaryExpression -> . FunctionCall
    (85) UnaryExpression -> . VarName
    (86) UnaryExpression -> . Literal
    (87) UnaryExpression -> . ( Expression )
    (78) IncrementAfter -> . VarName Inc
    (79) IncrementBefore -> . Inc VarName
    (75) DecrementAfter -> . VarName Dec
    (76) DecrementBefore -> . Dec VarName
    (77) FunctionCall -> . VarName ( ArgumentListR )
    (74) VarName -> . ID
    (20) Literal -> . IntLiteral
    (21) Literal -> . BoolLiteral
    (22) Literal -> . CharLiteral
    (29) Inc -> . INC
    (24) Dec -> . DEC
    (19) IntLiteral -> . INTL
    (17) BoolLiteral -> . BOOLL
    (18) CharLiteral -> . CHARL

    (               shift and go to state 38
    ID              shift and go to state 71
    INC             shift and go to state 60
    DEC             shift and go to state 61
    INTL            shift and go to state 42
    BOOLL           shift and go to state 62
    CHARL           shift and go to state 63

    BinaryExpressionPrio3          shift and go to state 46
    BinaryExpressionPrio4          shift and go to state 120
    UnaryExpression                shift and go to state 47
    IncrementAfter                 shift and go to state 48
    IncrementBefore                shift and go to state 49
    DecrementAfter                 shift and go to state 50
    DecrementBefore                shift and go to state 51
    FunctionCall                   shift and go to state 52
    VarName                        shift and go to state 53
    Literal                        shift and go to state 54
    Inc                            shift and go to state 55
    Dec                            shift and go to state 56
    IntLiteral                     shift and go to state 57
    BoolLiteral                    shift and go to state 58
    CharLiteral                    shift and go to state 59

state 91

    (6) BinaryExpressionPrio4 -> BinaryExpressionPrio3 Sub . BinaryExpressionPrio4
    (5) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Add BinaryExpressionPrio4
    (6) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Sub BinaryExpressionPrio4
    (7) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (1) BinaryExpressionPrio3 -> . UnaryExpression Mul BinaryExpressionPrio3
    (2) BinaryExpressionPrio3 -> . UnaryExpression Div BinaryExpressionPrio3
    (3) BinaryExpressionPrio3 -> . UnaryExpression Mod BinaryExpressionPrio3
    (4) BinaryExpressionPrio3 -> . UnaryExpression
    (80) UnaryExpression -> . IncrementAfter
    (81) UnaryExpression -> . IncrementBefore
    (82) UnaryExpression -> . DecrementAfter
    (83) UnaryExpression -> . DecrementBefore
    (84) UnaryExpression -> . FunctionCall
    (85) UnaryExpression -> . VarName
    (86) UnaryExpression -> . Literal
    (87) UnaryExpression -> . ( Expression )
    (78) IncrementAfter -> . VarName Inc
    (79) IncrementBefore -> . Inc VarName
    (75) DecrementAfter -> . VarName Dec
    (76) DecrementBefore -> . Dec VarName
    (77) FunctionCall -> . VarName ( ArgumentListR )
    (74) VarName -> . ID
    (20) Literal -> . IntLiteral
    (21) Literal -> . BoolLiteral
    (22) Literal -> . CharLiteral
    (29) Inc -> . INC
    (24) Dec -> . DEC
    (19) IntLiteral -> . INTL
    (17) BoolLiteral -> . BOOLL
    (18) CharLiteral -> . CHARL

    (               shift and go to state 38
    ID              shift and go to state 71
    INC             shift and go to state 60
    DEC             shift and go to state 61
    INTL            shift and go to state 42
    BOOLL           shift and go to state 62
    CHARL           shift and go to state 63

    BinaryExpressionPrio3          shift and go to state 46
    BinaryExpressionPrio4          shift and go to state 121
    UnaryExpression                shift and go to state 47
    IncrementAfter                 shift and go to state 48
    IncrementBefore                shift and go to state 49
    DecrementAfter                 shift and go to state 50
    DecrementBefore                shift and go to state 51
    FunctionCall                   shift and go to state 52
    VarName                        shift and go to state 53
    Literal                        shift and go to state 54
    Inc                            shift and go to state 55
    Dec                            shift and go to state 56
    IntLiteral                     shift and go to state 57
    BoolLiteral                    shift and go to state 58
    CharLiteral                    shift and go to state 59

state 92

    (23) Add -> + .

    (               reduce using rule 23 (Add -> + .)
    ID              reduce using rule 23 (Add -> + .)
    INC             reduce using rule 23 (Add -> + .)
    DEC             reduce using rule 23 (Add -> + .)
    INTL            reduce using rule 23 (Add -> + .)
    BOOLL           reduce using rule 23 (Add -> + .)
    CHARL           reduce using rule 23 (Add -> + .)


state 93

    (35) Sub -> - .

    (               reduce using rule 35 (Sub -> - .)
    ID              reduce using rule 35 (Sub -> - .)
    INC             reduce using rule 35 (Sub -> - .)
    DEC             reduce using rule 35 (Sub -> - .)
    INTL            reduce using rule 35 (Sub -> - .)
    BOOLL           reduce using rule 35 (Sub -> - .)
    CHARL           reduce using rule 35 (Sub -> - .)


state 94

    (1) BinaryExpressionPrio3 -> UnaryExpression Mul . BinaryExpressionPrio3
    (1) BinaryExpressionPrio3 -> . UnaryExpression Mul BinaryExpressionPrio3
    (2) BinaryExpressionPrio3 -> . UnaryExpression Div BinaryExpressionPrio3
    (3) BinaryExpressionPrio3 -> . UnaryExpression Mod BinaryExpressionPrio3
    (4) BinaryExpressionPrio3 -> . UnaryExpression
    (80) UnaryExpression -> . IncrementAfter
    (81) UnaryExpression -> . IncrementBefore
    (82) UnaryExpression -> . DecrementAfter
    (83) UnaryExpression -> . DecrementBefore
    (84) UnaryExpression -> . FunctionCall
    (85) UnaryExpression -> . VarName
    (86) UnaryExpression -> . Literal
    (87) UnaryExpression -> . ( Expression )
    (78) IncrementAfter -> . VarName Inc
    (79) IncrementBefore -> . Inc VarName
    (75) DecrementAfter -> . VarName Dec
    (76) DecrementBefore -> . Dec VarName
    (77) FunctionCall -> . VarName ( ArgumentListR )
    (74) VarName -> . ID
    (20) Literal -> . IntLiteral
    (21) Literal -> . BoolLiteral
    (22) Literal -> . CharLiteral
    (29) Inc -> . INC
    (24) Dec -> . DEC
    (19) IntLiteral -> . INTL
    (17) BoolLiteral -> . BOOLL
    (18) CharLiteral -> . CHARL

    (               shift and go to state 38
    ID              shift and go to state 71
    INC             shift and go to state 60
    DEC             shift and go to state 61
    INTL            shift and go to state 42
    BOOLL           shift and go to state 62
    CHARL           shift and go to state 63

    UnaryExpression                shift and go to state 47
    BinaryExpressionPrio3          shift and go to state 122
    IncrementAfter                 shift and go to state 48
    IncrementBefore                shift and go to state 49
    DecrementAfter                 shift and go to state 50
    DecrementBefore                shift and go to state 51
    FunctionCall                   shift and go to state 52
    VarName                        shift and go to state 53
    Literal                        shift and go to state 54
    Inc                            shift and go to state 55
    Dec                            shift and go to state 56
    IntLiteral                     shift and go to state 57
    BoolLiteral                    shift and go to state 58
    CharLiteral                    shift and go to state 59

state 95

    (2) BinaryExpressionPrio3 -> UnaryExpression Div . BinaryExpressionPrio3
    (1) BinaryExpressionPrio3 -> . UnaryExpression Mul BinaryExpressionPrio3
    (2) BinaryExpressionPrio3 -> . UnaryExpression Div BinaryExpressionPrio3
    (3) BinaryExpressionPrio3 -> . UnaryExpression Mod BinaryExpressionPrio3
    (4) BinaryExpressionPrio3 -> . UnaryExpression
    (80) UnaryExpression -> . IncrementAfter
    (81) UnaryExpression -> . IncrementBefore
    (82) UnaryExpression -> . DecrementAfter
    (83) UnaryExpression -> . DecrementBefore
    (84) UnaryExpression -> . FunctionCall
    (85) UnaryExpression -> . VarName
    (86) UnaryExpression -> . Literal
    (87) UnaryExpression -> . ( Expression )
    (78) IncrementAfter -> . VarName Inc
    (79) IncrementBefore -> . Inc VarName
    (75) DecrementAfter -> . VarName Dec
    (76) DecrementBefore -> . Dec VarName
    (77) FunctionCall -> . VarName ( ArgumentListR )
    (74) VarName -> . ID
    (20) Literal -> . IntLiteral
    (21) Literal -> . BoolLiteral
    (22) Literal -> . CharLiteral
    (29) Inc -> . INC
    (24) Dec -> . DEC
    (19) IntLiteral -> . INTL
    (17) BoolLiteral -> . BOOLL
    (18) CharLiteral -> . CHARL

    (               shift and go to state 38
    ID              shift and go to state 71
    INC             shift and go to state 60
    DEC             shift and go to state 61
    INTL            shift and go to state 42
    BOOLL           shift and go to state 62
    CHARL           shift and go to state 63

    UnaryExpression                shift and go to state 47
    BinaryExpressionPrio3          shift and go to state 123
    IncrementAfter                 shift and go to state 48
    IncrementBefore                shift and go to state 49
    DecrementAfter                 shift and go to state 50
    DecrementBefore                shift and go to state 51
    FunctionCall                   shift and go to state 52
    VarName                        shift and go to state 53
    Literal                        shift and go to state 54
    Inc                            shift and go to state 55
    Dec                            shift and go to state 56
    IntLiteral                     shift and go to state 57
    BoolLiteral                    shift and go to state 58
    CharLiteral                    shift and go to state 59

state 96

    (3) BinaryExpressionPrio3 -> UnaryExpression Mod . BinaryExpressionPrio3
    (1) BinaryExpressionPrio3 -> . UnaryExpression Mul BinaryExpressionPrio3
    (2) BinaryExpressionPrio3 -> . UnaryExpression Div BinaryExpressionPrio3
    (3) BinaryExpressionPrio3 -> . UnaryExpression Mod BinaryExpressionPrio3
    (4) BinaryExpressionPrio3 -> . UnaryExpression
    (80) UnaryExpression -> . IncrementAfter
    (81) UnaryExpression -> . IncrementBefore
    (82) UnaryExpression -> . DecrementAfter
    (83) UnaryExpression -> . DecrementBefore
    (84) UnaryExpression -> . FunctionCall
    (85) UnaryExpression -> . VarName
    (86) UnaryExpression -> . Literal
    (87) UnaryExpression -> . ( Expression )
    (78) IncrementAfter -> . VarName Inc
    (79) IncrementBefore -> . Inc VarName
    (75) DecrementAfter -> . VarName Dec
    (76) DecrementBefore -> . Dec VarName
    (77) FunctionCall -> . VarName ( ArgumentListR )
    (74) VarName -> . ID
    (20) Literal -> . IntLiteral
    (21) Literal -> . BoolLiteral
    (22) Literal -> . CharLiteral
    (29) Inc -> . INC
    (24) Dec -> . DEC
    (19) IntLiteral -> . INTL
    (17) BoolLiteral -> . BOOLL
    (18) CharLiteral -> . CHARL

    (               shift and go to state 38
    ID              shift and go to state 71
    INC             shift and go to state 60
    DEC             shift and go to state 61
    INTL            shift and go to state 42
    BOOLL           shift and go to state 62
    CHARL           shift and go to state 63

    UnaryExpression                shift and go to state 47
    BinaryExpressionPrio3          shift and go to state 124
    IncrementAfter                 shift and go to state 48
    IncrementBefore                shift and go to state 49
    DecrementAfter                 shift and go to state 50
    DecrementBefore                shift and go to state 51
    FunctionCall                   shift and go to state 52
    VarName                        shift and go to state 53
    Literal                        shift and go to state 54
    Inc                            shift and go to state 55
    Dec                            shift and go to state 56
    IntLiteral                     shift and go to state 57
    BoolLiteral                    shift and go to state 58
    CharLiteral                    shift and go to state 59

state 97

    (33) Mul -> * .

    (               reduce using rule 33 (Mul -> * .)
    ID              reduce using rule 33 (Mul -> * .)
    INC             reduce using rule 33 (Mul -> * .)
    DEC             reduce using rule 33 (Mul -> * .)
    INTL            reduce using rule 33 (Mul -> * .)
    BOOLL           reduce using rule 33 (Mul -> * .)
    CHARL           reduce using rule 33 (Mul -> * .)


state 98

    (25) Div -> / .

    (               reduce using rule 25 (Div -> / .)
    ID              reduce using rule 25 (Div -> / .)
    INC             reduce using rule 25 (Div -> / .)
    DEC             reduce using rule 25 (Div -> / .)
    INTL            reduce using rule 25 (Div -> / .)
    BOOLL           reduce using rule 25 (Div -> / .)
    CHARL           reduce using rule 25 (Div -> / .)


state 99

    (32) Mod -> % .

    (               reduce using rule 32 (Mod -> % .)
    ID              reduce using rule 32 (Mod -> % .)
    INC             reduce using rule 32 (Mod -> % .)
    DEC             reduce using rule 32 (Mod -> % .)
    INTL            reduce using rule 32 (Mod -> % .)
    BOOLL           reduce using rule 32 (Mod -> % .)
    CHARL           reduce using rule 32 (Mod -> % .)


state 100

    (78) IncrementAfter -> VarName Inc .

    *               reduce using rule 78 (IncrementAfter -> VarName Inc .)
    /               reduce using rule 78 (IncrementAfter -> VarName Inc .)
    %               reduce using rule 78 (IncrementAfter -> VarName Inc .)
    +               reduce using rule 78 (IncrementAfter -> VarName Inc .)
    -               reduce using rule 78 (IncrementAfter -> VarName Inc .)
    GEQ             reduce using rule 78 (IncrementAfter -> VarName Inc .)
    LEQ             reduce using rule 78 (IncrementAfter -> VarName Inc .)
    LT              reduce using rule 78 (IncrementAfter -> VarName Inc .)
    GT              reduce using rule 78 (IncrementAfter -> VarName Inc .)
    NE              reduce using rule 78 (IncrementAfter -> VarName Inc .)
    EQ              reduce using rule 78 (IncrementAfter -> VarName Inc .)
    ;               reduce using rule 78 (IncrementAfter -> VarName Inc .)
    )               reduce using rule 78 (IncrementAfter -> VarName Inc .)
    ID              reduce using rule 78 (IncrementAfter -> VarName Inc .)
    IF              reduce using rule 78 (IncrementAfter -> VarName Inc .)
    FOR             reduce using rule 78 (IncrementAfter -> VarName Inc .)
    WHILE           reduce using rule 78 (IncrementAfter -> VarName Inc .)
    BREAK           reduce using rule 78 (IncrementAfter -> VarName Inc .)
    RETURN          reduce using rule 78 (IncrementAfter -> VarName Inc .)
    (               reduce using rule 78 (IncrementAfter -> VarName Inc .)
    INC             reduce using rule 78 (IncrementAfter -> VarName Inc .)
    DEC             reduce using rule 78 (IncrementAfter -> VarName Inc .)
    INTL            reduce using rule 78 (IncrementAfter -> VarName Inc .)
    BOOLL           reduce using rule 78 (IncrementAfter -> VarName Inc .)
    CHARL           reduce using rule 78 (IncrementAfter -> VarName Inc .)
    }               reduce using rule 78 (IncrementAfter -> VarName Inc .)
    ,               reduce using rule 78 (IncrementAfter -> VarName Inc .)


state 101

    (75) DecrementAfter -> VarName Dec .

    *               reduce using rule 75 (DecrementAfter -> VarName Dec .)
    /               reduce using rule 75 (DecrementAfter -> VarName Dec .)
    %               reduce using rule 75 (DecrementAfter -> VarName Dec .)
    +               reduce using rule 75 (DecrementAfter -> VarName Dec .)
    -               reduce using rule 75 (DecrementAfter -> VarName Dec .)
    GEQ             reduce using rule 75 (DecrementAfter -> VarName Dec .)
    LEQ             reduce using rule 75 (DecrementAfter -> VarName Dec .)
    LT              reduce using rule 75 (DecrementAfter -> VarName Dec .)
    GT              reduce using rule 75 (DecrementAfter -> VarName Dec .)
    NE              reduce using rule 75 (DecrementAfter -> VarName Dec .)
    EQ              reduce using rule 75 (DecrementAfter -> VarName Dec .)
    ;               reduce using rule 75 (DecrementAfter -> VarName Dec .)
    )               reduce using rule 75 (DecrementAfter -> VarName Dec .)
    ID              reduce using rule 75 (DecrementAfter -> VarName Dec .)
    IF              reduce using rule 75 (DecrementAfter -> VarName Dec .)
    FOR             reduce using rule 75 (DecrementAfter -> VarName Dec .)
    WHILE           reduce using rule 75 (DecrementAfter -> VarName Dec .)
    BREAK           reduce using rule 75 (DecrementAfter -> VarName Dec .)
    RETURN          reduce using rule 75 (DecrementAfter -> VarName Dec .)
    (               reduce using rule 75 (DecrementAfter -> VarName Dec .)
    INC             reduce using rule 75 (DecrementAfter -> VarName Dec .)
    DEC             reduce using rule 75 (DecrementAfter -> VarName Dec .)
    INTL            reduce using rule 75 (DecrementAfter -> VarName Dec .)
    BOOLL           reduce using rule 75 (DecrementAfter -> VarName Dec .)
    CHARL           reduce using rule 75 (DecrementAfter -> VarName Dec .)
    }               reduce using rule 75 (DecrementAfter -> VarName Dec .)
    ,               reduce using rule 75 (DecrementAfter -> VarName Dec .)


state 102

    (77) FunctionCall -> VarName ( . ArgumentListR )
    (61) ArgumentListR -> . Argument , ArgumentListR
    (62) ArgumentListR -> . Argument
    (63) ArgumentListR -> . empty
    (60) Argument -> . Expression
    (88) empty -> .
    (16) Expression -> . BinaryExpressionPrio7
    (13) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7
    (14) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 Equal BinaryExpressionPrio7
    (15) BinaryExpressionPrio7 -> . BinaryExpressionPrio6
    (8) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6
    (9) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6
    (10) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Less BinaryExpressionPrio6
    (11) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Greater BinaryExpressionPrio6
    (12) BinaryExpressionPrio6 -> . BinaryExpressionPrio4
    (5) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Add BinaryExpressionPrio4
    (6) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Sub BinaryExpressionPrio4
    (7) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (1) BinaryExpressionPrio3 -> . UnaryExpression Mul BinaryExpressionPrio3
    (2) BinaryExpressionPrio3 -> . UnaryExpression Div BinaryExpressionPrio3
    (3) BinaryExpressionPrio3 -> . UnaryExpression Mod BinaryExpressionPrio3
    (4) BinaryExpressionPrio3 -> . UnaryExpression
    (80) UnaryExpression -> . IncrementAfter
    (81) UnaryExpression -> . IncrementBefore
    (82) UnaryExpression -> . DecrementAfter
    (83) UnaryExpression -> . DecrementBefore
    (84) UnaryExpression -> . FunctionCall
    (85) UnaryExpression -> . VarName
    (86) UnaryExpression -> . Literal
    (87) UnaryExpression -> . ( Expression )
    (78) IncrementAfter -> . VarName Inc
    (79) IncrementBefore -> . Inc VarName
    (75) DecrementAfter -> . VarName Dec
    (76) DecrementBefore -> . Dec VarName
    (77) FunctionCall -> . VarName ( ArgumentListR )
    (74) VarName -> . ID
    (20) Literal -> . IntLiteral
    (21) Literal -> . BoolLiteral
    (22) Literal -> . CharLiteral
    (29) Inc -> . INC
    (24) Dec -> . DEC
    (19) IntLiteral -> . INTL
    (17) BoolLiteral -> . BOOLL
    (18) CharLiteral -> . CHARL

    )               reduce using rule 88 (empty -> .)
    (               shift and go to state 38
    ID              shift and go to state 71
    INC             shift and go to state 60
    DEC             shift and go to state 61
    INTL            shift and go to state 42
    BOOLL           shift and go to state 62
    CHARL           shift and go to state 63

    VarName                        shift and go to state 53
    ArgumentListR                  shift and go to state 125
    Argument                       shift and go to state 126
    empty                          shift and go to state 127
    Expression                     shift and go to state 128
    BinaryExpressionPrio7          shift and go to state 36
    BinaryExpressionPrio6          shift and go to state 44
    BinaryExpressionPrio4          shift and go to state 45
    BinaryExpressionPrio3          shift and go to state 46
    UnaryExpression                shift and go to state 47
    IncrementAfter                 shift and go to state 48
    IncrementBefore                shift and go to state 49
    DecrementAfter                 shift and go to state 50
    DecrementBefore                shift and go to state 51
    FunctionCall                   shift and go to state 52
    Literal                        shift and go to state 54
    Inc                            shift and go to state 55
    Dec                            shift and go to state 56
    IntLiteral                     shift and go to state 57
    BoolLiteral                    shift and go to state 58
    CharLiteral                    shift and go to state 59

state 103

    (79) IncrementBefore -> Inc VarName .

    *               reduce using rule 79 (IncrementBefore -> Inc VarName .)
    /               reduce using rule 79 (IncrementBefore -> Inc VarName .)
    %               reduce using rule 79 (IncrementBefore -> Inc VarName .)
    +               reduce using rule 79 (IncrementBefore -> Inc VarName .)
    -               reduce using rule 79 (IncrementBefore -> Inc VarName .)
    GEQ             reduce using rule 79 (IncrementBefore -> Inc VarName .)
    LEQ             reduce using rule 79 (IncrementBefore -> Inc VarName .)
    LT              reduce using rule 79 (IncrementBefore -> Inc VarName .)
    GT              reduce using rule 79 (IncrementBefore -> Inc VarName .)
    NE              reduce using rule 79 (IncrementBefore -> Inc VarName .)
    EQ              reduce using rule 79 (IncrementBefore -> Inc VarName .)
    ;               reduce using rule 79 (IncrementBefore -> Inc VarName .)
    )               reduce using rule 79 (IncrementBefore -> Inc VarName .)
    ID              reduce using rule 79 (IncrementBefore -> Inc VarName .)
    IF              reduce using rule 79 (IncrementBefore -> Inc VarName .)
    FOR             reduce using rule 79 (IncrementBefore -> Inc VarName .)
    WHILE           reduce using rule 79 (IncrementBefore -> Inc VarName .)
    BREAK           reduce using rule 79 (IncrementBefore -> Inc VarName .)
    RETURN          reduce using rule 79 (IncrementBefore -> Inc VarName .)
    (               reduce using rule 79 (IncrementBefore -> Inc VarName .)
    INC             reduce using rule 79 (IncrementBefore -> Inc VarName .)
    DEC             reduce using rule 79 (IncrementBefore -> Inc VarName .)
    INTL            reduce using rule 79 (IncrementBefore -> Inc VarName .)
    BOOLL           reduce using rule 79 (IncrementBefore -> Inc VarName .)
    CHARL           reduce using rule 79 (IncrementBefore -> Inc VarName .)
    }               reduce using rule 79 (IncrementBefore -> Inc VarName .)
    ,               reduce using rule 79 (IncrementBefore -> Inc VarName .)


state 104

    (76) DecrementBefore -> Dec VarName .

    *               reduce using rule 76 (DecrementBefore -> Dec VarName .)
    /               reduce using rule 76 (DecrementBefore -> Dec VarName .)
    %               reduce using rule 76 (DecrementBefore -> Dec VarName .)
    +               reduce using rule 76 (DecrementBefore -> Dec VarName .)
    -               reduce using rule 76 (DecrementBefore -> Dec VarName .)
    GEQ             reduce using rule 76 (DecrementBefore -> Dec VarName .)
    LEQ             reduce using rule 76 (DecrementBefore -> Dec VarName .)
    LT              reduce using rule 76 (DecrementBefore -> Dec VarName .)
    GT              reduce using rule 76 (DecrementBefore -> Dec VarName .)
    NE              reduce using rule 76 (DecrementBefore -> Dec VarName .)
    EQ              reduce using rule 76 (DecrementBefore -> Dec VarName .)
    ;               reduce using rule 76 (DecrementBefore -> Dec VarName .)
    )               reduce using rule 76 (DecrementBefore -> Dec VarName .)
    ID              reduce using rule 76 (DecrementBefore -> Dec VarName .)
    IF              reduce using rule 76 (DecrementBefore -> Dec VarName .)
    FOR             reduce using rule 76 (DecrementBefore -> Dec VarName .)
    WHILE           reduce using rule 76 (DecrementBefore -> Dec VarName .)
    BREAK           reduce using rule 76 (DecrementBefore -> Dec VarName .)
    RETURN          reduce using rule 76 (DecrementBefore -> Dec VarName .)
    (               reduce using rule 76 (DecrementBefore -> Dec VarName .)
    INC             reduce using rule 76 (DecrementBefore -> Dec VarName .)
    DEC             reduce using rule 76 (DecrementBefore -> Dec VarName .)
    INTL            reduce using rule 76 (DecrementBefore -> Dec VarName .)
    BOOLL           reduce using rule 76 (DecrementBefore -> Dec VarName .)
    CHARL           reduce using rule 76 (DecrementBefore -> Dec VarName .)
    }               reduce using rule 76 (DecrementBefore -> Dec VarName .)
    ,               reduce using rule 76 (DecrementBefore -> Dec VarName .)


state 105

    (36) AssignmentStatement -> ID = Expression . ;
    (37) AssignmentStatement -> ID = Expression .

  ! shift/reduce conflict for ; resolved as shift
    ;               shift and go to state 129
    ID              reduce using rule 37 (AssignmentStatement -> ID = Expression .)
    IF              reduce using rule 37 (AssignmentStatement -> ID = Expression .)
    FOR             reduce using rule 37 (AssignmentStatement -> ID = Expression .)
    WHILE           reduce using rule 37 (AssignmentStatement -> ID = Expression .)
    BREAK           reduce using rule 37 (AssignmentStatement -> ID = Expression .)
    RETURN          reduce using rule 37 (AssignmentStatement -> ID = Expression .)
    (               reduce using rule 37 (AssignmentStatement -> ID = Expression .)
    INC             reduce using rule 37 (AssignmentStatement -> ID = Expression .)
    DEC             reduce using rule 37 (AssignmentStatement -> ID = Expression .)
    INTL            reduce using rule 37 (AssignmentStatement -> ID = Expression .)
    BOOLL           reduce using rule 37 (AssignmentStatement -> ID = Expression .)
    CHARL           reduce using rule 37 (AssignmentStatement -> ID = Expression .)
    }               reduce using rule 37 (AssignmentStatement -> ID = Expression .)
    )               reduce using rule 37 (AssignmentStatement -> ID = Expression .)

  ! ;               [ reduce using rule 37 (AssignmentStatement -> ID = Expression .) ]


state 106

    (41) DeclarationAssignmentStatement -> TypeName ID = . Expression ;
    (16) Expression -> . BinaryExpressionPrio7
    (13) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7
    (14) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 Equal BinaryExpressionPrio7
    (15) BinaryExpressionPrio7 -> . BinaryExpressionPrio6
    (8) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6
    (9) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6
    (10) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Less BinaryExpressionPrio6
    (11) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Greater BinaryExpressionPrio6
    (12) BinaryExpressionPrio6 -> . BinaryExpressionPrio4
    (5) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Add BinaryExpressionPrio4
    (6) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Sub BinaryExpressionPrio4
    (7) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (1) BinaryExpressionPrio3 -> . UnaryExpression Mul BinaryExpressionPrio3
    (2) BinaryExpressionPrio3 -> . UnaryExpression Div BinaryExpressionPrio3
    (3) BinaryExpressionPrio3 -> . UnaryExpression Mod BinaryExpressionPrio3
    (4) BinaryExpressionPrio3 -> . UnaryExpression
    (80) UnaryExpression -> . IncrementAfter
    (81) UnaryExpression -> . IncrementBefore
    (82) UnaryExpression -> . DecrementAfter
    (83) UnaryExpression -> . DecrementBefore
    (84) UnaryExpression -> . FunctionCall
    (85) UnaryExpression -> . VarName
    (86) UnaryExpression -> . Literal
    (87) UnaryExpression -> . ( Expression )
    (78) IncrementAfter -> . VarName Inc
    (79) IncrementBefore -> . Inc VarName
    (75) DecrementAfter -> . VarName Dec
    (76) DecrementBefore -> . Dec VarName
    (77) FunctionCall -> . VarName ( ArgumentListR )
    (74) VarName -> . ID
    (20) Literal -> . IntLiteral
    (21) Literal -> . BoolLiteral
    (22) Literal -> . CharLiteral
    (29) Inc -> . INC
    (24) Dec -> . DEC
    (19) IntLiteral -> . INTL
    (17) BoolLiteral -> . BOOLL
    (18) CharLiteral -> . CHARL

    (               shift and go to state 38
    ID              shift and go to state 71
    INC             shift and go to state 60
    DEC             shift and go to state 61
    INTL            shift and go to state 42
    BOOLL           shift and go to state 62
    CHARL           shift and go to state 63

    Expression                     shift and go to state 130
    BinaryExpressionPrio7          shift and go to state 36
    BinaryExpressionPrio6          shift and go to state 44
    BinaryExpressionPrio4          shift and go to state 45
    BinaryExpressionPrio3          shift and go to state 46
    UnaryExpression                shift and go to state 47
    IncrementAfter                 shift and go to state 48
    IncrementBefore                shift and go to state 49
    DecrementAfter                 shift and go to state 50
    DecrementBefore                shift and go to state 51
    FunctionCall                   shift and go to state 52
    VarName                        shift and go to state 53
    Literal                        shift and go to state 54
    Inc                            shift and go to state 55
    Dec                            shift and go to state 56
    IntLiteral                     shift and go to state 57
    BoolLiteral                    shift and go to state 58
    CharLiteral                    shift and go to state 59

state 107

    (42) DeclarationStatement -> TypeName ID ; .

    ID              reduce using rule 42 (DeclarationStatement -> TypeName ID ; .)
    IF              reduce using rule 42 (DeclarationStatement -> TypeName ID ; .)
    FOR             reduce using rule 42 (DeclarationStatement -> TypeName ID ; .)
    WHILE           reduce using rule 42 (DeclarationStatement -> TypeName ID ; .)
    BREAK           reduce using rule 42 (DeclarationStatement -> TypeName ID ; .)
    RETURN          reduce using rule 42 (DeclarationStatement -> TypeName ID ; .)
    ;               reduce using rule 42 (DeclarationStatement -> TypeName ID ; .)
    (               reduce using rule 42 (DeclarationStatement -> TypeName ID ; .)
    INC             reduce using rule 42 (DeclarationStatement -> TypeName ID ; .)
    DEC             reduce using rule 42 (DeclarationStatement -> TypeName ID ; .)
    INTL            reduce using rule 42 (DeclarationStatement -> TypeName ID ; .)
    BOOLL           reduce using rule 42 (DeclarationStatement -> TypeName ID ; .)
    CHARL           reduce using rule 42 (DeclarationStatement -> TypeName ID ; .)
    }               reduce using rule 42 (DeclarationStatement -> TypeName ID ; .)
    )               reduce using rule 42 (DeclarationStatement -> TypeName ID ; .)


state 108

    (44) IfElseStatement -> IF ( Expression . ) Block ELSE Block

    )               shift and go to state 131


state 109

    (87) UnaryExpression -> ( Expression ) .

    *               reduce using rule 87 (UnaryExpression -> ( Expression ) .)
    /               reduce using rule 87 (UnaryExpression -> ( Expression ) .)
    %               reduce using rule 87 (UnaryExpression -> ( Expression ) .)
    +               reduce using rule 87 (UnaryExpression -> ( Expression ) .)
    -               reduce using rule 87 (UnaryExpression -> ( Expression ) .)
    GEQ             reduce using rule 87 (UnaryExpression -> ( Expression ) .)
    LEQ             reduce using rule 87 (UnaryExpression -> ( Expression ) .)
    LT              reduce using rule 87 (UnaryExpression -> ( Expression ) .)
    GT              reduce using rule 87 (UnaryExpression -> ( Expression ) .)
    NE              reduce using rule 87 (UnaryExpression -> ( Expression ) .)
    EQ              reduce using rule 87 (UnaryExpression -> ( Expression ) .)
    ;               reduce using rule 87 (UnaryExpression -> ( Expression ) .)
    )               reduce using rule 87 (UnaryExpression -> ( Expression ) .)
    ID              reduce using rule 87 (UnaryExpression -> ( Expression ) .)
    IF              reduce using rule 87 (UnaryExpression -> ( Expression ) .)
    FOR             reduce using rule 87 (UnaryExpression -> ( Expression ) .)
    WHILE           reduce using rule 87 (UnaryExpression -> ( Expression ) .)
    BREAK           reduce using rule 87 (UnaryExpression -> ( Expression ) .)
    RETURN          reduce using rule 87 (UnaryExpression -> ( Expression ) .)
    (               reduce using rule 87 (UnaryExpression -> ( Expression ) .)
    INC             reduce using rule 87 (UnaryExpression -> ( Expression ) .)
    DEC             reduce using rule 87 (UnaryExpression -> ( Expression ) .)
    INTL            reduce using rule 87 (UnaryExpression -> ( Expression ) .)
    BOOLL           reduce using rule 87 (UnaryExpression -> ( Expression ) .)
    CHARL           reduce using rule 87 (UnaryExpression -> ( Expression ) .)
    }               reduce using rule 87 (UnaryExpression -> ( Expression ) .)
    ,               reduce using rule 87 (UnaryExpression -> ( Expression ) .)


state 110

    (43) ForStatement -> FOR ( Statement . Expression ; Statement ) Block
    (16) Expression -> . BinaryExpressionPrio7
    (13) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7
    (14) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 Equal BinaryExpressionPrio7
    (15) BinaryExpressionPrio7 -> . BinaryExpressionPrio6
    (8) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6
    (9) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6
    (10) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Less BinaryExpressionPrio6
    (11) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Greater BinaryExpressionPrio6
    (12) BinaryExpressionPrio6 -> . BinaryExpressionPrio4
    (5) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Add BinaryExpressionPrio4
    (6) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Sub BinaryExpressionPrio4
    (7) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (1) BinaryExpressionPrio3 -> . UnaryExpression Mul BinaryExpressionPrio3
    (2) BinaryExpressionPrio3 -> . UnaryExpression Div BinaryExpressionPrio3
    (3) BinaryExpressionPrio3 -> . UnaryExpression Mod BinaryExpressionPrio3
    (4) BinaryExpressionPrio3 -> . UnaryExpression
    (80) UnaryExpression -> . IncrementAfter
    (81) UnaryExpression -> . IncrementBefore
    (82) UnaryExpression -> . DecrementAfter
    (83) UnaryExpression -> . DecrementBefore
    (84) UnaryExpression -> . FunctionCall
    (85) UnaryExpression -> . VarName
    (86) UnaryExpression -> . Literal
    (87) UnaryExpression -> . ( Expression )
    (78) IncrementAfter -> . VarName Inc
    (79) IncrementBefore -> . Inc VarName
    (75) DecrementAfter -> . VarName Dec
    (76) DecrementBefore -> . Dec VarName
    (77) FunctionCall -> . VarName ( ArgumentListR )
    (74) VarName -> . ID
    (20) Literal -> . IntLiteral
    (21) Literal -> . BoolLiteral
    (22) Literal -> . CharLiteral
    (29) Inc -> . INC
    (24) Dec -> . DEC
    (19) IntLiteral -> . INTL
    (17) BoolLiteral -> . BOOLL
    (18) CharLiteral -> . CHARL

    (               shift and go to state 38
    ID              shift and go to state 71
    INC             shift and go to state 60
    DEC             shift and go to state 61
    INTL            shift and go to state 42
    BOOLL           shift and go to state 62
    CHARL           shift and go to state 63

    Expression                     shift and go to state 132
    BinaryExpressionPrio7          shift and go to state 36
    BinaryExpressionPrio6          shift and go to state 44
    BinaryExpressionPrio4          shift and go to state 45
    BinaryExpressionPrio3          shift and go to state 46
    UnaryExpression                shift and go to state 47
    IncrementAfter                 shift and go to state 48
    IncrementBefore                shift and go to state 49
    DecrementAfter                 shift and go to state 50
    DecrementBefore                shift and go to state 51
    FunctionCall                   shift and go to state 52
    VarName                        shift and go to state 53
    Literal                        shift and go to state 54
    Inc                            shift and go to state 55
    Dec                            shift and go to state 56
    IntLiteral                     shift and go to state 57
    BoolLiteral                    shift and go to state 58
    CharLiteral                    shift and go to state 59

state 111

    (59) WhileStatement -> WHILE ( Expression . ) Block

    )               shift and go to state 133


state 112

    (39) BreakStatement -> BREAK INTL ; .

    ID              reduce using rule 39 (BreakStatement -> BREAK INTL ; .)
    IF              reduce using rule 39 (BreakStatement -> BREAK INTL ; .)
    FOR             reduce using rule 39 (BreakStatement -> BREAK INTL ; .)
    WHILE           reduce using rule 39 (BreakStatement -> BREAK INTL ; .)
    BREAK           reduce using rule 39 (BreakStatement -> BREAK INTL ; .)
    RETURN          reduce using rule 39 (BreakStatement -> BREAK INTL ; .)
    ;               reduce using rule 39 (BreakStatement -> BREAK INTL ; .)
    (               reduce using rule 39 (BreakStatement -> BREAK INTL ; .)
    INC             reduce using rule 39 (BreakStatement -> BREAK INTL ; .)
    DEC             reduce using rule 39 (BreakStatement -> BREAK INTL ; .)
    INTL            reduce using rule 39 (BreakStatement -> BREAK INTL ; .)
    BOOLL           reduce using rule 39 (BreakStatement -> BREAK INTL ; .)
    CHARL           reduce using rule 39 (BreakStatement -> BREAK INTL ; .)
    }               reduce using rule 39 (BreakStatement -> BREAK INTL ; .)
    )               reduce using rule 39 (BreakStatement -> BREAK INTL ; .)


state 113

    (45) ReturnStatement -> RETURN Expression ; .

    ID              reduce using rule 45 (ReturnStatement -> RETURN Expression ; .)
    IF              reduce using rule 45 (ReturnStatement -> RETURN Expression ; .)
    FOR             reduce using rule 45 (ReturnStatement -> RETURN Expression ; .)
    WHILE           reduce using rule 45 (ReturnStatement -> RETURN Expression ; .)
    BREAK           reduce using rule 45 (ReturnStatement -> RETURN Expression ; .)
    RETURN          reduce using rule 45 (ReturnStatement -> RETURN Expression ; .)
    ;               reduce using rule 45 (ReturnStatement -> RETURN Expression ; .)
    (               reduce using rule 45 (ReturnStatement -> RETURN Expression ; .)
    INC             reduce using rule 45 (ReturnStatement -> RETURN Expression ; .)
    DEC             reduce using rule 45 (ReturnStatement -> RETURN Expression ; .)
    INTL            reduce using rule 45 (ReturnStatement -> RETURN Expression ; .)
    BOOLL           reduce using rule 45 (ReturnStatement -> RETURN Expression ; .)
    CHARL           reduce using rule 45 (ReturnStatement -> RETURN Expression ; .)
    }               reduce using rule 45 (ReturnStatement -> RETURN Expression ; .)
    )               reduce using rule 45 (ReturnStatement -> RETURN Expression ; .)


state 114

    (13) BinaryExpressionPrio7 -> BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7 .

    ;               reduce using rule 13 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7 .)
    )               reduce using rule 13 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7 .)
    ID              reduce using rule 13 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7 .)
    IF              reduce using rule 13 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7 .)
    FOR             reduce using rule 13 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7 .)
    WHILE           reduce using rule 13 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7 .)
    BREAK           reduce using rule 13 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7 .)
    RETURN          reduce using rule 13 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7 .)
    (               reduce using rule 13 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7 .)
    INC             reduce using rule 13 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7 .)
    DEC             reduce using rule 13 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7 .)
    INTL            reduce using rule 13 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7 .)
    BOOLL           reduce using rule 13 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7 .)
    CHARL           reduce using rule 13 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7 .)
    }               reduce using rule 13 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7 .)
    ,               reduce using rule 13 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7 .)


state 115

    (14) BinaryExpressionPrio7 -> BinaryExpressionPrio6 Equal BinaryExpressionPrio7 .

    ;               reduce using rule 14 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 Equal BinaryExpressionPrio7 .)
    )               reduce using rule 14 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 Equal BinaryExpressionPrio7 .)
    ID              reduce using rule 14 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 Equal BinaryExpressionPrio7 .)
    IF              reduce using rule 14 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 Equal BinaryExpressionPrio7 .)
    FOR             reduce using rule 14 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 Equal BinaryExpressionPrio7 .)
    WHILE           reduce using rule 14 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 Equal BinaryExpressionPrio7 .)
    BREAK           reduce using rule 14 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 Equal BinaryExpressionPrio7 .)
    RETURN          reduce using rule 14 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 Equal BinaryExpressionPrio7 .)
    (               reduce using rule 14 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 Equal BinaryExpressionPrio7 .)
    INC             reduce using rule 14 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 Equal BinaryExpressionPrio7 .)
    DEC             reduce using rule 14 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 Equal BinaryExpressionPrio7 .)
    INTL            reduce using rule 14 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 Equal BinaryExpressionPrio7 .)
    BOOLL           reduce using rule 14 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 Equal BinaryExpressionPrio7 .)
    CHARL           reduce using rule 14 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 Equal BinaryExpressionPrio7 .)
    }               reduce using rule 14 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 Equal BinaryExpressionPrio7 .)
    ,               reduce using rule 14 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 Equal BinaryExpressionPrio7 .)


state 116

    (8) BinaryExpressionPrio6 -> BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6 .

    NE              reduce using rule 8 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6 .)
    EQ              reduce using rule 8 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6 .)
    ;               reduce using rule 8 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6 .)
    )               reduce using rule 8 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6 .)
    ID              reduce using rule 8 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6 .)
    IF              reduce using rule 8 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6 .)
    FOR             reduce using rule 8 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6 .)
    WHILE           reduce using rule 8 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6 .)
    BREAK           reduce using rule 8 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6 .)
    RETURN          reduce using rule 8 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6 .)
    (               reduce using rule 8 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6 .)
    INC             reduce using rule 8 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6 .)
    DEC             reduce using rule 8 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6 .)
    INTL            reduce using rule 8 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6 .)
    BOOLL           reduce using rule 8 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6 .)
    CHARL           reduce using rule 8 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6 .)
    }               reduce using rule 8 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6 .)
    ,               reduce using rule 8 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6 .)


state 117

    (9) BinaryExpressionPrio6 -> BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6 .

    NE              reduce using rule 9 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6 .)
    EQ              reduce using rule 9 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6 .)
    ;               reduce using rule 9 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6 .)
    )               reduce using rule 9 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6 .)
    ID              reduce using rule 9 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6 .)
    IF              reduce using rule 9 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6 .)
    FOR             reduce using rule 9 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6 .)
    WHILE           reduce using rule 9 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6 .)
    BREAK           reduce using rule 9 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6 .)
    RETURN          reduce using rule 9 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6 .)
    (               reduce using rule 9 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6 .)
    INC             reduce using rule 9 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6 .)
    DEC             reduce using rule 9 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6 .)
    INTL            reduce using rule 9 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6 .)
    BOOLL           reduce using rule 9 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6 .)
    CHARL           reduce using rule 9 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6 .)
    }               reduce using rule 9 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6 .)
    ,               reduce using rule 9 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6 .)


state 118

    (10) BinaryExpressionPrio6 -> BinaryExpressionPrio4 Less BinaryExpressionPrio6 .

    NE              reduce using rule 10 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Less BinaryExpressionPrio6 .)
    EQ              reduce using rule 10 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Less BinaryExpressionPrio6 .)
    ;               reduce using rule 10 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Less BinaryExpressionPrio6 .)
    )               reduce using rule 10 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Less BinaryExpressionPrio6 .)
    ID              reduce using rule 10 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Less BinaryExpressionPrio6 .)
    IF              reduce using rule 10 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Less BinaryExpressionPrio6 .)
    FOR             reduce using rule 10 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Less BinaryExpressionPrio6 .)
    WHILE           reduce using rule 10 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Less BinaryExpressionPrio6 .)
    BREAK           reduce using rule 10 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Less BinaryExpressionPrio6 .)
    RETURN          reduce using rule 10 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Less BinaryExpressionPrio6 .)
    (               reduce using rule 10 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Less BinaryExpressionPrio6 .)
    INC             reduce using rule 10 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Less BinaryExpressionPrio6 .)
    DEC             reduce using rule 10 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Less BinaryExpressionPrio6 .)
    INTL            reduce using rule 10 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Less BinaryExpressionPrio6 .)
    BOOLL           reduce using rule 10 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Less BinaryExpressionPrio6 .)
    CHARL           reduce using rule 10 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Less BinaryExpressionPrio6 .)
    }               reduce using rule 10 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Less BinaryExpressionPrio6 .)
    ,               reduce using rule 10 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Less BinaryExpressionPrio6 .)


state 119

    (11) BinaryExpressionPrio6 -> BinaryExpressionPrio4 Greater BinaryExpressionPrio6 .

    NE              reduce using rule 11 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Greater BinaryExpressionPrio6 .)
    EQ              reduce using rule 11 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Greater BinaryExpressionPrio6 .)
    ;               reduce using rule 11 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Greater BinaryExpressionPrio6 .)
    )               reduce using rule 11 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Greater BinaryExpressionPrio6 .)
    ID              reduce using rule 11 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Greater BinaryExpressionPrio6 .)
    IF              reduce using rule 11 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Greater BinaryExpressionPrio6 .)
    FOR             reduce using rule 11 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Greater BinaryExpressionPrio6 .)
    WHILE           reduce using rule 11 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Greater BinaryExpressionPrio6 .)
    BREAK           reduce using rule 11 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Greater BinaryExpressionPrio6 .)
    RETURN          reduce using rule 11 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Greater BinaryExpressionPrio6 .)
    (               reduce using rule 11 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Greater BinaryExpressionPrio6 .)
    INC             reduce using rule 11 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Greater BinaryExpressionPrio6 .)
    DEC             reduce using rule 11 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Greater BinaryExpressionPrio6 .)
    INTL            reduce using rule 11 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Greater BinaryExpressionPrio6 .)
    BOOLL           reduce using rule 11 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Greater BinaryExpressionPrio6 .)
    CHARL           reduce using rule 11 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Greater BinaryExpressionPrio6 .)
    }               reduce using rule 11 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Greater BinaryExpressionPrio6 .)
    ,               reduce using rule 11 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 Greater BinaryExpressionPrio6 .)


state 120

    (5) BinaryExpressionPrio4 -> BinaryExpressionPrio3 Add BinaryExpressionPrio4 .

    GEQ             reduce using rule 5 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Add BinaryExpressionPrio4 .)
    LEQ             reduce using rule 5 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Add BinaryExpressionPrio4 .)
    LT              reduce using rule 5 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Add BinaryExpressionPrio4 .)
    GT              reduce using rule 5 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Add BinaryExpressionPrio4 .)
    NE              reduce using rule 5 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Add BinaryExpressionPrio4 .)
    EQ              reduce using rule 5 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Add BinaryExpressionPrio4 .)
    ;               reduce using rule 5 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Add BinaryExpressionPrio4 .)
    )               reduce using rule 5 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Add BinaryExpressionPrio4 .)
    ID              reduce using rule 5 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Add BinaryExpressionPrio4 .)
    IF              reduce using rule 5 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Add BinaryExpressionPrio4 .)
    FOR             reduce using rule 5 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Add BinaryExpressionPrio4 .)
    WHILE           reduce using rule 5 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Add BinaryExpressionPrio4 .)
    BREAK           reduce using rule 5 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Add BinaryExpressionPrio4 .)
    RETURN          reduce using rule 5 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Add BinaryExpressionPrio4 .)
    (               reduce using rule 5 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Add BinaryExpressionPrio4 .)
    INC             reduce using rule 5 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Add BinaryExpressionPrio4 .)
    DEC             reduce using rule 5 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Add BinaryExpressionPrio4 .)
    INTL            reduce using rule 5 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Add BinaryExpressionPrio4 .)
    BOOLL           reduce using rule 5 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Add BinaryExpressionPrio4 .)
    CHARL           reduce using rule 5 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Add BinaryExpressionPrio4 .)
    }               reduce using rule 5 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Add BinaryExpressionPrio4 .)
    ,               reduce using rule 5 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Add BinaryExpressionPrio4 .)


state 121

    (6) BinaryExpressionPrio4 -> BinaryExpressionPrio3 Sub BinaryExpressionPrio4 .

    GEQ             reduce using rule 6 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Sub BinaryExpressionPrio4 .)
    LEQ             reduce using rule 6 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Sub BinaryExpressionPrio4 .)
    LT              reduce using rule 6 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Sub BinaryExpressionPrio4 .)
    GT              reduce using rule 6 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Sub BinaryExpressionPrio4 .)
    NE              reduce using rule 6 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Sub BinaryExpressionPrio4 .)
    EQ              reduce using rule 6 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Sub BinaryExpressionPrio4 .)
    ;               reduce using rule 6 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Sub BinaryExpressionPrio4 .)
    )               reduce using rule 6 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Sub BinaryExpressionPrio4 .)
    ID              reduce using rule 6 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Sub BinaryExpressionPrio4 .)
    IF              reduce using rule 6 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Sub BinaryExpressionPrio4 .)
    FOR             reduce using rule 6 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Sub BinaryExpressionPrio4 .)
    WHILE           reduce using rule 6 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Sub BinaryExpressionPrio4 .)
    BREAK           reduce using rule 6 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Sub BinaryExpressionPrio4 .)
    RETURN          reduce using rule 6 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Sub BinaryExpressionPrio4 .)
    (               reduce using rule 6 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Sub BinaryExpressionPrio4 .)
    INC             reduce using rule 6 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Sub BinaryExpressionPrio4 .)
    DEC             reduce using rule 6 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Sub BinaryExpressionPrio4 .)
    INTL            reduce using rule 6 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Sub BinaryExpressionPrio4 .)
    BOOLL           reduce using rule 6 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Sub BinaryExpressionPrio4 .)
    CHARL           reduce using rule 6 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Sub BinaryExpressionPrio4 .)
    }               reduce using rule 6 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Sub BinaryExpressionPrio4 .)
    ,               reduce using rule 6 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 Sub BinaryExpressionPrio4 .)


state 122

    (1) BinaryExpressionPrio3 -> UnaryExpression Mul BinaryExpressionPrio3 .

    +               reduce using rule 1 (BinaryExpressionPrio3 -> UnaryExpression Mul BinaryExpressionPrio3 .)
    -               reduce using rule 1 (BinaryExpressionPrio3 -> UnaryExpression Mul BinaryExpressionPrio3 .)
    GEQ             reduce using rule 1 (BinaryExpressionPrio3 -> UnaryExpression Mul BinaryExpressionPrio3 .)
    LEQ             reduce using rule 1 (BinaryExpressionPrio3 -> UnaryExpression Mul BinaryExpressionPrio3 .)
    LT              reduce using rule 1 (BinaryExpressionPrio3 -> UnaryExpression Mul BinaryExpressionPrio3 .)
    GT              reduce using rule 1 (BinaryExpressionPrio3 -> UnaryExpression Mul BinaryExpressionPrio3 .)
    NE              reduce using rule 1 (BinaryExpressionPrio3 -> UnaryExpression Mul BinaryExpressionPrio3 .)
    EQ              reduce using rule 1 (BinaryExpressionPrio3 -> UnaryExpression Mul BinaryExpressionPrio3 .)
    ;               reduce using rule 1 (BinaryExpressionPrio3 -> UnaryExpression Mul BinaryExpressionPrio3 .)
    )               reduce using rule 1 (BinaryExpressionPrio3 -> UnaryExpression Mul BinaryExpressionPrio3 .)
    ID              reduce using rule 1 (BinaryExpressionPrio3 -> UnaryExpression Mul BinaryExpressionPrio3 .)
    IF              reduce using rule 1 (BinaryExpressionPrio3 -> UnaryExpression Mul BinaryExpressionPrio3 .)
    FOR             reduce using rule 1 (BinaryExpressionPrio3 -> UnaryExpression Mul BinaryExpressionPrio3 .)
    WHILE           reduce using rule 1 (BinaryExpressionPrio3 -> UnaryExpression Mul BinaryExpressionPrio3 .)
    BREAK           reduce using rule 1 (BinaryExpressionPrio3 -> UnaryExpression Mul BinaryExpressionPrio3 .)
    RETURN          reduce using rule 1 (BinaryExpressionPrio3 -> UnaryExpression Mul BinaryExpressionPrio3 .)
    (               reduce using rule 1 (BinaryExpressionPrio3 -> UnaryExpression Mul BinaryExpressionPrio3 .)
    INC             reduce using rule 1 (BinaryExpressionPrio3 -> UnaryExpression Mul BinaryExpressionPrio3 .)
    DEC             reduce using rule 1 (BinaryExpressionPrio3 -> UnaryExpression Mul BinaryExpressionPrio3 .)
    INTL            reduce using rule 1 (BinaryExpressionPrio3 -> UnaryExpression Mul BinaryExpressionPrio3 .)
    BOOLL           reduce using rule 1 (BinaryExpressionPrio3 -> UnaryExpression Mul BinaryExpressionPrio3 .)
    CHARL           reduce using rule 1 (BinaryExpressionPrio3 -> UnaryExpression Mul BinaryExpressionPrio3 .)
    }               reduce using rule 1 (BinaryExpressionPrio3 -> UnaryExpression Mul BinaryExpressionPrio3 .)
    ,               reduce using rule 1 (BinaryExpressionPrio3 -> UnaryExpression Mul BinaryExpressionPrio3 .)


state 123

    (2) BinaryExpressionPrio3 -> UnaryExpression Div BinaryExpressionPrio3 .

    +               reduce using rule 2 (BinaryExpressionPrio3 -> UnaryExpression Div BinaryExpressionPrio3 .)
    -               reduce using rule 2 (BinaryExpressionPrio3 -> UnaryExpression Div BinaryExpressionPrio3 .)
    GEQ             reduce using rule 2 (BinaryExpressionPrio3 -> UnaryExpression Div BinaryExpressionPrio3 .)
    LEQ             reduce using rule 2 (BinaryExpressionPrio3 -> UnaryExpression Div BinaryExpressionPrio3 .)
    LT              reduce using rule 2 (BinaryExpressionPrio3 -> UnaryExpression Div BinaryExpressionPrio3 .)
    GT              reduce using rule 2 (BinaryExpressionPrio3 -> UnaryExpression Div BinaryExpressionPrio3 .)
    NE              reduce using rule 2 (BinaryExpressionPrio3 -> UnaryExpression Div BinaryExpressionPrio3 .)
    EQ              reduce using rule 2 (BinaryExpressionPrio3 -> UnaryExpression Div BinaryExpressionPrio3 .)
    ;               reduce using rule 2 (BinaryExpressionPrio3 -> UnaryExpression Div BinaryExpressionPrio3 .)
    )               reduce using rule 2 (BinaryExpressionPrio3 -> UnaryExpression Div BinaryExpressionPrio3 .)
    ID              reduce using rule 2 (BinaryExpressionPrio3 -> UnaryExpression Div BinaryExpressionPrio3 .)
    IF              reduce using rule 2 (BinaryExpressionPrio3 -> UnaryExpression Div BinaryExpressionPrio3 .)
    FOR             reduce using rule 2 (BinaryExpressionPrio3 -> UnaryExpression Div BinaryExpressionPrio3 .)
    WHILE           reduce using rule 2 (BinaryExpressionPrio3 -> UnaryExpression Div BinaryExpressionPrio3 .)
    BREAK           reduce using rule 2 (BinaryExpressionPrio3 -> UnaryExpression Div BinaryExpressionPrio3 .)
    RETURN          reduce using rule 2 (BinaryExpressionPrio3 -> UnaryExpression Div BinaryExpressionPrio3 .)
    (               reduce using rule 2 (BinaryExpressionPrio3 -> UnaryExpression Div BinaryExpressionPrio3 .)
    INC             reduce using rule 2 (BinaryExpressionPrio3 -> UnaryExpression Div BinaryExpressionPrio3 .)
    DEC             reduce using rule 2 (BinaryExpressionPrio3 -> UnaryExpression Div BinaryExpressionPrio3 .)
    INTL            reduce using rule 2 (BinaryExpressionPrio3 -> UnaryExpression Div BinaryExpressionPrio3 .)
    BOOLL           reduce using rule 2 (BinaryExpressionPrio3 -> UnaryExpression Div BinaryExpressionPrio3 .)
    CHARL           reduce using rule 2 (BinaryExpressionPrio3 -> UnaryExpression Div BinaryExpressionPrio3 .)
    }               reduce using rule 2 (BinaryExpressionPrio3 -> UnaryExpression Div BinaryExpressionPrio3 .)
    ,               reduce using rule 2 (BinaryExpressionPrio3 -> UnaryExpression Div BinaryExpressionPrio3 .)


state 124

    (3) BinaryExpressionPrio3 -> UnaryExpression Mod BinaryExpressionPrio3 .

    +               reduce using rule 3 (BinaryExpressionPrio3 -> UnaryExpression Mod BinaryExpressionPrio3 .)
    -               reduce using rule 3 (BinaryExpressionPrio3 -> UnaryExpression Mod BinaryExpressionPrio3 .)
    GEQ             reduce using rule 3 (BinaryExpressionPrio3 -> UnaryExpression Mod BinaryExpressionPrio3 .)
    LEQ             reduce using rule 3 (BinaryExpressionPrio3 -> UnaryExpression Mod BinaryExpressionPrio3 .)
    LT              reduce using rule 3 (BinaryExpressionPrio3 -> UnaryExpression Mod BinaryExpressionPrio3 .)
    GT              reduce using rule 3 (BinaryExpressionPrio3 -> UnaryExpression Mod BinaryExpressionPrio3 .)
    NE              reduce using rule 3 (BinaryExpressionPrio3 -> UnaryExpression Mod BinaryExpressionPrio3 .)
    EQ              reduce using rule 3 (BinaryExpressionPrio3 -> UnaryExpression Mod BinaryExpressionPrio3 .)
    ;               reduce using rule 3 (BinaryExpressionPrio3 -> UnaryExpression Mod BinaryExpressionPrio3 .)
    )               reduce using rule 3 (BinaryExpressionPrio3 -> UnaryExpression Mod BinaryExpressionPrio3 .)
    ID              reduce using rule 3 (BinaryExpressionPrio3 -> UnaryExpression Mod BinaryExpressionPrio3 .)
    IF              reduce using rule 3 (BinaryExpressionPrio3 -> UnaryExpression Mod BinaryExpressionPrio3 .)
    FOR             reduce using rule 3 (BinaryExpressionPrio3 -> UnaryExpression Mod BinaryExpressionPrio3 .)
    WHILE           reduce using rule 3 (BinaryExpressionPrio3 -> UnaryExpression Mod BinaryExpressionPrio3 .)
    BREAK           reduce using rule 3 (BinaryExpressionPrio3 -> UnaryExpression Mod BinaryExpressionPrio3 .)
    RETURN          reduce using rule 3 (BinaryExpressionPrio3 -> UnaryExpression Mod BinaryExpressionPrio3 .)
    (               reduce using rule 3 (BinaryExpressionPrio3 -> UnaryExpression Mod BinaryExpressionPrio3 .)
    INC             reduce using rule 3 (BinaryExpressionPrio3 -> UnaryExpression Mod BinaryExpressionPrio3 .)
    DEC             reduce using rule 3 (BinaryExpressionPrio3 -> UnaryExpression Mod BinaryExpressionPrio3 .)
    INTL            reduce using rule 3 (BinaryExpressionPrio3 -> UnaryExpression Mod BinaryExpressionPrio3 .)
    BOOLL           reduce using rule 3 (BinaryExpressionPrio3 -> UnaryExpression Mod BinaryExpressionPrio3 .)
    CHARL           reduce using rule 3 (BinaryExpressionPrio3 -> UnaryExpression Mod BinaryExpressionPrio3 .)
    }               reduce using rule 3 (BinaryExpressionPrio3 -> UnaryExpression Mod BinaryExpressionPrio3 .)
    ,               reduce using rule 3 (BinaryExpressionPrio3 -> UnaryExpression Mod BinaryExpressionPrio3 .)


state 125

    (77) FunctionCall -> VarName ( ArgumentListR . )

    )               shift and go to state 134


state 126

    (61) ArgumentListR -> Argument . , ArgumentListR
    (62) ArgumentListR -> Argument .

    ,               shift and go to state 135
    )               reduce using rule 62 (ArgumentListR -> Argument .)


state 127

    (63) ArgumentListR -> empty .

    )               reduce using rule 63 (ArgumentListR -> empty .)


state 128

    (60) Argument -> Expression .

    ,               reduce using rule 60 (Argument -> Expression .)
    )               reduce using rule 60 (Argument -> Expression .)


state 129

    (36) AssignmentStatement -> ID = Expression ; .

    ID              reduce using rule 36 (AssignmentStatement -> ID = Expression ; .)
    IF              reduce using rule 36 (AssignmentStatement -> ID = Expression ; .)
    FOR             reduce using rule 36 (AssignmentStatement -> ID = Expression ; .)
    WHILE           reduce using rule 36 (AssignmentStatement -> ID = Expression ; .)
    BREAK           reduce using rule 36 (AssignmentStatement -> ID = Expression ; .)
    RETURN          reduce using rule 36 (AssignmentStatement -> ID = Expression ; .)
    ;               reduce using rule 36 (AssignmentStatement -> ID = Expression ; .)
    (               reduce using rule 36 (AssignmentStatement -> ID = Expression ; .)
    INC             reduce using rule 36 (AssignmentStatement -> ID = Expression ; .)
    DEC             reduce using rule 36 (AssignmentStatement -> ID = Expression ; .)
    INTL            reduce using rule 36 (AssignmentStatement -> ID = Expression ; .)
    BOOLL           reduce using rule 36 (AssignmentStatement -> ID = Expression ; .)
    CHARL           reduce using rule 36 (AssignmentStatement -> ID = Expression ; .)
    }               reduce using rule 36 (AssignmentStatement -> ID = Expression ; .)
    )               reduce using rule 36 (AssignmentStatement -> ID = Expression ; .)


state 130

    (41) DeclarationAssignmentStatement -> TypeName ID = Expression . ;

    ;               shift and go to state 136


state 131

    (44) IfElseStatement -> IF ( Expression ) . Block ELSE Block
    (64) Block -> . { StatementListR }

    {               shift and go to state 18

    Block                          shift and go to state 137

state 132

    (43) ForStatement -> FOR ( Statement Expression . ; Statement ) Block

    ;               shift and go to state 138


state 133

    (59) WhileStatement -> WHILE ( Expression ) . Block
    (64) Block -> . { StatementListR }

    {               shift and go to state 18

    Block                          shift and go to state 139

state 134

    (77) FunctionCall -> VarName ( ArgumentListR ) .

    *               reduce using rule 77 (FunctionCall -> VarName ( ArgumentListR ) .)
    /               reduce using rule 77 (FunctionCall -> VarName ( ArgumentListR ) .)
    %               reduce using rule 77 (FunctionCall -> VarName ( ArgumentListR ) .)
    +               reduce using rule 77 (FunctionCall -> VarName ( ArgumentListR ) .)
    -               reduce using rule 77 (FunctionCall -> VarName ( ArgumentListR ) .)
    GEQ             reduce using rule 77 (FunctionCall -> VarName ( ArgumentListR ) .)
    LEQ             reduce using rule 77 (FunctionCall -> VarName ( ArgumentListR ) .)
    LT              reduce using rule 77 (FunctionCall -> VarName ( ArgumentListR ) .)
    GT              reduce using rule 77 (FunctionCall -> VarName ( ArgumentListR ) .)
    NE              reduce using rule 77 (FunctionCall -> VarName ( ArgumentListR ) .)
    EQ              reduce using rule 77 (FunctionCall -> VarName ( ArgumentListR ) .)
    ;               reduce using rule 77 (FunctionCall -> VarName ( ArgumentListR ) .)
    )               reduce using rule 77 (FunctionCall -> VarName ( ArgumentListR ) .)
    ID              reduce using rule 77 (FunctionCall -> VarName ( ArgumentListR ) .)
    IF              reduce using rule 77 (FunctionCall -> VarName ( ArgumentListR ) .)
    FOR             reduce using rule 77 (FunctionCall -> VarName ( ArgumentListR ) .)
    WHILE           reduce using rule 77 (FunctionCall -> VarName ( ArgumentListR ) .)
    BREAK           reduce using rule 77 (FunctionCall -> VarName ( ArgumentListR ) .)
    RETURN          reduce using rule 77 (FunctionCall -> VarName ( ArgumentListR ) .)
    (               reduce using rule 77 (FunctionCall -> VarName ( ArgumentListR ) .)
    INC             reduce using rule 77 (FunctionCall -> VarName ( ArgumentListR ) .)
    DEC             reduce using rule 77 (FunctionCall -> VarName ( ArgumentListR ) .)
    INTL            reduce using rule 77 (FunctionCall -> VarName ( ArgumentListR ) .)
    BOOLL           reduce using rule 77 (FunctionCall -> VarName ( ArgumentListR ) .)
    CHARL           reduce using rule 77 (FunctionCall -> VarName ( ArgumentListR ) .)
    }               reduce using rule 77 (FunctionCall -> VarName ( ArgumentListR ) .)
    ,               reduce using rule 77 (FunctionCall -> VarName ( ArgumentListR ) .)


state 135

    (61) ArgumentListR -> Argument , . ArgumentListR
    (61) ArgumentListR -> . Argument , ArgumentListR
    (62) ArgumentListR -> . Argument
    (63) ArgumentListR -> . empty
    (60) Argument -> . Expression
    (88) empty -> .
    (16) Expression -> . BinaryExpressionPrio7
    (13) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7
    (14) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 Equal BinaryExpressionPrio7
    (15) BinaryExpressionPrio7 -> . BinaryExpressionPrio6
    (8) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6
    (9) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6
    (10) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Less BinaryExpressionPrio6
    (11) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Greater BinaryExpressionPrio6
    (12) BinaryExpressionPrio6 -> . BinaryExpressionPrio4
    (5) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Add BinaryExpressionPrio4
    (6) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Sub BinaryExpressionPrio4
    (7) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (1) BinaryExpressionPrio3 -> . UnaryExpression Mul BinaryExpressionPrio3
    (2) BinaryExpressionPrio3 -> . UnaryExpression Div BinaryExpressionPrio3
    (3) BinaryExpressionPrio3 -> . UnaryExpression Mod BinaryExpressionPrio3
    (4) BinaryExpressionPrio3 -> . UnaryExpression
    (80) UnaryExpression -> . IncrementAfter
    (81) UnaryExpression -> . IncrementBefore
    (82) UnaryExpression -> . DecrementAfter
    (83) UnaryExpression -> . DecrementBefore
    (84) UnaryExpression -> . FunctionCall
    (85) UnaryExpression -> . VarName
    (86) UnaryExpression -> . Literal
    (87) UnaryExpression -> . ( Expression )
    (78) IncrementAfter -> . VarName Inc
    (79) IncrementBefore -> . Inc VarName
    (75) DecrementAfter -> . VarName Dec
    (76) DecrementBefore -> . Dec VarName
    (77) FunctionCall -> . VarName ( ArgumentListR )
    (74) VarName -> . ID
    (20) Literal -> . IntLiteral
    (21) Literal -> . BoolLiteral
    (22) Literal -> . CharLiteral
    (29) Inc -> . INC
    (24) Dec -> . DEC
    (19) IntLiteral -> . INTL
    (17) BoolLiteral -> . BOOLL
    (18) CharLiteral -> . CHARL

    )               reduce using rule 88 (empty -> .)
    (               shift and go to state 38
    ID              shift and go to state 71
    INC             shift and go to state 60
    DEC             shift and go to state 61
    INTL            shift and go to state 42
    BOOLL           shift and go to state 62
    CHARL           shift and go to state 63

    Argument                       shift and go to state 126
    ArgumentListR                  shift and go to state 140
    empty                          shift and go to state 127
    Expression                     shift and go to state 128
    BinaryExpressionPrio7          shift and go to state 36
    BinaryExpressionPrio6          shift and go to state 44
    BinaryExpressionPrio4          shift and go to state 45
    BinaryExpressionPrio3          shift and go to state 46
    UnaryExpression                shift and go to state 47
    IncrementAfter                 shift and go to state 48
    IncrementBefore                shift and go to state 49
    DecrementAfter                 shift and go to state 50
    DecrementBefore                shift and go to state 51
    FunctionCall                   shift and go to state 52
    VarName                        shift and go to state 53
    Literal                        shift and go to state 54
    Inc                            shift and go to state 55
    Dec                            shift and go to state 56
    IntLiteral                     shift and go to state 57
    BoolLiteral                    shift and go to state 58
    CharLiteral                    shift and go to state 59

state 136

    (41) DeclarationAssignmentStatement -> TypeName ID = Expression ; .

    ID              reduce using rule 41 (DeclarationAssignmentStatement -> TypeName ID = Expression ; .)
    IF              reduce using rule 41 (DeclarationAssignmentStatement -> TypeName ID = Expression ; .)
    FOR             reduce using rule 41 (DeclarationAssignmentStatement -> TypeName ID = Expression ; .)
    WHILE           reduce using rule 41 (DeclarationAssignmentStatement -> TypeName ID = Expression ; .)
    BREAK           reduce using rule 41 (DeclarationAssignmentStatement -> TypeName ID = Expression ; .)
    RETURN          reduce using rule 41 (DeclarationAssignmentStatement -> TypeName ID = Expression ; .)
    ;               reduce using rule 41 (DeclarationAssignmentStatement -> TypeName ID = Expression ; .)
    (               reduce using rule 41 (DeclarationAssignmentStatement -> TypeName ID = Expression ; .)
    INC             reduce using rule 41 (DeclarationAssignmentStatement -> TypeName ID = Expression ; .)
    DEC             reduce using rule 41 (DeclarationAssignmentStatement -> TypeName ID = Expression ; .)
    INTL            reduce using rule 41 (DeclarationAssignmentStatement -> TypeName ID = Expression ; .)
    BOOLL           reduce using rule 41 (DeclarationAssignmentStatement -> TypeName ID = Expression ; .)
    CHARL           reduce using rule 41 (DeclarationAssignmentStatement -> TypeName ID = Expression ; .)
    }               reduce using rule 41 (DeclarationAssignmentStatement -> TypeName ID = Expression ; .)
    )               reduce using rule 41 (DeclarationAssignmentStatement -> TypeName ID = Expression ; .)


state 137

    (44) IfElseStatement -> IF ( Expression ) Block . ELSE Block

    ELSE            shift and go to state 141


state 138

    (43) ForStatement -> FOR ( Statement Expression ; . Statement ) Block
    (47) Statement -> . AssignmentStatement
    (48) Statement -> . DeclarationAssignmentStatement
    (49) Statement -> . Expression ;
    (50) Statement -> . DeclarationStatement
    (51) Statement -> . IfElseStatement
    (52) Statement -> . ForStatement
    (53) Statement -> . WhileStatement
    (54) Statement -> . BreakStatement
    (55) Statement -> . ReturnStatement
    (56) Statement -> . BlankStatement
    (36) AssignmentStatement -> . ID = Expression ;
    (37) AssignmentStatement -> . ID = Expression
    (41) DeclarationAssignmentStatement -> . TypeName ID = Expression ;
    (16) Expression -> . BinaryExpressionPrio7
    (42) DeclarationStatement -> . TypeName ID ;
    (44) IfElseStatement -> . IF ( Expression ) Block ELSE Block
    (43) ForStatement -> . FOR ( Statement Expression ; Statement ) Block
    (59) WhileStatement -> . WHILE ( Expression ) Block
    (39) BreakStatement -> . BREAK INTL ;
    (40) BreakStatement -> . BREAK ;
    (45) ReturnStatement -> . RETURN Expression ;
    (46) ReturnStatement -> . RETURN ;
    (38) BlankStatement -> . ;
    (73) TypeName -> . ID
    (13) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 NotEqual BinaryExpressionPrio7
    (14) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 Equal BinaryExpressionPrio7
    (15) BinaryExpressionPrio7 -> . BinaryExpressionPrio6
    (8) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LessEqual BinaryExpressionPrio6
    (9) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GreaterEqual BinaryExpressionPrio6
    (10) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Less BinaryExpressionPrio6
    (11) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 Greater BinaryExpressionPrio6
    (12) BinaryExpressionPrio6 -> . BinaryExpressionPrio4
    (5) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Add BinaryExpressionPrio4
    (6) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 Sub BinaryExpressionPrio4
    (7) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (1) BinaryExpressionPrio3 -> . UnaryExpression Mul BinaryExpressionPrio3
    (2) BinaryExpressionPrio3 -> . UnaryExpression Div BinaryExpressionPrio3
    (3) BinaryExpressionPrio3 -> . UnaryExpression Mod BinaryExpressionPrio3
    (4) BinaryExpressionPrio3 -> . UnaryExpression
    (80) UnaryExpression -> . IncrementAfter
    (81) UnaryExpression -> . IncrementBefore
    (82) UnaryExpression -> . DecrementAfter
    (83) UnaryExpression -> . DecrementBefore
    (84) UnaryExpression -> . FunctionCall
    (85) UnaryExpression -> . VarName
    (86) UnaryExpression -> . Literal
    (87) UnaryExpression -> . ( Expression )
    (78) IncrementAfter -> . VarName Inc
    (79) IncrementBefore -> . Inc VarName
    (75) DecrementAfter -> . VarName Dec
    (76) DecrementBefore -> . Dec VarName
    (77) FunctionCall -> . VarName ( ArgumentListR )
    (74) VarName -> . ID
    (20) Literal -> . IntLiteral
    (21) Literal -> . BoolLiteral
    (22) Literal -> . CharLiteral
    (29) Inc -> . INC
    (24) Dec -> . DEC
    (19) IntLiteral -> . INTL
    (17) BoolLiteral -> . BOOLL
    (18) CharLiteral -> . CHARL

    ID              shift and go to state 34
    IF              shift and go to state 37
    FOR             shift and go to state 39
    WHILE           shift and go to state 40
    BREAK           shift and go to state 41
    RETURN          shift and go to state 43
    ;               shift and go to state 26
    (               shift and go to state 38
    INC             shift and go to state 60
    DEC             shift and go to state 61
    INTL            shift and go to state 42
    BOOLL           shift and go to state 62
    CHARL           shift and go to state 63

    Statement                      shift and go to state 142
    Expression                     shift and go to state 25
    AssignmentStatement            shift and go to state 23
    DeclarationAssignmentStatement shift and go to state 24
    DeclarationStatement           shift and go to state 27
    IfElseStatement                shift and go to state 28
    ForStatement                   shift and go to state 29
    WhileStatement                 shift and go to state 30
    BreakStatement                 shift and go to state 31
    ReturnStatement                shift and go to state 32
    BlankStatement                 shift and go to state 33
    TypeName                       shift and go to state 35
    BinaryExpressionPrio7          shift and go to state 36
    BinaryExpressionPrio6          shift and go to state 44
    BinaryExpressionPrio4          shift and go to state 45
    BinaryExpressionPrio3          shift and go to state 46
    UnaryExpression                shift and go to state 47
    IncrementAfter                 shift and go to state 48
    IncrementBefore                shift and go to state 49
    DecrementAfter                 shift and go to state 50
    DecrementBefore                shift and go to state 51
    FunctionCall                   shift and go to state 52
    VarName                        shift and go to state 53
    Literal                        shift and go to state 54
    Inc                            shift and go to state 55
    Dec                            shift and go to state 56
    IntLiteral                     shift and go to state 57
    BoolLiteral                    shift and go to state 58
    CharLiteral                    shift and go to state 59

state 139

    (59) WhileStatement -> WHILE ( Expression ) Block .

    ID              reduce using rule 59 (WhileStatement -> WHILE ( Expression ) Block .)
    IF              reduce using rule 59 (WhileStatement -> WHILE ( Expression ) Block .)
    FOR             reduce using rule 59 (WhileStatement -> WHILE ( Expression ) Block .)
    WHILE           reduce using rule 59 (WhileStatement -> WHILE ( Expression ) Block .)
    BREAK           reduce using rule 59 (WhileStatement -> WHILE ( Expression ) Block .)
    RETURN          reduce using rule 59 (WhileStatement -> WHILE ( Expression ) Block .)
    ;               reduce using rule 59 (WhileStatement -> WHILE ( Expression ) Block .)
    (               reduce using rule 59 (WhileStatement -> WHILE ( Expression ) Block .)
    INC             reduce using rule 59 (WhileStatement -> WHILE ( Expression ) Block .)
    DEC             reduce using rule 59 (WhileStatement -> WHILE ( Expression ) Block .)
    INTL            reduce using rule 59 (WhileStatement -> WHILE ( Expression ) Block .)
    BOOLL           reduce using rule 59 (WhileStatement -> WHILE ( Expression ) Block .)
    CHARL           reduce using rule 59 (WhileStatement -> WHILE ( Expression ) Block .)
    }               reduce using rule 59 (WhileStatement -> WHILE ( Expression ) Block .)
    )               reduce using rule 59 (WhileStatement -> WHILE ( Expression ) Block .)


state 140

    (61) ArgumentListR -> Argument , ArgumentListR .

    )               reduce using rule 61 (ArgumentListR -> Argument , ArgumentListR .)


state 141

    (44) IfElseStatement -> IF ( Expression ) Block ELSE . Block
    (64) Block -> . { StatementListR }

    {               shift and go to state 18

    Block                          shift and go to state 143

state 142

    (43) ForStatement -> FOR ( Statement Expression ; Statement . ) Block

    )               shift and go to state 144


state 143

    (44) IfElseStatement -> IF ( Expression ) Block ELSE Block .

    ID              reduce using rule 44 (IfElseStatement -> IF ( Expression ) Block ELSE Block .)
    IF              reduce using rule 44 (IfElseStatement -> IF ( Expression ) Block ELSE Block .)
    FOR             reduce using rule 44 (IfElseStatement -> IF ( Expression ) Block ELSE Block .)
    WHILE           reduce using rule 44 (IfElseStatement -> IF ( Expression ) Block ELSE Block .)
    BREAK           reduce using rule 44 (IfElseStatement -> IF ( Expression ) Block ELSE Block .)
    RETURN          reduce using rule 44 (IfElseStatement -> IF ( Expression ) Block ELSE Block .)
    ;               reduce using rule 44 (IfElseStatement -> IF ( Expression ) Block ELSE Block .)
    (               reduce using rule 44 (IfElseStatement -> IF ( Expression ) Block ELSE Block .)
    INC             reduce using rule 44 (IfElseStatement -> IF ( Expression ) Block ELSE Block .)
    DEC             reduce using rule 44 (IfElseStatement -> IF ( Expression ) Block ELSE Block .)
    INTL            reduce using rule 44 (IfElseStatement -> IF ( Expression ) Block ELSE Block .)
    BOOLL           reduce using rule 44 (IfElseStatement -> IF ( Expression ) Block ELSE Block .)
    CHARL           reduce using rule 44 (IfElseStatement -> IF ( Expression ) Block ELSE Block .)
    }               reduce using rule 44 (IfElseStatement -> IF ( Expression ) Block ELSE Block .)
    )               reduce using rule 44 (IfElseStatement -> IF ( Expression ) Block ELSE Block .)


state 144

    (43) ForStatement -> FOR ( Statement Expression ; Statement ) . Block
    (64) Block -> . { StatementListR }

    {               shift and go to state 18

    Block                          shift and go to state 145

state 145

    (43) ForStatement -> FOR ( Statement Expression ; Statement ) Block .

    ID              reduce using rule 43 (ForStatement -> FOR ( Statement Expression ; Statement ) Block .)
    IF              reduce using rule 43 (ForStatement -> FOR ( Statement Expression ; Statement ) Block .)
    FOR             reduce using rule 43 (ForStatement -> FOR ( Statement Expression ; Statement ) Block .)
    WHILE           reduce using rule 43 (ForStatement -> FOR ( Statement Expression ; Statement ) Block .)
    BREAK           reduce using rule 43 (ForStatement -> FOR ( Statement Expression ; Statement ) Block .)
    RETURN          reduce using rule 43 (ForStatement -> FOR ( Statement Expression ; Statement ) Block .)
    ;               reduce using rule 43 (ForStatement -> FOR ( Statement Expression ; Statement ) Block .)
    (               reduce using rule 43 (ForStatement -> FOR ( Statement Expression ; Statement ) Block .)
    INC             reduce using rule 43 (ForStatement -> FOR ( Statement Expression ; Statement ) Block .)
    DEC             reduce using rule 43 (ForStatement -> FOR ( Statement Expression ; Statement ) Block .)
    INTL            reduce using rule 43 (ForStatement -> FOR ( Statement Expression ; Statement ) Block .)
    BOOLL           reduce using rule 43 (ForStatement -> FOR ( Statement Expression ; Statement ) Block .)
    CHARL           reduce using rule 43 (ForStatement -> FOR ( Statement Expression ; Statement ) Block .)
    }               reduce using rule 43 (ForStatement -> FOR ( Statement Expression ; Statement ) Block .)
    )               reduce using rule 43 (ForStatement -> FOR ( Statement Expression ; Statement ) Block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ( in state 53 resolved as shift
WARNING: shift/reduce conflict for INC in state 53 resolved as shift
WARNING: shift/reduce conflict for DEC in state 53 resolved as shift
WARNING: shift/reduce conflict for ; in state 105 resolved as shift
