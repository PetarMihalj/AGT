Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    SPEC

Grammar

Rule 0     S' -> CompilationUnit
Rule 1     AddressExpression -> AMPERSAND Expression
Rule 2     Argument -> Expression
Rule 3     ArgumentListR -> Argument COMMA ArgumentListR
Rule 4     ArgumentListR -> Argument
Rule 5     ArgumentListR -> empty
Rule 6     AssignmentStatement -> Expression ASSIGNMENT Expression SEMICOLON
Rule 7     AssignmentStatement -> Expression ASSIGNMENT Expression
Rule 8     BinaryExpression -> Expression PLUS Expression
Rule 9     BinaryExpression -> Expression MINUS Expression
Rule 10    BinaryExpression -> Expression TIMES Expression
Rule 11    BinaryExpression -> Expression DIVIDE Expression
Rule 12    BinaryExpression -> Expression MOD Expression
Rule 13    BinaryExpression -> Expression LEQ Expression
Rule 14    BinaryExpression -> Expression GEQ Expression
Rule 15    BinaryExpression -> Expression LT Expression
Rule 16    BinaryExpression -> Expression GT Expression
Rule 17    BinaryExpression -> Expression EQ Expression
Rule 18    BinaryExpression -> Expression NE Expression
Rule 19    BlankStatement -> SEMICOLON
Rule 20    Block -> LBRACE StatementListR RBRACE
Rule 21    BlockStatement -> Block
Rule 22    BoolLiteral -> BOOLL
Rule 23    BracketCall -> Expression LBRACKET Expression RBRACKET
Rule 24    BreakStatement -> BREAK INTL SEMICOLON
Rule 25    BreakStatement -> BREAK SEMICOLON
Rule 26    CompilationUnit -> DefinitionListR
Rule 27    DefinitionListR -> FunctionDefinition DefinitionListR
Rule 28    DefinitionListR -> StructDefinition DefinitionListR
Rule 29    DefinitionListR -> empty
Rule 30    DereferenceExpression -> TIMES Expression
Rule 31    DotExpression -> TypeExpression
Rule 32    DotExpression -> Expression DOT ID
Rule 33    Expression -> BinaryExpression
Rule 34    Expression -> UnaryExpression
Rule 35    ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block
Rule 36    FunctionCall -> TypeExpression LPAREN ArgumentListR RPAREN
Rule 37    FunctionDefinition -> FN ID LPAREN ParameterListR RPAREN Block
Rule 38    FunctionDefinition -> FN ID LT TypeParameterListR GT LPAREN ParameterListR RPAREN Block
Rule 39    FunctionDefinition -> FN ID LPAREN ParameterListR RPAREN ARROW TypeExpression Block
Rule 40    FunctionDefinition -> FN ID LT TypeParameterListR GT LPAREN ParameterListR RPAREN ARROW TypeExpression Block
Rule 41    IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block
Rule 42    IfElseStatement -> IF LPAREN Expression RPAREN Block
Rule 43    InitCall -> TypeExpression LBRACE ArgumentListR RBRACE
Rule 44    InitStatement -> LET ID ASSIGNMENT Expression SEMICOLON
Rule 45    IntLiteral -> INTL
Rule 46    Literal -> IntLiteral
Rule 47    Literal -> BoolLiteral
Rule 48    Parameter -> ID ID
Rule 49    ParameterListR -> Parameter COMMA ParameterListR
Rule 50    ParameterListR -> Parameter
Rule 51    ParameterListR -> empty
Rule 52    ReturnStatement -> RETURN Expression SEMICOLON
Rule 53    ReturnStatement -> RETURN SEMICOLON
Rule 54    Statement -> AssignmentStatement
Rule 55    Statement -> InitStatement
Rule 56    Statement -> Expression SEMICOLON
Rule 57    Statement -> IfElseStatement
Rule 58    Statement -> ForStatement
Rule 59    Statement -> WhileStatement
Rule 60    Statement -> BreakStatement
Rule 61    Statement -> ReturnStatement
Rule 62    Statement -> BlockStatement
Rule 63    Statement -> BlankStatement
Rule 64    Statement -> TypeStatement
Rule 65    StatementListR -> Statement StatementListR
Rule 66    StatementListR -> empty
Rule 67    StructDefinition -> STRUCT ID LBRACE StructMemberListR RBRACE
Rule 68    StructDefinition -> STRUCT ID LT TypeParameterListR GT LBRACE StructMemberListR RBRACE
Rule 69    StructMember -> TypeExpression ID SEMICOLON
Rule 70    StructMemberListR -> StructMember StructMemberListR
Rule 71    StructMemberListR -> TypeStatement StructMemberListR
Rule 72    StructMemberListR -> empty
Rule 73    TypeExpression -> ID
Rule 74    TypeExpression -> ID LT TypeExpressionListR GT
Rule 75    TypeExpressionListR -> TypeExpression
Rule 76    TypeExpressionListR -> TypeExpression COMMA TypeExpressionListR
Rule 77    TypeParameterListR -> ID COMMA TypeParameterListR
Rule 78    TypeParameterListR -> ID
Rule 79    TypeParameterListR -> empty
Rule 80    TypeStatement -> LET ID EQ TypeExpression SEMICOLON
Rule 81    UnaryExpression -> Literal
Rule 82    UnaryExpression -> FunctionCall
Rule 83    UnaryExpression -> BracketCall
Rule 84    UnaryExpression -> InitCall
Rule 85    UnaryExpression -> DotExpression
Rule 86    UnaryExpression -> LPAREN Expression RPAREN
Rule 87    UnaryExpression -> DereferenceExpression
Rule 88    UnaryExpression -> AddressExpression
Rule 89    WhileStatement -> WHILE LPAREN Expression RPAREN Block
Rule 90    empty -> <empty>

Terminals, with rules where they appear

AMPERSAND            : 1
ARROW                : 39 40
ASSIGNMENT           : 6 7 44
BOOLL                : 22
BREAK                : 24 25
COMMA                : 3 49 76 77
DIVIDE               : 11
DOT                  : 32
ELSE                 : 41
EQ                   : 17 80
FN                   : 37 38 39 40
FOR                  : 35
GEQ                  : 14
GT                   : 16 38 40 68 74
ID                   : 32 37 38 39 40 44 48 48 67 68 69 73 74 77 78 80
IF                   : 41 42
INTL                 : 24 45
LBRACE               : 20 43 67 68
LBRACKET             : 23
LEQ                  : 13
LET                  : 44 80
LPAREN               : 35 36 37 38 39 40 41 42 86 89
LT                   : 15 38 40 68 74
MINUS                : 9
MOD                  : 12
NE                   : 18
PLUS                 : 8
RBRACE               : 20 43 67 68
RBRACKET             : 23
RETURN               : 52 53
RPAREN               : 35 36 37 38 39 40 41 42 86 89
SEMICOLON            : 6 19 24 25 35 44 52 53 56 69 80
SPEC                 : 
STRUCT               : 67 68
TIMES                : 10 30
WHILE                : 89
error                : 

Nonterminals, with rules where they appear

AddressExpression    : 88
Argument             : 3 4
ArgumentListR        : 3 36 43
AssignmentStatement  : 54
BinaryExpression     : 33
BlankStatement       : 63
Block                : 21 35 37 38 39 40 41 41 42 89
BlockStatement       : 62
BoolLiteral          : 47
BracketCall          : 83
BreakStatement       : 60
CompilationUnit      : 0
DefinitionListR      : 26 27 28
DereferenceExpression : 87
DotExpression        : 85
Expression           : 1 2 6 6 7 7 8 8 9 9 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17 17 18 18 23 23 30 32 35 41 42 44 52 56 86 89
ForStatement         : 58
FunctionCall         : 82
FunctionDefinition   : 27
IfElseStatement      : 57
InitCall             : 84
InitStatement        : 55
IntLiteral           : 46
Literal              : 81
Parameter            : 49 50
ParameterListR       : 37 38 39 40 49
ReturnStatement      : 61
Statement            : 35 35 65
StatementListR       : 20 65
StructDefinition     : 28
StructMember         : 70
StructMemberListR    : 67 68 70 71
TypeExpression       : 31 36 39 40 43 69 75 76 80
TypeExpressionListR  : 74 76
TypeParameterListR   : 38 40 68 77
TypeStatement        : 64 71
UnaryExpression      : 34
WhileStatement       : 59
empty                : 5 29 51 66 72 79

Parsing method: LALR

state 0

    (0) S' -> . CompilationUnit
    (26) CompilationUnit -> . DefinitionListR
    (27) DefinitionListR -> . FunctionDefinition DefinitionListR
    (28) DefinitionListR -> . StructDefinition DefinitionListR
    (29) DefinitionListR -> . empty
    (37) FunctionDefinition -> . FN ID LPAREN ParameterListR RPAREN Block
    (38) FunctionDefinition -> . FN ID LT TypeParameterListR GT LPAREN ParameterListR RPAREN Block
    (39) FunctionDefinition -> . FN ID LPAREN ParameterListR RPAREN ARROW TypeExpression Block
    (40) FunctionDefinition -> . FN ID LT TypeParameterListR GT LPAREN ParameterListR RPAREN ARROW TypeExpression Block
    (67) StructDefinition -> . STRUCT ID LBRACE StructMemberListR RBRACE
    (68) StructDefinition -> . STRUCT ID LT TypeParameterListR GT LBRACE StructMemberListR RBRACE
    (90) empty -> .

    FN              shift and go to state 6
    STRUCT          shift and go to state 7
    $end            reduce using rule 90 (empty -> .)

    CompilationUnit                shift and go to state 1
    DefinitionListR                shift and go to state 2
    FunctionDefinition             shift and go to state 3
    StructDefinition               shift and go to state 4
    empty                          shift and go to state 5

state 1

    (0) S' -> CompilationUnit .



state 2

    (26) CompilationUnit -> DefinitionListR .

    $end            reduce using rule 26 (CompilationUnit -> DefinitionListR .)


state 3

    (27) DefinitionListR -> FunctionDefinition . DefinitionListR
    (27) DefinitionListR -> . FunctionDefinition DefinitionListR
    (28) DefinitionListR -> . StructDefinition DefinitionListR
    (29) DefinitionListR -> . empty
    (37) FunctionDefinition -> . FN ID LPAREN ParameterListR RPAREN Block
    (38) FunctionDefinition -> . FN ID LT TypeParameterListR GT LPAREN ParameterListR RPAREN Block
    (39) FunctionDefinition -> . FN ID LPAREN ParameterListR RPAREN ARROW TypeExpression Block
    (40) FunctionDefinition -> . FN ID LT TypeParameterListR GT LPAREN ParameterListR RPAREN ARROW TypeExpression Block
    (67) StructDefinition -> . STRUCT ID LBRACE StructMemberListR RBRACE
    (68) StructDefinition -> . STRUCT ID LT TypeParameterListR GT LBRACE StructMemberListR RBRACE
    (90) empty -> .

    FN              shift and go to state 6
    STRUCT          shift and go to state 7
    $end            reduce using rule 90 (empty -> .)

    FunctionDefinition             shift and go to state 3
    DefinitionListR                shift and go to state 8
    StructDefinition               shift and go to state 4
    empty                          shift and go to state 5

state 4

    (28) DefinitionListR -> StructDefinition . DefinitionListR
    (27) DefinitionListR -> . FunctionDefinition DefinitionListR
    (28) DefinitionListR -> . StructDefinition DefinitionListR
    (29) DefinitionListR -> . empty
    (37) FunctionDefinition -> . FN ID LPAREN ParameterListR RPAREN Block
    (38) FunctionDefinition -> . FN ID LT TypeParameterListR GT LPAREN ParameterListR RPAREN Block
    (39) FunctionDefinition -> . FN ID LPAREN ParameterListR RPAREN ARROW TypeExpression Block
    (40) FunctionDefinition -> . FN ID LT TypeParameterListR GT LPAREN ParameterListR RPAREN ARROW TypeExpression Block
    (67) StructDefinition -> . STRUCT ID LBRACE StructMemberListR RBRACE
    (68) StructDefinition -> . STRUCT ID LT TypeParameterListR GT LBRACE StructMemberListR RBRACE
    (90) empty -> .

    FN              shift and go to state 6
    STRUCT          shift and go to state 7
    $end            reduce using rule 90 (empty -> .)

    StructDefinition               shift and go to state 4
    DefinitionListR                shift and go to state 9
    FunctionDefinition             shift and go to state 3
    empty                          shift and go to state 5

state 5

    (29) DefinitionListR -> empty .

    $end            reduce using rule 29 (DefinitionListR -> empty .)


state 6

    (37) FunctionDefinition -> FN . ID LPAREN ParameterListR RPAREN Block
    (38) FunctionDefinition -> FN . ID LT TypeParameterListR GT LPAREN ParameterListR RPAREN Block
    (39) FunctionDefinition -> FN . ID LPAREN ParameterListR RPAREN ARROW TypeExpression Block
    (40) FunctionDefinition -> FN . ID LT TypeParameterListR GT LPAREN ParameterListR RPAREN ARROW TypeExpression Block

    ID              shift and go to state 10


state 7

    (67) StructDefinition -> STRUCT . ID LBRACE StructMemberListR RBRACE
    (68) StructDefinition -> STRUCT . ID LT TypeParameterListR GT LBRACE StructMemberListR RBRACE

    ID              shift and go to state 11


state 8

    (27) DefinitionListR -> FunctionDefinition DefinitionListR .

    $end            reduce using rule 27 (DefinitionListR -> FunctionDefinition DefinitionListR .)


state 9

    (28) DefinitionListR -> StructDefinition DefinitionListR .

    $end            reduce using rule 28 (DefinitionListR -> StructDefinition DefinitionListR .)


state 10

    (37) FunctionDefinition -> FN ID . LPAREN ParameterListR RPAREN Block
    (38) FunctionDefinition -> FN ID . LT TypeParameterListR GT LPAREN ParameterListR RPAREN Block
    (39) FunctionDefinition -> FN ID . LPAREN ParameterListR RPAREN ARROW TypeExpression Block
    (40) FunctionDefinition -> FN ID . LT TypeParameterListR GT LPAREN ParameterListR RPAREN ARROW TypeExpression Block

    LPAREN          shift and go to state 12
    LT              shift and go to state 13


state 11

    (67) StructDefinition -> STRUCT ID . LBRACE StructMemberListR RBRACE
    (68) StructDefinition -> STRUCT ID . LT TypeParameterListR GT LBRACE StructMemberListR RBRACE

    LBRACE          shift and go to state 14
    LT              shift and go to state 15


state 12

    (37) FunctionDefinition -> FN ID LPAREN . ParameterListR RPAREN Block
    (39) FunctionDefinition -> FN ID LPAREN . ParameterListR RPAREN ARROW TypeExpression Block
    (49) ParameterListR -> . Parameter COMMA ParameterListR
    (50) ParameterListR -> . Parameter
    (51) ParameterListR -> . empty
    (48) Parameter -> . ID ID
    (90) empty -> .

    ID              shift and go to state 16
    RPAREN          reduce using rule 90 (empty -> .)

    ParameterListR                 shift and go to state 17
    Parameter                      shift and go to state 18
    empty                          shift and go to state 19

state 13

    (38) FunctionDefinition -> FN ID LT . TypeParameterListR GT LPAREN ParameterListR RPAREN Block
    (40) FunctionDefinition -> FN ID LT . TypeParameterListR GT LPAREN ParameterListR RPAREN ARROW TypeExpression Block
    (77) TypeParameterListR -> . ID COMMA TypeParameterListR
    (78) TypeParameterListR -> . ID
    (79) TypeParameterListR -> . empty
    (90) empty -> .

    ID              shift and go to state 20
    GT              reduce using rule 90 (empty -> .)

    TypeParameterListR             shift and go to state 21
    empty                          shift and go to state 22

state 14

    (67) StructDefinition -> STRUCT ID LBRACE . StructMemberListR RBRACE
    (70) StructMemberListR -> . StructMember StructMemberListR
    (71) StructMemberListR -> . TypeStatement StructMemberListR
    (72) StructMemberListR -> . empty
    (69) StructMember -> . TypeExpression ID SEMICOLON
    (80) TypeStatement -> . LET ID EQ TypeExpression SEMICOLON
    (90) empty -> .
    (73) TypeExpression -> . ID
    (74) TypeExpression -> . ID LT TypeExpressionListR GT

    LET             shift and go to state 29
    RBRACE          reduce using rule 90 (empty -> .)
    ID              shift and go to state 23

    StructMemberListR              shift and go to state 24
    StructMember                   shift and go to state 25
    TypeStatement                  shift and go to state 26
    empty                          shift and go to state 27
    TypeExpression                 shift and go to state 28

state 15

    (68) StructDefinition -> STRUCT ID LT . TypeParameterListR GT LBRACE StructMemberListR RBRACE
    (77) TypeParameterListR -> . ID COMMA TypeParameterListR
    (78) TypeParameterListR -> . ID
    (79) TypeParameterListR -> . empty
    (90) empty -> .

    ID              shift and go to state 20
    GT              reduce using rule 90 (empty -> .)

    TypeParameterListR             shift and go to state 30
    empty                          shift and go to state 22

state 16

    (48) Parameter -> ID . ID

    ID              shift and go to state 31


state 17

    (37) FunctionDefinition -> FN ID LPAREN ParameterListR . RPAREN Block
    (39) FunctionDefinition -> FN ID LPAREN ParameterListR . RPAREN ARROW TypeExpression Block

    RPAREN          shift and go to state 32


state 18

    (49) ParameterListR -> Parameter . COMMA ParameterListR
    (50) ParameterListR -> Parameter .

    COMMA           shift and go to state 33
    RPAREN          reduce using rule 50 (ParameterListR -> Parameter .)


state 19

    (51) ParameterListR -> empty .

    RPAREN          reduce using rule 51 (ParameterListR -> empty .)


state 20

    (77) TypeParameterListR -> ID . COMMA TypeParameterListR
    (78) TypeParameterListR -> ID .

    COMMA           shift and go to state 34
    GT              reduce using rule 78 (TypeParameterListR -> ID .)


state 21

    (38) FunctionDefinition -> FN ID LT TypeParameterListR . GT LPAREN ParameterListR RPAREN Block
    (40) FunctionDefinition -> FN ID LT TypeParameterListR . GT LPAREN ParameterListR RPAREN ARROW TypeExpression Block

    GT              shift and go to state 35


state 22

    (79) TypeParameterListR -> empty .

    GT              reduce using rule 79 (TypeParameterListR -> empty .)


state 23

    (73) TypeExpression -> ID .
    (74) TypeExpression -> ID . LT TypeExpressionListR GT

  ! shift/reduce conflict for LT resolved as shift
    ID              reduce using rule 73 (TypeExpression -> ID .)
    COMMA           reduce using rule 73 (TypeExpression -> ID .)
    GT              reduce using rule 73 (TypeExpression -> ID .)
    LBRACE          reduce using rule 73 (TypeExpression -> ID .)
    LPAREN          reduce using rule 73 (TypeExpression -> ID .)
    SEMICOLON       reduce using rule 73 (TypeExpression -> ID .)
    ASSIGNMENT      reduce using rule 73 (TypeExpression -> ID .)
    PLUS            reduce using rule 73 (TypeExpression -> ID .)
    MINUS           reduce using rule 73 (TypeExpression -> ID .)
    TIMES           reduce using rule 73 (TypeExpression -> ID .)
    DIVIDE          reduce using rule 73 (TypeExpression -> ID .)
    MOD             reduce using rule 73 (TypeExpression -> ID .)
    LEQ             reduce using rule 73 (TypeExpression -> ID .)
    GEQ             reduce using rule 73 (TypeExpression -> ID .)
    EQ              reduce using rule 73 (TypeExpression -> ID .)
    NE              reduce using rule 73 (TypeExpression -> ID .)
    LBRACKET        reduce using rule 73 (TypeExpression -> ID .)
    DOT             reduce using rule 73 (TypeExpression -> ID .)
    RPAREN          reduce using rule 73 (TypeExpression -> ID .)
    LET             reduce using rule 73 (TypeExpression -> ID .)
    IF              reduce using rule 73 (TypeExpression -> ID .)
    FOR             reduce using rule 73 (TypeExpression -> ID .)
    WHILE           reduce using rule 73 (TypeExpression -> ID .)
    BREAK           reduce using rule 73 (TypeExpression -> ID .)
    RETURN          reduce using rule 73 (TypeExpression -> ID .)
    AMPERSAND       reduce using rule 73 (TypeExpression -> ID .)
    INTL            reduce using rule 73 (TypeExpression -> ID .)
    BOOLL           reduce using rule 73 (TypeExpression -> ID .)
    RBRACE          reduce using rule 73 (TypeExpression -> ID .)
    RBRACKET        reduce using rule 73 (TypeExpression -> ID .)
    LT              shift and go to state 36

  ! LT              [ reduce using rule 73 (TypeExpression -> ID .) ]


state 24

    (67) StructDefinition -> STRUCT ID LBRACE StructMemberListR . RBRACE

    RBRACE          shift and go to state 37


state 25

    (70) StructMemberListR -> StructMember . StructMemberListR
    (70) StructMemberListR -> . StructMember StructMemberListR
    (71) StructMemberListR -> . TypeStatement StructMemberListR
    (72) StructMemberListR -> . empty
    (69) StructMember -> . TypeExpression ID SEMICOLON
    (80) TypeStatement -> . LET ID EQ TypeExpression SEMICOLON
    (90) empty -> .
    (73) TypeExpression -> . ID
    (74) TypeExpression -> . ID LT TypeExpressionListR GT

    LET             shift and go to state 29
    RBRACE          reduce using rule 90 (empty -> .)
    ID              shift and go to state 23

    StructMember                   shift and go to state 25
    StructMemberListR              shift and go to state 38
    TypeStatement                  shift and go to state 26
    empty                          shift and go to state 27
    TypeExpression                 shift and go to state 28

state 26

    (71) StructMemberListR -> TypeStatement . StructMemberListR
    (70) StructMemberListR -> . StructMember StructMemberListR
    (71) StructMemberListR -> . TypeStatement StructMemberListR
    (72) StructMemberListR -> . empty
    (69) StructMember -> . TypeExpression ID SEMICOLON
    (80) TypeStatement -> . LET ID EQ TypeExpression SEMICOLON
    (90) empty -> .
    (73) TypeExpression -> . ID
    (74) TypeExpression -> . ID LT TypeExpressionListR GT

    LET             shift and go to state 29
    RBRACE          reduce using rule 90 (empty -> .)
    ID              shift and go to state 23

    TypeStatement                  shift and go to state 26
    StructMemberListR              shift and go to state 39
    StructMember                   shift and go to state 25
    empty                          shift and go to state 27
    TypeExpression                 shift and go to state 28

state 27

    (72) StructMemberListR -> empty .

    RBRACE          reduce using rule 72 (StructMemberListR -> empty .)


state 28

    (69) StructMember -> TypeExpression . ID SEMICOLON

    ID              shift and go to state 40


state 29

    (80) TypeStatement -> LET . ID EQ TypeExpression SEMICOLON

    ID              shift and go to state 41


state 30

    (68) StructDefinition -> STRUCT ID LT TypeParameterListR . GT LBRACE StructMemberListR RBRACE

    GT              shift and go to state 42


state 31

    (48) Parameter -> ID ID .

    COMMA           reduce using rule 48 (Parameter -> ID ID .)
    RPAREN          reduce using rule 48 (Parameter -> ID ID .)


state 32

    (37) FunctionDefinition -> FN ID LPAREN ParameterListR RPAREN . Block
    (39) FunctionDefinition -> FN ID LPAREN ParameterListR RPAREN . ARROW TypeExpression Block
    (20) Block -> . LBRACE StatementListR RBRACE

    ARROW           shift and go to state 44
    LBRACE          shift and go to state 45

    Block                          shift and go to state 43

state 33

    (49) ParameterListR -> Parameter COMMA . ParameterListR
    (49) ParameterListR -> . Parameter COMMA ParameterListR
    (50) ParameterListR -> . Parameter
    (51) ParameterListR -> . empty
    (48) Parameter -> . ID ID
    (90) empty -> .

    ID              shift and go to state 16
    RPAREN          reduce using rule 90 (empty -> .)

    Parameter                      shift and go to state 18
    ParameterListR                 shift and go to state 46
    empty                          shift and go to state 19

state 34

    (77) TypeParameterListR -> ID COMMA . TypeParameterListR
    (77) TypeParameterListR -> . ID COMMA TypeParameterListR
    (78) TypeParameterListR -> . ID
    (79) TypeParameterListR -> . empty
    (90) empty -> .

    ID              shift and go to state 20
    GT              reduce using rule 90 (empty -> .)

    TypeParameterListR             shift and go to state 47
    empty                          shift and go to state 22

state 35

    (38) FunctionDefinition -> FN ID LT TypeParameterListR GT . LPAREN ParameterListR RPAREN Block
    (40) FunctionDefinition -> FN ID LT TypeParameterListR GT . LPAREN ParameterListR RPAREN ARROW TypeExpression Block

    LPAREN          shift and go to state 48


state 36

    (74) TypeExpression -> ID LT . TypeExpressionListR GT
    (75) TypeExpressionListR -> . TypeExpression
    (76) TypeExpressionListR -> . TypeExpression COMMA TypeExpressionListR
    (73) TypeExpression -> . ID
    (74) TypeExpression -> . ID LT TypeExpressionListR GT

    ID              shift and go to state 23

    TypeExpressionListR            shift and go to state 49
    TypeExpression                 shift and go to state 50

state 37

    (67) StructDefinition -> STRUCT ID LBRACE StructMemberListR RBRACE .

    FN              reduce using rule 67 (StructDefinition -> STRUCT ID LBRACE StructMemberListR RBRACE .)
    STRUCT          reduce using rule 67 (StructDefinition -> STRUCT ID LBRACE StructMemberListR RBRACE .)
    $end            reduce using rule 67 (StructDefinition -> STRUCT ID LBRACE StructMemberListR RBRACE .)


state 38

    (70) StructMemberListR -> StructMember StructMemberListR .

    RBRACE          reduce using rule 70 (StructMemberListR -> StructMember StructMemberListR .)


state 39

    (71) StructMemberListR -> TypeStatement StructMemberListR .

    RBRACE          reduce using rule 71 (StructMemberListR -> TypeStatement StructMemberListR .)


state 40

    (69) StructMember -> TypeExpression ID . SEMICOLON

    SEMICOLON       shift and go to state 51


state 41

    (80) TypeStatement -> LET ID . EQ TypeExpression SEMICOLON

    EQ              shift and go to state 52


state 42

    (68) StructDefinition -> STRUCT ID LT TypeParameterListR GT . LBRACE StructMemberListR RBRACE

    LBRACE          shift and go to state 53


state 43

    (37) FunctionDefinition -> FN ID LPAREN ParameterListR RPAREN Block .

    FN              reduce using rule 37 (FunctionDefinition -> FN ID LPAREN ParameterListR RPAREN Block .)
    STRUCT          reduce using rule 37 (FunctionDefinition -> FN ID LPAREN ParameterListR RPAREN Block .)
    $end            reduce using rule 37 (FunctionDefinition -> FN ID LPAREN ParameterListR RPAREN Block .)


state 44

    (39) FunctionDefinition -> FN ID LPAREN ParameterListR RPAREN ARROW . TypeExpression Block
    (73) TypeExpression -> . ID
    (74) TypeExpression -> . ID LT TypeExpressionListR GT

    ID              shift and go to state 23

    TypeExpression                 shift and go to state 54

state 45

    (20) Block -> LBRACE . StatementListR RBRACE
    (65) StatementListR -> . Statement StatementListR
    (66) StatementListR -> . empty
    (54) Statement -> . AssignmentStatement
    (55) Statement -> . InitStatement
    (56) Statement -> . Expression SEMICOLON
    (57) Statement -> . IfElseStatement
    (58) Statement -> . ForStatement
    (59) Statement -> . WhileStatement
    (60) Statement -> . BreakStatement
    (61) Statement -> . ReturnStatement
    (62) Statement -> . BlockStatement
    (63) Statement -> . BlankStatement
    (64) Statement -> . TypeStatement
    (90) empty -> .
    (6) AssignmentStatement -> . Expression ASSIGNMENT Expression SEMICOLON
    (7) AssignmentStatement -> . Expression ASSIGNMENT Expression
    (44) InitStatement -> . LET ID ASSIGNMENT Expression SEMICOLON
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (41) IfElseStatement -> . IF LPAREN Expression RPAREN Block ELSE Block
    (42) IfElseStatement -> . IF LPAREN Expression RPAREN Block
    (35) ForStatement -> . FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block
    (89) WhileStatement -> . WHILE LPAREN Expression RPAREN Block
    (24) BreakStatement -> . BREAK INTL SEMICOLON
    (25) BreakStatement -> . BREAK SEMICOLON
    (52) ReturnStatement -> . RETURN Expression SEMICOLON
    (53) ReturnStatement -> . RETURN SEMICOLON
    (21) BlockStatement -> . Block
    (19) BlankStatement -> . SEMICOLON
    (80) TypeStatement -> . LET ID EQ TypeExpression SEMICOLON
    (8) BinaryExpression -> . Expression PLUS Expression
    (9) BinaryExpression -> . Expression MINUS Expression
    (10) BinaryExpression -> . Expression TIMES Expression
    (11) BinaryExpression -> . Expression DIVIDE Expression
    (12) BinaryExpression -> . Expression MOD Expression
    (13) BinaryExpression -> . Expression LEQ Expression
    (14) BinaryExpression -> . Expression GEQ Expression
    (15) BinaryExpression -> . Expression LT Expression
    (16) BinaryExpression -> . Expression GT Expression
    (17) BinaryExpression -> . Expression EQ Expression
    (18) BinaryExpression -> . Expression NE Expression
    (81) UnaryExpression -> . Literal
    (82) UnaryExpression -> . FunctionCall
    (83) UnaryExpression -> . BracketCall
    (84) UnaryExpression -> . InitCall
    (85) UnaryExpression -> . DotExpression
    (86) UnaryExpression -> . LPAREN Expression RPAREN
    (87) UnaryExpression -> . DereferenceExpression
    (88) UnaryExpression -> . AddressExpression
    (20) Block -> . LBRACE StatementListR RBRACE
    (46) Literal -> . IntLiteral
    (47) Literal -> . BoolLiteral
    (36) FunctionCall -> . TypeExpression LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (43) InitCall -> . TypeExpression LBRACE ArgumentListR RBRACE
    (31) DotExpression -> . TypeExpression
    (32) DotExpression -> . Expression DOT ID
    (30) DereferenceExpression -> . TIMES Expression
    (1) AddressExpression -> . AMPERSAND Expression
    (45) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL
    (73) TypeExpression -> . ID
    (74) TypeExpression -> . ID LT TypeExpressionListR GT

    RBRACE          reduce using rule 90 (empty -> .)
    LET             shift and go to state 70
    IF              shift and go to state 73
    FOR             shift and go to state 76
    WHILE           shift and go to state 77
    BREAK           shift and go to state 78
    RETURN          shift and go to state 80
    SEMICOLON       shift and go to state 61
    LPAREN          shift and go to state 74
    LBRACE          shift and go to state 45
    TIMES           shift and go to state 82
    AMPERSAND       shift and go to state 92
    INTL            shift and go to state 79
    BOOLL           shift and go to state 93
    ID              shift and go to state 23

    StatementListR                 shift and go to state 55
    Statement                      shift and go to state 56
    empty                          shift and go to state 57
    AssignmentStatement            shift and go to state 58
    InitStatement                  shift and go to state 59
    Expression                     shift and go to state 60
    IfElseStatement                shift and go to state 62
    ForStatement                   shift and go to state 63
    WhileStatement                 shift and go to state 64
    BreakStatement                 shift and go to state 65
    ReturnStatement                shift and go to state 66
    BlockStatement                 shift and go to state 67
    BlankStatement                 shift and go to state 68
    TypeStatement                  shift and go to state 69
    BinaryExpression               shift and go to state 71
    UnaryExpression                shift and go to state 72
    Block                          shift and go to state 75
    TypeExpression                 shift and go to state 81
    Literal                        shift and go to state 83
    FunctionCall                   shift and go to state 84
    BracketCall                    shift and go to state 85
    InitCall                       shift and go to state 86
    DotExpression                  shift and go to state 87
    DereferenceExpression          shift and go to state 88
    AddressExpression              shift and go to state 89
    IntLiteral                     shift and go to state 90
    BoolLiteral                    shift and go to state 91

state 46

    (49) ParameterListR -> Parameter COMMA ParameterListR .

    RPAREN          reduce using rule 49 (ParameterListR -> Parameter COMMA ParameterListR .)


state 47

    (77) TypeParameterListR -> ID COMMA TypeParameterListR .

    GT              reduce using rule 77 (TypeParameterListR -> ID COMMA TypeParameterListR .)


state 48

    (38) FunctionDefinition -> FN ID LT TypeParameterListR GT LPAREN . ParameterListR RPAREN Block
    (40) FunctionDefinition -> FN ID LT TypeParameterListR GT LPAREN . ParameterListR RPAREN ARROW TypeExpression Block
    (49) ParameterListR -> . Parameter COMMA ParameterListR
    (50) ParameterListR -> . Parameter
    (51) ParameterListR -> . empty
    (48) Parameter -> . ID ID
    (90) empty -> .

    ID              shift and go to state 16
    RPAREN          reduce using rule 90 (empty -> .)

    ParameterListR                 shift and go to state 94
    Parameter                      shift and go to state 18
    empty                          shift and go to state 19

state 49

    (74) TypeExpression -> ID LT TypeExpressionListR . GT

    GT              shift and go to state 95


state 50

    (75) TypeExpressionListR -> TypeExpression .
    (76) TypeExpressionListR -> TypeExpression . COMMA TypeExpressionListR

    GT              reduce using rule 75 (TypeExpressionListR -> TypeExpression .)
    COMMA           shift and go to state 96


state 51

    (69) StructMember -> TypeExpression ID SEMICOLON .

    LET             reduce using rule 69 (StructMember -> TypeExpression ID SEMICOLON .)
    ID              reduce using rule 69 (StructMember -> TypeExpression ID SEMICOLON .)
    RBRACE          reduce using rule 69 (StructMember -> TypeExpression ID SEMICOLON .)


state 52

    (80) TypeStatement -> LET ID EQ . TypeExpression SEMICOLON
    (73) TypeExpression -> . ID
    (74) TypeExpression -> . ID LT TypeExpressionListR GT

    ID              shift and go to state 23

    TypeExpression                 shift and go to state 97

state 53

    (68) StructDefinition -> STRUCT ID LT TypeParameterListR GT LBRACE . StructMemberListR RBRACE
    (70) StructMemberListR -> . StructMember StructMemberListR
    (71) StructMemberListR -> . TypeStatement StructMemberListR
    (72) StructMemberListR -> . empty
    (69) StructMember -> . TypeExpression ID SEMICOLON
    (80) TypeStatement -> . LET ID EQ TypeExpression SEMICOLON
    (90) empty -> .
    (73) TypeExpression -> . ID
    (74) TypeExpression -> . ID LT TypeExpressionListR GT

    LET             shift and go to state 29
    RBRACE          reduce using rule 90 (empty -> .)
    ID              shift and go to state 23

    StructMemberListR              shift and go to state 98
    StructMember                   shift and go to state 25
    TypeStatement                  shift and go to state 26
    empty                          shift and go to state 27
    TypeExpression                 shift and go to state 28

state 54

    (39) FunctionDefinition -> FN ID LPAREN ParameterListR RPAREN ARROW TypeExpression . Block
    (20) Block -> . LBRACE StatementListR RBRACE

    LBRACE          shift and go to state 45

    Block                          shift and go to state 99

state 55

    (20) Block -> LBRACE StatementListR . RBRACE

    RBRACE          shift and go to state 100


state 56

    (65) StatementListR -> Statement . StatementListR
    (65) StatementListR -> . Statement StatementListR
    (66) StatementListR -> . empty
    (54) Statement -> . AssignmentStatement
    (55) Statement -> . InitStatement
    (56) Statement -> . Expression SEMICOLON
    (57) Statement -> . IfElseStatement
    (58) Statement -> . ForStatement
    (59) Statement -> . WhileStatement
    (60) Statement -> . BreakStatement
    (61) Statement -> . ReturnStatement
    (62) Statement -> . BlockStatement
    (63) Statement -> . BlankStatement
    (64) Statement -> . TypeStatement
    (90) empty -> .
    (6) AssignmentStatement -> . Expression ASSIGNMENT Expression SEMICOLON
    (7) AssignmentStatement -> . Expression ASSIGNMENT Expression
    (44) InitStatement -> . LET ID ASSIGNMENT Expression SEMICOLON
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (41) IfElseStatement -> . IF LPAREN Expression RPAREN Block ELSE Block
    (42) IfElseStatement -> . IF LPAREN Expression RPAREN Block
    (35) ForStatement -> . FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block
    (89) WhileStatement -> . WHILE LPAREN Expression RPAREN Block
    (24) BreakStatement -> . BREAK INTL SEMICOLON
    (25) BreakStatement -> . BREAK SEMICOLON
    (52) ReturnStatement -> . RETURN Expression SEMICOLON
    (53) ReturnStatement -> . RETURN SEMICOLON
    (21) BlockStatement -> . Block
    (19) BlankStatement -> . SEMICOLON
    (80) TypeStatement -> . LET ID EQ TypeExpression SEMICOLON
    (8) BinaryExpression -> . Expression PLUS Expression
    (9) BinaryExpression -> . Expression MINUS Expression
    (10) BinaryExpression -> . Expression TIMES Expression
    (11) BinaryExpression -> . Expression DIVIDE Expression
    (12) BinaryExpression -> . Expression MOD Expression
    (13) BinaryExpression -> . Expression LEQ Expression
    (14) BinaryExpression -> . Expression GEQ Expression
    (15) BinaryExpression -> . Expression LT Expression
    (16) BinaryExpression -> . Expression GT Expression
    (17) BinaryExpression -> . Expression EQ Expression
    (18) BinaryExpression -> . Expression NE Expression
    (81) UnaryExpression -> . Literal
    (82) UnaryExpression -> . FunctionCall
    (83) UnaryExpression -> . BracketCall
    (84) UnaryExpression -> . InitCall
    (85) UnaryExpression -> . DotExpression
    (86) UnaryExpression -> . LPAREN Expression RPAREN
    (87) UnaryExpression -> . DereferenceExpression
    (88) UnaryExpression -> . AddressExpression
    (20) Block -> . LBRACE StatementListR RBRACE
    (46) Literal -> . IntLiteral
    (47) Literal -> . BoolLiteral
    (36) FunctionCall -> . TypeExpression LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (43) InitCall -> . TypeExpression LBRACE ArgumentListR RBRACE
    (31) DotExpression -> . TypeExpression
    (32) DotExpression -> . Expression DOT ID
    (30) DereferenceExpression -> . TIMES Expression
    (1) AddressExpression -> . AMPERSAND Expression
    (45) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL
    (73) TypeExpression -> . ID
    (74) TypeExpression -> . ID LT TypeExpressionListR GT

    RBRACE          reduce using rule 90 (empty -> .)
    LET             shift and go to state 70
    IF              shift and go to state 73
    FOR             shift and go to state 76
    WHILE           shift and go to state 77
    BREAK           shift and go to state 78
    RETURN          shift and go to state 80
    SEMICOLON       shift and go to state 61
    LPAREN          shift and go to state 74
    LBRACE          shift and go to state 45
    TIMES           shift and go to state 82
    AMPERSAND       shift and go to state 92
    INTL            shift and go to state 79
    BOOLL           shift and go to state 93
    ID              shift and go to state 23

    Statement                      shift and go to state 56
    StatementListR                 shift and go to state 101
    empty                          shift and go to state 57
    AssignmentStatement            shift and go to state 58
    InitStatement                  shift and go to state 59
    Expression                     shift and go to state 60
    IfElseStatement                shift and go to state 62
    ForStatement                   shift and go to state 63
    WhileStatement                 shift and go to state 64
    BreakStatement                 shift and go to state 65
    ReturnStatement                shift and go to state 66
    BlockStatement                 shift and go to state 67
    BlankStatement                 shift and go to state 68
    TypeStatement                  shift and go to state 69
    BinaryExpression               shift and go to state 71
    UnaryExpression                shift and go to state 72
    Block                          shift and go to state 75
    TypeExpression                 shift and go to state 81
    Literal                        shift and go to state 83
    FunctionCall                   shift and go to state 84
    BracketCall                    shift and go to state 85
    InitCall                       shift and go to state 86
    DotExpression                  shift and go to state 87
    DereferenceExpression          shift and go to state 88
    AddressExpression              shift and go to state 89
    IntLiteral                     shift and go to state 90
    BoolLiteral                    shift and go to state 91

state 57

    (66) StatementListR -> empty .

    RBRACE          reduce using rule 66 (StatementListR -> empty .)


state 58

    (54) Statement -> AssignmentStatement .

    LET             reduce using rule 54 (Statement -> AssignmentStatement .)
    IF              reduce using rule 54 (Statement -> AssignmentStatement .)
    FOR             reduce using rule 54 (Statement -> AssignmentStatement .)
    WHILE           reduce using rule 54 (Statement -> AssignmentStatement .)
    BREAK           reduce using rule 54 (Statement -> AssignmentStatement .)
    RETURN          reduce using rule 54 (Statement -> AssignmentStatement .)
    SEMICOLON       reduce using rule 54 (Statement -> AssignmentStatement .)
    LPAREN          reduce using rule 54 (Statement -> AssignmentStatement .)
    LBRACE          reduce using rule 54 (Statement -> AssignmentStatement .)
    TIMES           reduce using rule 54 (Statement -> AssignmentStatement .)
    AMPERSAND       reduce using rule 54 (Statement -> AssignmentStatement .)
    INTL            reduce using rule 54 (Statement -> AssignmentStatement .)
    BOOLL           reduce using rule 54 (Statement -> AssignmentStatement .)
    ID              reduce using rule 54 (Statement -> AssignmentStatement .)
    RBRACE          reduce using rule 54 (Statement -> AssignmentStatement .)
    RPAREN          reduce using rule 54 (Statement -> AssignmentStatement .)


state 59

    (55) Statement -> InitStatement .

    LET             reduce using rule 55 (Statement -> InitStatement .)
    IF              reduce using rule 55 (Statement -> InitStatement .)
    FOR             reduce using rule 55 (Statement -> InitStatement .)
    WHILE           reduce using rule 55 (Statement -> InitStatement .)
    BREAK           reduce using rule 55 (Statement -> InitStatement .)
    RETURN          reduce using rule 55 (Statement -> InitStatement .)
    SEMICOLON       reduce using rule 55 (Statement -> InitStatement .)
    LPAREN          reduce using rule 55 (Statement -> InitStatement .)
    LBRACE          reduce using rule 55 (Statement -> InitStatement .)
    TIMES           reduce using rule 55 (Statement -> InitStatement .)
    AMPERSAND       reduce using rule 55 (Statement -> InitStatement .)
    INTL            reduce using rule 55 (Statement -> InitStatement .)
    BOOLL           reduce using rule 55 (Statement -> InitStatement .)
    ID              reduce using rule 55 (Statement -> InitStatement .)
    RBRACE          reduce using rule 55 (Statement -> InitStatement .)
    RPAREN          reduce using rule 55 (Statement -> InitStatement .)


state 60

    (56) Statement -> Expression . SEMICOLON
    (6) AssignmentStatement -> Expression . ASSIGNMENT Expression SEMICOLON
    (7) AssignmentStatement -> Expression . ASSIGNMENT Expression
    (8) BinaryExpression -> Expression . PLUS Expression
    (9) BinaryExpression -> Expression . MINUS Expression
    (10) BinaryExpression -> Expression . TIMES Expression
    (11) BinaryExpression -> Expression . DIVIDE Expression
    (12) BinaryExpression -> Expression . MOD Expression
    (13) BinaryExpression -> Expression . LEQ Expression
    (14) BinaryExpression -> Expression . GEQ Expression
    (15) BinaryExpression -> Expression . LT Expression
    (16) BinaryExpression -> Expression . GT Expression
    (17) BinaryExpression -> Expression . EQ Expression
    (18) BinaryExpression -> Expression . NE Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET
    (32) DotExpression -> Expression . DOT ID

    SEMICOLON       shift and go to state 102
    ASSIGNMENT      shift and go to state 103
    PLUS            shift and go to state 104
    MINUS           shift and go to state 105
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107
    MOD             shift and go to state 108
    LEQ             shift and go to state 109
    GEQ             shift and go to state 110
    LT              shift and go to state 111
    GT              shift and go to state 112
    EQ              shift and go to state 113
    NE              shift and go to state 114
    LBRACKET        shift and go to state 115
    DOT             shift and go to state 116


state 61

    (19) BlankStatement -> SEMICOLON .

    LET             reduce using rule 19 (BlankStatement -> SEMICOLON .)
    IF              reduce using rule 19 (BlankStatement -> SEMICOLON .)
    FOR             reduce using rule 19 (BlankStatement -> SEMICOLON .)
    WHILE           reduce using rule 19 (BlankStatement -> SEMICOLON .)
    BREAK           reduce using rule 19 (BlankStatement -> SEMICOLON .)
    RETURN          reduce using rule 19 (BlankStatement -> SEMICOLON .)
    SEMICOLON       reduce using rule 19 (BlankStatement -> SEMICOLON .)
    LPAREN          reduce using rule 19 (BlankStatement -> SEMICOLON .)
    LBRACE          reduce using rule 19 (BlankStatement -> SEMICOLON .)
    TIMES           reduce using rule 19 (BlankStatement -> SEMICOLON .)
    AMPERSAND       reduce using rule 19 (BlankStatement -> SEMICOLON .)
    INTL            reduce using rule 19 (BlankStatement -> SEMICOLON .)
    BOOLL           reduce using rule 19 (BlankStatement -> SEMICOLON .)
    ID              reduce using rule 19 (BlankStatement -> SEMICOLON .)
    RBRACE          reduce using rule 19 (BlankStatement -> SEMICOLON .)
    RPAREN          reduce using rule 19 (BlankStatement -> SEMICOLON .)


state 62

    (57) Statement -> IfElseStatement .

    LET             reduce using rule 57 (Statement -> IfElseStatement .)
    IF              reduce using rule 57 (Statement -> IfElseStatement .)
    FOR             reduce using rule 57 (Statement -> IfElseStatement .)
    WHILE           reduce using rule 57 (Statement -> IfElseStatement .)
    BREAK           reduce using rule 57 (Statement -> IfElseStatement .)
    RETURN          reduce using rule 57 (Statement -> IfElseStatement .)
    SEMICOLON       reduce using rule 57 (Statement -> IfElseStatement .)
    LPAREN          reduce using rule 57 (Statement -> IfElseStatement .)
    LBRACE          reduce using rule 57 (Statement -> IfElseStatement .)
    TIMES           reduce using rule 57 (Statement -> IfElseStatement .)
    AMPERSAND       reduce using rule 57 (Statement -> IfElseStatement .)
    INTL            reduce using rule 57 (Statement -> IfElseStatement .)
    BOOLL           reduce using rule 57 (Statement -> IfElseStatement .)
    ID              reduce using rule 57 (Statement -> IfElseStatement .)
    RBRACE          reduce using rule 57 (Statement -> IfElseStatement .)
    RPAREN          reduce using rule 57 (Statement -> IfElseStatement .)


state 63

    (58) Statement -> ForStatement .

    LET             reduce using rule 58 (Statement -> ForStatement .)
    IF              reduce using rule 58 (Statement -> ForStatement .)
    FOR             reduce using rule 58 (Statement -> ForStatement .)
    WHILE           reduce using rule 58 (Statement -> ForStatement .)
    BREAK           reduce using rule 58 (Statement -> ForStatement .)
    RETURN          reduce using rule 58 (Statement -> ForStatement .)
    SEMICOLON       reduce using rule 58 (Statement -> ForStatement .)
    LPAREN          reduce using rule 58 (Statement -> ForStatement .)
    LBRACE          reduce using rule 58 (Statement -> ForStatement .)
    TIMES           reduce using rule 58 (Statement -> ForStatement .)
    AMPERSAND       reduce using rule 58 (Statement -> ForStatement .)
    INTL            reduce using rule 58 (Statement -> ForStatement .)
    BOOLL           reduce using rule 58 (Statement -> ForStatement .)
    ID              reduce using rule 58 (Statement -> ForStatement .)
    RBRACE          reduce using rule 58 (Statement -> ForStatement .)
    RPAREN          reduce using rule 58 (Statement -> ForStatement .)


state 64

    (59) Statement -> WhileStatement .

    LET             reduce using rule 59 (Statement -> WhileStatement .)
    IF              reduce using rule 59 (Statement -> WhileStatement .)
    FOR             reduce using rule 59 (Statement -> WhileStatement .)
    WHILE           reduce using rule 59 (Statement -> WhileStatement .)
    BREAK           reduce using rule 59 (Statement -> WhileStatement .)
    RETURN          reduce using rule 59 (Statement -> WhileStatement .)
    SEMICOLON       reduce using rule 59 (Statement -> WhileStatement .)
    LPAREN          reduce using rule 59 (Statement -> WhileStatement .)
    LBRACE          reduce using rule 59 (Statement -> WhileStatement .)
    TIMES           reduce using rule 59 (Statement -> WhileStatement .)
    AMPERSAND       reduce using rule 59 (Statement -> WhileStatement .)
    INTL            reduce using rule 59 (Statement -> WhileStatement .)
    BOOLL           reduce using rule 59 (Statement -> WhileStatement .)
    ID              reduce using rule 59 (Statement -> WhileStatement .)
    RBRACE          reduce using rule 59 (Statement -> WhileStatement .)
    RPAREN          reduce using rule 59 (Statement -> WhileStatement .)


state 65

    (60) Statement -> BreakStatement .

    LET             reduce using rule 60 (Statement -> BreakStatement .)
    IF              reduce using rule 60 (Statement -> BreakStatement .)
    FOR             reduce using rule 60 (Statement -> BreakStatement .)
    WHILE           reduce using rule 60 (Statement -> BreakStatement .)
    BREAK           reduce using rule 60 (Statement -> BreakStatement .)
    RETURN          reduce using rule 60 (Statement -> BreakStatement .)
    SEMICOLON       reduce using rule 60 (Statement -> BreakStatement .)
    LPAREN          reduce using rule 60 (Statement -> BreakStatement .)
    LBRACE          reduce using rule 60 (Statement -> BreakStatement .)
    TIMES           reduce using rule 60 (Statement -> BreakStatement .)
    AMPERSAND       reduce using rule 60 (Statement -> BreakStatement .)
    INTL            reduce using rule 60 (Statement -> BreakStatement .)
    BOOLL           reduce using rule 60 (Statement -> BreakStatement .)
    ID              reduce using rule 60 (Statement -> BreakStatement .)
    RBRACE          reduce using rule 60 (Statement -> BreakStatement .)
    RPAREN          reduce using rule 60 (Statement -> BreakStatement .)


state 66

    (61) Statement -> ReturnStatement .

    LET             reduce using rule 61 (Statement -> ReturnStatement .)
    IF              reduce using rule 61 (Statement -> ReturnStatement .)
    FOR             reduce using rule 61 (Statement -> ReturnStatement .)
    WHILE           reduce using rule 61 (Statement -> ReturnStatement .)
    BREAK           reduce using rule 61 (Statement -> ReturnStatement .)
    RETURN          reduce using rule 61 (Statement -> ReturnStatement .)
    SEMICOLON       reduce using rule 61 (Statement -> ReturnStatement .)
    LPAREN          reduce using rule 61 (Statement -> ReturnStatement .)
    LBRACE          reduce using rule 61 (Statement -> ReturnStatement .)
    TIMES           reduce using rule 61 (Statement -> ReturnStatement .)
    AMPERSAND       reduce using rule 61 (Statement -> ReturnStatement .)
    INTL            reduce using rule 61 (Statement -> ReturnStatement .)
    BOOLL           reduce using rule 61 (Statement -> ReturnStatement .)
    ID              reduce using rule 61 (Statement -> ReturnStatement .)
    RBRACE          reduce using rule 61 (Statement -> ReturnStatement .)
    RPAREN          reduce using rule 61 (Statement -> ReturnStatement .)


state 67

    (62) Statement -> BlockStatement .

    LET             reduce using rule 62 (Statement -> BlockStatement .)
    IF              reduce using rule 62 (Statement -> BlockStatement .)
    FOR             reduce using rule 62 (Statement -> BlockStatement .)
    WHILE           reduce using rule 62 (Statement -> BlockStatement .)
    BREAK           reduce using rule 62 (Statement -> BlockStatement .)
    RETURN          reduce using rule 62 (Statement -> BlockStatement .)
    SEMICOLON       reduce using rule 62 (Statement -> BlockStatement .)
    LPAREN          reduce using rule 62 (Statement -> BlockStatement .)
    LBRACE          reduce using rule 62 (Statement -> BlockStatement .)
    TIMES           reduce using rule 62 (Statement -> BlockStatement .)
    AMPERSAND       reduce using rule 62 (Statement -> BlockStatement .)
    INTL            reduce using rule 62 (Statement -> BlockStatement .)
    BOOLL           reduce using rule 62 (Statement -> BlockStatement .)
    ID              reduce using rule 62 (Statement -> BlockStatement .)
    RBRACE          reduce using rule 62 (Statement -> BlockStatement .)
    RPAREN          reduce using rule 62 (Statement -> BlockStatement .)


state 68

    (63) Statement -> BlankStatement .

    LET             reduce using rule 63 (Statement -> BlankStatement .)
    IF              reduce using rule 63 (Statement -> BlankStatement .)
    FOR             reduce using rule 63 (Statement -> BlankStatement .)
    WHILE           reduce using rule 63 (Statement -> BlankStatement .)
    BREAK           reduce using rule 63 (Statement -> BlankStatement .)
    RETURN          reduce using rule 63 (Statement -> BlankStatement .)
    SEMICOLON       reduce using rule 63 (Statement -> BlankStatement .)
    LPAREN          reduce using rule 63 (Statement -> BlankStatement .)
    LBRACE          reduce using rule 63 (Statement -> BlankStatement .)
    TIMES           reduce using rule 63 (Statement -> BlankStatement .)
    AMPERSAND       reduce using rule 63 (Statement -> BlankStatement .)
    INTL            reduce using rule 63 (Statement -> BlankStatement .)
    BOOLL           reduce using rule 63 (Statement -> BlankStatement .)
    ID              reduce using rule 63 (Statement -> BlankStatement .)
    RBRACE          reduce using rule 63 (Statement -> BlankStatement .)
    RPAREN          reduce using rule 63 (Statement -> BlankStatement .)


state 69

    (64) Statement -> TypeStatement .

    LET             reduce using rule 64 (Statement -> TypeStatement .)
    IF              reduce using rule 64 (Statement -> TypeStatement .)
    FOR             reduce using rule 64 (Statement -> TypeStatement .)
    WHILE           reduce using rule 64 (Statement -> TypeStatement .)
    BREAK           reduce using rule 64 (Statement -> TypeStatement .)
    RETURN          reduce using rule 64 (Statement -> TypeStatement .)
    SEMICOLON       reduce using rule 64 (Statement -> TypeStatement .)
    LPAREN          reduce using rule 64 (Statement -> TypeStatement .)
    LBRACE          reduce using rule 64 (Statement -> TypeStatement .)
    TIMES           reduce using rule 64 (Statement -> TypeStatement .)
    AMPERSAND       reduce using rule 64 (Statement -> TypeStatement .)
    INTL            reduce using rule 64 (Statement -> TypeStatement .)
    BOOLL           reduce using rule 64 (Statement -> TypeStatement .)
    ID              reduce using rule 64 (Statement -> TypeStatement .)
    RBRACE          reduce using rule 64 (Statement -> TypeStatement .)
    RPAREN          reduce using rule 64 (Statement -> TypeStatement .)


state 70

    (44) InitStatement -> LET . ID ASSIGNMENT Expression SEMICOLON
    (80) TypeStatement -> LET . ID EQ TypeExpression SEMICOLON

    ID              shift and go to state 117


state 71

    (33) Expression -> BinaryExpression .

    SEMICOLON       reduce using rule 33 (Expression -> BinaryExpression .)
    ASSIGNMENT      reduce using rule 33 (Expression -> BinaryExpression .)
    PLUS            reduce using rule 33 (Expression -> BinaryExpression .)
    MINUS           reduce using rule 33 (Expression -> BinaryExpression .)
    TIMES           reduce using rule 33 (Expression -> BinaryExpression .)
    DIVIDE          reduce using rule 33 (Expression -> BinaryExpression .)
    MOD             reduce using rule 33 (Expression -> BinaryExpression .)
    LEQ             reduce using rule 33 (Expression -> BinaryExpression .)
    GEQ             reduce using rule 33 (Expression -> BinaryExpression .)
    LT              reduce using rule 33 (Expression -> BinaryExpression .)
    GT              reduce using rule 33 (Expression -> BinaryExpression .)
    EQ              reduce using rule 33 (Expression -> BinaryExpression .)
    NE              reduce using rule 33 (Expression -> BinaryExpression .)
    LBRACKET        reduce using rule 33 (Expression -> BinaryExpression .)
    DOT             reduce using rule 33 (Expression -> BinaryExpression .)
    RPAREN          reduce using rule 33 (Expression -> BinaryExpression .)
    LET             reduce using rule 33 (Expression -> BinaryExpression .)
    IF              reduce using rule 33 (Expression -> BinaryExpression .)
    FOR             reduce using rule 33 (Expression -> BinaryExpression .)
    WHILE           reduce using rule 33 (Expression -> BinaryExpression .)
    BREAK           reduce using rule 33 (Expression -> BinaryExpression .)
    RETURN          reduce using rule 33 (Expression -> BinaryExpression .)
    LPAREN          reduce using rule 33 (Expression -> BinaryExpression .)
    LBRACE          reduce using rule 33 (Expression -> BinaryExpression .)
    AMPERSAND       reduce using rule 33 (Expression -> BinaryExpression .)
    INTL            reduce using rule 33 (Expression -> BinaryExpression .)
    BOOLL           reduce using rule 33 (Expression -> BinaryExpression .)
    ID              reduce using rule 33 (Expression -> BinaryExpression .)
    RBRACE          reduce using rule 33 (Expression -> BinaryExpression .)
    RBRACKET        reduce using rule 33 (Expression -> BinaryExpression .)
    COMMA           reduce using rule 33 (Expression -> BinaryExpression .)


state 72

    (34) Expression -> UnaryExpression .

    SEMICOLON       reduce using rule 34 (Expression -> UnaryExpression .)
    ASSIGNMENT      reduce using rule 34 (Expression -> UnaryExpression .)
    PLUS            reduce using rule 34 (Expression -> UnaryExpression .)
    MINUS           reduce using rule 34 (Expression -> UnaryExpression .)
    TIMES           reduce using rule 34 (Expression -> UnaryExpression .)
    DIVIDE          reduce using rule 34 (Expression -> UnaryExpression .)
    MOD             reduce using rule 34 (Expression -> UnaryExpression .)
    LEQ             reduce using rule 34 (Expression -> UnaryExpression .)
    GEQ             reduce using rule 34 (Expression -> UnaryExpression .)
    LT              reduce using rule 34 (Expression -> UnaryExpression .)
    GT              reduce using rule 34 (Expression -> UnaryExpression .)
    EQ              reduce using rule 34 (Expression -> UnaryExpression .)
    NE              reduce using rule 34 (Expression -> UnaryExpression .)
    LBRACKET        reduce using rule 34 (Expression -> UnaryExpression .)
    DOT             reduce using rule 34 (Expression -> UnaryExpression .)
    RPAREN          reduce using rule 34 (Expression -> UnaryExpression .)
    LET             reduce using rule 34 (Expression -> UnaryExpression .)
    IF              reduce using rule 34 (Expression -> UnaryExpression .)
    FOR             reduce using rule 34 (Expression -> UnaryExpression .)
    WHILE           reduce using rule 34 (Expression -> UnaryExpression .)
    BREAK           reduce using rule 34 (Expression -> UnaryExpression .)
    RETURN          reduce using rule 34 (Expression -> UnaryExpression .)
    LPAREN          reduce using rule 34 (Expression -> UnaryExpression .)
    LBRACE          reduce using rule 34 (Expression -> UnaryExpression .)
    AMPERSAND       reduce using rule 34 (Expression -> UnaryExpression .)
    INTL            reduce using rule 34 (Expression -> UnaryExpression .)
    BOOLL           reduce using rule 34 (Expression -> UnaryExpression .)
    ID              reduce using rule 34 (Expression -> UnaryExpression .)
    RBRACE          reduce using rule 34 (Expression -> UnaryExpression .)
    RBRACKET        reduce using rule 34 (Expression -> UnaryExpression .)
    COMMA           reduce using rule 34 (Expression -> UnaryExpression .)


state 73

    (41) IfElseStatement -> IF . LPAREN Expression RPAREN Block ELSE Block
    (42) IfElseStatement -> IF . LPAREN Expression RPAREN Block

    LPAREN          shift and go to state 118


state 74

    (86) UnaryExpression -> LPAREN . Expression RPAREN
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (8) BinaryExpression -> . Expression PLUS Expression
    (9) BinaryExpression -> . Expression MINUS Expression
    (10) BinaryExpression -> . Expression TIMES Expression
    (11) BinaryExpression -> . Expression DIVIDE Expression
    (12) BinaryExpression -> . Expression MOD Expression
    (13) BinaryExpression -> . Expression LEQ Expression
    (14) BinaryExpression -> . Expression GEQ Expression
    (15) BinaryExpression -> . Expression LT Expression
    (16) BinaryExpression -> . Expression GT Expression
    (17) BinaryExpression -> . Expression EQ Expression
    (18) BinaryExpression -> . Expression NE Expression
    (81) UnaryExpression -> . Literal
    (82) UnaryExpression -> . FunctionCall
    (83) UnaryExpression -> . BracketCall
    (84) UnaryExpression -> . InitCall
    (85) UnaryExpression -> . DotExpression
    (86) UnaryExpression -> . LPAREN Expression RPAREN
    (87) UnaryExpression -> . DereferenceExpression
    (88) UnaryExpression -> . AddressExpression
    (46) Literal -> . IntLiteral
    (47) Literal -> . BoolLiteral
    (36) FunctionCall -> . TypeExpression LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (43) InitCall -> . TypeExpression LBRACE ArgumentListR RBRACE
    (31) DotExpression -> . TypeExpression
    (32) DotExpression -> . Expression DOT ID
    (30) DereferenceExpression -> . TIMES Expression
    (1) AddressExpression -> . AMPERSAND Expression
    (45) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL
    (73) TypeExpression -> . ID
    (74) TypeExpression -> . ID LT TypeExpressionListR GT

    LPAREN          shift and go to state 74
    TIMES           shift and go to state 82
    AMPERSAND       shift and go to state 92
    INTL            shift and go to state 79
    BOOLL           shift and go to state 93
    ID              shift and go to state 23

    Expression                     shift and go to state 119
    BinaryExpression               shift and go to state 71
    UnaryExpression                shift and go to state 72
    Literal                        shift and go to state 83
    FunctionCall                   shift and go to state 84
    BracketCall                    shift and go to state 85
    InitCall                       shift and go to state 86
    DotExpression                  shift and go to state 87
    DereferenceExpression          shift and go to state 88
    AddressExpression              shift and go to state 89
    IntLiteral                     shift and go to state 90
    BoolLiteral                    shift and go to state 91
    TypeExpression                 shift and go to state 81

state 75

    (21) BlockStatement -> Block .

    LET             reduce using rule 21 (BlockStatement -> Block .)
    IF              reduce using rule 21 (BlockStatement -> Block .)
    FOR             reduce using rule 21 (BlockStatement -> Block .)
    WHILE           reduce using rule 21 (BlockStatement -> Block .)
    BREAK           reduce using rule 21 (BlockStatement -> Block .)
    RETURN          reduce using rule 21 (BlockStatement -> Block .)
    SEMICOLON       reduce using rule 21 (BlockStatement -> Block .)
    LPAREN          reduce using rule 21 (BlockStatement -> Block .)
    LBRACE          reduce using rule 21 (BlockStatement -> Block .)
    TIMES           reduce using rule 21 (BlockStatement -> Block .)
    AMPERSAND       reduce using rule 21 (BlockStatement -> Block .)
    INTL            reduce using rule 21 (BlockStatement -> Block .)
    BOOLL           reduce using rule 21 (BlockStatement -> Block .)
    ID              reduce using rule 21 (BlockStatement -> Block .)
    RBRACE          reduce using rule 21 (BlockStatement -> Block .)
    RPAREN          reduce using rule 21 (BlockStatement -> Block .)


state 76

    (35) ForStatement -> FOR . LPAREN Statement Expression SEMICOLON Statement RPAREN Block

    LPAREN          shift and go to state 120


state 77

    (89) WhileStatement -> WHILE . LPAREN Expression RPAREN Block

    LPAREN          shift and go to state 121


state 78

    (24) BreakStatement -> BREAK . INTL SEMICOLON
    (25) BreakStatement -> BREAK . SEMICOLON

    INTL            shift and go to state 122
    SEMICOLON       shift and go to state 123


state 79

    (45) IntLiteral -> INTL .

    SEMICOLON       reduce using rule 45 (IntLiteral -> INTL .)
    ASSIGNMENT      reduce using rule 45 (IntLiteral -> INTL .)
    PLUS            reduce using rule 45 (IntLiteral -> INTL .)
    MINUS           reduce using rule 45 (IntLiteral -> INTL .)
    TIMES           reduce using rule 45 (IntLiteral -> INTL .)
    DIVIDE          reduce using rule 45 (IntLiteral -> INTL .)
    MOD             reduce using rule 45 (IntLiteral -> INTL .)
    LEQ             reduce using rule 45 (IntLiteral -> INTL .)
    GEQ             reduce using rule 45 (IntLiteral -> INTL .)
    LT              reduce using rule 45 (IntLiteral -> INTL .)
    GT              reduce using rule 45 (IntLiteral -> INTL .)
    EQ              reduce using rule 45 (IntLiteral -> INTL .)
    NE              reduce using rule 45 (IntLiteral -> INTL .)
    LBRACKET        reduce using rule 45 (IntLiteral -> INTL .)
    DOT             reduce using rule 45 (IntLiteral -> INTL .)
    RPAREN          reduce using rule 45 (IntLiteral -> INTL .)
    LET             reduce using rule 45 (IntLiteral -> INTL .)
    IF              reduce using rule 45 (IntLiteral -> INTL .)
    FOR             reduce using rule 45 (IntLiteral -> INTL .)
    WHILE           reduce using rule 45 (IntLiteral -> INTL .)
    BREAK           reduce using rule 45 (IntLiteral -> INTL .)
    RETURN          reduce using rule 45 (IntLiteral -> INTL .)
    LPAREN          reduce using rule 45 (IntLiteral -> INTL .)
    LBRACE          reduce using rule 45 (IntLiteral -> INTL .)
    AMPERSAND       reduce using rule 45 (IntLiteral -> INTL .)
    INTL            reduce using rule 45 (IntLiteral -> INTL .)
    BOOLL           reduce using rule 45 (IntLiteral -> INTL .)
    ID              reduce using rule 45 (IntLiteral -> INTL .)
    RBRACE          reduce using rule 45 (IntLiteral -> INTL .)
    RBRACKET        reduce using rule 45 (IntLiteral -> INTL .)
    COMMA           reduce using rule 45 (IntLiteral -> INTL .)


state 80

    (52) ReturnStatement -> RETURN . Expression SEMICOLON
    (53) ReturnStatement -> RETURN . SEMICOLON
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (8) BinaryExpression -> . Expression PLUS Expression
    (9) BinaryExpression -> . Expression MINUS Expression
    (10) BinaryExpression -> . Expression TIMES Expression
    (11) BinaryExpression -> . Expression DIVIDE Expression
    (12) BinaryExpression -> . Expression MOD Expression
    (13) BinaryExpression -> . Expression LEQ Expression
    (14) BinaryExpression -> . Expression GEQ Expression
    (15) BinaryExpression -> . Expression LT Expression
    (16) BinaryExpression -> . Expression GT Expression
    (17) BinaryExpression -> . Expression EQ Expression
    (18) BinaryExpression -> . Expression NE Expression
    (81) UnaryExpression -> . Literal
    (82) UnaryExpression -> . FunctionCall
    (83) UnaryExpression -> . BracketCall
    (84) UnaryExpression -> . InitCall
    (85) UnaryExpression -> . DotExpression
    (86) UnaryExpression -> . LPAREN Expression RPAREN
    (87) UnaryExpression -> . DereferenceExpression
    (88) UnaryExpression -> . AddressExpression
    (46) Literal -> . IntLiteral
    (47) Literal -> . BoolLiteral
    (36) FunctionCall -> . TypeExpression LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (43) InitCall -> . TypeExpression LBRACE ArgumentListR RBRACE
    (31) DotExpression -> . TypeExpression
    (32) DotExpression -> . Expression DOT ID
    (30) DereferenceExpression -> . TIMES Expression
    (1) AddressExpression -> . AMPERSAND Expression
    (45) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL
    (73) TypeExpression -> . ID
    (74) TypeExpression -> . ID LT TypeExpressionListR GT

    SEMICOLON       shift and go to state 125
    LPAREN          shift and go to state 74
    TIMES           shift and go to state 82
    AMPERSAND       shift and go to state 92
    INTL            shift and go to state 79
    BOOLL           shift and go to state 93
    ID              shift and go to state 23

    Expression                     shift and go to state 124
    BinaryExpression               shift and go to state 71
    UnaryExpression                shift and go to state 72
    Literal                        shift and go to state 83
    FunctionCall                   shift and go to state 84
    BracketCall                    shift and go to state 85
    InitCall                       shift and go to state 86
    DotExpression                  shift and go to state 87
    DereferenceExpression          shift and go to state 88
    AddressExpression              shift and go to state 89
    IntLiteral                     shift and go to state 90
    BoolLiteral                    shift and go to state 91
    TypeExpression                 shift and go to state 81

state 81

    (36) FunctionCall -> TypeExpression . LPAREN ArgumentListR RPAREN
    (43) InitCall -> TypeExpression . LBRACE ArgumentListR RBRACE
    (31) DotExpression -> TypeExpression .

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
    LPAREN          shift and go to state 126
    LBRACE          shift and go to state 127
    SEMICOLON       reduce using rule 31 (DotExpression -> TypeExpression .)
    ASSIGNMENT      reduce using rule 31 (DotExpression -> TypeExpression .)
    PLUS            reduce using rule 31 (DotExpression -> TypeExpression .)
    MINUS           reduce using rule 31 (DotExpression -> TypeExpression .)
    TIMES           reduce using rule 31 (DotExpression -> TypeExpression .)
    DIVIDE          reduce using rule 31 (DotExpression -> TypeExpression .)
    MOD             reduce using rule 31 (DotExpression -> TypeExpression .)
    LEQ             reduce using rule 31 (DotExpression -> TypeExpression .)
    GEQ             reduce using rule 31 (DotExpression -> TypeExpression .)
    LT              reduce using rule 31 (DotExpression -> TypeExpression .)
    GT              reduce using rule 31 (DotExpression -> TypeExpression .)
    EQ              reduce using rule 31 (DotExpression -> TypeExpression .)
    NE              reduce using rule 31 (DotExpression -> TypeExpression .)
    LBRACKET        reduce using rule 31 (DotExpression -> TypeExpression .)
    DOT             reduce using rule 31 (DotExpression -> TypeExpression .)
    RPAREN          reduce using rule 31 (DotExpression -> TypeExpression .)
    LET             reduce using rule 31 (DotExpression -> TypeExpression .)
    IF              reduce using rule 31 (DotExpression -> TypeExpression .)
    FOR             reduce using rule 31 (DotExpression -> TypeExpression .)
    WHILE           reduce using rule 31 (DotExpression -> TypeExpression .)
    BREAK           reduce using rule 31 (DotExpression -> TypeExpression .)
    RETURN          reduce using rule 31 (DotExpression -> TypeExpression .)
    AMPERSAND       reduce using rule 31 (DotExpression -> TypeExpression .)
    INTL            reduce using rule 31 (DotExpression -> TypeExpression .)
    BOOLL           reduce using rule 31 (DotExpression -> TypeExpression .)
    ID              reduce using rule 31 (DotExpression -> TypeExpression .)
    RBRACE          reduce using rule 31 (DotExpression -> TypeExpression .)
    RBRACKET        reduce using rule 31 (DotExpression -> TypeExpression .)
    COMMA           reduce using rule 31 (DotExpression -> TypeExpression .)

  ! LPAREN          [ reduce using rule 31 (DotExpression -> TypeExpression .) ]
  ! LBRACE          [ reduce using rule 31 (DotExpression -> TypeExpression .) ]


state 82

    (30) DereferenceExpression -> TIMES . Expression
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (8) BinaryExpression -> . Expression PLUS Expression
    (9) BinaryExpression -> . Expression MINUS Expression
    (10) BinaryExpression -> . Expression TIMES Expression
    (11) BinaryExpression -> . Expression DIVIDE Expression
    (12) BinaryExpression -> . Expression MOD Expression
    (13) BinaryExpression -> . Expression LEQ Expression
    (14) BinaryExpression -> . Expression GEQ Expression
    (15) BinaryExpression -> . Expression LT Expression
    (16) BinaryExpression -> . Expression GT Expression
    (17) BinaryExpression -> . Expression EQ Expression
    (18) BinaryExpression -> . Expression NE Expression
    (81) UnaryExpression -> . Literal
    (82) UnaryExpression -> . FunctionCall
    (83) UnaryExpression -> . BracketCall
    (84) UnaryExpression -> . InitCall
    (85) UnaryExpression -> . DotExpression
    (86) UnaryExpression -> . LPAREN Expression RPAREN
    (87) UnaryExpression -> . DereferenceExpression
    (88) UnaryExpression -> . AddressExpression
    (46) Literal -> . IntLiteral
    (47) Literal -> . BoolLiteral
    (36) FunctionCall -> . TypeExpression LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (43) InitCall -> . TypeExpression LBRACE ArgumentListR RBRACE
    (31) DotExpression -> . TypeExpression
    (32) DotExpression -> . Expression DOT ID
    (30) DereferenceExpression -> . TIMES Expression
    (1) AddressExpression -> . AMPERSAND Expression
    (45) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL
    (73) TypeExpression -> . ID
    (74) TypeExpression -> . ID LT TypeExpressionListR GT

    LPAREN          shift and go to state 74
    TIMES           shift and go to state 82
    AMPERSAND       shift and go to state 92
    INTL            shift and go to state 79
    BOOLL           shift and go to state 93
    ID              shift and go to state 23

    Expression                     shift and go to state 128
    BinaryExpression               shift and go to state 71
    UnaryExpression                shift and go to state 72
    Literal                        shift and go to state 83
    FunctionCall                   shift and go to state 84
    BracketCall                    shift and go to state 85
    InitCall                       shift and go to state 86
    DotExpression                  shift and go to state 87
    DereferenceExpression          shift and go to state 88
    AddressExpression              shift and go to state 89
    IntLiteral                     shift and go to state 90
    BoolLiteral                    shift and go to state 91
    TypeExpression                 shift and go to state 81

state 83

    (81) UnaryExpression -> Literal .

    SEMICOLON       reduce using rule 81 (UnaryExpression -> Literal .)
    ASSIGNMENT      reduce using rule 81 (UnaryExpression -> Literal .)
    PLUS            reduce using rule 81 (UnaryExpression -> Literal .)
    MINUS           reduce using rule 81 (UnaryExpression -> Literal .)
    TIMES           reduce using rule 81 (UnaryExpression -> Literal .)
    DIVIDE          reduce using rule 81 (UnaryExpression -> Literal .)
    MOD             reduce using rule 81 (UnaryExpression -> Literal .)
    LEQ             reduce using rule 81 (UnaryExpression -> Literal .)
    GEQ             reduce using rule 81 (UnaryExpression -> Literal .)
    LT              reduce using rule 81 (UnaryExpression -> Literal .)
    GT              reduce using rule 81 (UnaryExpression -> Literal .)
    EQ              reduce using rule 81 (UnaryExpression -> Literal .)
    NE              reduce using rule 81 (UnaryExpression -> Literal .)
    LBRACKET        reduce using rule 81 (UnaryExpression -> Literal .)
    DOT             reduce using rule 81 (UnaryExpression -> Literal .)
    RPAREN          reduce using rule 81 (UnaryExpression -> Literal .)
    LET             reduce using rule 81 (UnaryExpression -> Literal .)
    IF              reduce using rule 81 (UnaryExpression -> Literal .)
    FOR             reduce using rule 81 (UnaryExpression -> Literal .)
    WHILE           reduce using rule 81 (UnaryExpression -> Literal .)
    BREAK           reduce using rule 81 (UnaryExpression -> Literal .)
    RETURN          reduce using rule 81 (UnaryExpression -> Literal .)
    LPAREN          reduce using rule 81 (UnaryExpression -> Literal .)
    LBRACE          reduce using rule 81 (UnaryExpression -> Literal .)
    AMPERSAND       reduce using rule 81 (UnaryExpression -> Literal .)
    INTL            reduce using rule 81 (UnaryExpression -> Literal .)
    BOOLL           reduce using rule 81 (UnaryExpression -> Literal .)
    ID              reduce using rule 81 (UnaryExpression -> Literal .)
    RBRACE          reduce using rule 81 (UnaryExpression -> Literal .)
    RBRACKET        reduce using rule 81 (UnaryExpression -> Literal .)
    COMMA           reduce using rule 81 (UnaryExpression -> Literal .)


state 84

    (82) UnaryExpression -> FunctionCall .

    SEMICOLON       reduce using rule 82 (UnaryExpression -> FunctionCall .)
    ASSIGNMENT      reduce using rule 82 (UnaryExpression -> FunctionCall .)
    PLUS            reduce using rule 82 (UnaryExpression -> FunctionCall .)
    MINUS           reduce using rule 82 (UnaryExpression -> FunctionCall .)
    TIMES           reduce using rule 82 (UnaryExpression -> FunctionCall .)
    DIVIDE          reduce using rule 82 (UnaryExpression -> FunctionCall .)
    MOD             reduce using rule 82 (UnaryExpression -> FunctionCall .)
    LEQ             reduce using rule 82 (UnaryExpression -> FunctionCall .)
    GEQ             reduce using rule 82 (UnaryExpression -> FunctionCall .)
    LT              reduce using rule 82 (UnaryExpression -> FunctionCall .)
    GT              reduce using rule 82 (UnaryExpression -> FunctionCall .)
    EQ              reduce using rule 82 (UnaryExpression -> FunctionCall .)
    NE              reduce using rule 82 (UnaryExpression -> FunctionCall .)
    LBRACKET        reduce using rule 82 (UnaryExpression -> FunctionCall .)
    DOT             reduce using rule 82 (UnaryExpression -> FunctionCall .)
    RPAREN          reduce using rule 82 (UnaryExpression -> FunctionCall .)
    LET             reduce using rule 82 (UnaryExpression -> FunctionCall .)
    IF              reduce using rule 82 (UnaryExpression -> FunctionCall .)
    FOR             reduce using rule 82 (UnaryExpression -> FunctionCall .)
    WHILE           reduce using rule 82 (UnaryExpression -> FunctionCall .)
    BREAK           reduce using rule 82 (UnaryExpression -> FunctionCall .)
    RETURN          reduce using rule 82 (UnaryExpression -> FunctionCall .)
    LPAREN          reduce using rule 82 (UnaryExpression -> FunctionCall .)
    LBRACE          reduce using rule 82 (UnaryExpression -> FunctionCall .)
    AMPERSAND       reduce using rule 82 (UnaryExpression -> FunctionCall .)
    INTL            reduce using rule 82 (UnaryExpression -> FunctionCall .)
    BOOLL           reduce using rule 82 (UnaryExpression -> FunctionCall .)
    ID              reduce using rule 82 (UnaryExpression -> FunctionCall .)
    RBRACE          reduce using rule 82 (UnaryExpression -> FunctionCall .)
    RBRACKET        reduce using rule 82 (UnaryExpression -> FunctionCall .)
    COMMA           reduce using rule 82 (UnaryExpression -> FunctionCall .)


state 85

    (83) UnaryExpression -> BracketCall .

    SEMICOLON       reduce using rule 83 (UnaryExpression -> BracketCall .)
    ASSIGNMENT      reduce using rule 83 (UnaryExpression -> BracketCall .)
    PLUS            reduce using rule 83 (UnaryExpression -> BracketCall .)
    MINUS           reduce using rule 83 (UnaryExpression -> BracketCall .)
    TIMES           reduce using rule 83 (UnaryExpression -> BracketCall .)
    DIVIDE          reduce using rule 83 (UnaryExpression -> BracketCall .)
    MOD             reduce using rule 83 (UnaryExpression -> BracketCall .)
    LEQ             reduce using rule 83 (UnaryExpression -> BracketCall .)
    GEQ             reduce using rule 83 (UnaryExpression -> BracketCall .)
    LT              reduce using rule 83 (UnaryExpression -> BracketCall .)
    GT              reduce using rule 83 (UnaryExpression -> BracketCall .)
    EQ              reduce using rule 83 (UnaryExpression -> BracketCall .)
    NE              reduce using rule 83 (UnaryExpression -> BracketCall .)
    LBRACKET        reduce using rule 83 (UnaryExpression -> BracketCall .)
    DOT             reduce using rule 83 (UnaryExpression -> BracketCall .)
    RPAREN          reduce using rule 83 (UnaryExpression -> BracketCall .)
    LET             reduce using rule 83 (UnaryExpression -> BracketCall .)
    IF              reduce using rule 83 (UnaryExpression -> BracketCall .)
    FOR             reduce using rule 83 (UnaryExpression -> BracketCall .)
    WHILE           reduce using rule 83 (UnaryExpression -> BracketCall .)
    BREAK           reduce using rule 83 (UnaryExpression -> BracketCall .)
    RETURN          reduce using rule 83 (UnaryExpression -> BracketCall .)
    LPAREN          reduce using rule 83 (UnaryExpression -> BracketCall .)
    LBRACE          reduce using rule 83 (UnaryExpression -> BracketCall .)
    AMPERSAND       reduce using rule 83 (UnaryExpression -> BracketCall .)
    INTL            reduce using rule 83 (UnaryExpression -> BracketCall .)
    BOOLL           reduce using rule 83 (UnaryExpression -> BracketCall .)
    ID              reduce using rule 83 (UnaryExpression -> BracketCall .)
    RBRACE          reduce using rule 83 (UnaryExpression -> BracketCall .)
    RBRACKET        reduce using rule 83 (UnaryExpression -> BracketCall .)
    COMMA           reduce using rule 83 (UnaryExpression -> BracketCall .)


state 86

    (84) UnaryExpression -> InitCall .

    SEMICOLON       reduce using rule 84 (UnaryExpression -> InitCall .)
    ASSIGNMENT      reduce using rule 84 (UnaryExpression -> InitCall .)
    PLUS            reduce using rule 84 (UnaryExpression -> InitCall .)
    MINUS           reduce using rule 84 (UnaryExpression -> InitCall .)
    TIMES           reduce using rule 84 (UnaryExpression -> InitCall .)
    DIVIDE          reduce using rule 84 (UnaryExpression -> InitCall .)
    MOD             reduce using rule 84 (UnaryExpression -> InitCall .)
    LEQ             reduce using rule 84 (UnaryExpression -> InitCall .)
    GEQ             reduce using rule 84 (UnaryExpression -> InitCall .)
    LT              reduce using rule 84 (UnaryExpression -> InitCall .)
    GT              reduce using rule 84 (UnaryExpression -> InitCall .)
    EQ              reduce using rule 84 (UnaryExpression -> InitCall .)
    NE              reduce using rule 84 (UnaryExpression -> InitCall .)
    LBRACKET        reduce using rule 84 (UnaryExpression -> InitCall .)
    DOT             reduce using rule 84 (UnaryExpression -> InitCall .)
    RPAREN          reduce using rule 84 (UnaryExpression -> InitCall .)
    LET             reduce using rule 84 (UnaryExpression -> InitCall .)
    IF              reduce using rule 84 (UnaryExpression -> InitCall .)
    FOR             reduce using rule 84 (UnaryExpression -> InitCall .)
    WHILE           reduce using rule 84 (UnaryExpression -> InitCall .)
    BREAK           reduce using rule 84 (UnaryExpression -> InitCall .)
    RETURN          reduce using rule 84 (UnaryExpression -> InitCall .)
    LPAREN          reduce using rule 84 (UnaryExpression -> InitCall .)
    LBRACE          reduce using rule 84 (UnaryExpression -> InitCall .)
    AMPERSAND       reduce using rule 84 (UnaryExpression -> InitCall .)
    INTL            reduce using rule 84 (UnaryExpression -> InitCall .)
    BOOLL           reduce using rule 84 (UnaryExpression -> InitCall .)
    ID              reduce using rule 84 (UnaryExpression -> InitCall .)
    RBRACE          reduce using rule 84 (UnaryExpression -> InitCall .)
    RBRACKET        reduce using rule 84 (UnaryExpression -> InitCall .)
    COMMA           reduce using rule 84 (UnaryExpression -> InitCall .)


state 87

    (85) UnaryExpression -> DotExpression .

    SEMICOLON       reduce using rule 85 (UnaryExpression -> DotExpression .)
    ASSIGNMENT      reduce using rule 85 (UnaryExpression -> DotExpression .)
    PLUS            reduce using rule 85 (UnaryExpression -> DotExpression .)
    MINUS           reduce using rule 85 (UnaryExpression -> DotExpression .)
    TIMES           reduce using rule 85 (UnaryExpression -> DotExpression .)
    DIVIDE          reduce using rule 85 (UnaryExpression -> DotExpression .)
    MOD             reduce using rule 85 (UnaryExpression -> DotExpression .)
    LEQ             reduce using rule 85 (UnaryExpression -> DotExpression .)
    GEQ             reduce using rule 85 (UnaryExpression -> DotExpression .)
    LT              reduce using rule 85 (UnaryExpression -> DotExpression .)
    GT              reduce using rule 85 (UnaryExpression -> DotExpression .)
    EQ              reduce using rule 85 (UnaryExpression -> DotExpression .)
    NE              reduce using rule 85 (UnaryExpression -> DotExpression .)
    LBRACKET        reduce using rule 85 (UnaryExpression -> DotExpression .)
    DOT             reduce using rule 85 (UnaryExpression -> DotExpression .)
    RPAREN          reduce using rule 85 (UnaryExpression -> DotExpression .)
    LET             reduce using rule 85 (UnaryExpression -> DotExpression .)
    IF              reduce using rule 85 (UnaryExpression -> DotExpression .)
    FOR             reduce using rule 85 (UnaryExpression -> DotExpression .)
    WHILE           reduce using rule 85 (UnaryExpression -> DotExpression .)
    BREAK           reduce using rule 85 (UnaryExpression -> DotExpression .)
    RETURN          reduce using rule 85 (UnaryExpression -> DotExpression .)
    LPAREN          reduce using rule 85 (UnaryExpression -> DotExpression .)
    LBRACE          reduce using rule 85 (UnaryExpression -> DotExpression .)
    AMPERSAND       reduce using rule 85 (UnaryExpression -> DotExpression .)
    INTL            reduce using rule 85 (UnaryExpression -> DotExpression .)
    BOOLL           reduce using rule 85 (UnaryExpression -> DotExpression .)
    ID              reduce using rule 85 (UnaryExpression -> DotExpression .)
    RBRACE          reduce using rule 85 (UnaryExpression -> DotExpression .)
    RBRACKET        reduce using rule 85 (UnaryExpression -> DotExpression .)
    COMMA           reduce using rule 85 (UnaryExpression -> DotExpression .)


state 88

    (87) UnaryExpression -> DereferenceExpression .

    SEMICOLON       reduce using rule 87 (UnaryExpression -> DereferenceExpression .)
    ASSIGNMENT      reduce using rule 87 (UnaryExpression -> DereferenceExpression .)
    PLUS            reduce using rule 87 (UnaryExpression -> DereferenceExpression .)
    MINUS           reduce using rule 87 (UnaryExpression -> DereferenceExpression .)
    TIMES           reduce using rule 87 (UnaryExpression -> DereferenceExpression .)
    DIVIDE          reduce using rule 87 (UnaryExpression -> DereferenceExpression .)
    MOD             reduce using rule 87 (UnaryExpression -> DereferenceExpression .)
    LEQ             reduce using rule 87 (UnaryExpression -> DereferenceExpression .)
    GEQ             reduce using rule 87 (UnaryExpression -> DereferenceExpression .)
    LT              reduce using rule 87 (UnaryExpression -> DereferenceExpression .)
    GT              reduce using rule 87 (UnaryExpression -> DereferenceExpression .)
    EQ              reduce using rule 87 (UnaryExpression -> DereferenceExpression .)
    NE              reduce using rule 87 (UnaryExpression -> DereferenceExpression .)
    LBRACKET        reduce using rule 87 (UnaryExpression -> DereferenceExpression .)
    DOT             reduce using rule 87 (UnaryExpression -> DereferenceExpression .)
    RPAREN          reduce using rule 87 (UnaryExpression -> DereferenceExpression .)
    LET             reduce using rule 87 (UnaryExpression -> DereferenceExpression .)
    IF              reduce using rule 87 (UnaryExpression -> DereferenceExpression .)
    FOR             reduce using rule 87 (UnaryExpression -> DereferenceExpression .)
    WHILE           reduce using rule 87 (UnaryExpression -> DereferenceExpression .)
    BREAK           reduce using rule 87 (UnaryExpression -> DereferenceExpression .)
    RETURN          reduce using rule 87 (UnaryExpression -> DereferenceExpression .)
    LPAREN          reduce using rule 87 (UnaryExpression -> DereferenceExpression .)
    LBRACE          reduce using rule 87 (UnaryExpression -> DereferenceExpression .)
    AMPERSAND       reduce using rule 87 (UnaryExpression -> DereferenceExpression .)
    INTL            reduce using rule 87 (UnaryExpression -> DereferenceExpression .)
    BOOLL           reduce using rule 87 (UnaryExpression -> DereferenceExpression .)
    ID              reduce using rule 87 (UnaryExpression -> DereferenceExpression .)
    RBRACE          reduce using rule 87 (UnaryExpression -> DereferenceExpression .)
    RBRACKET        reduce using rule 87 (UnaryExpression -> DereferenceExpression .)
    COMMA           reduce using rule 87 (UnaryExpression -> DereferenceExpression .)


state 89

    (88) UnaryExpression -> AddressExpression .

    SEMICOLON       reduce using rule 88 (UnaryExpression -> AddressExpression .)
    ASSIGNMENT      reduce using rule 88 (UnaryExpression -> AddressExpression .)
    PLUS            reduce using rule 88 (UnaryExpression -> AddressExpression .)
    MINUS           reduce using rule 88 (UnaryExpression -> AddressExpression .)
    TIMES           reduce using rule 88 (UnaryExpression -> AddressExpression .)
    DIVIDE          reduce using rule 88 (UnaryExpression -> AddressExpression .)
    MOD             reduce using rule 88 (UnaryExpression -> AddressExpression .)
    LEQ             reduce using rule 88 (UnaryExpression -> AddressExpression .)
    GEQ             reduce using rule 88 (UnaryExpression -> AddressExpression .)
    LT              reduce using rule 88 (UnaryExpression -> AddressExpression .)
    GT              reduce using rule 88 (UnaryExpression -> AddressExpression .)
    EQ              reduce using rule 88 (UnaryExpression -> AddressExpression .)
    NE              reduce using rule 88 (UnaryExpression -> AddressExpression .)
    LBRACKET        reduce using rule 88 (UnaryExpression -> AddressExpression .)
    DOT             reduce using rule 88 (UnaryExpression -> AddressExpression .)
    RPAREN          reduce using rule 88 (UnaryExpression -> AddressExpression .)
    LET             reduce using rule 88 (UnaryExpression -> AddressExpression .)
    IF              reduce using rule 88 (UnaryExpression -> AddressExpression .)
    FOR             reduce using rule 88 (UnaryExpression -> AddressExpression .)
    WHILE           reduce using rule 88 (UnaryExpression -> AddressExpression .)
    BREAK           reduce using rule 88 (UnaryExpression -> AddressExpression .)
    RETURN          reduce using rule 88 (UnaryExpression -> AddressExpression .)
    LPAREN          reduce using rule 88 (UnaryExpression -> AddressExpression .)
    LBRACE          reduce using rule 88 (UnaryExpression -> AddressExpression .)
    AMPERSAND       reduce using rule 88 (UnaryExpression -> AddressExpression .)
    INTL            reduce using rule 88 (UnaryExpression -> AddressExpression .)
    BOOLL           reduce using rule 88 (UnaryExpression -> AddressExpression .)
    ID              reduce using rule 88 (UnaryExpression -> AddressExpression .)
    RBRACE          reduce using rule 88 (UnaryExpression -> AddressExpression .)
    RBRACKET        reduce using rule 88 (UnaryExpression -> AddressExpression .)
    COMMA           reduce using rule 88 (UnaryExpression -> AddressExpression .)


state 90

    (46) Literal -> IntLiteral .

    SEMICOLON       reduce using rule 46 (Literal -> IntLiteral .)
    ASSIGNMENT      reduce using rule 46 (Literal -> IntLiteral .)
    PLUS            reduce using rule 46 (Literal -> IntLiteral .)
    MINUS           reduce using rule 46 (Literal -> IntLiteral .)
    TIMES           reduce using rule 46 (Literal -> IntLiteral .)
    DIVIDE          reduce using rule 46 (Literal -> IntLiteral .)
    MOD             reduce using rule 46 (Literal -> IntLiteral .)
    LEQ             reduce using rule 46 (Literal -> IntLiteral .)
    GEQ             reduce using rule 46 (Literal -> IntLiteral .)
    LT              reduce using rule 46 (Literal -> IntLiteral .)
    GT              reduce using rule 46 (Literal -> IntLiteral .)
    EQ              reduce using rule 46 (Literal -> IntLiteral .)
    NE              reduce using rule 46 (Literal -> IntLiteral .)
    LBRACKET        reduce using rule 46 (Literal -> IntLiteral .)
    DOT             reduce using rule 46 (Literal -> IntLiteral .)
    RPAREN          reduce using rule 46 (Literal -> IntLiteral .)
    LET             reduce using rule 46 (Literal -> IntLiteral .)
    IF              reduce using rule 46 (Literal -> IntLiteral .)
    FOR             reduce using rule 46 (Literal -> IntLiteral .)
    WHILE           reduce using rule 46 (Literal -> IntLiteral .)
    BREAK           reduce using rule 46 (Literal -> IntLiteral .)
    RETURN          reduce using rule 46 (Literal -> IntLiteral .)
    LPAREN          reduce using rule 46 (Literal -> IntLiteral .)
    LBRACE          reduce using rule 46 (Literal -> IntLiteral .)
    AMPERSAND       reduce using rule 46 (Literal -> IntLiteral .)
    INTL            reduce using rule 46 (Literal -> IntLiteral .)
    BOOLL           reduce using rule 46 (Literal -> IntLiteral .)
    ID              reduce using rule 46 (Literal -> IntLiteral .)
    RBRACE          reduce using rule 46 (Literal -> IntLiteral .)
    RBRACKET        reduce using rule 46 (Literal -> IntLiteral .)
    COMMA           reduce using rule 46 (Literal -> IntLiteral .)


state 91

    (47) Literal -> BoolLiteral .

    SEMICOLON       reduce using rule 47 (Literal -> BoolLiteral .)
    ASSIGNMENT      reduce using rule 47 (Literal -> BoolLiteral .)
    PLUS            reduce using rule 47 (Literal -> BoolLiteral .)
    MINUS           reduce using rule 47 (Literal -> BoolLiteral .)
    TIMES           reduce using rule 47 (Literal -> BoolLiteral .)
    DIVIDE          reduce using rule 47 (Literal -> BoolLiteral .)
    MOD             reduce using rule 47 (Literal -> BoolLiteral .)
    LEQ             reduce using rule 47 (Literal -> BoolLiteral .)
    GEQ             reduce using rule 47 (Literal -> BoolLiteral .)
    LT              reduce using rule 47 (Literal -> BoolLiteral .)
    GT              reduce using rule 47 (Literal -> BoolLiteral .)
    EQ              reduce using rule 47 (Literal -> BoolLiteral .)
    NE              reduce using rule 47 (Literal -> BoolLiteral .)
    LBRACKET        reduce using rule 47 (Literal -> BoolLiteral .)
    DOT             reduce using rule 47 (Literal -> BoolLiteral .)
    RPAREN          reduce using rule 47 (Literal -> BoolLiteral .)
    LET             reduce using rule 47 (Literal -> BoolLiteral .)
    IF              reduce using rule 47 (Literal -> BoolLiteral .)
    FOR             reduce using rule 47 (Literal -> BoolLiteral .)
    WHILE           reduce using rule 47 (Literal -> BoolLiteral .)
    BREAK           reduce using rule 47 (Literal -> BoolLiteral .)
    RETURN          reduce using rule 47 (Literal -> BoolLiteral .)
    LPAREN          reduce using rule 47 (Literal -> BoolLiteral .)
    LBRACE          reduce using rule 47 (Literal -> BoolLiteral .)
    AMPERSAND       reduce using rule 47 (Literal -> BoolLiteral .)
    INTL            reduce using rule 47 (Literal -> BoolLiteral .)
    BOOLL           reduce using rule 47 (Literal -> BoolLiteral .)
    ID              reduce using rule 47 (Literal -> BoolLiteral .)
    RBRACE          reduce using rule 47 (Literal -> BoolLiteral .)
    RBRACKET        reduce using rule 47 (Literal -> BoolLiteral .)
    COMMA           reduce using rule 47 (Literal -> BoolLiteral .)


state 92

    (1) AddressExpression -> AMPERSAND . Expression
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (8) BinaryExpression -> . Expression PLUS Expression
    (9) BinaryExpression -> . Expression MINUS Expression
    (10) BinaryExpression -> . Expression TIMES Expression
    (11) BinaryExpression -> . Expression DIVIDE Expression
    (12) BinaryExpression -> . Expression MOD Expression
    (13) BinaryExpression -> . Expression LEQ Expression
    (14) BinaryExpression -> . Expression GEQ Expression
    (15) BinaryExpression -> . Expression LT Expression
    (16) BinaryExpression -> . Expression GT Expression
    (17) BinaryExpression -> . Expression EQ Expression
    (18) BinaryExpression -> . Expression NE Expression
    (81) UnaryExpression -> . Literal
    (82) UnaryExpression -> . FunctionCall
    (83) UnaryExpression -> . BracketCall
    (84) UnaryExpression -> . InitCall
    (85) UnaryExpression -> . DotExpression
    (86) UnaryExpression -> . LPAREN Expression RPAREN
    (87) UnaryExpression -> . DereferenceExpression
    (88) UnaryExpression -> . AddressExpression
    (46) Literal -> . IntLiteral
    (47) Literal -> . BoolLiteral
    (36) FunctionCall -> . TypeExpression LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (43) InitCall -> . TypeExpression LBRACE ArgumentListR RBRACE
    (31) DotExpression -> . TypeExpression
    (32) DotExpression -> . Expression DOT ID
    (30) DereferenceExpression -> . TIMES Expression
    (1) AddressExpression -> . AMPERSAND Expression
    (45) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL
    (73) TypeExpression -> . ID
    (74) TypeExpression -> . ID LT TypeExpressionListR GT

    LPAREN          shift and go to state 74
    TIMES           shift and go to state 82
    AMPERSAND       shift and go to state 92
    INTL            shift and go to state 79
    BOOLL           shift and go to state 93
    ID              shift and go to state 23

    Expression                     shift and go to state 129
    BinaryExpression               shift and go to state 71
    UnaryExpression                shift and go to state 72
    Literal                        shift and go to state 83
    FunctionCall                   shift and go to state 84
    BracketCall                    shift and go to state 85
    InitCall                       shift and go to state 86
    DotExpression                  shift and go to state 87
    DereferenceExpression          shift and go to state 88
    AddressExpression              shift and go to state 89
    IntLiteral                     shift and go to state 90
    BoolLiteral                    shift and go to state 91
    TypeExpression                 shift and go to state 81

state 93

    (22) BoolLiteral -> BOOLL .

    SEMICOLON       reduce using rule 22 (BoolLiteral -> BOOLL .)
    ASSIGNMENT      reduce using rule 22 (BoolLiteral -> BOOLL .)
    PLUS            reduce using rule 22 (BoolLiteral -> BOOLL .)
    MINUS           reduce using rule 22 (BoolLiteral -> BOOLL .)
    TIMES           reduce using rule 22 (BoolLiteral -> BOOLL .)
    DIVIDE          reduce using rule 22 (BoolLiteral -> BOOLL .)
    MOD             reduce using rule 22 (BoolLiteral -> BOOLL .)
    LEQ             reduce using rule 22 (BoolLiteral -> BOOLL .)
    GEQ             reduce using rule 22 (BoolLiteral -> BOOLL .)
    LT              reduce using rule 22 (BoolLiteral -> BOOLL .)
    GT              reduce using rule 22 (BoolLiteral -> BOOLL .)
    EQ              reduce using rule 22 (BoolLiteral -> BOOLL .)
    NE              reduce using rule 22 (BoolLiteral -> BOOLL .)
    LBRACKET        reduce using rule 22 (BoolLiteral -> BOOLL .)
    DOT             reduce using rule 22 (BoolLiteral -> BOOLL .)
    RPAREN          reduce using rule 22 (BoolLiteral -> BOOLL .)
    LET             reduce using rule 22 (BoolLiteral -> BOOLL .)
    IF              reduce using rule 22 (BoolLiteral -> BOOLL .)
    FOR             reduce using rule 22 (BoolLiteral -> BOOLL .)
    WHILE           reduce using rule 22 (BoolLiteral -> BOOLL .)
    BREAK           reduce using rule 22 (BoolLiteral -> BOOLL .)
    RETURN          reduce using rule 22 (BoolLiteral -> BOOLL .)
    LPAREN          reduce using rule 22 (BoolLiteral -> BOOLL .)
    LBRACE          reduce using rule 22 (BoolLiteral -> BOOLL .)
    AMPERSAND       reduce using rule 22 (BoolLiteral -> BOOLL .)
    INTL            reduce using rule 22 (BoolLiteral -> BOOLL .)
    BOOLL           reduce using rule 22 (BoolLiteral -> BOOLL .)
    ID              reduce using rule 22 (BoolLiteral -> BOOLL .)
    RBRACE          reduce using rule 22 (BoolLiteral -> BOOLL .)
    RBRACKET        reduce using rule 22 (BoolLiteral -> BOOLL .)
    COMMA           reduce using rule 22 (BoolLiteral -> BOOLL .)


state 94

    (38) FunctionDefinition -> FN ID LT TypeParameterListR GT LPAREN ParameterListR . RPAREN Block
    (40) FunctionDefinition -> FN ID LT TypeParameterListR GT LPAREN ParameterListR . RPAREN ARROW TypeExpression Block

    RPAREN          shift and go to state 130


state 95

    (74) TypeExpression -> ID LT TypeExpressionListR GT .

    ID              reduce using rule 74 (TypeExpression -> ID LT TypeExpressionListR GT .)
    COMMA           reduce using rule 74 (TypeExpression -> ID LT TypeExpressionListR GT .)
    GT              reduce using rule 74 (TypeExpression -> ID LT TypeExpressionListR GT .)
    LBRACE          reduce using rule 74 (TypeExpression -> ID LT TypeExpressionListR GT .)
    LPAREN          reduce using rule 74 (TypeExpression -> ID LT TypeExpressionListR GT .)
    SEMICOLON       reduce using rule 74 (TypeExpression -> ID LT TypeExpressionListR GT .)
    ASSIGNMENT      reduce using rule 74 (TypeExpression -> ID LT TypeExpressionListR GT .)
    PLUS            reduce using rule 74 (TypeExpression -> ID LT TypeExpressionListR GT .)
    MINUS           reduce using rule 74 (TypeExpression -> ID LT TypeExpressionListR GT .)
    TIMES           reduce using rule 74 (TypeExpression -> ID LT TypeExpressionListR GT .)
    DIVIDE          reduce using rule 74 (TypeExpression -> ID LT TypeExpressionListR GT .)
    MOD             reduce using rule 74 (TypeExpression -> ID LT TypeExpressionListR GT .)
    LEQ             reduce using rule 74 (TypeExpression -> ID LT TypeExpressionListR GT .)
    GEQ             reduce using rule 74 (TypeExpression -> ID LT TypeExpressionListR GT .)
    LT              reduce using rule 74 (TypeExpression -> ID LT TypeExpressionListR GT .)
    EQ              reduce using rule 74 (TypeExpression -> ID LT TypeExpressionListR GT .)
    NE              reduce using rule 74 (TypeExpression -> ID LT TypeExpressionListR GT .)
    LBRACKET        reduce using rule 74 (TypeExpression -> ID LT TypeExpressionListR GT .)
    DOT             reduce using rule 74 (TypeExpression -> ID LT TypeExpressionListR GT .)
    RPAREN          reduce using rule 74 (TypeExpression -> ID LT TypeExpressionListR GT .)
    LET             reduce using rule 74 (TypeExpression -> ID LT TypeExpressionListR GT .)
    IF              reduce using rule 74 (TypeExpression -> ID LT TypeExpressionListR GT .)
    FOR             reduce using rule 74 (TypeExpression -> ID LT TypeExpressionListR GT .)
    WHILE           reduce using rule 74 (TypeExpression -> ID LT TypeExpressionListR GT .)
    BREAK           reduce using rule 74 (TypeExpression -> ID LT TypeExpressionListR GT .)
    RETURN          reduce using rule 74 (TypeExpression -> ID LT TypeExpressionListR GT .)
    AMPERSAND       reduce using rule 74 (TypeExpression -> ID LT TypeExpressionListR GT .)
    INTL            reduce using rule 74 (TypeExpression -> ID LT TypeExpressionListR GT .)
    BOOLL           reduce using rule 74 (TypeExpression -> ID LT TypeExpressionListR GT .)
    RBRACE          reduce using rule 74 (TypeExpression -> ID LT TypeExpressionListR GT .)
    RBRACKET        reduce using rule 74 (TypeExpression -> ID LT TypeExpressionListR GT .)


state 96

    (76) TypeExpressionListR -> TypeExpression COMMA . TypeExpressionListR
    (75) TypeExpressionListR -> . TypeExpression
    (76) TypeExpressionListR -> . TypeExpression COMMA TypeExpressionListR
    (73) TypeExpression -> . ID
    (74) TypeExpression -> . ID LT TypeExpressionListR GT

    ID              shift and go to state 23

    TypeExpression                 shift and go to state 50
    TypeExpressionListR            shift and go to state 131

state 97

    (80) TypeStatement -> LET ID EQ TypeExpression . SEMICOLON

    SEMICOLON       shift and go to state 132


state 98

    (68) StructDefinition -> STRUCT ID LT TypeParameterListR GT LBRACE StructMemberListR . RBRACE

    RBRACE          shift and go to state 133


state 99

    (39) FunctionDefinition -> FN ID LPAREN ParameterListR RPAREN ARROW TypeExpression Block .

    FN              reduce using rule 39 (FunctionDefinition -> FN ID LPAREN ParameterListR RPAREN ARROW TypeExpression Block .)
    STRUCT          reduce using rule 39 (FunctionDefinition -> FN ID LPAREN ParameterListR RPAREN ARROW TypeExpression Block .)
    $end            reduce using rule 39 (FunctionDefinition -> FN ID LPAREN ParameterListR RPAREN ARROW TypeExpression Block .)


state 100

    (20) Block -> LBRACE StatementListR RBRACE .

    FN              reduce using rule 20 (Block -> LBRACE StatementListR RBRACE .)
    STRUCT          reduce using rule 20 (Block -> LBRACE StatementListR RBRACE .)
    $end            reduce using rule 20 (Block -> LBRACE StatementListR RBRACE .)
    LET             reduce using rule 20 (Block -> LBRACE StatementListR RBRACE .)
    IF              reduce using rule 20 (Block -> LBRACE StatementListR RBRACE .)
    FOR             reduce using rule 20 (Block -> LBRACE StatementListR RBRACE .)
    WHILE           reduce using rule 20 (Block -> LBRACE StatementListR RBRACE .)
    BREAK           reduce using rule 20 (Block -> LBRACE StatementListR RBRACE .)
    RETURN          reduce using rule 20 (Block -> LBRACE StatementListR RBRACE .)
    SEMICOLON       reduce using rule 20 (Block -> LBRACE StatementListR RBRACE .)
    LPAREN          reduce using rule 20 (Block -> LBRACE StatementListR RBRACE .)
    LBRACE          reduce using rule 20 (Block -> LBRACE StatementListR RBRACE .)
    TIMES           reduce using rule 20 (Block -> LBRACE StatementListR RBRACE .)
    AMPERSAND       reduce using rule 20 (Block -> LBRACE StatementListR RBRACE .)
    INTL            reduce using rule 20 (Block -> LBRACE StatementListR RBRACE .)
    BOOLL           reduce using rule 20 (Block -> LBRACE StatementListR RBRACE .)
    ID              reduce using rule 20 (Block -> LBRACE StatementListR RBRACE .)
    RBRACE          reduce using rule 20 (Block -> LBRACE StatementListR RBRACE .)
    ELSE            reduce using rule 20 (Block -> LBRACE StatementListR RBRACE .)
    RPAREN          reduce using rule 20 (Block -> LBRACE StatementListR RBRACE .)


state 101

    (65) StatementListR -> Statement StatementListR .

    RBRACE          reduce using rule 65 (StatementListR -> Statement StatementListR .)


state 102

    (56) Statement -> Expression SEMICOLON .

    LET             reduce using rule 56 (Statement -> Expression SEMICOLON .)
    IF              reduce using rule 56 (Statement -> Expression SEMICOLON .)
    FOR             reduce using rule 56 (Statement -> Expression SEMICOLON .)
    WHILE           reduce using rule 56 (Statement -> Expression SEMICOLON .)
    BREAK           reduce using rule 56 (Statement -> Expression SEMICOLON .)
    RETURN          reduce using rule 56 (Statement -> Expression SEMICOLON .)
    SEMICOLON       reduce using rule 56 (Statement -> Expression SEMICOLON .)
    LPAREN          reduce using rule 56 (Statement -> Expression SEMICOLON .)
    LBRACE          reduce using rule 56 (Statement -> Expression SEMICOLON .)
    TIMES           reduce using rule 56 (Statement -> Expression SEMICOLON .)
    AMPERSAND       reduce using rule 56 (Statement -> Expression SEMICOLON .)
    INTL            reduce using rule 56 (Statement -> Expression SEMICOLON .)
    BOOLL           reduce using rule 56 (Statement -> Expression SEMICOLON .)
    ID              reduce using rule 56 (Statement -> Expression SEMICOLON .)
    RBRACE          reduce using rule 56 (Statement -> Expression SEMICOLON .)
    RPAREN          reduce using rule 56 (Statement -> Expression SEMICOLON .)


state 103

    (6) AssignmentStatement -> Expression ASSIGNMENT . Expression SEMICOLON
    (7) AssignmentStatement -> Expression ASSIGNMENT . Expression
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (8) BinaryExpression -> . Expression PLUS Expression
    (9) BinaryExpression -> . Expression MINUS Expression
    (10) BinaryExpression -> . Expression TIMES Expression
    (11) BinaryExpression -> . Expression DIVIDE Expression
    (12) BinaryExpression -> . Expression MOD Expression
    (13) BinaryExpression -> . Expression LEQ Expression
    (14) BinaryExpression -> . Expression GEQ Expression
    (15) BinaryExpression -> . Expression LT Expression
    (16) BinaryExpression -> . Expression GT Expression
    (17) BinaryExpression -> . Expression EQ Expression
    (18) BinaryExpression -> . Expression NE Expression
    (81) UnaryExpression -> . Literal
    (82) UnaryExpression -> . FunctionCall
    (83) UnaryExpression -> . BracketCall
    (84) UnaryExpression -> . InitCall
    (85) UnaryExpression -> . DotExpression
    (86) UnaryExpression -> . LPAREN Expression RPAREN
    (87) UnaryExpression -> . DereferenceExpression
    (88) UnaryExpression -> . AddressExpression
    (46) Literal -> . IntLiteral
    (47) Literal -> . BoolLiteral
    (36) FunctionCall -> . TypeExpression LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (43) InitCall -> . TypeExpression LBRACE ArgumentListR RBRACE
    (31) DotExpression -> . TypeExpression
    (32) DotExpression -> . Expression DOT ID
    (30) DereferenceExpression -> . TIMES Expression
    (1) AddressExpression -> . AMPERSAND Expression
    (45) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL
    (73) TypeExpression -> . ID
    (74) TypeExpression -> . ID LT TypeExpressionListR GT

    LPAREN          shift and go to state 74
    TIMES           shift and go to state 82
    AMPERSAND       shift and go to state 92
    INTL            shift and go to state 79
    BOOLL           shift and go to state 93
    ID              shift and go to state 23

    Expression                     shift and go to state 134
    BinaryExpression               shift and go to state 71
    UnaryExpression                shift and go to state 72
    Literal                        shift and go to state 83
    FunctionCall                   shift and go to state 84
    BracketCall                    shift and go to state 85
    InitCall                       shift and go to state 86
    DotExpression                  shift and go to state 87
    DereferenceExpression          shift and go to state 88
    AddressExpression              shift and go to state 89
    IntLiteral                     shift and go to state 90
    BoolLiteral                    shift and go to state 91
    TypeExpression                 shift and go to state 81

state 104

    (8) BinaryExpression -> Expression PLUS . Expression
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (8) BinaryExpression -> . Expression PLUS Expression
    (9) BinaryExpression -> . Expression MINUS Expression
    (10) BinaryExpression -> . Expression TIMES Expression
    (11) BinaryExpression -> . Expression DIVIDE Expression
    (12) BinaryExpression -> . Expression MOD Expression
    (13) BinaryExpression -> . Expression LEQ Expression
    (14) BinaryExpression -> . Expression GEQ Expression
    (15) BinaryExpression -> . Expression LT Expression
    (16) BinaryExpression -> . Expression GT Expression
    (17) BinaryExpression -> . Expression EQ Expression
    (18) BinaryExpression -> . Expression NE Expression
    (81) UnaryExpression -> . Literal
    (82) UnaryExpression -> . FunctionCall
    (83) UnaryExpression -> . BracketCall
    (84) UnaryExpression -> . InitCall
    (85) UnaryExpression -> . DotExpression
    (86) UnaryExpression -> . LPAREN Expression RPAREN
    (87) UnaryExpression -> . DereferenceExpression
    (88) UnaryExpression -> . AddressExpression
    (46) Literal -> . IntLiteral
    (47) Literal -> . BoolLiteral
    (36) FunctionCall -> . TypeExpression LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (43) InitCall -> . TypeExpression LBRACE ArgumentListR RBRACE
    (31) DotExpression -> . TypeExpression
    (32) DotExpression -> . Expression DOT ID
    (30) DereferenceExpression -> . TIMES Expression
    (1) AddressExpression -> . AMPERSAND Expression
    (45) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL
    (73) TypeExpression -> . ID
    (74) TypeExpression -> . ID LT TypeExpressionListR GT

    LPAREN          shift and go to state 74
    TIMES           shift and go to state 82
    AMPERSAND       shift and go to state 92
    INTL            shift and go to state 79
    BOOLL           shift and go to state 93
    ID              shift and go to state 23

    Expression                     shift and go to state 135
    BinaryExpression               shift and go to state 71
    UnaryExpression                shift and go to state 72
    Literal                        shift and go to state 83
    FunctionCall                   shift and go to state 84
    BracketCall                    shift and go to state 85
    InitCall                       shift and go to state 86
    DotExpression                  shift and go to state 87
    DereferenceExpression          shift and go to state 88
    AddressExpression              shift and go to state 89
    IntLiteral                     shift and go to state 90
    BoolLiteral                    shift and go to state 91
    TypeExpression                 shift and go to state 81

state 105

    (9) BinaryExpression -> Expression MINUS . Expression
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (8) BinaryExpression -> . Expression PLUS Expression
    (9) BinaryExpression -> . Expression MINUS Expression
    (10) BinaryExpression -> . Expression TIMES Expression
    (11) BinaryExpression -> . Expression DIVIDE Expression
    (12) BinaryExpression -> . Expression MOD Expression
    (13) BinaryExpression -> . Expression LEQ Expression
    (14) BinaryExpression -> . Expression GEQ Expression
    (15) BinaryExpression -> . Expression LT Expression
    (16) BinaryExpression -> . Expression GT Expression
    (17) BinaryExpression -> . Expression EQ Expression
    (18) BinaryExpression -> . Expression NE Expression
    (81) UnaryExpression -> . Literal
    (82) UnaryExpression -> . FunctionCall
    (83) UnaryExpression -> . BracketCall
    (84) UnaryExpression -> . InitCall
    (85) UnaryExpression -> . DotExpression
    (86) UnaryExpression -> . LPAREN Expression RPAREN
    (87) UnaryExpression -> . DereferenceExpression
    (88) UnaryExpression -> . AddressExpression
    (46) Literal -> . IntLiteral
    (47) Literal -> . BoolLiteral
    (36) FunctionCall -> . TypeExpression LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (43) InitCall -> . TypeExpression LBRACE ArgumentListR RBRACE
    (31) DotExpression -> . TypeExpression
    (32) DotExpression -> . Expression DOT ID
    (30) DereferenceExpression -> . TIMES Expression
    (1) AddressExpression -> . AMPERSAND Expression
    (45) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL
    (73) TypeExpression -> . ID
    (74) TypeExpression -> . ID LT TypeExpressionListR GT

    LPAREN          shift and go to state 74
    TIMES           shift and go to state 82
    AMPERSAND       shift and go to state 92
    INTL            shift and go to state 79
    BOOLL           shift and go to state 93
    ID              shift and go to state 23

    Expression                     shift and go to state 136
    BinaryExpression               shift and go to state 71
    UnaryExpression                shift and go to state 72
    Literal                        shift and go to state 83
    FunctionCall                   shift and go to state 84
    BracketCall                    shift and go to state 85
    InitCall                       shift and go to state 86
    DotExpression                  shift and go to state 87
    DereferenceExpression          shift and go to state 88
    AddressExpression              shift and go to state 89
    IntLiteral                     shift and go to state 90
    BoolLiteral                    shift and go to state 91
    TypeExpression                 shift and go to state 81

state 106

    (10) BinaryExpression -> Expression TIMES . Expression
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (8) BinaryExpression -> . Expression PLUS Expression
    (9) BinaryExpression -> . Expression MINUS Expression
    (10) BinaryExpression -> . Expression TIMES Expression
    (11) BinaryExpression -> . Expression DIVIDE Expression
    (12) BinaryExpression -> . Expression MOD Expression
    (13) BinaryExpression -> . Expression LEQ Expression
    (14) BinaryExpression -> . Expression GEQ Expression
    (15) BinaryExpression -> . Expression LT Expression
    (16) BinaryExpression -> . Expression GT Expression
    (17) BinaryExpression -> . Expression EQ Expression
    (18) BinaryExpression -> . Expression NE Expression
    (81) UnaryExpression -> . Literal
    (82) UnaryExpression -> . FunctionCall
    (83) UnaryExpression -> . BracketCall
    (84) UnaryExpression -> . InitCall
    (85) UnaryExpression -> . DotExpression
    (86) UnaryExpression -> . LPAREN Expression RPAREN
    (87) UnaryExpression -> . DereferenceExpression
    (88) UnaryExpression -> . AddressExpression
    (46) Literal -> . IntLiteral
    (47) Literal -> . BoolLiteral
    (36) FunctionCall -> . TypeExpression LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (43) InitCall -> . TypeExpression LBRACE ArgumentListR RBRACE
    (31) DotExpression -> . TypeExpression
    (32) DotExpression -> . Expression DOT ID
    (30) DereferenceExpression -> . TIMES Expression
    (1) AddressExpression -> . AMPERSAND Expression
    (45) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL
    (73) TypeExpression -> . ID
    (74) TypeExpression -> . ID LT TypeExpressionListR GT

    LPAREN          shift and go to state 74
    TIMES           shift and go to state 82
    AMPERSAND       shift and go to state 92
    INTL            shift and go to state 79
    BOOLL           shift and go to state 93
    ID              shift and go to state 23

    Expression                     shift and go to state 137
    BinaryExpression               shift and go to state 71
    UnaryExpression                shift and go to state 72
    Literal                        shift and go to state 83
    FunctionCall                   shift and go to state 84
    BracketCall                    shift and go to state 85
    InitCall                       shift and go to state 86
    DotExpression                  shift and go to state 87
    DereferenceExpression          shift and go to state 88
    AddressExpression              shift and go to state 89
    IntLiteral                     shift and go to state 90
    BoolLiteral                    shift and go to state 91
    TypeExpression                 shift and go to state 81

state 107

    (11) BinaryExpression -> Expression DIVIDE . Expression
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (8) BinaryExpression -> . Expression PLUS Expression
    (9) BinaryExpression -> . Expression MINUS Expression
    (10) BinaryExpression -> . Expression TIMES Expression
    (11) BinaryExpression -> . Expression DIVIDE Expression
    (12) BinaryExpression -> . Expression MOD Expression
    (13) BinaryExpression -> . Expression LEQ Expression
    (14) BinaryExpression -> . Expression GEQ Expression
    (15) BinaryExpression -> . Expression LT Expression
    (16) BinaryExpression -> . Expression GT Expression
    (17) BinaryExpression -> . Expression EQ Expression
    (18) BinaryExpression -> . Expression NE Expression
    (81) UnaryExpression -> . Literal
    (82) UnaryExpression -> . FunctionCall
    (83) UnaryExpression -> . BracketCall
    (84) UnaryExpression -> . InitCall
    (85) UnaryExpression -> . DotExpression
    (86) UnaryExpression -> . LPAREN Expression RPAREN
    (87) UnaryExpression -> . DereferenceExpression
    (88) UnaryExpression -> . AddressExpression
    (46) Literal -> . IntLiteral
    (47) Literal -> . BoolLiteral
    (36) FunctionCall -> . TypeExpression LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (43) InitCall -> . TypeExpression LBRACE ArgumentListR RBRACE
    (31) DotExpression -> . TypeExpression
    (32) DotExpression -> . Expression DOT ID
    (30) DereferenceExpression -> . TIMES Expression
    (1) AddressExpression -> . AMPERSAND Expression
    (45) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL
    (73) TypeExpression -> . ID
    (74) TypeExpression -> . ID LT TypeExpressionListR GT

    LPAREN          shift and go to state 74
    TIMES           shift and go to state 82
    AMPERSAND       shift and go to state 92
    INTL            shift and go to state 79
    BOOLL           shift and go to state 93
    ID              shift and go to state 23

    Expression                     shift and go to state 138
    BinaryExpression               shift and go to state 71
    UnaryExpression                shift and go to state 72
    Literal                        shift and go to state 83
    FunctionCall                   shift and go to state 84
    BracketCall                    shift and go to state 85
    InitCall                       shift and go to state 86
    DotExpression                  shift and go to state 87
    DereferenceExpression          shift and go to state 88
    AddressExpression              shift and go to state 89
    IntLiteral                     shift and go to state 90
    BoolLiteral                    shift and go to state 91
    TypeExpression                 shift and go to state 81

state 108

    (12) BinaryExpression -> Expression MOD . Expression
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (8) BinaryExpression -> . Expression PLUS Expression
    (9) BinaryExpression -> . Expression MINUS Expression
    (10) BinaryExpression -> . Expression TIMES Expression
    (11) BinaryExpression -> . Expression DIVIDE Expression
    (12) BinaryExpression -> . Expression MOD Expression
    (13) BinaryExpression -> . Expression LEQ Expression
    (14) BinaryExpression -> . Expression GEQ Expression
    (15) BinaryExpression -> . Expression LT Expression
    (16) BinaryExpression -> . Expression GT Expression
    (17) BinaryExpression -> . Expression EQ Expression
    (18) BinaryExpression -> . Expression NE Expression
    (81) UnaryExpression -> . Literal
    (82) UnaryExpression -> . FunctionCall
    (83) UnaryExpression -> . BracketCall
    (84) UnaryExpression -> . InitCall
    (85) UnaryExpression -> . DotExpression
    (86) UnaryExpression -> . LPAREN Expression RPAREN
    (87) UnaryExpression -> . DereferenceExpression
    (88) UnaryExpression -> . AddressExpression
    (46) Literal -> . IntLiteral
    (47) Literal -> . BoolLiteral
    (36) FunctionCall -> . TypeExpression LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (43) InitCall -> . TypeExpression LBRACE ArgumentListR RBRACE
    (31) DotExpression -> . TypeExpression
    (32) DotExpression -> . Expression DOT ID
    (30) DereferenceExpression -> . TIMES Expression
    (1) AddressExpression -> . AMPERSAND Expression
    (45) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL
    (73) TypeExpression -> . ID
    (74) TypeExpression -> . ID LT TypeExpressionListR GT

    LPAREN          shift and go to state 74
    TIMES           shift and go to state 82
    AMPERSAND       shift and go to state 92
    INTL            shift and go to state 79
    BOOLL           shift and go to state 93
    ID              shift and go to state 23

    Expression                     shift and go to state 139
    BinaryExpression               shift and go to state 71
    UnaryExpression                shift and go to state 72
    Literal                        shift and go to state 83
    FunctionCall                   shift and go to state 84
    BracketCall                    shift and go to state 85
    InitCall                       shift and go to state 86
    DotExpression                  shift and go to state 87
    DereferenceExpression          shift and go to state 88
    AddressExpression              shift and go to state 89
    IntLiteral                     shift and go to state 90
    BoolLiteral                    shift and go to state 91
    TypeExpression                 shift and go to state 81

state 109

    (13) BinaryExpression -> Expression LEQ . Expression
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (8) BinaryExpression -> . Expression PLUS Expression
    (9) BinaryExpression -> . Expression MINUS Expression
    (10) BinaryExpression -> . Expression TIMES Expression
    (11) BinaryExpression -> . Expression DIVIDE Expression
    (12) BinaryExpression -> . Expression MOD Expression
    (13) BinaryExpression -> . Expression LEQ Expression
    (14) BinaryExpression -> . Expression GEQ Expression
    (15) BinaryExpression -> . Expression LT Expression
    (16) BinaryExpression -> . Expression GT Expression
    (17) BinaryExpression -> . Expression EQ Expression
    (18) BinaryExpression -> . Expression NE Expression
    (81) UnaryExpression -> . Literal
    (82) UnaryExpression -> . FunctionCall
    (83) UnaryExpression -> . BracketCall
    (84) UnaryExpression -> . InitCall
    (85) UnaryExpression -> . DotExpression
    (86) UnaryExpression -> . LPAREN Expression RPAREN
    (87) UnaryExpression -> . DereferenceExpression
    (88) UnaryExpression -> . AddressExpression
    (46) Literal -> . IntLiteral
    (47) Literal -> . BoolLiteral
    (36) FunctionCall -> . TypeExpression LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (43) InitCall -> . TypeExpression LBRACE ArgumentListR RBRACE
    (31) DotExpression -> . TypeExpression
    (32) DotExpression -> . Expression DOT ID
    (30) DereferenceExpression -> . TIMES Expression
    (1) AddressExpression -> . AMPERSAND Expression
    (45) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL
    (73) TypeExpression -> . ID
    (74) TypeExpression -> . ID LT TypeExpressionListR GT

    LPAREN          shift and go to state 74
    TIMES           shift and go to state 82
    AMPERSAND       shift and go to state 92
    INTL            shift and go to state 79
    BOOLL           shift and go to state 93
    ID              shift and go to state 23

    Expression                     shift and go to state 140
    BinaryExpression               shift and go to state 71
    UnaryExpression                shift and go to state 72
    Literal                        shift and go to state 83
    FunctionCall                   shift and go to state 84
    BracketCall                    shift and go to state 85
    InitCall                       shift and go to state 86
    DotExpression                  shift and go to state 87
    DereferenceExpression          shift and go to state 88
    AddressExpression              shift and go to state 89
    IntLiteral                     shift and go to state 90
    BoolLiteral                    shift and go to state 91
    TypeExpression                 shift and go to state 81

state 110

    (14) BinaryExpression -> Expression GEQ . Expression
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (8) BinaryExpression -> . Expression PLUS Expression
    (9) BinaryExpression -> . Expression MINUS Expression
    (10) BinaryExpression -> . Expression TIMES Expression
    (11) BinaryExpression -> . Expression DIVIDE Expression
    (12) BinaryExpression -> . Expression MOD Expression
    (13) BinaryExpression -> . Expression LEQ Expression
    (14) BinaryExpression -> . Expression GEQ Expression
    (15) BinaryExpression -> . Expression LT Expression
    (16) BinaryExpression -> . Expression GT Expression
    (17) BinaryExpression -> . Expression EQ Expression
    (18) BinaryExpression -> . Expression NE Expression
    (81) UnaryExpression -> . Literal
    (82) UnaryExpression -> . FunctionCall
    (83) UnaryExpression -> . BracketCall
    (84) UnaryExpression -> . InitCall
    (85) UnaryExpression -> . DotExpression
    (86) UnaryExpression -> . LPAREN Expression RPAREN
    (87) UnaryExpression -> . DereferenceExpression
    (88) UnaryExpression -> . AddressExpression
    (46) Literal -> . IntLiteral
    (47) Literal -> . BoolLiteral
    (36) FunctionCall -> . TypeExpression LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (43) InitCall -> . TypeExpression LBRACE ArgumentListR RBRACE
    (31) DotExpression -> . TypeExpression
    (32) DotExpression -> . Expression DOT ID
    (30) DereferenceExpression -> . TIMES Expression
    (1) AddressExpression -> . AMPERSAND Expression
    (45) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL
    (73) TypeExpression -> . ID
    (74) TypeExpression -> . ID LT TypeExpressionListR GT

    LPAREN          shift and go to state 74
    TIMES           shift and go to state 82
    AMPERSAND       shift and go to state 92
    INTL            shift and go to state 79
    BOOLL           shift and go to state 93
    ID              shift and go to state 23

    Expression                     shift and go to state 141
    BinaryExpression               shift and go to state 71
    UnaryExpression                shift and go to state 72
    Literal                        shift and go to state 83
    FunctionCall                   shift and go to state 84
    BracketCall                    shift and go to state 85
    InitCall                       shift and go to state 86
    DotExpression                  shift and go to state 87
    DereferenceExpression          shift and go to state 88
    AddressExpression              shift and go to state 89
    IntLiteral                     shift and go to state 90
    BoolLiteral                    shift and go to state 91
    TypeExpression                 shift and go to state 81

state 111

    (15) BinaryExpression -> Expression LT . Expression
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (8) BinaryExpression -> . Expression PLUS Expression
    (9) BinaryExpression -> . Expression MINUS Expression
    (10) BinaryExpression -> . Expression TIMES Expression
    (11) BinaryExpression -> . Expression DIVIDE Expression
    (12) BinaryExpression -> . Expression MOD Expression
    (13) BinaryExpression -> . Expression LEQ Expression
    (14) BinaryExpression -> . Expression GEQ Expression
    (15) BinaryExpression -> . Expression LT Expression
    (16) BinaryExpression -> . Expression GT Expression
    (17) BinaryExpression -> . Expression EQ Expression
    (18) BinaryExpression -> . Expression NE Expression
    (81) UnaryExpression -> . Literal
    (82) UnaryExpression -> . FunctionCall
    (83) UnaryExpression -> . BracketCall
    (84) UnaryExpression -> . InitCall
    (85) UnaryExpression -> . DotExpression
    (86) UnaryExpression -> . LPAREN Expression RPAREN
    (87) UnaryExpression -> . DereferenceExpression
    (88) UnaryExpression -> . AddressExpression
    (46) Literal -> . IntLiteral
    (47) Literal -> . BoolLiteral
    (36) FunctionCall -> . TypeExpression LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (43) InitCall -> . TypeExpression LBRACE ArgumentListR RBRACE
    (31) DotExpression -> . TypeExpression
    (32) DotExpression -> . Expression DOT ID
    (30) DereferenceExpression -> . TIMES Expression
    (1) AddressExpression -> . AMPERSAND Expression
    (45) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL
    (73) TypeExpression -> . ID
    (74) TypeExpression -> . ID LT TypeExpressionListR GT

    LPAREN          shift and go to state 74
    TIMES           shift and go to state 82
    AMPERSAND       shift and go to state 92
    INTL            shift and go to state 79
    BOOLL           shift and go to state 93
    ID              shift and go to state 23

    Expression                     shift and go to state 142
    BinaryExpression               shift and go to state 71
    UnaryExpression                shift and go to state 72
    Literal                        shift and go to state 83
    FunctionCall                   shift and go to state 84
    BracketCall                    shift and go to state 85
    InitCall                       shift and go to state 86
    DotExpression                  shift and go to state 87
    DereferenceExpression          shift and go to state 88
    AddressExpression              shift and go to state 89
    IntLiteral                     shift and go to state 90
    BoolLiteral                    shift and go to state 91
    TypeExpression                 shift and go to state 81

state 112

    (16) BinaryExpression -> Expression GT . Expression
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (8) BinaryExpression -> . Expression PLUS Expression
    (9) BinaryExpression -> . Expression MINUS Expression
    (10) BinaryExpression -> . Expression TIMES Expression
    (11) BinaryExpression -> . Expression DIVIDE Expression
    (12) BinaryExpression -> . Expression MOD Expression
    (13) BinaryExpression -> . Expression LEQ Expression
    (14) BinaryExpression -> . Expression GEQ Expression
    (15) BinaryExpression -> . Expression LT Expression
    (16) BinaryExpression -> . Expression GT Expression
    (17) BinaryExpression -> . Expression EQ Expression
    (18) BinaryExpression -> . Expression NE Expression
    (81) UnaryExpression -> . Literal
    (82) UnaryExpression -> . FunctionCall
    (83) UnaryExpression -> . BracketCall
    (84) UnaryExpression -> . InitCall
    (85) UnaryExpression -> . DotExpression
    (86) UnaryExpression -> . LPAREN Expression RPAREN
    (87) UnaryExpression -> . DereferenceExpression
    (88) UnaryExpression -> . AddressExpression
    (46) Literal -> . IntLiteral
    (47) Literal -> . BoolLiteral
    (36) FunctionCall -> . TypeExpression LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (43) InitCall -> . TypeExpression LBRACE ArgumentListR RBRACE
    (31) DotExpression -> . TypeExpression
    (32) DotExpression -> . Expression DOT ID
    (30) DereferenceExpression -> . TIMES Expression
    (1) AddressExpression -> . AMPERSAND Expression
    (45) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL
    (73) TypeExpression -> . ID
    (74) TypeExpression -> . ID LT TypeExpressionListR GT

    LPAREN          shift and go to state 74
    TIMES           shift and go to state 82
    AMPERSAND       shift and go to state 92
    INTL            shift and go to state 79
    BOOLL           shift and go to state 93
    ID              shift and go to state 23

    Expression                     shift and go to state 143
    BinaryExpression               shift and go to state 71
    UnaryExpression                shift and go to state 72
    Literal                        shift and go to state 83
    FunctionCall                   shift and go to state 84
    BracketCall                    shift and go to state 85
    InitCall                       shift and go to state 86
    DotExpression                  shift and go to state 87
    DereferenceExpression          shift and go to state 88
    AddressExpression              shift and go to state 89
    IntLiteral                     shift and go to state 90
    BoolLiteral                    shift and go to state 91
    TypeExpression                 shift and go to state 81

state 113

    (17) BinaryExpression -> Expression EQ . Expression
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (8) BinaryExpression -> . Expression PLUS Expression
    (9) BinaryExpression -> . Expression MINUS Expression
    (10) BinaryExpression -> . Expression TIMES Expression
    (11) BinaryExpression -> . Expression DIVIDE Expression
    (12) BinaryExpression -> . Expression MOD Expression
    (13) BinaryExpression -> . Expression LEQ Expression
    (14) BinaryExpression -> . Expression GEQ Expression
    (15) BinaryExpression -> . Expression LT Expression
    (16) BinaryExpression -> . Expression GT Expression
    (17) BinaryExpression -> . Expression EQ Expression
    (18) BinaryExpression -> . Expression NE Expression
    (81) UnaryExpression -> . Literal
    (82) UnaryExpression -> . FunctionCall
    (83) UnaryExpression -> . BracketCall
    (84) UnaryExpression -> . InitCall
    (85) UnaryExpression -> . DotExpression
    (86) UnaryExpression -> . LPAREN Expression RPAREN
    (87) UnaryExpression -> . DereferenceExpression
    (88) UnaryExpression -> . AddressExpression
    (46) Literal -> . IntLiteral
    (47) Literal -> . BoolLiteral
    (36) FunctionCall -> . TypeExpression LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (43) InitCall -> . TypeExpression LBRACE ArgumentListR RBRACE
    (31) DotExpression -> . TypeExpression
    (32) DotExpression -> . Expression DOT ID
    (30) DereferenceExpression -> . TIMES Expression
    (1) AddressExpression -> . AMPERSAND Expression
    (45) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL
    (73) TypeExpression -> . ID
    (74) TypeExpression -> . ID LT TypeExpressionListR GT

    LPAREN          shift and go to state 74
    TIMES           shift and go to state 82
    AMPERSAND       shift and go to state 92
    INTL            shift and go to state 79
    BOOLL           shift and go to state 93
    ID              shift and go to state 23

    Expression                     shift and go to state 144
    BinaryExpression               shift and go to state 71
    UnaryExpression                shift and go to state 72
    Literal                        shift and go to state 83
    FunctionCall                   shift and go to state 84
    BracketCall                    shift and go to state 85
    InitCall                       shift and go to state 86
    DotExpression                  shift and go to state 87
    DereferenceExpression          shift and go to state 88
    AddressExpression              shift and go to state 89
    IntLiteral                     shift and go to state 90
    BoolLiteral                    shift and go to state 91
    TypeExpression                 shift and go to state 81

state 114

    (18) BinaryExpression -> Expression NE . Expression
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (8) BinaryExpression -> . Expression PLUS Expression
    (9) BinaryExpression -> . Expression MINUS Expression
    (10) BinaryExpression -> . Expression TIMES Expression
    (11) BinaryExpression -> . Expression DIVIDE Expression
    (12) BinaryExpression -> . Expression MOD Expression
    (13) BinaryExpression -> . Expression LEQ Expression
    (14) BinaryExpression -> . Expression GEQ Expression
    (15) BinaryExpression -> . Expression LT Expression
    (16) BinaryExpression -> . Expression GT Expression
    (17) BinaryExpression -> . Expression EQ Expression
    (18) BinaryExpression -> . Expression NE Expression
    (81) UnaryExpression -> . Literal
    (82) UnaryExpression -> . FunctionCall
    (83) UnaryExpression -> . BracketCall
    (84) UnaryExpression -> . InitCall
    (85) UnaryExpression -> . DotExpression
    (86) UnaryExpression -> . LPAREN Expression RPAREN
    (87) UnaryExpression -> . DereferenceExpression
    (88) UnaryExpression -> . AddressExpression
    (46) Literal -> . IntLiteral
    (47) Literal -> . BoolLiteral
    (36) FunctionCall -> . TypeExpression LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (43) InitCall -> . TypeExpression LBRACE ArgumentListR RBRACE
    (31) DotExpression -> . TypeExpression
    (32) DotExpression -> . Expression DOT ID
    (30) DereferenceExpression -> . TIMES Expression
    (1) AddressExpression -> . AMPERSAND Expression
    (45) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL
    (73) TypeExpression -> . ID
    (74) TypeExpression -> . ID LT TypeExpressionListR GT

    LPAREN          shift and go to state 74
    TIMES           shift and go to state 82
    AMPERSAND       shift and go to state 92
    INTL            shift and go to state 79
    BOOLL           shift and go to state 93
    ID              shift and go to state 23

    Expression                     shift and go to state 145
    BinaryExpression               shift and go to state 71
    UnaryExpression                shift and go to state 72
    Literal                        shift and go to state 83
    FunctionCall                   shift and go to state 84
    BracketCall                    shift and go to state 85
    InitCall                       shift and go to state 86
    DotExpression                  shift and go to state 87
    DereferenceExpression          shift and go to state 88
    AddressExpression              shift and go to state 89
    IntLiteral                     shift and go to state 90
    BoolLiteral                    shift and go to state 91
    TypeExpression                 shift and go to state 81

state 115

    (23) BracketCall -> Expression LBRACKET . Expression RBRACKET
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (8) BinaryExpression -> . Expression PLUS Expression
    (9) BinaryExpression -> . Expression MINUS Expression
    (10) BinaryExpression -> . Expression TIMES Expression
    (11) BinaryExpression -> . Expression DIVIDE Expression
    (12) BinaryExpression -> . Expression MOD Expression
    (13) BinaryExpression -> . Expression LEQ Expression
    (14) BinaryExpression -> . Expression GEQ Expression
    (15) BinaryExpression -> . Expression LT Expression
    (16) BinaryExpression -> . Expression GT Expression
    (17) BinaryExpression -> . Expression EQ Expression
    (18) BinaryExpression -> . Expression NE Expression
    (81) UnaryExpression -> . Literal
    (82) UnaryExpression -> . FunctionCall
    (83) UnaryExpression -> . BracketCall
    (84) UnaryExpression -> . InitCall
    (85) UnaryExpression -> . DotExpression
    (86) UnaryExpression -> . LPAREN Expression RPAREN
    (87) UnaryExpression -> . DereferenceExpression
    (88) UnaryExpression -> . AddressExpression
    (46) Literal -> . IntLiteral
    (47) Literal -> . BoolLiteral
    (36) FunctionCall -> . TypeExpression LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (43) InitCall -> . TypeExpression LBRACE ArgumentListR RBRACE
    (31) DotExpression -> . TypeExpression
    (32) DotExpression -> . Expression DOT ID
    (30) DereferenceExpression -> . TIMES Expression
    (1) AddressExpression -> . AMPERSAND Expression
    (45) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL
    (73) TypeExpression -> . ID
    (74) TypeExpression -> . ID LT TypeExpressionListR GT

    LPAREN          shift and go to state 74
    TIMES           shift and go to state 82
    AMPERSAND       shift and go to state 92
    INTL            shift and go to state 79
    BOOLL           shift and go to state 93
    ID              shift and go to state 23

    Expression                     shift and go to state 146
    BinaryExpression               shift and go to state 71
    UnaryExpression                shift and go to state 72
    Literal                        shift and go to state 83
    FunctionCall                   shift and go to state 84
    BracketCall                    shift and go to state 85
    InitCall                       shift and go to state 86
    DotExpression                  shift and go to state 87
    DereferenceExpression          shift and go to state 88
    AddressExpression              shift and go to state 89
    IntLiteral                     shift and go to state 90
    BoolLiteral                    shift and go to state 91
    TypeExpression                 shift and go to state 81

state 116

    (32) DotExpression -> Expression DOT . ID

    ID              shift and go to state 147


state 117

    (44) InitStatement -> LET ID . ASSIGNMENT Expression SEMICOLON
    (80) TypeStatement -> LET ID . EQ TypeExpression SEMICOLON

    ASSIGNMENT      shift and go to state 148
    EQ              shift and go to state 52


state 118

    (41) IfElseStatement -> IF LPAREN . Expression RPAREN Block ELSE Block
    (42) IfElseStatement -> IF LPAREN . Expression RPAREN Block
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (8) BinaryExpression -> . Expression PLUS Expression
    (9) BinaryExpression -> . Expression MINUS Expression
    (10) BinaryExpression -> . Expression TIMES Expression
    (11) BinaryExpression -> . Expression DIVIDE Expression
    (12) BinaryExpression -> . Expression MOD Expression
    (13) BinaryExpression -> . Expression LEQ Expression
    (14) BinaryExpression -> . Expression GEQ Expression
    (15) BinaryExpression -> . Expression LT Expression
    (16) BinaryExpression -> . Expression GT Expression
    (17) BinaryExpression -> . Expression EQ Expression
    (18) BinaryExpression -> . Expression NE Expression
    (81) UnaryExpression -> . Literal
    (82) UnaryExpression -> . FunctionCall
    (83) UnaryExpression -> . BracketCall
    (84) UnaryExpression -> . InitCall
    (85) UnaryExpression -> . DotExpression
    (86) UnaryExpression -> . LPAREN Expression RPAREN
    (87) UnaryExpression -> . DereferenceExpression
    (88) UnaryExpression -> . AddressExpression
    (46) Literal -> . IntLiteral
    (47) Literal -> . BoolLiteral
    (36) FunctionCall -> . TypeExpression LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (43) InitCall -> . TypeExpression LBRACE ArgumentListR RBRACE
    (31) DotExpression -> . TypeExpression
    (32) DotExpression -> . Expression DOT ID
    (30) DereferenceExpression -> . TIMES Expression
    (1) AddressExpression -> . AMPERSAND Expression
    (45) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL
    (73) TypeExpression -> . ID
    (74) TypeExpression -> . ID LT TypeExpressionListR GT

    LPAREN          shift and go to state 74
    TIMES           shift and go to state 82
    AMPERSAND       shift and go to state 92
    INTL            shift and go to state 79
    BOOLL           shift and go to state 93
    ID              shift and go to state 23

    Expression                     shift and go to state 149
    BinaryExpression               shift and go to state 71
    UnaryExpression                shift and go to state 72
    Literal                        shift and go to state 83
    FunctionCall                   shift and go to state 84
    BracketCall                    shift and go to state 85
    InitCall                       shift and go to state 86
    DotExpression                  shift and go to state 87
    DereferenceExpression          shift and go to state 88
    AddressExpression              shift and go to state 89
    IntLiteral                     shift and go to state 90
    BoolLiteral                    shift and go to state 91
    TypeExpression                 shift and go to state 81

state 119

    (86) UnaryExpression -> LPAREN Expression . RPAREN
    (8) BinaryExpression -> Expression . PLUS Expression
    (9) BinaryExpression -> Expression . MINUS Expression
    (10) BinaryExpression -> Expression . TIMES Expression
    (11) BinaryExpression -> Expression . DIVIDE Expression
    (12) BinaryExpression -> Expression . MOD Expression
    (13) BinaryExpression -> Expression . LEQ Expression
    (14) BinaryExpression -> Expression . GEQ Expression
    (15) BinaryExpression -> Expression . LT Expression
    (16) BinaryExpression -> Expression . GT Expression
    (17) BinaryExpression -> Expression . EQ Expression
    (18) BinaryExpression -> Expression . NE Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET
    (32) DotExpression -> Expression . DOT ID

    RPAREN          shift and go to state 150
    PLUS            shift and go to state 104
    MINUS           shift and go to state 105
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107
    MOD             shift and go to state 108
    LEQ             shift and go to state 109
    GEQ             shift and go to state 110
    LT              shift and go to state 111
    GT              shift and go to state 112
    EQ              shift and go to state 113
    NE              shift and go to state 114
    LBRACKET        shift and go to state 115
    DOT             shift and go to state 116


state 120

    (35) ForStatement -> FOR LPAREN . Statement Expression SEMICOLON Statement RPAREN Block
    (54) Statement -> . AssignmentStatement
    (55) Statement -> . InitStatement
    (56) Statement -> . Expression SEMICOLON
    (57) Statement -> . IfElseStatement
    (58) Statement -> . ForStatement
    (59) Statement -> . WhileStatement
    (60) Statement -> . BreakStatement
    (61) Statement -> . ReturnStatement
    (62) Statement -> . BlockStatement
    (63) Statement -> . BlankStatement
    (64) Statement -> . TypeStatement
    (6) AssignmentStatement -> . Expression ASSIGNMENT Expression SEMICOLON
    (7) AssignmentStatement -> . Expression ASSIGNMENT Expression
    (44) InitStatement -> . LET ID ASSIGNMENT Expression SEMICOLON
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (41) IfElseStatement -> . IF LPAREN Expression RPAREN Block ELSE Block
    (42) IfElseStatement -> . IF LPAREN Expression RPAREN Block
    (35) ForStatement -> . FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block
    (89) WhileStatement -> . WHILE LPAREN Expression RPAREN Block
    (24) BreakStatement -> . BREAK INTL SEMICOLON
    (25) BreakStatement -> . BREAK SEMICOLON
    (52) ReturnStatement -> . RETURN Expression SEMICOLON
    (53) ReturnStatement -> . RETURN SEMICOLON
    (21) BlockStatement -> . Block
    (19) BlankStatement -> . SEMICOLON
    (80) TypeStatement -> . LET ID EQ TypeExpression SEMICOLON
    (8) BinaryExpression -> . Expression PLUS Expression
    (9) BinaryExpression -> . Expression MINUS Expression
    (10) BinaryExpression -> . Expression TIMES Expression
    (11) BinaryExpression -> . Expression DIVIDE Expression
    (12) BinaryExpression -> . Expression MOD Expression
    (13) BinaryExpression -> . Expression LEQ Expression
    (14) BinaryExpression -> . Expression GEQ Expression
    (15) BinaryExpression -> . Expression LT Expression
    (16) BinaryExpression -> . Expression GT Expression
    (17) BinaryExpression -> . Expression EQ Expression
    (18) BinaryExpression -> . Expression NE Expression
    (81) UnaryExpression -> . Literal
    (82) UnaryExpression -> . FunctionCall
    (83) UnaryExpression -> . BracketCall
    (84) UnaryExpression -> . InitCall
    (85) UnaryExpression -> . DotExpression
    (86) UnaryExpression -> . LPAREN Expression RPAREN
    (87) UnaryExpression -> . DereferenceExpression
    (88) UnaryExpression -> . AddressExpression
    (20) Block -> . LBRACE StatementListR RBRACE
    (46) Literal -> . IntLiteral
    (47) Literal -> . BoolLiteral
    (36) FunctionCall -> . TypeExpression LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (43) InitCall -> . TypeExpression LBRACE ArgumentListR RBRACE
    (31) DotExpression -> . TypeExpression
    (32) DotExpression -> . Expression DOT ID
    (30) DereferenceExpression -> . TIMES Expression
    (1) AddressExpression -> . AMPERSAND Expression
    (45) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL
    (73) TypeExpression -> . ID
    (74) TypeExpression -> . ID LT TypeExpressionListR GT

    LET             shift and go to state 70
    IF              shift and go to state 73
    FOR             shift and go to state 76
    WHILE           shift and go to state 77
    BREAK           shift and go to state 78
    RETURN          shift and go to state 80
    SEMICOLON       shift and go to state 61
    LPAREN          shift and go to state 74
    LBRACE          shift and go to state 45
    TIMES           shift and go to state 82
    AMPERSAND       shift and go to state 92
    INTL            shift and go to state 79
    BOOLL           shift and go to state 93
    ID              shift and go to state 23

    Statement                      shift and go to state 151
    Expression                     shift and go to state 60
    Block                          shift and go to state 75
    AssignmentStatement            shift and go to state 58
    InitStatement                  shift and go to state 59
    IfElseStatement                shift and go to state 62
    ForStatement                   shift and go to state 63
    WhileStatement                 shift and go to state 64
    BreakStatement                 shift and go to state 65
    ReturnStatement                shift and go to state 66
    BlockStatement                 shift and go to state 67
    BlankStatement                 shift and go to state 68
    TypeStatement                  shift and go to state 69
    BinaryExpression               shift and go to state 71
    UnaryExpression                shift and go to state 72
    TypeExpression                 shift and go to state 81
    Literal                        shift and go to state 83
    FunctionCall                   shift and go to state 84
    BracketCall                    shift and go to state 85
    InitCall                       shift and go to state 86
    DotExpression                  shift and go to state 87
    DereferenceExpression          shift and go to state 88
    AddressExpression              shift and go to state 89
    IntLiteral                     shift and go to state 90
    BoolLiteral                    shift and go to state 91

state 121

    (89) WhileStatement -> WHILE LPAREN . Expression RPAREN Block
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (8) BinaryExpression -> . Expression PLUS Expression
    (9) BinaryExpression -> . Expression MINUS Expression
    (10) BinaryExpression -> . Expression TIMES Expression
    (11) BinaryExpression -> . Expression DIVIDE Expression
    (12) BinaryExpression -> . Expression MOD Expression
    (13) BinaryExpression -> . Expression LEQ Expression
    (14) BinaryExpression -> . Expression GEQ Expression
    (15) BinaryExpression -> . Expression LT Expression
    (16) BinaryExpression -> . Expression GT Expression
    (17) BinaryExpression -> . Expression EQ Expression
    (18) BinaryExpression -> . Expression NE Expression
    (81) UnaryExpression -> . Literal
    (82) UnaryExpression -> . FunctionCall
    (83) UnaryExpression -> . BracketCall
    (84) UnaryExpression -> . InitCall
    (85) UnaryExpression -> . DotExpression
    (86) UnaryExpression -> . LPAREN Expression RPAREN
    (87) UnaryExpression -> . DereferenceExpression
    (88) UnaryExpression -> . AddressExpression
    (46) Literal -> . IntLiteral
    (47) Literal -> . BoolLiteral
    (36) FunctionCall -> . TypeExpression LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (43) InitCall -> . TypeExpression LBRACE ArgumentListR RBRACE
    (31) DotExpression -> . TypeExpression
    (32) DotExpression -> . Expression DOT ID
    (30) DereferenceExpression -> . TIMES Expression
    (1) AddressExpression -> . AMPERSAND Expression
    (45) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL
    (73) TypeExpression -> . ID
    (74) TypeExpression -> . ID LT TypeExpressionListR GT

    LPAREN          shift and go to state 74
    TIMES           shift and go to state 82
    AMPERSAND       shift and go to state 92
    INTL            shift and go to state 79
    BOOLL           shift and go to state 93
    ID              shift and go to state 23

    Expression                     shift and go to state 152
    BinaryExpression               shift and go to state 71
    UnaryExpression                shift and go to state 72
    Literal                        shift and go to state 83
    FunctionCall                   shift and go to state 84
    BracketCall                    shift and go to state 85
    InitCall                       shift and go to state 86
    DotExpression                  shift and go to state 87
    DereferenceExpression          shift and go to state 88
    AddressExpression              shift and go to state 89
    IntLiteral                     shift and go to state 90
    BoolLiteral                    shift and go to state 91
    TypeExpression                 shift and go to state 81

state 122

    (24) BreakStatement -> BREAK INTL . SEMICOLON

    SEMICOLON       shift and go to state 153


state 123

    (25) BreakStatement -> BREAK SEMICOLON .

    LET             reduce using rule 25 (BreakStatement -> BREAK SEMICOLON .)
    IF              reduce using rule 25 (BreakStatement -> BREAK SEMICOLON .)
    FOR             reduce using rule 25 (BreakStatement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 25 (BreakStatement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 25 (BreakStatement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 25 (BreakStatement -> BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 25 (BreakStatement -> BREAK SEMICOLON .)
    LPAREN          reduce using rule 25 (BreakStatement -> BREAK SEMICOLON .)
    LBRACE          reduce using rule 25 (BreakStatement -> BREAK SEMICOLON .)
    TIMES           reduce using rule 25 (BreakStatement -> BREAK SEMICOLON .)
    AMPERSAND       reduce using rule 25 (BreakStatement -> BREAK SEMICOLON .)
    INTL            reduce using rule 25 (BreakStatement -> BREAK SEMICOLON .)
    BOOLL           reduce using rule 25 (BreakStatement -> BREAK SEMICOLON .)
    ID              reduce using rule 25 (BreakStatement -> BREAK SEMICOLON .)
    RBRACE          reduce using rule 25 (BreakStatement -> BREAK SEMICOLON .)
    RPAREN          reduce using rule 25 (BreakStatement -> BREAK SEMICOLON .)


state 124

    (52) ReturnStatement -> RETURN Expression . SEMICOLON
    (8) BinaryExpression -> Expression . PLUS Expression
    (9) BinaryExpression -> Expression . MINUS Expression
    (10) BinaryExpression -> Expression . TIMES Expression
    (11) BinaryExpression -> Expression . DIVIDE Expression
    (12) BinaryExpression -> Expression . MOD Expression
    (13) BinaryExpression -> Expression . LEQ Expression
    (14) BinaryExpression -> Expression . GEQ Expression
    (15) BinaryExpression -> Expression . LT Expression
    (16) BinaryExpression -> Expression . GT Expression
    (17) BinaryExpression -> Expression . EQ Expression
    (18) BinaryExpression -> Expression . NE Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET
    (32) DotExpression -> Expression . DOT ID

    SEMICOLON       shift and go to state 154
    PLUS            shift and go to state 104
    MINUS           shift and go to state 105
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107
    MOD             shift and go to state 108
    LEQ             shift and go to state 109
    GEQ             shift and go to state 110
    LT              shift and go to state 111
    GT              shift and go to state 112
    EQ              shift and go to state 113
    NE              shift and go to state 114
    LBRACKET        shift and go to state 115
    DOT             shift and go to state 116


state 125

    (53) ReturnStatement -> RETURN SEMICOLON .

    LET             reduce using rule 53 (ReturnStatement -> RETURN SEMICOLON .)
    IF              reduce using rule 53 (ReturnStatement -> RETURN SEMICOLON .)
    FOR             reduce using rule 53 (ReturnStatement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 53 (ReturnStatement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 53 (ReturnStatement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 53 (ReturnStatement -> RETURN SEMICOLON .)
    SEMICOLON       reduce using rule 53 (ReturnStatement -> RETURN SEMICOLON .)
    LPAREN          reduce using rule 53 (ReturnStatement -> RETURN SEMICOLON .)
    LBRACE          reduce using rule 53 (ReturnStatement -> RETURN SEMICOLON .)
    TIMES           reduce using rule 53 (ReturnStatement -> RETURN SEMICOLON .)
    AMPERSAND       reduce using rule 53 (ReturnStatement -> RETURN SEMICOLON .)
    INTL            reduce using rule 53 (ReturnStatement -> RETURN SEMICOLON .)
    BOOLL           reduce using rule 53 (ReturnStatement -> RETURN SEMICOLON .)
    ID              reduce using rule 53 (ReturnStatement -> RETURN SEMICOLON .)
    RBRACE          reduce using rule 53 (ReturnStatement -> RETURN SEMICOLON .)
    RPAREN          reduce using rule 53 (ReturnStatement -> RETURN SEMICOLON .)


state 126

    (36) FunctionCall -> TypeExpression LPAREN . ArgumentListR RPAREN
    (3) ArgumentListR -> . Argument COMMA ArgumentListR
    (4) ArgumentListR -> . Argument
    (5) ArgumentListR -> . empty
    (2) Argument -> . Expression
    (90) empty -> .
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (8) BinaryExpression -> . Expression PLUS Expression
    (9) BinaryExpression -> . Expression MINUS Expression
    (10) BinaryExpression -> . Expression TIMES Expression
    (11) BinaryExpression -> . Expression DIVIDE Expression
    (12) BinaryExpression -> . Expression MOD Expression
    (13) BinaryExpression -> . Expression LEQ Expression
    (14) BinaryExpression -> . Expression GEQ Expression
    (15) BinaryExpression -> . Expression LT Expression
    (16) BinaryExpression -> . Expression GT Expression
    (17) BinaryExpression -> . Expression EQ Expression
    (18) BinaryExpression -> . Expression NE Expression
    (81) UnaryExpression -> . Literal
    (82) UnaryExpression -> . FunctionCall
    (83) UnaryExpression -> . BracketCall
    (84) UnaryExpression -> . InitCall
    (85) UnaryExpression -> . DotExpression
    (86) UnaryExpression -> . LPAREN Expression RPAREN
    (87) UnaryExpression -> . DereferenceExpression
    (88) UnaryExpression -> . AddressExpression
    (46) Literal -> . IntLiteral
    (47) Literal -> . BoolLiteral
    (36) FunctionCall -> . TypeExpression LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (43) InitCall -> . TypeExpression LBRACE ArgumentListR RBRACE
    (31) DotExpression -> . TypeExpression
    (32) DotExpression -> . Expression DOT ID
    (30) DereferenceExpression -> . TIMES Expression
    (1) AddressExpression -> . AMPERSAND Expression
    (45) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL
    (73) TypeExpression -> . ID
    (74) TypeExpression -> . ID LT TypeExpressionListR GT

    RPAREN          reduce using rule 90 (empty -> .)
    LPAREN          shift and go to state 74
    TIMES           shift and go to state 82
    AMPERSAND       shift and go to state 92
    INTL            shift and go to state 79
    BOOLL           shift and go to state 93
    ID              shift and go to state 23

    TypeExpression                 shift and go to state 81
    ArgumentListR                  shift and go to state 155
    Argument                       shift and go to state 156
    empty                          shift and go to state 157
    Expression                     shift and go to state 158
    BinaryExpression               shift and go to state 71
    UnaryExpression                shift and go to state 72
    Literal                        shift and go to state 83
    FunctionCall                   shift and go to state 84
    BracketCall                    shift and go to state 85
    InitCall                       shift and go to state 86
    DotExpression                  shift and go to state 87
    DereferenceExpression          shift and go to state 88
    AddressExpression              shift and go to state 89
    IntLiteral                     shift and go to state 90
    BoolLiteral                    shift and go to state 91

state 127

    (43) InitCall -> TypeExpression LBRACE . ArgumentListR RBRACE
    (3) ArgumentListR -> . Argument COMMA ArgumentListR
    (4) ArgumentListR -> . Argument
    (5) ArgumentListR -> . empty
    (2) Argument -> . Expression
    (90) empty -> .
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (8) BinaryExpression -> . Expression PLUS Expression
    (9) BinaryExpression -> . Expression MINUS Expression
    (10) BinaryExpression -> . Expression TIMES Expression
    (11) BinaryExpression -> . Expression DIVIDE Expression
    (12) BinaryExpression -> . Expression MOD Expression
    (13) BinaryExpression -> . Expression LEQ Expression
    (14) BinaryExpression -> . Expression GEQ Expression
    (15) BinaryExpression -> . Expression LT Expression
    (16) BinaryExpression -> . Expression GT Expression
    (17) BinaryExpression -> . Expression EQ Expression
    (18) BinaryExpression -> . Expression NE Expression
    (81) UnaryExpression -> . Literal
    (82) UnaryExpression -> . FunctionCall
    (83) UnaryExpression -> . BracketCall
    (84) UnaryExpression -> . InitCall
    (85) UnaryExpression -> . DotExpression
    (86) UnaryExpression -> . LPAREN Expression RPAREN
    (87) UnaryExpression -> . DereferenceExpression
    (88) UnaryExpression -> . AddressExpression
    (46) Literal -> . IntLiteral
    (47) Literal -> . BoolLiteral
    (36) FunctionCall -> . TypeExpression LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (43) InitCall -> . TypeExpression LBRACE ArgumentListR RBRACE
    (31) DotExpression -> . TypeExpression
    (32) DotExpression -> . Expression DOT ID
    (30) DereferenceExpression -> . TIMES Expression
    (1) AddressExpression -> . AMPERSAND Expression
    (45) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL
    (73) TypeExpression -> . ID
    (74) TypeExpression -> . ID LT TypeExpressionListR GT

    RBRACE          reduce using rule 90 (empty -> .)
    LPAREN          shift and go to state 74
    TIMES           shift and go to state 82
    AMPERSAND       shift and go to state 92
    INTL            shift and go to state 79
    BOOLL           shift and go to state 93
    ID              shift and go to state 23

    TypeExpression                 shift and go to state 81
    ArgumentListR                  shift and go to state 159
    Argument                       shift and go to state 156
    empty                          shift and go to state 157
    Expression                     shift and go to state 158
    BinaryExpression               shift and go to state 71
    UnaryExpression                shift and go to state 72
    Literal                        shift and go to state 83
    FunctionCall                   shift and go to state 84
    BracketCall                    shift and go to state 85
    InitCall                       shift and go to state 86
    DotExpression                  shift and go to state 87
    DereferenceExpression          shift and go to state 88
    AddressExpression              shift and go to state 89
    IntLiteral                     shift and go to state 90
    BoolLiteral                    shift and go to state 91

state 128

    (30) DereferenceExpression -> TIMES Expression .
    (8) BinaryExpression -> Expression . PLUS Expression
    (9) BinaryExpression -> Expression . MINUS Expression
    (10) BinaryExpression -> Expression . TIMES Expression
    (11) BinaryExpression -> Expression . DIVIDE Expression
    (12) BinaryExpression -> Expression . MOD Expression
    (13) BinaryExpression -> Expression . LEQ Expression
    (14) BinaryExpression -> Expression . GEQ Expression
    (15) BinaryExpression -> Expression . LT Expression
    (16) BinaryExpression -> Expression . GT Expression
    (17) BinaryExpression -> Expression . EQ Expression
    (18) BinaryExpression -> Expression . NE Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET
    (32) DotExpression -> Expression . DOT ID

    SEMICOLON       reduce using rule 30 (DereferenceExpression -> TIMES Expression .)
    ASSIGNMENT      reduce using rule 30 (DereferenceExpression -> TIMES Expression .)
    PLUS            reduce using rule 30 (DereferenceExpression -> TIMES Expression .)
    MINUS           reduce using rule 30 (DereferenceExpression -> TIMES Expression .)
    TIMES           reduce using rule 30 (DereferenceExpression -> TIMES Expression .)
    DIVIDE          reduce using rule 30 (DereferenceExpression -> TIMES Expression .)
    MOD             reduce using rule 30 (DereferenceExpression -> TIMES Expression .)
    LBRACKET        reduce using rule 30 (DereferenceExpression -> TIMES Expression .)
    DOT             reduce using rule 30 (DereferenceExpression -> TIMES Expression .)
    RPAREN          reduce using rule 30 (DereferenceExpression -> TIMES Expression .)
    LET             reduce using rule 30 (DereferenceExpression -> TIMES Expression .)
    IF              reduce using rule 30 (DereferenceExpression -> TIMES Expression .)
    FOR             reduce using rule 30 (DereferenceExpression -> TIMES Expression .)
    WHILE           reduce using rule 30 (DereferenceExpression -> TIMES Expression .)
    BREAK           reduce using rule 30 (DereferenceExpression -> TIMES Expression .)
    RETURN          reduce using rule 30 (DereferenceExpression -> TIMES Expression .)
    LPAREN          reduce using rule 30 (DereferenceExpression -> TIMES Expression .)
    LBRACE          reduce using rule 30 (DereferenceExpression -> TIMES Expression .)
    AMPERSAND       reduce using rule 30 (DereferenceExpression -> TIMES Expression .)
    INTL            reduce using rule 30 (DereferenceExpression -> TIMES Expression .)
    BOOLL           reduce using rule 30 (DereferenceExpression -> TIMES Expression .)
    ID              reduce using rule 30 (DereferenceExpression -> TIMES Expression .)
    RBRACE          reduce using rule 30 (DereferenceExpression -> TIMES Expression .)
    RBRACKET        reduce using rule 30 (DereferenceExpression -> TIMES Expression .)
    COMMA           reduce using rule 30 (DereferenceExpression -> TIMES Expression .)
    LEQ             shift and go to state 109
    GEQ             shift and go to state 110
    LT              shift and go to state 111
    GT              shift and go to state 112
    EQ              shift and go to state 113
    NE              shift and go to state 114

  ! LEQ             [ reduce using rule 30 (DereferenceExpression -> TIMES Expression .) ]
  ! GEQ             [ reduce using rule 30 (DereferenceExpression -> TIMES Expression .) ]
  ! LT              [ reduce using rule 30 (DereferenceExpression -> TIMES Expression .) ]
  ! GT              [ reduce using rule 30 (DereferenceExpression -> TIMES Expression .) ]
  ! EQ              [ reduce using rule 30 (DereferenceExpression -> TIMES Expression .) ]
  ! NE              [ reduce using rule 30 (DereferenceExpression -> TIMES Expression .) ]
  ! PLUS            [ shift and go to state 104 ]
  ! MINUS           [ shift and go to state 105 ]
  ! TIMES           [ shift and go to state 106 ]
  ! DIVIDE          [ shift and go to state 107 ]
  ! MOD             [ shift and go to state 108 ]
  ! LBRACKET        [ shift and go to state 115 ]
  ! DOT             [ shift and go to state 116 ]


state 129

    (1) AddressExpression -> AMPERSAND Expression .
    (8) BinaryExpression -> Expression . PLUS Expression
    (9) BinaryExpression -> Expression . MINUS Expression
    (10) BinaryExpression -> Expression . TIMES Expression
    (11) BinaryExpression -> Expression . DIVIDE Expression
    (12) BinaryExpression -> Expression . MOD Expression
    (13) BinaryExpression -> Expression . LEQ Expression
    (14) BinaryExpression -> Expression . GEQ Expression
    (15) BinaryExpression -> Expression . LT Expression
    (16) BinaryExpression -> Expression . GT Expression
    (17) BinaryExpression -> Expression . EQ Expression
    (18) BinaryExpression -> Expression . NE Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET
    (32) DotExpression -> Expression . DOT ID

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LEQ resolved as shift
  ! shift/reduce conflict for GEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    SEMICOLON       reduce using rule 1 (AddressExpression -> AMPERSAND Expression .)
    ASSIGNMENT      reduce using rule 1 (AddressExpression -> AMPERSAND Expression .)
    RPAREN          reduce using rule 1 (AddressExpression -> AMPERSAND Expression .)
    LET             reduce using rule 1 (AddressExpression -> AMPERSAND Expression .)
    IF              reduce using rule 1 (AddressExpression -> AMPERSAND Expression .)
    FOR             reduce using rule 1 (AddressExpression -> AMPERSAND Expression .)
    WHILE           reduce using rule 1 (AddressExpression -> AMPERSAND Expression .)
    BREAK           reduce using rule 1 (AddressExpression -> AMPERSAND Expression .)
    RETURN          reduce using rule 1 (AddressExpression -> AMPERSAND Expression .)
    LPAREN          reduce using rule 1 (AddressExpression -> AMPERSAND Expression .)
    LBRACE          reduce using rule 1 (AddressExpression -> AMPERSAND Expression .)
    AMPERSAND       reduce using rule 1 (AddressExpression -> AMPERSAND Expression .)
    INTL            reduce using rule 1 (AddressExpression -> AMPERSAND Expression .)
    BOOLL           reduce using rule 1 (AddressExpression -> AMPERSAND Expression .)
    ID              reduce using rule 1 (AddressExpression -> AMPERSAND Expression .)
    RBRACE          reduce using rule 1 (AddressExpression -> AMPERSAND Expression .)
    RBRACKET        reduce using rule 1 (AddressExpression -> AMPERSAND Expression .)
    COMMA           reduce using rule 1 (AddressExpression -> AMPERSAND Expression .)
    PLUS            shift and go to state 104
    MINUS           shift and go to state 105
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107
    MOD             shift and go to state 108
    LEQ             shift and go to state 109
    GEQ             shift and go to state 110
    LT              shift and go to state 111
    GT              shift and go to state 112
    EQ              shift and go to state 113
    NE              shift and go to state 114
    LBRACKET        shift and go to state 115
    DOT             shift and go to state 116

  ! PLUS            [ reduce using rule 1 (AddressExpression -> AMPERSAND Expression .) ]
  ! MINUS           [ reduce using rule 1 (AddressExpression -> AMPERSAND Expression .) ]
  ! TIMES           [ reduce using rule 1 (AddressExpression -> AMPERSAND Expression .) ]
  ! DIVIDE          [ reduce using rule 1 (AddressExpression -> AMPERSAND Expression .) ]
  ! MOD             [ reduce using rule 1 (AddressExpression -> AMPERSAND Expression .) ]
  ! LEQ             [ reduce using rule 1 (AddressExpression -> AMPERSAND Expression .) ]
  ! GEQ             [ reduce using rule 1 (AddressExpression -> AMPERSAND Expression .) ]
  ! LT              [ reduce using rule 1 (AddressExpression -> AMPERSAND Expression .) ]
  ! GT              [ reduce using rule 1 (AddressExpression -> AMPERSAND Expression .) ]
  ! EQ              [ reduce using rule 1 (AddressExpression -> AMPERSAND Expression .) ]
  ! NE              [ reduce using rule 1 (AddressExpression -> AMPERSAND Expression .) ]
  ! LBRACKET        [ reduce using rule 1 (AddressExpression -> AMPERSAND Expression .) ]
  ! DOT             [ reduce using rule 1 (AddressExpression -> AMPERSAND Expression .) ]


state 130

    (38) FunctionDefinition -> FN ID LT TypeParameterListR GT LPAREN ParameterListR RPAREN . Block
    (40) FunctionDefinition -> FN ID LT TypeParameterListR GT LPAREN ParameterListR RPAREN . ARROW TypeExpression Block
    (20) Block -> . LBRACE StatementListR RBRACE

    ARROW           shift and go to state 161
    LBRACE          shift and go to state 45

    Block                          shift and go to state 160

state 131

    (76) TypeExpressionListR -> TypeExpression COMMA TypeExpressionListR .

    GT              reduce using rule 76 (TypeExpressionListR -> TypeExpression COMMA TypeExpressionListR .)


state 132

    (80) TypeStatement -> LET ID EQ TypeExpression SEMICOLON .

    LET             reduce using rule 80 (TypeStatement -> LET ID EQ TypeExpression SEMICOLON .)
    ID              reduce using rule 80 (TypeStatement -> LET ID EQ TypeExpression SEMICOLON .)
    RBRACE          reduce using rule 80 (TypeStatement -> LET ID EQ TypeExpression SEMICOLON .)
    IF              reduce using rule 80 (TypeStatement -> LET ID EQ TypeExpression SEMICOLON .)
    FOR             reduce using rule 80 (TypeStatement -> LET ID EQ TypeExpression SEMICOLON .)
    WHILE           reduce using rule 80 (TypeStatement -> LET ID EQ TypeExpression SEMICOLON .)
    BREAK           reduce using rule 80 (TypeStatement -> LET ID EQ TypeExpression SEMICOLON .)
    RETURN          reduce using rule 80 (TypeStatement -> LET ID EQ TypeExpression SEMICOLON .)
    SEMICOLON       reduce using rule 80 (TypeStatement -> LET ID EQ TypeExpression SEMICOLON .)
    LPAREN          reduce using rule 80 (TypeStatement -> LET ID EQ TypeExpression SEMICOLON .)
    LBRACE          reduce using rule 80 (TypeStatement -> LET ID EQ TypeExpression SEMICOLON .)
    TIMES           reduce using rule 80 (TypeStatement -> LET ID EQ TypeExpression SEMICOLON .)
    AMPERSAND       reduce using rule 80 (TypeStatement -> LET ID EQ TypeExpression SEMICOLON .)
    INTL            reduce using rule 80 (TypeStatement -> LET ID EQ TypeExpression SEMICOLON .)
    BOOLL           reduce using rule 80 (TypeStatement -> LET ID EQ TypeExpression SEMICOLON .)
    RPAREN          reduce using rule 80 (TypeStatement -> LET ID EQ TypeExpression SEMICOLON .)


state 133

    (68) StructDefinition -> STRUCT ID LT TypeParameterListR GT LBRACE StructMemberListR RBRACE .

    FN              reduce using rule 68 (StructDefinition -> STRUCT ID LT TypeParameterListR GT LBRACE StructMemberListR RBRACE .)
    STRUCT          reduce using rule 68 (StructDefinition -> STRUCT ID LT TypeParameterListR GT LBRACE StructMemberListR RBRACE .)
    $end            reduce using rule 68 (StructDefinition -> STRUCT ID LT TypeParameterListR GT LBRACE StructMemberListR RBRACE .)


state 134

    (6) AssignmentStatement -> Expression ASSIGNMENT Expression . SEMICOLON
    (7) AssignmentStatement -> Expression ASSIGNMENT Expression .
    (8) BinaryExpression -> Expression . PLUS Expression
    (9) BinaryExpression -> Expression . MINUS Expression
    (10) BinaryExpression -> Expression . TIMES Expression
    (11) BinaryExpression -> Expression . DIVIDE Expression
    (12) BinaryExpression -> Expression . MOD Expression
    (13) BinaryExpression -> Expression . LEQ Expression
    (14) BinaryExpression -> Expression . GEQ Expression
    (15) BinaryExpression -> Expression . LT Expression
    (16) BinaryExpression -> Expression . GT Expression
    (17) BinaryExpression -> Expression . EQ Expression
    (18) BinaryExpression -> Expression . NE Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET
    (32) DotExpression -> Expression . DOT ID

  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
    SEMICOLON       shift and go to state 162
    LET             reduce using rule 7 (AssignmentStatement -> Expression ASSIGNMENT Expression .)
    IF              reduce using rule 7 (AssignmentStatement -> Expression ASSIGNMENT Expression .)
    FOR             reduce using rule 7 (AssignmentStatement -> Expression ASSIGNMENT Expression .)
    WHILE           reduce using rule 7 (AssignmentStatement -> Expression ASSIGNMENT Expression .)
    BREAK           reduce using rule 7 (AssignmentStatement -> Expression ASSIGNMENT Expression .)
    RETURN          reduce using rule 7 (AssignmentStatement -> Expression ASSIGNMENT Expression .)
    LPAREN          reduce using rule 7 (AssignmentStatement -> Expression ASSIGNMENT Expression .)
    LBRACE          reduce using rule 7 (AssignmentStatement -> Expression ASSIGNMENT Expression .)
    AMPERSAND       reduce using rule 7 (AssignmentStatement -> Expression ASSIGNMENT Expression .)
    INTL            reduce using rule 7 (AssignmentStatement -> Expression ASSIGNMENT Expression .)
    BOOLL           reduce using rule 7 (AssignmentStatement -> Expression ASSIGNMENT Expression .)
    ID              reduce using rule 7 (AssignmentStatement -> Expression ASSIGNMENT Expression .)
    RBRACE          reduce using rule 7 (AssignmentStatement -> Expression ASSIGNMENT Expression .)
    RPAREN          reduce using rule 7 (AssignmentStatement -> Expression ASSIGNMENT Expression .)
    PLUS            shift and go to state 104
    MINUS           shift and go to state 105
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107
    MOD             shift and go to state 108
    LEQ             shift and go to state 109
    GEQ             shift and go to state 110
    LT              shift and go to state 111
    GT              shift and go to state 112
    EQ              shift and go to state 113
    NE              shift and go to state 114
    LBRACKET        shift and go to state 115
    DOT             shift and go to state 116

  ! SEMICOLON       [ reduce using rule 7 (AssignmentStatement -> Expression ASSIGNMENT Expression .) ]
  ! TIMES           [ reduce using rule 7 (AssignmentStatement -> Expression ASSIGNMENT Expression .) ]


state 135

    (8) BinaryExpression -> Expression PLUS Expression .
    (8) BinaryExpression -> Expression . PLUS Expression
    (9) BinaryExpression -> Expression . MINUS Expression
    (10) BinaryExpression -> Expression . TIMES Expression
    (11) BinaryExpression -> Expression . DIVIDE Expression
    (12) BinaryExpression -> Expression . MOD Expression
    (13) BinaryExpression -> Expression . LEQ Expression
    (14) BinaryExpression -> Expression . GEQ Expression
    (15) BinaryExpression -> Expression . LT Expression
    (16) BinaryExpression -> Expression . GT Expression
    (17) BinaryExpression -> Expression . EQ Expression
    (18) BinaryExpression -> Expression . NE Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET
    (32) DotExpression -> Expression . DOT ID

    SEMICOLON       reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .)
    ASSIGNMENT      reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .)
    PLUS            reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .)
    MINUS           reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .)
    LBRACKET        reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .)
    DOT             reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .)
    RPAREN          reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .)
    LET             reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .)
    IF              reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .)
    FOR             reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .)
    WHILE           reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .)
    BREAK           reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .)
    RETURN          reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .)
    LPAREN          reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .)
    LBRACE          reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .)
    AMPERSAND       reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .)
    INTL            reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .)
    BOOLL           reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .)
    ID              reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .)
    RBRACE          reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .)
    RBRACKET        reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .)
    COMMA           reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .)
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107
    MOD             shift and go to state 108
    LEQ             shift and go to state 109
    GEQ             shift and go to state 110
    LT              shift and go to state 111
    GT              shift and go to state 112
    EQ              shift and go to state 113
    NE              shift and go to state 114

  ! TIMES           [ reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .) ]
  ! DIVIDE          [ reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .) ]
  ! MOD             [ reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .) ]
  ! LEQ             [ reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .) ]
  ! GEQ             [ reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .) ]
  ! LT              [ reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .) ]
  ! GT              [ reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .) ]
  ! EQ              [ reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .) ]
  ! NE              [ reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .) ]
  ! PLUS            [ shift and go to state 104 ]
  ! MINUS           [ shift and go to state 105 ]
  ! LBRACKET        [ shift and go to state 115 ]
  ! DOT             [ shift and go to state 116 ]


state 136

    (9) BinaryExpression -> Expression MINUS Expression .
    (8) BinaryExpression -> Expression . PLUS Expression
    (9) BinaryExpression -> Expression . MINUS Expression
    (10) BinaryExpression -> Expression . TIMES Expression
    (11) BinaryExpression -> Expression . DIVIDE Expression
    (12) BinaryExpression -> Expression . MOD Expression
    (13) BinaryExpression -> Expression . LEQ Expression
    (14) BinaryExpression -> Expression . GEQ Expression
    (15) BinaryExpression -> Expression . LT Expression
    (16) BinaryExpression -> Expression . GT Expression
    (17) BinaryExpression -> Expression . EQ Expression
    (18) BinaryExpression -> Expression . NE Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET
    (32) DotExpression -> Expression . DOT ID

    SEMICOLON       reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .)
    ASSIGNMENT      reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .)
    PLUS            reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .)
    MINUS           reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .)
    LBRACKET        reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .)
    DOT             reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .)
    RPAREN          reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .)
    LET             reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .)
    IF              reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .)
    FOR             reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .)
    WHILE           reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .)
    BREAK           reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .)
    RETURN          reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .)
    LPAREN          reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .)
    LBRACE          reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .)
    AMPERSAND       reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .)
    INTL            reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .)
    BOOLL           reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .)
    ID              reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .)
    RBRACE          reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .)
    RBRACKET        reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .)
    COMMA           reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .)
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107
    MOD             shift and go to state 108
    LEQ             shift and go to state 109
    GEQ             shift and go to state 110
    LT              shift and go to state 111
    GT              shift and go to state 112
    EQ              shift and go to state 113
    NE              shift and go to state 114

  ! TIMES           [ reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .) ]
  ! DIVIDE          [ reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .) ]
  ! MOD             [ reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .) ]
  ! LEQ             [ reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .) ]
  ! GEQ             [ reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .) ]
  ! LT              [ reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .) ]
  ! GT              [ reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .) ]
  ! EQ              [ reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .) ]
  ! NE              [ reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .) ]
  ! PLUS            [ shift and go to state 104 ]
  ! MINUS           [ shift and go to state 105 ]
  ! LBRACKET        [ shift and go to state 115 ]
  ! DOT             [ shift and go to state 116 ]


state 137

    (10) BinaryExpression -> Expression TIMES Expression .
    (8) BinaryExpression -> Expression . PLUS Expression
    (9) BinaryExpression -> Expression . MINUS Expression
    (10) BinaryExpression -> Expression . TIMES Expression
    (11) BinaryExpression -> Expression . DIVIDE Expression
    (12) BinaryExpression -> Expression . MOD Expression
    (13) BinaryExpression -> Expression . LEQ Expression
    (14) BinaryExpression -> Expression . GEQ Expression
    (15) BinaryExpression -> Expression . LT Expression
    (16) BinaryExpression -> Expression . GT Expression
    (17) BinaryExpression -> Expression . EQ Expression
    (18) BinaryExpression -> Expression . NE Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET
    (32) DotExpression -> Expression . DOT ID

    SEMICOLON       reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .)
    ASSIGNMENT      reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .)
    PLUS            reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .)
    MINUS           reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .)
    TIMES           reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .)
    DIVIDE          reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .)
    MOD             reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .)
    LBRACKET        reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .)
    DOT             reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .)
    RPAREN          reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .)
    LET             reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .)
    IF              reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .)
    FOR             reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .)
    WHILE           reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .)
    BREAK           reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .)
    RETURN          reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .)
    LPAREN          reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .)
    LBRACE          reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .)
    AMPERSAND       reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .)
    INTL            reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .)
    BOOLL           reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .)
    ID              reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .)
    RBRACE          reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .)
    RBRACKET        reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .)
    COMMA           reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .)
    LEQ             shift and go to state 109
    GEQ             shift and go to state 110
    LT              shift and go to state 111
    GT              shift and go to state 112
    EQ              shift and go to state 113
    NE              shift and go to state 114

  ! LEQ             [ reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .) ]
  ! GEQ             [ reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .) ]
  ! LT              [ reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .) ]
  ! GT              [ reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .) ]
  ! EQ              [ reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .) ]
  ! NE              [ reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .) ]
  ! PLUS            [ shift and go to state 104 ]
  ! MINUS           [ shift and go to state 105 ]
  ! TIMES           [ shift and go to state 106 ]
  ! DIVIDE          [ shift and go to state 107 ]
  ! MOD             [ shift and go to state 108 ]
  ! LBRACKET        [ shift and go to state 115 ]
  ! DOT             [ shift and go to state 116 ]


state 138

    (11) BinaryExpression -> Expression DIVIDE Expression .
    (8) BinaryExpression -> Expression . PLUS Expression
    (9) BinaryExpression -> Expression . MINUS Expression
    (10) BinaryExpression -> Expression . TIMES Expression
    (11) BinaryExpression -> Expression . DIVIDE Expression
    (12) BinaryExpression -> Expression . MOD Expression
    (13) BinaryExpression -> Expression . LEQ Expression
    (14) BinaryExpression -> Expression . GEQ Expression
    (15) BinaryExpression -> Expression . LT Expression
    (16) BinaryExpression -> Expression . GT Expression
    (17) BinaryExpression -> Expression . EQ Expression
    (18) BinaryExpression -> Expression . NE Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET
    (32) DotExpression -> Expression . DOT ID

    SEMICOLON       reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .)
    ASSIGNMENT      reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .)
    PLUS            reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .)
    MINUS           reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .)
    TIMES           reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .)
    DIVIDE          reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .)
    MOD             reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .)
    LBRACKET        reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .)
    DOT             reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .)
    RPAREN          reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .)
    LET             reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .)
    IF              reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .)
    FOR             reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .)
    WHILE           reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .)
    BREAK           reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .)
    RETURN          reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .)
    LPAREN          reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .)
    LBRACE          reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .)
    AMPERSAND       reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .)
    INTL            reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .)
    BOOLL           reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .)
    ID              reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .)
    RBRACE          reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .)
    RBRACKET        reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .)
    COMMA           reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .)
    LEQ             shift and go to state 109
    GEQ             shift and go to state 110
    LT              shift and go to state 111
    GT              shift and go to state 112
    EQ              shift and go to state 113
    NE              shift and go to state 114

  ! LEQ             [ reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .) ]
  ! GEQ             [ reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .) ]
  ! LT              [ reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .) ]
  ! GT              [ reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .) ]
  ! EQ              [ reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .) ]
  ! NE              [ reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .) ]
  ! PLUS            [ shift and go to state 104 ]
  ! MINUS           [ shift and go to state 105 ]
  ! TIMES           [ shift and go to state 106 ]
  ! DIVIDE          [ shift and go to state 107 ]
  ! MOD             [ shift and go to state 108 ]
  ! LBRACKET        [ shift and go to state 115 ]
  ! DOT             [ shift and go to state 116 ]


state 139

    (12) BinaryExpression -> Expression MOD Expression .
    (8) BinaryExpression -> Expression . PLUS Expression
    (9) BinaryExpression -> Expression . MINUS Expression
    (10) BinaryExpression -> Expression . TIMES Expression
    (11) BinaryExpression -> Expression . DIVIDE Expression
    (12) BinaryExpression -> Expression . MOD Expression
    (13) BinaryExpression -> Expression . LEQ Expression
    (14) BinaryExpression -> Expression . GEQ Expression
    (15) BinaryExpression -> Expression . LT Expression
    (16) BinaryExpression -> Expression . GT Expression
    (17) BinaryExpression -> Expression . EQ Expression
    (18) BinaryExpression -> Expression . NE Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET
    (32) DotExpression -> Expression . DOT ID

    SEMICOLON       reduce using rule 12 (BinaryExpression -> Expression MOD Expression .)
    ASSIGNMENT      reduce using rule 12 (BinaryExpression -> Expression MOD Expression .)
    PLUS            reduce using rule 12 (BinaryExpression -> Expression MOD Expression .)
    MINUS           reduce using rule 12 (BinaryExpression -> Expression MOD Expression .)
    TIMES           reduce using rule 12 (BinaryExpression -> Expression MOD Expression .)
    DIVIDE          reduce using rule 12 (BinaryExpression -> Expression MOD Expression .)
    MOD             reduce using rule 12 (BinaryExpression -> Expression MOD Expression .)
    LBRACKET        reduce using rule 12 (BinaryExpression -> Expression MOD Expression .)
    DOT             reduce using rule 12 (BinaryExpression -> Expression MOD Expression .)
    RPAREN          reduce using rule 12 (BinaryExpression -> Expression MOD Expression .)
    LET             reduce using rule 12 (BinaryExpression -> Expression MOD Expression .)
    IF              reduce using rule 12 (BinaryExpression -> Expression MOD Expression .)
    FOR             reduce using rule 12 (BinaryExpression -> Expression MOD Expression .)
    WHILE           reduce using rule 12 (BinaryExpression -> Expression MOD Expression .)
    BREAK           reduce using rule 12 (BinaryExpression -> Expression MOD Expression .)
    RETURN          reduce using rule 12 (BinaryExpression -> Expression MOD Expression .)
    LPAREN          reduce using rule 12 (BinaryExpression -> Expression MOD Expression .)
    LBRACE          reduce using rule 12 (BinaryExpression -> Expression MOD Expression .)
    AMPERSAND       reduce using rule 12 (BinaryExpression -> Expression MOD Expression .)
    INTL            reduce using rule 12 (BinaryExpression -> Expression MOD Expression .)
    BOOLL           reduce using rule 12 (BinaryExpression -> Expression MOD Expression .)
    ID              reduce using rule 12 (BinaryExpression -> Expression MOD Expression .)
    RBRACE          reduce using rule 12 (BinaryExpression -> Expression MOD Expression .)
    RBRACKET        reduce using rule 12 (BinaryExpression -> Expression MOD Expression .)
    COMMA           reduce using rule 12 (BinaryExpression -> Expression MOD Expression .)
    LEQ             shift and go to state 109
    GEQ             shift and go to state 110
    LT              shift and go to state 111
    GT              shift and go to state 112
    EQ              shift and go to state 113
    NE              shift and go to state 114

  ! LEQ             [ reduce using rule 12 (BinaryExpression -> Expression MOD Expression .) ]
  ! GEQ             [ reduce using rule 12 (BinaryExpression -> Expression MOD Expression .) ]
  ! LT              [ reduce using rule 12 (BinaryExpression -> Expression MOD Expression .) ]
  ! GT              [ reduce using rule 12 (BinaryExpression -> Expression MOD Expression .) ]
  ! EQ              [ reduce using rule 12 (BinaryExpression -> Expression MOD Expression .) ]
  ! NE              [ reduce using rule 12 (BinaryExpression -> Expression MOD Expression .) ]
  ! PLUS            [ shift and go to state 104 ]
  ! MINUS           [ shift and go to state 105 ]
  ! TIMES           [ shift and go to state 106 ]
  ! DIVIDE          [ shift and go to state 107 ]
  ! MOD             [ shift and go to state 108 ]
  ! LBRACKET        [ shift and go to state 115 ]
  ! DOT             [ shift and go to state 116 ]


state 140

    (13) BinaryExpression -> Expression LEQ Expression .
    (8) BinaryExpression -> Expression . PLUS Expression
    (9) BinaryExpression -> Expression . MINUS Expression
    (10) BinaryExpression -> Expression . TIMES Expression
    (11) BinaryExpression -> Expression . DIVIDE Expression
    (12) BinaryExpression -> Expression . MOD Expression
    (13) BinaryExpression -> Expression . LEQ Expression
    (14) BinaryExpression -> Expression . GEQ Expression
    (15) BinaryExpression -> Expression . LT Expression
    (16) BinaryExpression -> Expression . GT Expression
    (17) BinaryExpression -> Expression . EQ Expression
    (18) BinaryExpression -> Expression . NE Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET
    (32) DotExpression -> Expression . DOT ID

    SEMICOLON       reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    ASSIGNMENT      reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    PLUS            reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    MINUS           reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    TIMES           reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    DIVIDE          reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    MOD             reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    LEQ             reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    GEQ             reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    LT              reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    GT              reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    EQ              reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    NE              reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    LBRACKET        reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    DOT             reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    RPAREN          reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    LET             reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    IF              reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    FOR             reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    WHILE           reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    BREAK           reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    RETURN          reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    LPAREN          reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    LBRACE          reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    AMPERSAND       reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    INTL            reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    BOOLL           reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    ID              reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    RBRACE          reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    RBRACKET        reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    COMMA           reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)

  ! PLUS            [ shift and go to state 104 ]
  ! MINUS           [ shift and go to state 105 ]
  ! TIMES           [ shift and go to state 106 ]
  ! DIVIDE          [ shift and go to state 107 ]
  ! MOD             [ shift and go to state 108 ]
  ! LEQ             [ shift and go to state 109 ]
  ! GEQ             [ shift and go to state 110 ]
  ! LT              [ shift and go to state 111 ]
  ! GT              [ shift and go to state 112 ]
  ! EQ              [ shift and go to state 113 ]
  ! NE              [ shift and go to state 114 ]
  ! LBRACKET        [ shift and go to state 115 ]
  ! DOT             [ shift and go to state 116 ]


state 141

    (14) BinaryExpression -> Expression GEQ Expression .
    (8) BinaryExpression -> Expression . PLUS Expression
    (9) BinaryExpression -> Expression . MINUS Expression
    (10) BinaryExpression -> Expression . TIMES Expression
    (11) BinaryExpression -> Expression . DIVIDE Expression
    (12) BinaryExpression -> Expression . MOD Expression
    (13) BinaryExpression -> Expression . LEQ Expression
    (14) BinaryExpression -> Expression . GEQ Expression
    (15) BinaryExpression -> Expression . LT Expression
    (16) BinaryExpression -> Expression . GT Expression
    (17) BinaryExpression -> Expression . EQ Expression
    (18) BinaryExpression -> Expression . NE Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET
    (32) DotExpression -> Expression . DOT ID

    SEMICOLON       reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    ASSIGNMENT      reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    PLUS            reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    MINUS           reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    TIMES           reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    DIVIDE          reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    MOD             reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    LEQ             reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    GEQ             reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    LT              reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    GT              reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    EQ              reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    NE              reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    LBRACKET        reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    DOT             reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    RPAREN          reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    LET             reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    IF              reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    FOR             reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    WHILE           reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    BREAK           reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    RETURN          reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    LPAREN          reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    LBRACE          reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    AMPERSAND       reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    INTL            reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    BOOLL           reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    ID              reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    RBRACE          reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    RBRACKET        reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    COMMA           reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)

  ! PLUS            [ shift and go to state 104 ]
  ! MINUS           [ shift and go to state 105 ]
  ! TIMES           [ shift and go to state 106 ]
  ! DIVIDE          [ shift and go to state 107 ]
  ! MOD             [ shift and go to state 108 ]
  ! LEQ             [ shift and go to state 109 ]
  ! GEQ             [ shift and go to state 110 ]
  ! LT              [ shift and go to state 111 ]
  ! GT              [ shift and go to state 112 ]
  ! EQ              [ shift and go to state 113 ]
  ! NE              [ shift and go to state 114 ]
  ! LBRACKET        [ shift and go to state 115 ]
  ! DOT             [ shift and go to state 116 ]


state 142

    (15) BinaryExpression -> Expression LT Expression .
    (8) BinaryExpression -> Expression . PLUS Expression
    (9) BinaryExpression -> Expression . MINUS Expression
    (10) BinaryExpression -> Expression . TIMES Expression
    (11) BinaryExpression -> Expression . DIVIDE Expression
    (12) BinaryExpression -> Expression . MOD Expression
    (13) BinaryExpression -> Expression . LEQ Expression
    (14) BinaryExpression -> Expression . GEQ Expression
    (15) BinaryExpression -> Expression . LT Expression
    (16) BinaryExpression -> Expression . GT Expression
    (17) BinaryExpression -> Expression . EQ Expression
    (18) BinaryExpression -> Expression . NE Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET
    (32) DotExpression -> Expression . DOT ID

    SEMICOLON       reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    ASSIGNMENT      reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    PLUS            reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    MINUS           reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    TIMES           reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    DIVIDE          reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    MOD             reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    LEQ             reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    GEQ             reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    LT              reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    GT              reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    EQ              reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    NE              reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    LBRACKET        reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    DOT             reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    RPAREN          reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    LET             reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    IF              reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    FOR             reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    WHILE           reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    BREAK           reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    RETURN          reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    LPAREN          reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    LBRACE          reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    AMPERSAND       reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    INTL            reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    BOOLL           reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    ID              reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    RBRACE          reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    RBRACKET        reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    COMMA           reduce using rule 15 (BinaryExpression -> Expression LT Expression .)

  ! PLUS            [ shift and go to state 104 ]
  ! MINUS           [ shift and go to state 105 ]
  ! TIMES           [ shift and go to state 106 ]
  ! DIVIDE          [ shift and go to state 107 ]
  ! MOD             [ shift and go to state 108 ]
  ! LEQ             [ shift and go to state 109 ]
  ! GEQ             [ shift and go to state 110 ]
  ! LT              [ shift and go to state 111 ]
  ! GT              [ shift and go to state 112 ]
  ! EQ              [ shift and go to state 113 ]
  ! NE              [ shift and go to state 114 ]
  ! LBRACKET        [ shift and go to state 115 ]
  ! DOT             [ shift and go to state 116 ]


state 143

    (16) BinaryExpression -> Expression GT Expression .
    (8) BinaryExpression -> Expression . PLUS Expression
    (9) BinaryExpression -> Expression . MINUS Expression
    (10) BinaryExpression -> Expression . TIMES Expression
    (11) BinaryExpression -> Expression . DIVIDE Expression
    (12) BinaryExpression -> Expression . MOD Expression
    (13) BinaryExpression -> Expression . LEQ Expression
    (14) BinaryExpression -> Expression . GEQ Expression
    (15) BinaryExpression -> Expression . LT Expression
    (16) BinaryExpression -> Expression . GT Expression
    (17) BinaryExpression -> Expression . EQ Expression
    (18) BinaryExpression -> Expression . NE Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET
    (32) DotExpression -> Expression . DOT ID

    SEMICOLON       reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    ASSIGNMENT      reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    PLUS            reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    MINUS           reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    TIMES           reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    DIVIDE          reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    MOD             reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    LEQ             reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    GEQ             reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    LT              reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    GT              reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    EQ              reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    NE              reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    LBRACKET        reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    DOT             reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    RPAREN          reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    LET             reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    IF              reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    FOR             reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    WHILE           reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    BREAK           reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    RETURN          reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    LPAREN          reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    LBRACE          reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    AMPERSAND       reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    INTL            reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    BOOLL           reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    ID              reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    RBRACE          reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    RBRACKET        reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    COMMA           reduce using rule 16 (BinaryExpression -> Expression GT Expression .)

  ! PLUS            [ shift and go to state 104 ]
  ! MINUS           [ shift and go to state 105 ]
  ! TIMES           [ shift and go to state 106 ]
  ! DIVIDE          [ shift and go to state 107 ]
  ! MOD             [ shift and go to state 108 ]
  ! LEQ             [ shift and go to state 109 ]
  ! GEQ             [ shift and go to state 110 ]
  ! LT              [ shift and go to state 111 ]
  ! GT              [ shift and go to state 112 ]
  ! EQ              [ shift and go to state 113 ]
  ! NE              [ shift and go to state 114 ]
  ! LBRACKET        [ shift and go to state 115 ]
  ! DOT             [ shift and go to state 116 ]


state 144

    (17) BinaryExpression -> Expression EQ Expression .
    (8) BinaryExpression -> Expression . PLUS Expression
    (9) BinaryExpression -> Expression . MINUS Expression
    (10) BinaryExpression -> Expression . TIMES Expression
    (11) BinaryExpression -> Expression . DIVIDE Expression
    (12) BinaryExpression -> Expression . MOD Expression
    (13) BinaryExpression -> Expression . LEQ Expression
    (14) BinaryExpression -> Expression . GEQ Expression
    (15) BinaryExpression -> Expression . LT Expression
    (16) BinaryExpression -> Expression . GT Expression
    (17) BinaryExpression -> Expression . EQ Expression
    (18) BinaryExpression -> Expression . NE Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET
    (32) DotExpression -> Expression . DOT ID

    SEMICOLON       reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    ASSIGNMENT      reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    PLUS            reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    MINUS           reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    TIMES           reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    DIVIDE          reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    MOD             reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    LEQ             reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    GEQ             reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    LT              reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    GT              reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    EQ              reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    NE              reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    LBRACKET        reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    DOT             reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    RPAREN          reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    LET             reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    IF              reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    FOR             reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    WHILE           reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    BREAK           reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    RETURN          reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    LPAREN          reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    LBRACE          reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    AMPERSAND       reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    INTL            reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    BOOLL           reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    ID              reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    RBRACE          reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    RBRACKET        reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    COMMA           reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)

  ! PLUS            [ shift and go to state 104 ]
  ! MINUS           [ shift and go to state 105 ]
  ! TIMES           [ shift and go to state 106 ]
  ! DIVIDE          [ shift and go to state 107 ]
  ! MOD             [ shift and go to state 108 ]
  ! LEQ             [ shift and go to state 109 ]
  ! GEQ             [ shift and go to state 110 ]
  ! LT              [ shift and go to state 111 ]
  ! GT              [ shift and go to state 112 ]
  ! EQ              [ shift and go to state 113 ]
  ! NE              [ shift and go to state 114 ]
  ! LBRACKET        [ shift and go to state 115 ]
  ! DOT             [ shift and go to state 116 ]


state 145

    (18) BinaryExpression -> Expression NE Expression .
    (8) BinaryExpression -> Expression . PLUS Expression
    (9) BinaryExpression -> Expression . MINUS Expression
    (10) BinaryExpression -> Expression . TIMES Expression
    (11) BinaryExpression -> Expression . DIVIDE Expression
    (12) BinaryExpression -> Expression . MOD Expression
    (13) BinaryExpression -> Expression . LEQ Expression
    (14) BinaryExpression -> Expression . GEQ Expression
    (15) BinaryExpression -> Expression . LT Expression
    (16) BinaryExpression -> Expression . GT Expression
    (17) BinaryExpression -> Expression . EQ Expression
    (18) BinaryExpression -> Expression . NE Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET
    (32) DotExpression -> Expression . DOT ID

    SEMICOLON       reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    ASSIGNMENT      reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    PLUS            reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    MINUS           reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    TIMES           reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    DIVIDE          reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    MOD             reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    LEQ             reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    GEQ             reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    LT              reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    GT              reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    EQ              reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    NE              reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    LBRACKET        reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    DOT             reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    RPAREN          reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    LET             reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    IF              reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    FOR             reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    WHILE           reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    BREAK           reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    RETURN          reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    LPAREN          reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    LBRACE          reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    AMPERSAND       reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    INTL            reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    BOOLL           reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    ID              reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    RBRACE          reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    RBRACKET        reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    COMMA           reduce using rule 18 (BinaryExpression -> Expression NE Expression .)

  ! PLUS            [ shift and go to state 104 ]
  ! MINUS           [ shift and go to state 105 ]
  ! TIMES           [ shift and go to state 106 ]
  ! DIVIDE          [ shift and go to state 107 ]
  ! MOD             [ shift and go to state 108 ]
  ! LEQ             [ shift and go to state 109 ]
  ! GEQ             [ shift and go to state 110 ]
  ! LT              [ shift and go to state 111 ]
  ! GT              [ shift and go to state 112 ]
  ! EQ              [ shift and go to state 113 ]
  ! NE              [ shift and go to state 114 ]
  ! LBRACKET        [ shift and go to state 115 ]
  ! DOT             [ shift and go to state 116 ]


state 146

    (23) BracketCall -> Expression LBRACKET Expression . RBRACKET
    (8) BinaryExpression -> Expression . PLUS Expression
    (9) BinaryExpression -> Expression . MINUS Expression
    (10) BinaryExpression -> Expression . TIMES Expression
    (11) BinaryExpression -> Expression . DIVIDE Expression
    (12) BinaryExpression -> Expression . MOD Expression
    (13) BinaryExpression -> Expression . LEQ Expression
    (14) BinaryExpression -> Expression . GEQ Expression
    (15) BinaryExpression -> Expression . LT Expression
    (16) BinaryExpression -> Expression . GT Expression
    (17) BinaryExpression -> Expression . EQ Expression
    (18) BinaryExpression -> Expression . NE Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET
    (32) DotExpression -> Expression . DOT ID

    RBRACKET        shift and go to state 163
    PLUS            shift and go to state 104
    MINUS           shift and go to state 105
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107
    MOD             shift and go to state 108
    LEQ             shift and go to state 109
    GEQ             shift and go to state 110
    LT              shift and go to state 111
    GT              shift and go to state 112
    EQ              shift and go to state 113
    NE              shift and go to state 114
    LBRACKET        shift and go to state 115
    DOT             shift and go to state 116


state 147

    (32) DotExpression -> Expression DOT ID .

    SEMICOLON       reduce using rule 32 (DotExpression -> Expression DOT ID .)
    ASSIGNMENT      reduce using rule 32 (DotExpression -> Expression DOT ID .)
    PLUS            reduce using rule 32 (DotExpression -> Expression DOT ID .)
    MINUS           reduce using rule 32 (DotExpression -> Expression DOT ID .)
    TIMES           reduce using rule 32 (DotExpression -> Expression DOT ID .)
    DIVIDE          reduce using rule 32 (DotExpression -> Expression DOT ID .)
    MOD             reduce using rule 32 (DotExpression -> Expression DOT ID .)
    LEQ             reduce using rule 32 (DotExpression -> Expression DOT ID .)
    GEQ             reduce using rule 32 (DotExpression -> Expression DOT ID .)
    LT              reduce using rule 32 (DotExpression -> Expression DOT ID .)
    GT              reduce using rule 32 (DotExpression -> Expression DOT ID .)
    EQ              reduce using rule 32 (DotExpression -> Expression DOT ID .)
    NE              reduce using rule 32 (DotExpression -> Expression DOT ID .)
    LBRACKET        reduce using rule 32 (DotExpression -> Expression DOT ID .)
    DOT             reduce using rule 32 (DotExpression -> Expression DOT ID .)
    RPAREN          reduce using rule 32 (DotExpression -> Expression DOT ID .)
    LET             reduce using rule 32 (DotExpression -> Expression DOT ID .)
    IF              reduce using rule 32 (DotExpression -> Expression DOT ID .)
    FOR             reduce using rule 32 (DotExpression -> Expression DOT ID .)
    WHILE           reduce using rule 32 (DotExpression -> Expression DOT ID .)
    BREAK           reduce using rule 32 (DotExpression -> Expression DOT ID .)
    RETURN          reduce using rule 32 (DotExpression -> Expression DOT ID .)
    LPAREN          reduce using rule 32 (DotExpression -> Expression DOT ID .)
    LBRACE          reduce using rule 32 (DotExpression -> Expression DOT ID .)
    AMPERSAND       reduce using rule 32 (DotExpression -> Expression DOT ID .)
    INTL            reduce using rule 32 (DotExpression -> Expression DOT ID .)
    BOOLL           reduce using rule 32 (DotExpression -> Expression DOT ID .)
    ID              reduce using rule 32 (DotExpression -> Expression DOT ID .)
    RBRACE          reduce using rule 32 (DotExpression -> Expression DOT ID .)
    RBRACKET        reduce using rule 32 (DotExpression -> Expression DOT ID .)
    COMMA           reduce using rule 32 (DotExpression -> Expression DOT ID .)


state 148

    (44) InitStatement -> LET ID ASSIGNMENT . Expression SEMICOLON
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (8) BinaryExpression -> . Expression PLUS Expression
    (9) BinaryExpression -> . Expression MINUS Expression
    (10) BinaryExpression -> . Expression TIMES Expression
    (11) BinaryExpression -> . Expression DIVIDE Expression
    (12) BinaryExpression -> . Expression MOD Expression
    (13) BinaryExpression -> . Expression LEQ Expression
    (14) BinaryExpression -> . Expression GEQ Expression
    (15) BinaryExpression -> . Expression LT Expression
    (16) BinaryExpression -> . Expression GT Expression
    (17) BinaryExpression -> . Expression EQ Expression
    (18) BinaryExpression -> . Expression NE Expression
    (81) UnaryExpression -> . Literal
    (82) UnaryExpression -> . FunctionCall
    (83) UnaryExpression -> . BracketCall
    (84) UnaryExpression -> . InitCall
    (85) UnaryExpression -> . DotExpression
    (86) UnaryExpression -> . LPAREN Expression RPAREN
    (87) UnaryExpression -> . DereferenceExpression
    (88) UnaryExpression -> . AddressExpression
    (46) Literal -> . IntLiteral
    (47) Literal -> . BoolLiteral
    (36) FunctionCall -> . TypeExpression LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (43) InitCall -> . TypeExpression LBRACE ArgumentListR RBRACE
    (31) DotExpression -> . TypeExpression
    (32) DotExpression -> . Expression DOT ID
    (30) DereferenceExpression -> . TIMES Expression
    (1) AddressExpression -> . AMPERSAND Expression
    (45) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL
    (73) TypeExpression -> . ID
    (74) TypeExpression -> . ID LT TypeExpressionListR GT

    LPAREN          shift and go to state 74
    TIMES           shift and go to state 82
    AMPERSAND       shift and go to state 92
    INTL            shift and go to state 79
    BOOLL           shift and go to state 93
    ID              shift and go to state 23

    Expression                     shift and go to state 164
    BinaryExpression               shift and go to state 71
    UnaryExpression                shift and go to state 72
    Literal                        shift and go to state 83
    FunctionCall                   shift and go to state 84
    BracketCall                    shift and go to state 85
    InitCall                       shift and go to state 86
    DotExpression                  shift and go to state 87
    DereferenceExpression          shift and go to state 88
    AddressExpression              shift and go to state 89
    IntLiteral                     shift and go to state 90
    BoolLiteral                    shift and go to state 91
    TypeExpression                 shift and go to state 81

state 149

    (41) IfElseStatement -> IF LPAREN Expression . RPAREN Block ELSE Block
    (42) IfElseStatement -> IF LPAREN Expression . RPAREN Block
    (8) BinaryExpression -> Expression . PLUS Expression
    (9) BinaryExpression -> Expression . MINUS Expression
    (10) BinaryExpression -> Expression . TIMES Expression
    (11) BinaryExpression -> Expression . DIVIDE Expression
    (12) BinaryExpression -> Expression . MOD Expression
    (13) BinaryExpression -> Expression . LEQ Expression
    (14) BinaryExpression -> Expression . GEQ Expression
    (15) BinaryExpression -> Expression . LT Expression
    (16) BinaryExpression -> Expression . GT Expression
    (17) BinaryExpression -> Expression . EQ Expression
    (18) BinaryExpression -> Expression . NE Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET
    (32) DotExpression -> Expression . DOT ID

    RPAREN          shift and go to state 165
    PLUS            shift and go to state 104
    MINUS           shift and go to state 105
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107
    MOD             shift and go to state 108
    LEQ             shift and go to state 109
    GEQ             shift and go to state 110
    LT              shift and go to state 111
    GT              shift and go to state 112
    EQ              shift and go to state 113
    NE              shift and go to state 114
    LBRACKET        shift and go to state 115
    DOT             shift and go to state 116


state 150

    (86) UnaryExpression -> LPAREN Expression RPAREN .

    SEMICOLON       reduce using rule 86 (UnaryExpression -> LPAREN Expression RPAREN .)
    ASSIGNMENT      reduce using rule 86 (UnaryExpression -> LPAREN Expression RPAREN .)
    PLUS            reduce using rule 86 (UnaryExpression -> LPAREN Expression RPAREN .)
    MINUS           reduce using rule 86 (UnaryExpression -> LPAREN Expression RPAREN .)
    TIMES           reduce using rule 86 (UnaryExpression -> LPAREN Expression RPAREN .)
    DIVIDE          reduce using rule 86 (UnaryExpression -> LPAREN Expression RPAREN .)
    MOD             reduce using rule 86 (UnaryExpression -> LPAREN Expression RPAREN .)
    LEQ             reduce using rule 86 (UnaryExpression -> LPAREN Expression RPAREN .)
    GEQ             reduce using rule 86 (UnaryExpression -> LPAREN Expression RPAREN .)
    LT              reduce using rule 86 (UnaryExpression -> LPAREN Expression RPAREN .)
    GT              reduce using rule 86 (UnaryExpression -> LPAREN Expression RPAREN .)
    EQ              reduce using rule 86 (UnaryExpression -> LPAREN Expression RPAREN .)
    NE              reduce using rule 86 (UnaryExpression -> LPAREN Expression RPAREN .)
    LBRACKET        reduce using rule 86 (UnaryExpression -> LPAREN Expression RPAREN .)
    DOT             reduce using rule 86 (UnaryExpression -> LPAREN Expression RPAREN .)
    RPAREN          reduce using rule 86 (UnaryExpression -> LPAREN Expression RPAREN .)
    LET             reduce using rule 86 (UnaryExpression -> LPAREN Expression RPAREN .)
    IF              reduce using rule 86 (UnaryExpression -> LPAREN Expression RPAREN .)
    FOR             reduce using rule 86 (UnaryExpression -> LPAREN Expression RPAREN .)
    WHILE           reduce using rule 86 (UnaryExpression -> LPAREN Expression RPAREN .)
    BREAK           reduce using rule 86 (UnaryExpression -> LPAREN Expression RPAREN .)
    RETURN          reduce using rule 86 (UnaryExpression -> LPAREN Expression RPAREN .)
    LPAREN          reduce using rule 86 (UnaryExpression -> LPAREN Expression RPAREN .)
    LBRACE          reduce using rule 86 (UnaryExpression -> LPAREN Expression RPAREN .)
    AMPERSAND       reduce using rule 86 (UnaryExpression -> LPAREN Expression RPAREN .)
    INTL            reduce using rule 86 (UnaryExpression -> LPAREN Expression RPAREN .)
    BOOLL           reduce using rule 86 (UnaryExpression -> LPAREN Expression RPAREN .)
    ID              reduce using rule 86 (UnaryExpression -> LPAREN Expression RPAREN .)
    RBRACE          reduce using rule 86 (UnaryExpression -> LPAREN Expression RPAREN .)
    RBRACKET        reduce using rule 86 (UnaryExpression -> LPAREN Expression RPAREN .)
    COMMA           reduce using rule 86 (UnaryExpression -> LPAREN Expression RPAREN .)


state 151

    (35) ForStatement -> FOR LPAREN Statement . Expression SEMICOLON Statement RPAREN Block
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (8) BinaryExpression -> . Expression PLUS Expression
    (9) BinaryExpression -> . Expression MINUS Expression
    (10) BinaryExpression -> . Expression TIMES Expression
    (11) BinaryExpression -> . Expression DIVIDE Expression
    (12) BinaryExpression -> . Expression MOD Expression
    (13) BinaryExpression -> . Expression LEQ Expression
    (14) BinaryExpression -> . Expression GEQ Expression
    (15) BinaryExpression -> . Expression LT Expression
    (16) BinaryExpression -> . Expression GT Expression
    (17) BinaryExpression -> . Expression EQ Expression
    (18) BinaryExpression -> . Expression NE Expression
    (81) UnaryExpression -> . Literal
    (82) UnaryExpression -> . FunctionCall
    (83) UnaryExpression -> . BracketCall
    (84) UnaryExpression -> . InitCall
    (85) UnaryExpression -> . DotExpression
    (86) UnaryExpression -> . LPAREN Expression RPAREN
    (87) UnaryExpression -> . DereferenceExpression
    (88) UnaryExpression -> . AddressExpression
    (46) Literal -> . IntLiteral
    (47) Literal -> . BoolLiteral
    (36) FunctionCall -> . TypeExpression LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (43) InitCall -> . TypeExpression LBRACE ArgumentListR RBRACE
    (31) DotExpression -> . TypeExpression
    (32) DotExpression -> . Expression DOT ID
    (30) DereferenceExpression -> . TIMES Expression
    (1) AddressExpression -> . AMPERSAND Expression
    (45) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL
    (73) TypeExpression -> . ID
    (74) TypeExpression -> . ID LT TypeExpressionListR GT

    LPAREN          shift and go to state 74
    TIMES           shift and go to state 82
    AMPERSAND       shift and go to state 92
    INTL            shift and go to state 79
    BOOLL           shift and go to state 93
    ID              shift and go to state 23

    Expression                     shift and go to state 166
    BinaryExpression               shift and go to state 71
    UnaryExpression                shift and go to state 72
    Literal                        shift and go to state 83
    FunctionCall                   shift and go to state 84
    BracketCall                    shift and go to state 85
    InitCall                       shift and go to state 86
    DotExpression                  shift and go to state 87
    DereferenceExpression          shift and go to state 88
    AddressExpression              shift and go to state 89
    IntLiteral                     shift and go to state 90
    BoolLiteral                    shift and go to state 91
    TypeExpression                 shift and go to state 81

state 152

    (89) WhileStatement -> WHILE LPAREN Expression . RPAREN Block
    (8) BinaryExpression -> Expression . PLUS Expression
    (9) BinaryExpression -> Expression . MINUS Expression
    (10) BinaryExpression -> Expression . TIMES Expression
    (11) BinaryExpression -> Expression . DIVIDE Expression
    (12) BinaryExpression -> Expression . MOD Expression
    (13) BinaryExpression -> Expression . LEQ Expression
    (14) BinaryExpression -> Expression . GEQ Expression
    (15) BinaryExpression -> Expression . LT Expression
    (16) BinaryExpression -> Expression . GT Expression
    (17) BinaryExpression -> Expression . EQ Expression
    (18) BinaryExpression -> Expression . NE Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET
    (32) DotExpression -> Expression . DOT ID

    RPAREN          shift and go to state 167
    PLUS            shift and go to state 104
    MINUS           shift and go to state 105
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107
    MOD             shift and go to state 108
    LEQ             shift and go to state 109
    GEQ             shift and go to state 110
    LT              shift and go to state 111
    GT              shift and go to state 112
    EQ              shift and go to state 113
    NE              shift and go to state 114
    LBRACKET        shift and go to state 115
    DOT             shift and go to state 116


state 153

    (24) BreakStatement -> BREAK INTL SEMICOLON .

    LET             reduce using rule 24 (BreakStatement -> BREAK INTL SEMICOLON .)
    IF              reduce using rule 24 (BreakStatement -> BREAK INTL SEMICOLON .)
    FOR             reduce using rule 24 (BreakStatement -> BREAK INTL SEMICOLON .)
    WHILE           reduce using rule 24 (BreakStatement -> BREAK INTL SEMICOLON .)
    BREAK           reduce using rule 24 (BreakStatement -> BREAK INTL SEMICOLON .)
    RETURN          reduce using rule 24 (BreakStatement -> BREAK INTL SEMICOLON .)
    SEMICOLON       reduce using rule 24 (BreakStatement -> BREAK INTL SEMICOLON .)
    LPAREN          reduce using rule 24 (BreakStatement -> BREAK INTL SEMICOLON .)
    LBRACE          reduce using rule 24 (BreakStatement -> BREAK INTL SEMICOLON .)
    TIMES           reduce using rule 24 (BreakStatement -> BREAK INTL SEMICOLON .)
    AMPERSAND       reduce using rule 24 (BreakStatement -> BREAK INTL SEMICOLON .)
    INTL            reduce using rule 24 (BreakStatement -> BREAK INTL SEMICOLON .)
    BOOLL           reduce using rule 24 (BreakStatement -> BREAK INTL SEMICOLON .)
    ID              reduce using rule 24 (BreakStatement -> BREAK INTL SEMICOLON .)
    RBRACE          reduce using rule 24 (BreakStatement -> BREAK INTL SEMICOLON .)
    RPAREN          reduce using rule 24 (BreakStatement -> BREAK INTL SEMICOLON .)


state 154

    (52) ReturnStatement -> RETURN Expression SEMICOLON .

    LET             reduce using rule 52 (ReturnStatement -> RETURN Expression SEMICOLON .)
    IF              reduce using rule 52 (ReturnStatement -> RETURN Expression SEMICOLON .)
    FOR             reduce using rule 52 (ReturnStatement -> RETURN Expression SEMICOLON .)
    WHILE           reduce using rule 52 (ReturnStatement -> RETURN Expression SEMICOLON .)
    BREAK           reduce using rule 52 (ReturnStatement -> RETURN Expression SEMICOLON .)
    RETURN          reduce using rule 52 (ReturnStatement -> RETURN Expression SEMICOLON .)
    SEMICOLON       reduce using rule 52 (ReturnStatement -> RETURN Expression SEMICOLON .)
    LPAREN          reduce using rule 52 (ReturnStatement -> RETURN Expression SEMICOLON .)
    LBRACE          reduce using rule 52 (ReturnStatement -> RETURN Expression SEMICOLON .)
    TIMES           reduce using rule 52 (ReturnStatement -> RETURN Expression SEMICOLON .)
    AMPERSAND       reduce using rule 52 (ReturnStatement -> RETURN Expression SEMICOLON .)
    INTL            reduce using rule 52 (ReturnStatement -> RETURN Expression SEMICOLON .)
    BOOLL           reduce using rule 52 (ReturnStatement -> RETURN Expression SEMICOLON .)
    ID              reduce using rule 52 (ReturnStatement -> RETURN Expression SEMICOLON .)
    RBRACE          reduce using rule 52 (ReturnStatement -> RETURN Expression SEMICOLON .)
    RPAREN          reduce using rule 52 (ReturnStatement -> RETURN Expression SEMICOLON .)


state 155

    (36) FunctionCall -> TypeExpression LPAREN ArgumentListR . RPAREN

    RPAREN          shift and go to state 168


state 156

    (3) ArgumentListR -> Argument . COMMA ArgumentListR
    (4) ArgumentListR -> Argument .

    COMMA           shift and go to state 169
    RPAREN          reduce using rule 4 (ArgumentListR -> Argument .)
    RBRACE          reduce using rule 4 (ArgumentListR -> Argument .)


state 157

    (5) ArgumentListR -> empty .

    RPAREN          reduce using rule 5 (ArgumentListR -> empty .)
    RBRACE          reduce using rule 5 (ArgumentListR -> empty .)


state 158

    (2) Argument -> Expression .
    (8) BinaryExpression -> Expression . PLUS Expression
    (9) BinaryExpression -> Expression . MINUS Expression
    (10) BinaryExpression -> Expression . TIMES Expression
    (11) BinaryExpression -> Expression . DIVIDE Expression
    (12) BinaryExpression -> Expression . MOD Expression
    (13) BinaryExpression -> Expression . LEQ Expression
    (14) BinaryExpression -> Expression . GEQ Expression
    (15) BinaryExpression -> Expression . LT Expression
    (16) BinaryExpression -> Expression . GT Expression
    (17) BinaryExpression -> Expression . EQ Expression
    (18) BinaryExpression -> Expression . NE Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET
    (32) DotExpression -> Expression . DOT ID

    COMMA           reduce using rule 2 (Argument -> Expression .)
    RPAREN          reduce using rule 2 (Argument -> Expression .)
    RBRACE          reduce using rule 2 (Argument -> Expression .)
    PLUS            shift and go to state 104
    MINUS           shift and go to state 105
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107
    MOD             shift and go to state 108
    LEQ             shift and go to state 109
    GEQ             shift and go to state 110
    LT              shift and go to state 111
    GT              shift and go to state 112
    EQ              shift and go to state 113
    NE              shift and go to state 114
    LBRACKET        shift and go to state 115
    DOT             shift and go to state 116


state 159

    (43) InitCall -> TypeExpression LBRACE ArgumentListR . RBRACE

    RBRACE          shift and go to state 170


state 160

    (38) FunctionDefinition -> FN ID LT TypeParameterListR GT LPAREN ParameterListR RPAREN Block .

    FN              reduce using rule 38 (FunctionDefinition -> FN ID LT TypeParameterListR GT LPAREN ParameterListR RPAREN Block .)
    STRUCT          reduce using rule 38 (FunctionDefinition -> FN ID LT TypeParameterListR GT LPAREN ParameterListR RPAREN Block .)
    $end            reduce using rule 38 (FunctionDefinition -> FN ID LT TypeParameterListR GT LPAREN ParameterListR RPAREN Block .)


state 161

    (40) FunctionDefinition -> FN ID LT TypeParameterListR GT LPAREN ParameterListR RPAREN ARROW . TypeExpression Block
    (73) TypeExpression -> . ID
    (74) TypeExpression -> . ID LT TypeExpressionListR GT

    ID              shift and go to state 23

    TypeExpression                 shift and go to state 171

state 162

    (6) AssignmentStatement -> Expression ASSIGNMENT Expression SEMICOLON .

    LET             reduce using rule 6 (AssignmentStatement -> Expression ASSIGNMENT Expression SEMICOLON .)
    IF              reduce using rule 6 (AssignmentStatement -> Expression ASSIGNMENT Expression SEMICOLON .)
    FOR             reduce using rule 6 (AssignmentStatement -> Expression ASSIGNMENT Expression SEMICOLON .)
    WHILE           reduce using rule 6 (AssignmentStatement -> Expression ASSIGNMENT Expression SEMICOLON .)
    BREAK           reduce using rule 6 (AssignmentStatement -> Expression ASSIGNMENT Expression SEMICOLON .)
    RETURN          reduce using rule 6 (AssignmentStatement -> Expression ASSIGNMENT Expression SEMICOLON .)
    SEMICOLON       reduce using rule 6 (AssignmentStatement -> Expression ASSIGNMENT Expression SEMICOLON .)
    LPAREN          reduce using rule 6 (AssignmentStatement -> Expression ASSIGNMENT Expression SEMICOLON .)
    LBRACE          reduce using rule 6 (AssignmentStatement -> Expression ASSIGNMENT Expression SEMICOLON .)
    TIMES           reduce using rule 6 (AssignmentStatement -> Expression ASSIGNMENT Expression SEMICOLON .)
    AMPERSAND       reduce using rule 6 (AssignmentStatement -> Expression ASSIGNMENT Expression SEMICOLON .)
    INTL            reduce using rule 6 (AssignmentStatement -> Expression ASSIGNMENT Expression SEMICOLON .)
    BOOLL           reduce using rule 6 (AssignmentStatement -> Expression ASSIGNMENT Expression SEMICOLON .)
    ID              reduce using rule 6 (AssignmentStatement -> Expression ASSIGNMENT Expression SEMICOLON .)
    RBRACE          reduce using rule 6 (AssignmentStatement -> Expression ASSIGNMENT Expression SEMICOLON .)
    RPAREN          reduce using rule 6 (AssignmentStatement -> Expression ASSIGNMENT Expression SEMICOLON .)


state 163

    (23) BracketCall -> Expression LBRACKET Expression RBRACKET .

    SEMICOLON       reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    ASSIGNMENT      reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    PLUS            reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    MINUS           reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    TIMES           reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    DIVIDE          reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    MOD             reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    LEQ             reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    GEQ             reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    LT              reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    GT              reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    EQ              reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    NE              reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    LBRACKET        reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    DOT             reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    RPAREN          reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    LET             reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    IF              reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    FOR             reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    WHILE           reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    BREAK           reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    RETURN          reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    LPAREN          reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    LBRACE          reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    AMPERSAND       reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    INTL            reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    BOOLL           reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    ID              reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    RBRACE          reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    RBRACKET        reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    COMMA           reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)


state 164

    (44) InitStatement -> LET ID ASSIGNMENT Expression . SEMICOLON
    (8) BinaryExpression -> Expression . PLUS Expression
    (9) BinaryExpression -> Expression . MINUS Expression
    (10) BinaryExpression -> Expression . TIMES Expression
    (11) BinaryExpression -> Expression . DIVIDE Expression
    (12) BinaryExpression -> Expression . MOD Expression
    (13) BinaryExpression -> Expression . LEQ Expression
    (14) BinaryExpression -> Expression . GEQ Expression
    (15) BinaryExpression -> Expression . LT Expression
    (16) BinaryExpression -> Expression . GT Expression
    (17) BinaryExpression -> Expression . EQ Expression
    (18) BinaryExpression -> Expression . NE Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET
    (32) DotExpression -> Expression . DOT ID

    SEMICOLON       shift and go to state 172
    PLUS            shift and go to state 104
    MINUS           shift and go to state 105
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107
    MOD             shift and go to state 108
    LEQ             shift and go to state 109
    GEQ             shift and go to state 110
    LT              shift and go to state 111
    GT              shift and go to state 112
    EQ              shift and go to state 113
    NE              shift and go to state 114
    LBRACKET        shift and go to state 115
    DOT             shift and go to state 116


state 165

    (41) IfElseStatement -> IF LPAREN Expression RPAREN . Block ELSE Block
    (42) IfElseStatement -> IF LPAREN Expression RPAREN . Block
    (20) Block -> . LBRACE StatementListR RBRACE

    LBRACE          shift and go to state 45

    Block                          shift and go to state 173

state 166

    (35) ForStatement -> FOR LPAREN Statement Expression . SEMICOLON Statement RPAREN Block
    (8) BinaryExpression -> Expression . PLUS Expression
    (9) BinaryExpression -> Expression . MINUS Expression
    (10) BinaryExpression -> Expression . TIMES Expression
    (11) BinaryExpression -> Expression . DIVIDE Expression
    (12) BinaryExpression -> Expression . MOD Expression
    (13) BinaryExpression -> Expression . LEQ Expression
    (14) BinaryExpression -> Expression . GEQ Expression
    (15) BinaryExpression -> Expression . LT Expression
    (16) BinaryExpression -> Expression . GT Expression
    (17) BinaryExpression -> Expression . EQ Expression
    (18) BinaryExpression -> Expression . NE Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET
    (32) DotExpression -> Expression . DOT ID

    SEMICOLON       shift and go to state 174
    PLUS            shift and go to state 104
    MINUS           shift and go to state 105
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107
    MOD             shift and go to state 108
    LEQ             shift and go to state 109
    GEQ             shift and go to state 110
    LT              shift and go to state 111
    GT              shift and go to state 112
    EQ              shift and go to state 113
    NE              shift and go to state 114
    LBRACKET        shift and go to state 115
    DOT             shift and go to state 116


state 167

    (89) WhileStatement -> WHILE LPAREN Expression RPAREN . Block
    (20) Block -> . LBRACE StatementListR RBRACE

    LBRACE          shift and go to state 45

    Block                          shift and go to state 175

state 168

    (36) FunctionCall -> TypeExpression LPAREN ArgumentListR RPAREN .

    SEMICOLON       reduce using rule 36 (FunctionCall -> TypeExpression LPAREN ArgumentListR RPAREN .)
    ASSIGNMENT      reduce using rule 36 (FunctionCall -> TypeExpression LPAREN ArgumentListR RPAREN .)
    PLUS            reduce using rule 36 (FunctionCall -> TypeExpression LPAREN ArgumentListR RPAREN .)
    MINUS           reduce using rule 36 (FunctionCall -> TypeExpression LPAREN ArgumentListR RPAREN .)
    TIMES           reduce using rule 36 (FunctionCall -> TypeExpression LPAREN ArgumentListR RPAREN .)
    DIVIDE          reduce using rule 36 (FunctionCall -> TypeExpression LPAREN ArgumentListR RPAREN .)
    MOD             reduce using rule 36 (FunctionCall -> TypeExpression LPAREN ArgumentListR RPAREN .)
    LEQ             reduce using rule 36 (FunctionCall -> TypeExpression LPAREN ArgumentListR RPAREN .)
    GEQ             reduce using rule 36 (FunctionCall -> TypeExpression LPAREN ArgumentListR RPAREN .)
    LT              reduce using rule 36 (FunctionCall -> TypeExpression LPAREN ArgumentListR RPAREN .)
    GT              reduce using rule 36 (FunctionCall -> TypeExpression LPAREN ArgumentListR RPAREN .)
    EQ              reduce using rule 36 (FunctionCall -> TypeExpression LPAREN ArgumentListR RPAREN .)
    NE              reduce using rule 36 (FunctionCall -> TypeExpression LPAREN ArgumentListR RPAREN .)
    LBRACKET        reduce using rule 36 (FunctionCall -> TypeExpression LPAREN ArgumentListR RPAREN .)
    DOT             reduce using rule 36 (FunctionCall -> TypeExpression LPAREN ArgumentListR RPAREN .)
    RPAREN          reduce using rule 36 (FunctionCall -> TypeExpression LPAREN ArgumentListR RPAREN .)
    LET             reduce using rule 36 (FunctionCall -> TypeExpression LPAREN ArgumentListR RPAREN .)
    IF              reduce using rule 36 (FunctionCall -> TypeExpression LPAREN ArgumentListR RPAREN .)
    FOR             reduce using rule 36 (FunctionCall -> TypeExpression LPAREN ArgumentListR RPAREN .)
    WHILE           reduce using rule 36 (FunctionCall -> TypeExpression LPAREN ArgumentListR RPAREN .)
    BREAK           reduce using rule 36 (FunctionCall -> TypeExpression LPAREN ArgumentListR RPAREN .)
    RETURN          reduce using rule 36 (FunctionCall -> TypeExpression LPAREN ArgumentListR RPAREN .)
    LPAREN          reduce using rule 36 (FunctionCall -> TypeExpression LPAREN ArgumentListR RPAREN .)
    LBRACE          reduce using rule 36 (FunctionCall -> TypeExpression LPAREN ArgumentListR RPAREN .)
    AMPERSAND       reduce using rule 36 (FunctionCall -> TypeExpression LPAREN ArgumentListR RPAREN .)
    INTL            reduce using rule 36 (FunctionCall -> TypeExpression LPAREN ArgumentListR RPAREN .)
    BOOLL           reduce using rule 36 (FunctionCall -> TypeExpression LPAREN ArgumentListR RPAREN .)
    ID              reduce using rule 36 (FunctionCall -> TypeExpression LPAREN ArgumentListR RPAREN .)
    RBRACE          reduce using rule 36 (FunctionCall -> TypeExpression LPAREN ArgumentListR RPAREN .)
    RBRACKET        reduce using rule 36 (FunctionCall -> TypeExpression LPAREN ArgumentListR RPAREN .)
    COMMA           reduce using rule 36 (FunctionCall -> TypeExpression LPAREN ArgumentListR RPAREN .)


state 169

    (3) ArgumentListR -> Argument COMMA . ArgumentListR
    (3) ArgumentListR -> . Argument COMMA ArgumentListR
    (4) ArgumentListR -> . Argument
    (5) ArgumentListR -> . empty
    (2) Argument -> . Expression
    (90) empty -> .
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (8) BinaryExpression -> . Expression PLUS Expression
    (9) BinaryExpression -> . Expression MINUS Expression
    (10) BinaryExpression -> . Expression TIMES Expression
    (11) BinaryExpression -> . Expression DIVIDE Expression
    (12) BinaryExpression -> . Expression MOD Expression
    (13) BinaryExpression -> . Expression LEQ Expression
    (14) BinaryExpression -> . Expression GEQ Expression
    (15) BinaryExpression -> . Expression LT Expression
    (16) BinaryExpression -> . Expression GT Expression
    (17) BinaryExpression -> . Expression EQ Expression
    (18) BinaryExpression -> . Expression NE Expression
    (81) UnaryExpression -> . Literal
    (82) UnaryExpression -> . FunctionCall
    (83) UnaryExpression -> . BracketCall
    (84) UnaryExpression -> . InitCall
    (85) UnaryExpression -> . DotExpression
    (86) UnaryExpression -> . LPAREN Expression RPAREN
    (87) UnaryExpression -> . DereferenceExpression
    (88) UnaryExpression -> . AddressExpression
    (46) Literal -> . IntLiteral
    (47) Literal -> . BoolLiteral
    (36) FunctionCall -> . TypeExpression LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (43) InitCall -> . TypeExpression LBRACE ArgumentListR RBRACE
    (31) DotExpression -> . TypeExpression
    (32) DotExpression -> . Expression DOT ID
    (30) DereferenceExpression -> . TIMES Expression
    (1) AddressExpression -> . AMPERSAND Expression
    (45) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL
    (73) TypeExpression -> . ID
    (74) TypeExpression -> . ID LT TypeExpressionListR GT

    RPAREN          reduce using rule 90 (empty -> .)
    RBRACE          reduce using rule 90 (empty -> .)
    LPAREN          shift and go to state 74
    TIMES           shift and go to state 82
    AMPERSAND       shift and go to state 92
    INTL            shift and go to state 79
    BOOLL           shift and go to state 93
    ID              shift and go to state 23

    Argument                       shift and go to state 156
    ArgumentListR                  shift and go to state 176
    empty                          shift and go to state 157
    Expression                     shift and go to state 158
    BinaryExpression               shift and go to state 71
    UnaryExpression                shift and go to state 72
    Literal                        shift and go to state 83
    FunctionCall                   shift and go to state 84
    BracketCall                    shift and go to state 85
    InitCall                       shift and go to state 86
    DotExpression                  shift and go to state 87
    DereferenceExpression          shift and go to state 88
    AddressExpression              shift and go to state 89
    IntLiteral                     shift and go to state 90
    BoolLiteral                    shift and go to state 91
    TypeExpression                 shift and go to state 81

state 170

    (43) InitCall -> TypeExpression LBRACE ArgumentListR RBRACE .

    SEMICOLON       reduce using rule 43 (InitCall -> TypeExpression LBRACE ArgumentListR RBRACE .)
    ASSIGNMENT      reduce using rule 43 (InitCall -> TypeExpression LBRACE ArgumentListR RBRACE .)
    PLUS            reduce using rule 43 (InitCall -> TypeExpression LBRACE ArgumentListR RBRACE .)
    MINUS           reduce using rule 43 (InitCall -> TypeExpression LBRACE ArgumentListR RBRACE .)
    TIMES           reduce using rule 43 (InitCall -> TypeExpression LBRACE ArgumentListR RBRACE .)
    DIVIDE          reduce using rule 43 (InitCall -> TypeExpression LBRACE ArgumentListR RBRACE .)
    MOD             reduce using rule 43 (InitCall -> TypeExpression LBRACE ArgumentListR RBRACE .)
    LEQ             reduce using rule 43 (InitCall -> TypeExpression LBRACE ArgumentListR RBRACE .)
    GEQ             reduce using rule 43 (InitCall -> TypeExpression LBRACE ArgumentListR RBRACE .)
    LT              reduce using rule 43 (InitCall -> TypeExpression LBRACE ArgumentListR RBRACE .)
    GT              reduce using rule 43 (InitCall -> TypeExpression LBRACE ArgumentListR RBRACE .)
    EQ              reduce using rule 43 (InitCall -> TypeExpression LBRACE ArgumentListR RBRACE .)
    NE              reduce using rule 43 (InitCall -> TypeExpression LBRACE ArgumentListR RBRACE .)
    LBRACKET        reduce using rule 43 (InitCall -> TypeExpression LBRACE ArgumentListR RBRACE .)
    DOT             reduce using rule 43 (InitCall -> TypeExpression LBRACE ArgumentListR RBRACE .)
    RPAREN          reduce using rule 43 (InitCall -> TypeExpression LBRACE ArgumentListR RBRACE .)
    LET             reduce using rule 43 (InitCall -> TypeExpression LBRACE ArgumentListR RBRACE .)
    IF              reduce using rule 43 (InitCall -> TypeExpression LBRACE ArgumentListR RBRACE .)
    FOR             reduce using rule 43 (InitCall -> TypeExpression LBRACE ArgumentListR RBRACE .)
    WHILE           reduce using rule 43 (InitCall -> TypeExpression LBRACE ArgumentListR RBRACE .)
    BREAK           reduce using rule 43 (InitCall -> TypeExpression LBRACE ArgumentListR RBRACE .)
    RETURN          reduce using rule 43 (InitCall -> TypeExpression LBRACE ArgumentListR RBRACE .)
    LPAREN          reduce using rule 43 (InitCall -> TypeExpression LBRACE ArgumentListR RBRACE .)
    LBRACE          reduce using rule 43 (InitCall -> TypeExpression LBRACE ArgumentListR RBRACE .)
    AMPERSAND       reduce using rule 43 (InitCall -> TypeExpression LBRACE ArgumentListR RBRACE .)
    INTL            reduce using rule 43 (InitCall -> TypeExpression LBRACE ArgumentListR RBRACE .)
    BOOLL           reduce using rule 43 (InitCall -> TypeExpression LBRACE ArgumentListR RBRACE .)
    ID              reduce using rule 43 (InitCall -> TypeExpression LBRACE ArgumentListR RBRACE .)
    RBRACE          reduce using rule 43 (InitCall -> TypeExpression LBRACE ArgumentListR RBRACE .)
    RBRACKET        reduce using rule 43 (InitCall -> TypeExpression LBRACE ArgumentListR RBRACE .)
    COMMA           reduce using rule 43 (InitCall -> TypeExpression LBRACE ArgumentListR RBRACE .)


state 171

    (40) FunctionDefinition -> FN ID LT TypeParameterListR GT LPAREN ParameterListR RPAREN ARROW TypeExpression . Block
    (20) Block -> . LBRACE StatementListR RBRACE

    LBRACE          shift and go to state 45

    Block                          shift and go to state 177

state 172

    (44) InitStatement -> LET ID ASSIGNMENT Expression SEMICOLON .

    LET             reduce using rule 44 (InitStatement -> LET ID ASSIGNMENT Expression SEMICOLON .)
    IF              reduce using rule 44 (InitStatement -> LET ID ASSIGNMENT Expression SEMICOLON .)
    FOR             reduce using rule 44 (InitStatement -> LET ID ASSIGNMENT Expression SEMICOLON .)
    WHILE           reduce using rule 44 (InitStatement -> LET ID ASSIGNMENT Expression SEMICOLON .)
    BREAK           reduce using rule 44 (InitStatement -> LET ID ASSIGNMENT Expression SEMICOLON .)
    RETURN          reduce using rule 44 (InitStatement -> LET ID ASSIGNMENT Expression SEMICOLON .)
    SEMICOLON       reduce using rule 44 (InitStatement -> LET ID ASSIGNMENT Expression SEMICOLON .)
    LPAREN          reduce using rule 44 (InitStatement -> LET ID ASSIGNMENT Expression SEMICOLON .)
    LBRACE          reduce using rule 44 (InitStatement -> LET ID ASSIGNMENT Expression SEMICOLON .)
    TIMES           reduce using rule 44 (InitStatement -> LET ID ASSIGNMENT Expression SEMICOLON .)
    AMPERSAND       reduce using rule 44 (InitStatement -> LET ID ASSIGNMENT Expression SEMICOLON .)
    INTL            reduce using rule 44 (InitStatement -> LET ID ASSIGNMENT Expression SEMICOLON .)
    BOOLL           reduce using rule 44 (InitStatement -> LET ID ASSIGNMENT Expression SEMICOLON .)
    ID              reduce using rule 44 (InitStatement -> LET ID ASSIGNMENT Expression SEMICOLON .)
    RBRACE          reduce using rule 44 (InitStatement -> LET ID ASSIGNMENT Expression SEMICOLON .)
    RPAREN          reduce using rule 44 (InitStatement -> LET ID ASSIGNMENT Expression SEMICOLON .)


state 173

    (41) IfElseStatement -> IF LPAREN Expression RPAREN Block . ELSE Block
    (42) IfElseStatement -> IF LPAREN Expression RPAREN Block .

    ELSE            shift and go to state 178
    LET             reduce using rule 42 (IfElseStatement -> IF LPAREN Expression RPAREN Block .)
    IF              reduce using rule 42 (IfElseStatement -> IF LPAREN Expression RPAREN Block .)
    FOR             reduce using rule 42 (IfElseStatement -> IF LPAREN Expression RPAREN Block .)
    WHILE           reduce using rule 42 (IfElseStatement -> IF LPAREN Expression RPAREN Block .)
    BREAK           reduce using rule 42 (IfElseStatement -> IF LPAREN Expression RPAREN Block .)
    RETURN          reduce using rule 42 (IfElseStatement -> IF LPAREN Expression RPAREN Block .)
    SEMICOLON       reduce using rule 42 (IfElseStatement -> IF LPAREN Expression RPAREN Block .)
    LPAREN          reduce using rule 42 (IfElseStatement -> IF LPAREN Expression RPAREN Block .)
    LBRACE          reduce using rule 42 (IfElseStatement -> IF LPAREN Expression RPAREN Block .)
    TIMES           reduce using rule 42 (IfElseStatement -> IF LPAREN Expression RPAREN Block .)
    AMPERSAND       reduce using rule 42 (IfElseStatement -> IF LPAREN Expression RPAREN Block .)
    INTL            reduce using rule 42 (IfElseStatement -> IF LPAREN Expression RPAREN Block .)
    BOOLL           reduce using rule 42 (IfElseStatement -> IF LPAREN Expression RPAREN Block .)
    ID              reduce using rule 42 (IfElseStatement -> IF LPAREN Expression RPAREN Block .)
    RBRACE          reduce using rule 42 (IfElseStatement -> IF LPAREN Expression RPAREN Block .)
    RPAREN          reduce using rule 42 (IfElseStatement -> IF LPAREN Expression RPAREN Block .)


state 174

    (35) ForStatement -> FOR LPAREN Statement Expression SEMICOLON . Statement RPAREN Block
    (54) Statement -> . AssignmentStatement
    (55) Statement -> . InitStatement
    (56) Statement -> . Expression SEMICOLON
    (57) Statement -> . IfElseStatement
    (58) Statement -> . ForStatement
    (59) Statement -> . WhileStatement
    (60) Statement -> . BreakStatement
    (61) Statement -> . ReturnStatement
    (62) Statement -> . BlockStatement
    (63) Statement -> . BlankStatement
    (64) Statement -> . TypeStatement
    (6) AssignmentStatement -> . Expression ASSIGNMENT Expression SEMICOLON
    (7) AssignmentStatement -> . Expression ASSIGNMENT Expression
    (44) InitStatement -> . LET ID ASSIGNMENT Expression SEMICOLON
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (41) IfElseStatement -> . IF LPAREN Expression RPAREN Block ELSE Block
    (42) IfElseStatement -> . IF LPAREN Expression RPAREN Block
    (35) ForStatement -> . FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block
    (89) WhileStatement -> . WHILE LPAREN Expression RPAREN Block
    (24) BreakStatement -> . BREAK INTL SEMICOLON
    (25) BreakStatement -> . BREAK SEMICOLON
    (52) ReturnStatement -> . RETURN Expression SEMICOLON
    (53) ReturnStatement -> . RETURN SEMICOLON
    (21) BlockStatement -> . Block
    (19) BlankStatement -> . SEMICOLON
    (80) TypeStatement -> . LET ID EQ TypeExpression SEMICOLON
    (8) BinaryExpression -> . Expression PLUS Expression
    (9) BinaryExpression -> . Expression MINUS Expression
    (10) BinaryExpression -> . Expression TIMES Expression
    (11) BinaryExpression -> . Expression DIVIDE Expression
    (12) BinaryExpression -> . Expression MOD Expression
    (13) BinaryExpression -> . Expression LEQ Expression
    (14) BinaryExpression -> . Expression GEQ Expression
    (15) BinaryExpression -> . Expression LT Expression
    (16) BinaryExpression -> . Expression GT Expression
    (17) BinaryExpression -> . Expression EQ Expression
    (18) BinaryExpression -> . Expression NE Expression
    (81) UnaryExpression -> . Literal
    (82) UnaryExpression -> . FunctionCall
    (83) UnaryExpression -> . BracketCall
    (84) UnaryExpression -> . InitCall
    (85) UnaryExpression -> . DotExpression
    (86) UnaryExpression -> . LPAREN Expression RPAREN
    (87) UnaryExpression -> . DereferenceExpression
    (88) UnaryExpression -> . AddressExpression
    (20) Block -> . LBRACE StatementListR RBRACE
    (46) Literal -> . IntLiteral
    (47) Literal -> . BoolLiteral
    (36) FunctionCall -> . TypeExpression LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (43) InitCall -> . TypeExpression LBRACE ArgumentListR RBRACE
    (31) DotExpression -> . TypeExpression
    (32) DotExpression -> . Expression DOT ID
    (30) DereferenceExpression -> . TIMES Expression
    (1) AddressExpression -> . AMPERSAND Expression
    (45) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL
    (73) TypeExpression -> . ID
    (74) TypeExpression -> . ID LT TypeExpressionListR GT

    LET             shift and go to state 70
    IF              shift and go to state 73
    FOR             shift and go to state 76
    WHILE           shift and go to state 77
    BREAK           shift and go to state 78
    RETURN          shift and go to state 80
    SEMICOLON       shift and go to state 61
    LPAREN          shift and go to state 74
    LBRACE          shift and go to state 45
    TIMES           shift and go to state 82
    AMPERSAND       shift and go to state 92
    INTL            shift and go to state 79
    BOOLL           shift and go to state 93
    ID              shift and go to state 23

    Statement                      shift and go to state 179
    Expression                     shift and go to state 60
    Block                          shift and go to state 75
    AssignmentStatement            shift and go to state 58
    InitStatement                  shift and go to state 59
    IfElseStatement                shift and go to state 62
    ForStatement                   shift and go to state 63
    WhileStatement                 shift and go to state 64
    BreakStatement                 shift and go to state 65
    ReturnStatement                shift and go to state 66
    BlockStatement                 shift and go to state 67
    BlankStatement                 shift and go to state 68
    TypeStatement                  shift and go to state 69
    BinaryExpression               shift and go to state 71
    UnaryExpression                shift and go to state 72
    TypeExpression                 shift and go to state 81
    Literal                        shift and go to state 83
    FunctionCall                   shift and go to state 84
    BracketCall                    shift and go to state 85
    InitCall                       shift and go to state 86
    DotExpression                  shift and go to state 87
    DereferenceExpression          shift and go to state 88
    AddressExpression              shift and go to state 89
    IntLiteral                     shift and go to state 90
    BoolLiteral                    shift and go to state 91

state 175

    (89) WhileStatement -> WHILE LPAREN Expression RPAREN Block .

    LET             reduce using rule 89 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    IF              reduce using rule 89 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    FOR             reduce using rule 89 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    WHILE           reduce using rule 89 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    BREAK           reduce using rule 89 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    RETURN          reduce using rule 89 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    SEMICOLON       reduce using rule 89 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    LPAREN          reduce using rule 89 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    LBRACE          reduce using rule 89 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    TIMES           reduce using rule 89 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    AMPERSAND       reduce using rule 89 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    INTL            reduce using rule 89 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    BOOLL           reduce using rule 89 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    ID              reduce using rule 89 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    RBRACE          reduce using rule 89 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    RPAREN          reduce using rule 89 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)


state 176

    (3) ArgumentListR -> Argument COMMA ArgumentListR .

    RPAREN          reduce using rule 3 (ArgumentListR -> Argument COMMA ArgumentListR .)
    RBRACE          reduce using rule 3 (ArgumentListR -> Argument COMMA ArgumentListR .)


state 177

    (40) FunctionDefinition -> FN ID LT TypeParameterListR GT LPAREN ParameterListR RPAREN ARROW TypeExpression Block .

    FN              reduce using rule 40 (FunctionDefinition -> FN ID LT TypeParameterListR GT LPAREN ParameterListR RPAREN ARROW TypeExpression Block .)
    STRUCT          reduce using rule 40 (FunctionDefinition -> FN ID LT TypeParameterListR GT LPAREN ParameterListR RPAREN ARROW TypeExpression Block .)
    $end            reduce using rule 40 (FunctionDefinition -> FN ID LT TypeParameterListR GT LPAREN ParameterListR RPAREN ARROW TypeExpression Block .)


state 178

    (41) IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE . Block
    (20) Block -> . LBRACE StatementListR RBRACE

    LBRACE          shift and go to state 45

    Block                          shift and go to state 180

state 179

    (35) ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement . RPAREN Block

    RPAREN          shift and go to state 181


state 180

    (41) IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .

    LET             reduce using rule 41 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)
    IF              reduce using rule 41 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)
    FOR             reduce using rule 41 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)
    WHILE           reduce using rule 41 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)
    BREAK           reduce using rule 41 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)
    RETURN          reduce using rule 41 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)
    SEMICOLON       reduce using rule 41 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)
    LPAREN          reduce using rule 41 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)
    LBRACE          reduce using rule 41 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)
    TIMES           reduce using rule 41 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)
    AMPERSAND       reduce using rule 41 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)
    INTL            reduce using rule 41 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)
    BOOLL           reduce using rule 41 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)
    ID              reduce using rule 41 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)
    RBRACE          reduce using rule 41 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)
    RPAREN          reduce using rule 41 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)


state 181

    (35) ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN . Block
    (20) Block -> . LBRACE StatementListR RBRACE

    LBRACE          shift and go to state 45

    Block                          shift and go to state 182

state 182

    (35) ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .

    LET             reduce using rule 35 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)
    IF              reduce using rule 35 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)
    FOR             reduce using rule 35 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)
    WHILE           reduce using rule 35 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)
    BREAK           reduce using rule 35 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)
    RETURN          reduce using rule 35 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)
    SEMICOLON       reduce using rule 35 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)
    LPAREN          reduce using rule 35 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)
    LBRACE          reduce using rule 35 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)
    TIMES           reduce using rule 35 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)
    AMPERSAND       reduce using rule 35 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)
    INTL            reduce using rule 35 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)
    BOOLL           reduce using rule 35 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)
    ID              reduce using rule 35 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)
    RBRACE          reduce using rule 35 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)
    RPAREN          reduce using rule 35 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LT in state 23 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 81 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 81 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 129 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 129 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 129 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 129 resolved as shift
WARNING: shift/reduce conflict for MOD in state 129 resolved as shift
WARNING: shift/reduce conflict for LEQ in state 129 resolved as shift
WARNING: shift/reduce conflict for GEQ in state 129 resolved as shift
WARNING: shift/reduce conflict for LT in state 129 resolved as shift
WARNING: shift/reduce conflict for GT in state 129 resolved as shift
WARNING: shift/reduce conflict for EQ in state 129 resolved as shift
WARNING: shift/reduce conflict for NE in state 129 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 129 resolved as shift
WARNING: shift/reduce conflict for DOT in state 129 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 134 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 134 resolved as shift
