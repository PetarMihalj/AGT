Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> CompilationUnit
Rule 1     AddressExpression -> AMPERSAND Expression
Rule 2     Argument -> Expression
Rule 3     ArgumentListR -> Argument COMMA ArgumentListR
Rule 4     ArgumentListR -> Argument
Rule 5     ArgumentListR -> empty
Rule 6     AssignmentStatement -> Expression ASSIGNMENT Expression SEMICOLON
Rule 7     AssignmentStatement -> Expression ASSIGNMENT Expression
Rule 8     BinaryExpression -> Expression PLUS Expression
Rule 9     BinaryExpression -> Expression MINUS Expression
Rule 10    BinaryExpression -> Expression TIMES Expression
Rule 11    BinaryExpression -> Expression DIVIDE Expression
Rule 12    BinaryExpression -> Expression MOD Expression
Rule 13    BinaryExpression -> Expression LEQ Expression
Rule 14    BinaryExpression -> Expression GEQ Expression
Rule 15    BinaryExpression -> Expression LT Expression
Rule 16    BinaryExpression -> Expression GT Expression
Rule 17    BinaryExpression -> Expression EQ Expression
Rule 18    BinaryExpression -> Expression NE Expression
Rule 19    BlankStatement -> SEMICOLON
Rule 20    Block -> LBRACE StatementListR RBRACE
Rule 21    BlockStatement -> Block
Rule 22    BoolLiteral -> BOOLL
Rule 23    BracketCall -> Expression LBRACKET Expression RBRACKET
Rule 24    BreakStatement -> BREAK INTL SEMICOLON
Rule 25    BreakStatement -> BREAK SEMICOLON
Rule 26    CompilationUnit -> DefinitionListR
Rule 27    DefinitionListR -> FunctionDefinition DefinitionListR
Rule 28    DefinitionListR -> StructDefinition DefinitionListR
Rule 29    DefinitionListR -> empty
Rule 30    DereferenceExpression -> TIMES Expression
Rule 31    DotExpression -> ID
Rule 32    DotExpression -> Expression DOT ID
Rule 33    Expression -> BinaryExpression
Rule 34    Expression -> UnaryExpression
Rule 35    ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block
Rule 36    FunctionCall -> ID LPAREN ArgumentListR RPAREN
Rule 37    FunctionCall -> ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN
Rule 38    FunctionDefinition -> FN ID LPAREN ParameterListR RPAREN Block
Rule 39    FunctionDefinition -> FN ID LT TypeParameterListR GT LPAREN ParameterListR RPAREN Block
Rule 40    FunctionDefinition -> FN ID LPAREN ParameterListR RPAREN ARROW TypeIdentifier Block
Rule 41    FunctionDefinition -> FN ID LT TypeParameterListR GT LPAREN ParameterListR RPAREN ARROW TypeIdentifier Block
Rule 42    IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block
Rule 43    IfElseStatement -> IF LPAREN Expression RPAREN Block
Rule 44    InitCall -> ID LBRACE ArgumentListR RBRACE
Rule 45    InitCall -> LT TypeIdentifier GT LBRACE ArgumentListR RBRACE
Rule 46    InitCall -> ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE
Rule 47    InitStatement -> LET ID ASSIGNMENT Expression SEMICOLON
Rule 48    IntLiteral -> INTL
Rule 49    Literal -> IntLiteral
Rule 50    Literal -> BoolLiteral
Rule 51    Parameter -> TypeIdentifier ID
Rule 52    ParameterListR -> Parameter COMMA ParameterListR
Rule 53    ParameterListR -> Parameter
Rule 54    ParameterListR -> empty
Rule 55    ReturnStatement -> RETURN Expression SEMICOLON
Rule 56    ReturnStatement -> RETURN SEMICOLON
Rule 57    Statement -> AssignmentStatement
Rule 58    Statement -> InitStatement
Rule 59    Statement -> Expression SEMICOLON
Rule 60    Statement -> IfElseStatement
Rule 61    Statement -> ForStatement
Rule 62    Statement -> WhileStatement
Rule 63    Statement -> BreakStatement
Rule 64    Statement -> ReturnStatement
Rule 65    Statement -> BlockStatement
Rule 66    Statement -> BlankStatement
Rule 67    StatementListR -> Statement StatementListR
Rule 68    StatementListR -> empty
Rule 69    StructDefinition -> STRUCT ID LBRACE StructMemberListR RBRACE
Rule 70    StructDefinition -> STRUCT ID LT TypeParameterListR GT LBRACE StructMemberListR RBRACE
Rule 71    StructMember -> TypeIdentifier ID SEMICOLON
Rule 72    StructMemberListR -> StructMember StructMemberListR
Rule 73    StructMemberListR -> empty
Rule 74    TypeArgumentListR -> TypeIdentifier COMMA TypeArgumentListR
Rule 75    TypeArgumentListR -> TypeIdentifier
Rule 76    TypeArgumentListR -> empty
Rule 77    TypeIdentifier -> ID
Rule 78    TypeIdentifier -> TypeIdentifier DOT ID
Rule 79    TypeIdentifier -> TypeIdentifier TIMES
Rule 80    TypeIdentifier -> TypeIdentifier LT TypeArgumentListR GT
Rule 81    TypeParameter -> TypeIdentifier
Rule 82    TypeParameter -> ID ASSIGNMENT TypeIdentifier
Rule 83    TypeParameter -> SPEC ID ASSIGNMENT TypeIdentifier
Rule 84    TypeParameterListR -> TypeParameter COMMA TypeParameterListR
Rule 85    TypeParameterListR -> TypeParameter
Rule 86    TypeParameterListR -> empty
Rule 87    UnaryExpression -> Literal
Rule 88    UnaryExpression -> FunctionCall
Rule 89    UnaryExpression -> BracketCall
Rule 90    UnaryExpression -> InitCall
Rule 91    UnaryExpression -> DotExpression
Rule 92    UnaryExpression -> LPAREN Expression RPAREN
Rule 93    UnaryExpression -> DereferenceExpression
Rule 94    UnaryExpression -> AddressExpression
Rule 95    WhileStatement -> WHILE LPAREN Expression RPAREN Block
Rule 96    empty -> <empty>

Terminals, with rules where they appear

AMPERSAND            : 1
ARROW                : 40 41
ASSIGNMENT           : 6 7 47 82 83
BOOLL                : 22
BREAK                : 24 25
COMMA                : 3 52 74 84
DIVIDE               : 11
DOT                  : 32 78
ELSE                 : 42
EQ                   : 17
FN                   : 38 39 40 41
FOR                  : 35
GEQ                  : 14
GT                   : 16 37 39 41 45 46 70 80
ID                   : 31 32 36 37 38 39 40 41 44 46 47 51 69 70 71 77 78 82 83
IF                   : 42 43
INTL                 : 24 48
LBRACE               : 20 44 45 46 69 70
LBRACKET             : 23
LEQ                  : 13
LET                  : 47
LPAREN               : 35 36 37 38 39 40 41 42 43 92 95
LT                   : 15 37 39 41 45 46 70 80
MINUS                : 9
MOD                  : 12
NE                   : 18
PLUS                 : 8
RBRACE               : 20 44 45 46 69 70
RBRACKET             : 23
RETURN               : 55 56
RPAREN               : 35 36 37 38 39 40 41 42 43 92 95
SEMICOLON            : 6 19 24 25 35 47 55 56 59 71
SPEC                 : 83
STRUCT               : 69 70
TIMES                : 10 30 79
WHILE                : 95
error                : 

Nonterminals, with rules where they appear

AddressExpression    : 94
Argument             : 3 4
ArgumentListR        : 3 36 37 44 45 46
AssignmentStatement  : 57
BinaryExpression     : 33
BlankStatement       : 66
Block                : 21 35 38 39 40 41 42 42 43 95
BlockStatement       : 65
BoolLiteral          : 50
BracketCall          : 89
BreakStatement       : 63
CompilationUnit      : 0
DefinitionListR      : 26 27 28
DereferenceExpression : 93
DotExpression        : 91
Expression           : 1 2 6 6 7 7 8 8 9 9 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17 17 18 18 23 23 30 32 35 42 43 47 55 59 92 95
ForStatement         : 61
FunctionCall         : 88
FunctionDefinition   : 27
IfElseStatement      : 60
InitCall             : 90
InitStatement        : 58
IntLiteral           : 49
Literal              : 87
Parameter            : 52 53
ParameterListR       : 38 39 40 41 52
ReturnStatement      : 64
Statement            : 35 35 67
StatementListR       : 20 67
StructDefinition     : 28
StructMember         : 72
StructMemberListR    : 69 70 72
TypeArgumentListR    : 37 46 74 80
TypeIdentifier       : 40 41 45 51 71 74 75 78 79 80 81 82 83
TypeParameter        : 84 85
TypeParameterListR   : 39 41 70 84
UnaryExpression      : 34
WhileStatement       : 62
empty                : 5 29 54 68 73 76 86

Parsing method: LALR

state 0

    (0) S' -> . CompilationUnit
    (26) CompilationUnit -> . DefinitionListR
    (27) DefinitionListR -> . FunctionDefinition DefinitionListR
    (28) DefinitionListR -> . StructDefinition DefinitionListR
    (29) DefinitionListR -> . empty
    (38) FunctionDefinition -> . FN ID LPAREN ParameterListR RPAREN Block
    (39) FunctionDefinition -> . FN ID LT TypeParameterListR GT LPAREN ParameterListR RPAREN Block
    (40) FunctionDefinition -> . FN ID LPAREN ParameterListR RPAREN ARROW TypeIdentifier Block
    (41) FunctionDefinition -> . FN ID LT TypeParameterListR GT LPAREN ParameterListR RPAREN ARROW TypeIdentifier Block
    (69) StructDefinition -> . STRUCT ID LBRACE StructMemberListR RBRACE
    (70) StructDefinition -> . STRUCT ID LT TypeParameterListR GT LBRACE StructMemberListR RBRACE
    (96) empty -> .

    FN              shift and go to state 6
    STRUCT          shift and go to state 7
    $end            reduce using rule 96 (empty -> .)

    CompilationUnit                shift and go to state 1
    DefinitionListR                shift and go to state 2
    FunctionDefinition             shift and go to state 3
    StructDefinition               shift and go to state 4
    empty                          shift and go to state 5

state 1

    (0) S' -> CompilationUnit .



state 2

    (26) CompilationUnit -> DefinitionListR .

    $end            reduce using rule 26 (CompilationUnit -> DefinitionListR .)


state 3

    (27) DefinitionListR -> FunctionDefinition . DefinitionListR
    (27) DefinitionListR -> . FunctionDefinition DefinitionListR
    (28) DefinitionListR -> . StructDefinition DefinitionListR
    (29) DefinitionListR -> . empty
    (38) FunctionDefinition -> . FN ID LPAREN ParameterListR RPAREN Block
    (39) FunctionDefinition -> . FN ID LT TypeParameterListR GT LPAREN ParameterListR RPAREN Block
    (40) FunctionDefinition -> . FN ID LPAREN ParameterListR RPAREN ARROW TypeIdentifier Block
    (41) FunctionDefinition -> . FN ID LT TypeParameterListR GT LPAREN ParameterListR RPAREN ARROW TypeIdentifier Block
    (69) StructDefinition -> . STRUCT ID LBRACE StructMemberListR RBRACE
    (70) StructDefinition -> . STRUCT ID LT TypeParameterListR GT LBRACE StructMemberListR RBRACE
    (96) empty -> .

    FN              shift and go to state 6
    STRUCT          shift and go to state 7
    $end            reduce using rule 96 (empty -> .)

    FunctionDefinition             shift and go to state 3
    DefinitionListR                shift and go to state 8
    StructDefinition               shift and go to state 4
    empty                          shift and go to state 5

state 4

    (28) DefinitionListR -> StructDefinition . DefinitionListR
    (27) DefinitionListR -> . FunctionDefinition DefinitionListR
    (28) DefinitionListR -> . StructDefinition DefinitionListR
    (29) DefinitionListR -> . empty
    (38) FunctionDefinition -> . FN ID LPAREN ParameterListR RPAREN Block
    (39) FunctionDefinition -> . FN ID LT TypeParameterListR GT LPAREN ParameterListR RPAREN Block
    (40) FunctionDefinition -> . FN ID LPAREN ParameterListR RPAREN ARROW TypeIdentifier Block
    (41) FunctionDefinition -> . FN ID LT TypeParameterListR GT LPAREN ParameterListR RPAREN ARROW TypeIdentifier Block
    (69) StructDefinition -> . STRUCT ID LBRACE StructMemberListR RBRACE
    (70) StructDefinition -> . STRUCT ID LT TypeParameterListR GT LBRACE StructMemberListR RBRACE
    (96) empty -> .

    FN              shift and go to state 6
    STRUCT          shift and go to state 7
    $end            reduce using rule 96 (empty -> .)

    StructDefinition               shift and go to state 4
    DefinitionListR                shift and go to state 9
    FunctionDefinition             shift and go to state 3
    empty                          shift and go to state 5

state 5

    (29) DefinitionListR -> empty .

    $end            reduce using rule 29 (DefinitionListR -> empty .)


state 6

    (38) FunctionDefinition -> FN . ID LPAREN ParameterListR RPAREN Block
    (39) FunctionDefinition -> FN . ID LT TypeParameterListR GT LPAREN ParameterListR RPAREN Block
    (40) FunctionDefinition -> FN . ID LPAREN ParameterListR RPAREN ARROW TypeIdentifier Block
    (41) FunctionDefinition -> FN . ID LT TypeParameterListR GT LPAREN ParameterListR RPAREN ARROW TypeIdentifier Block

    ID              shift and go to state 10


state 7

    (69) StructDefinition -> STRUCT . ID LBRACE StructMemberListR RBRACE
    (70) StructDefinition -> STRUCT . ID LT TypeParameterListR GT LBRACE StructMemberListR RBRACE

    ID              shift and go to state 11


state 8

    (27) DefinitionListR -> FunctionDefinition DefinitionListR .

    $end            reduce using rule 27 (DefinitionListR -> FunctionDefinition DefinitionListR .)


state 9

    (28) DefinitionListR -> StructDefinition DefinitionListR .

    $end            reduce using rule 28 (DefinitionListR -> StructDefinition DefinitionListR .)


state 10

    (38) FunctionDefinition -> FN ID . LPAREN ParameterListR RPAREN Block
    (39) FunctionDefinition -> FN ID . LT TypeParameterListR GT LPAREN ParameterListR RPAREN Block
    (40) FunctionDefinition -> FN ID . LPAREN ParameterListR RPAREN ARROW TypeIdentifier Block
    (41) FunctionDefinition -> FN ID . LT TypeParameterListR GT LPAREN ParameterListR RPAREN ARROW TypeIdentifier Block

    LPAREN          shift and go to state 12
    LT              shift and go to state 13


state 11

    (69) StructDefinition -> STRUCT ID . LBRACE StructMemberListR RBRACE
    (70) StructDefinition -> STRUCT ID . LT TypeParameterListR GT LBRACE StructMemberListR RBRACE

    LBRACE          shift and go to state 14
    LT              shift and go to state 15


state 12

    (38) FunctionDefinition -> FN ID LPAREN . ParameterListR RPAREN Block
    (40) FunctionDefinition -> FN ID LPAREN . ParameterListR RPAREN ARROW TypeIdentifier Block
    (52) ParameterListR -> . Parameter COMMA ParameterListR
    (53) ParameterListR -> . Parameter
    (54) ParameterListR -> . empty
    (51) Parameter -> . TypeIdentifier ID
    (96) empty -> .
    (77) TypeIdentifier -> . ID
    (78) TypeIdentifier -> . TypeIdentifier DOT ID
    (79) TypeIdentifier -> . TypeIdentifier TIMES
    (80) TypeIdentifier -> . TypeIdentifier LT TypeArgumentListR GT

    RPAREN          reduce using rule 96 (empty -> .)
    ID              shift and go to state 16

    ParameterListR                 shift and go to state 17
    TypeIdentifier                 shift and go to state 18
    Parameter                      shift and go to state 19
    empty                          shift and go to state 20

state 13

    (39) FunctionDefinition -> FN ID LT . TypeParameterListR GT LPAREN ParameterListR RPAREN Block
    (41) FunctionDefinition -> FN ID LT . TypeParameterListR GT LPAREN ParameterListR RPAREN ARROW TypeIdentifier Block
    (84) TypeParameterListR -> . TypeParameter COMMA TypeParameterListR
    (85) TypeParameterListR -> . TypeParameter
    (86) TypeParameterListR -> . empty
    (81) TypeParameter -> . TypeIdentifier
    (82) TypeParameter -> . ID ASSIGNMENT TypeIdentifier
    (83) TypeParameter -> . SPEC ID ASSIGNMENT TypeIdentifier
    (96) empty -> .
    (77) TypeIdentifier -> . ID
    (78) TypeIdentifier -> . TypeIdentifier DOT ID
    (79) TypeIdentifier -> . TypeIdentifier TIMES
    (80) TypeIdentifier -> . TypeIdentifier LT TypeArgumentListR GT

    ID              shift and go to state 21
    SPEC            shift and go to state 26
    GT              reduce using rule 96 (empty -> .)

    TypeParameterListR             shift and go to state 22
    TypeIdentifier                 shift and go to state 23
    TypeParameter                  shift and go to state 24
    empty                          shift and go to state 25

state 14

    (69) StructDefinition -> STRUCT ID LBRACE . StructMemberListR RBRACE
    (72) StructMemberListR -> . StructMember StructMemberListR
    (73) StructMemberListR -> . empty
    (71) StructMember -> . TypeIdentifier ID SEMICOLON
    (96) empty -> .
    (77) TypeIdentifier -> . ID
    (78) TypeIdentifier -> . TypeIdentifier DOT ID
    (79) TypeIdentifier -> . TypeIdentifier TIMES
    (80) TypeIdentifier -> . TypeIdentifier LT TypeArgumentListR GT

    RBRACE          reduce using rule 96 (empty -> .)
    ID              shift and go to state 16

    StructMemberListR              shift and go to state 27
    StructMember                   shift and go to state 28
    empty                          shift and go to state 29
    TypeIdentifier                 shift and go to state 30

state 15

    (70) StructDefinition -> STRUCT ID LT . TypeParameterListR GT LBRACE StructMemberListR RBRACE
    (84) TypeParameterListR -> . TypeParameter COMMA TypeParameterListR
    (85) TypeParameterListR -> . TypeParameter
    (86) TypeParameterListR -> . empty
    (81) TypeParameter -> . TypeIdentifier
    (82) TypeParameter -> . ID ASSIGNMENT TypeIdentifier
    (83) TypeParameter -> . SPEC ID ASSIGNMENT TypeIdentifier
    (96) empty -> .
    (77) TypeIdentifier -> . ID
    (78) TypeIdentifier -> . TypeIdentifier DOT ID
    (79) TypeIdentifier -> . TypeIdentifier TIMES
    (80) TypeIdentifier -> . TypeIdentifier LT TypeArgumentListR GT

    ID              shift and go to state 21
    SPEC            shift and go to state 26
    GT              reduce using rule 96 (empty -> .)

    TypeParameterListR             shift and go to state 31
    TypeParameter                  shift and go to state 24
    empty                          shift and go to state 25
    TypeIdentifier                 shift and go to state 23

state 16

    (77) TypeIdentifier -> ID .

    ID              reduce using rule 77 (TypeIdentifier -> ID .)
    DOT             reduce using rule 77 (TypeIdentifier -> ID .)
    TIMES           reduce using rule 77 (TypeIdentifier -> ID .)
    LT              reduce using rule 77 (TypeIdentifier -> ID .)
    COMMA           reduce using rule 77 (TypeIdentifier -> ID .)
    GT              reduce using rule 77 (TypeIdentifier -> ID .)
    LBRACE          reduce using rule 77 (TypeIdentifier -> ID .)


state 17

    (38) FunctionDefinition -> FN ID LPAREN ParameterListR . RPAREN Block
    (40) FunctionDefinition -> FN ID LPAREN ParameterListR . RPAREN ARROW TypeIdentifier Block

    RPAREN          shift and go to state 32


state 18

    (51) Parameter -> TypeIdentifier . ID
    (78) TypeIdentifier -> TypeIdentifier . DOT ID
    (79) TypeIdentifier -> TypeIdentifier . TIMES
    (80) TypeIdentifier -> TypeIdentifier . LT TypeArgumentListR GT

    ID              shift and go to state 33
    DOT             shift and go to state 34
    TIMES           shift and go to state 35
    LT              shift and go to state 36


state 19

    (52) ParameterListR -> Parameter . COMMA ParameterListR
    (53) ParameterListR -> Parameter .

    COMMA           shift and go to state 37
    RPAREN          reduce using rule 53 (ParameterListR -> Parameter .)


state 20

    (54) ParameterListR -> empty .

    RPAREN          reduce using rule 54 (ParameterListR -> empty .)


state 21

    (82) TypeParameter -> ID . ASSIGNMENT TypeIdentifier
    (77) TypeIdentifier -> ID .

    ASSIGNMENT      shift and go to state 38
    DOT             reduce using rule 77 (TypeIdentifier -> ID .)
    TIMES           reduce using rule 77 (TypeIdentifier -> ID .)
    LT              reduce using rule 77 (TypeIdentifier -> ID .)
    COMMA           reduce using rule 77 (TypeIdentifier -> ID .)
    GT              reduce using rule 77 (TypeIdentifier -> ID .)


state 22

    (39) FunctionDefinition -> FN ID LT TypeParameterListR . GT LPAREN ParameterListR RPAREN Block
    (41) FunctionDefinition -> FN ID LT TypeParameterListR . GT LPAREN ParameterListR RPAREN ARROW TypeIdentifier Block

    GT              shift and go to state 39


state 23

    (81) TypeParameter -> TypeIdentifier .
    (78) TypeIdentifier -> TypeIdentifier . DOT ID
    (79) TypeIdentifier -> TypeIdentifier . TIMES
    (80) TypeIdentifier -> TypeIdentifier . LT TypeArgumentListR GT

    COMMA           reduce using rule 81 (TypeParameter -> TypeIdentifier .)
    GT              reduce using rule 81 (TypeParameter -> TypeIdentifier .)
    DOT             shift and go to state 34
    TIMES           shift and go to state 35
    LT              shift and go to state 36


state 24

    (84) TypeParameterListR -> TypeParameter . COMMA TypeParameterListR
    (85) TypeParameterListR -> TypeParameter .

    COMMA           shift and go to state 40
    GT              reduce using rule 85 (TypeParameterListR -> TypeParameter .)


state 25

    (86) TypeParameterListR -> empty .

    GT              reduce using rule 86 (TypeParameterListR -> empty .)


state 26

    (83) TypeParameter -> SPEC . ID ASSIGNMENT TypeIdentifier

    ID              shift and go to state 41


state 27

    (69) StructDefinition -> STRUCT ID LBRACE StructMemberListR . RBRACE

    RBRACE          shift and go to state 42


state 28

    (72) StructMemberListR -> StructMember . StructMemberListR
    (72) StructMemberListR -> . StructMember StructMemberListR
    (73) StructMemberListR -> . empty
    (71) StructMember -> . TypeIdentifier ID SEMICOLON
    (96) empty -> .
    (77) TypeIdentifier -> . ID
    (78) TypeIdentifier -> . TypeIdentifier DOT ID
    (79) TypeIdentifier -> . TypeIdentifier TIMES
    (80) TypeIdentifier -> . TypeIdentifier LT TypeArgumentListR GT

    RBRACE          reduce using rule 96 (empty -> .)
    ID              shift and go to state 16

    StructMember                   shift and go to state 28
    StructMemberListR              shift and go to state 43
    empty                          shift and go to state 29
    TypeIdentifier                 shift and go to state 30

state 29

    (73) StructMemberListR -> empty .

    RBRACE          reduce using rule 73 (StructMemberListR -> empty .)


state 30

    (71) StructMember -> TypeIdentifier . ID SEMICOLON
    (78) TypeIdentifier -> TypeIdentifier . DOT ID
    (79) TypeIdentifier -> TypeIdentifier . TIMES
    (80) TypeIdentifier -> TypeIdentifier . LT TypeArgumentListR GT

    ID              shift and go to state 44
    DOT             shift and go to state 34
    TIMES           shift and go to state 35
    LT              shift and go to state 36


state 31

    (70) StructDefinition -> STRUCT ID LT TypeParameterListR . GT LBRACE StructMemberListR RBRACE

    GT              shift and go to state 45


state 32

    (38) FunctionDefinition -> FN ID LPAREN ParameterListR RPAREN . Block
    (40) FunctionDefinition -> FN ID LPAREN ParameterListR RPAREN . ARROW TypeIdentifier Block
    (20) Block -> . LBRACE StatementListR RBRACE

    ARROW           shift and go to state 47
    LBRACE          shift and go to state 48

    Block                          shift and go to state 46

state 33

    (51) Parameter -> TypeIdentifier ID .

    COMMA           reduce using rule 51 (Parameter -> TypeIdentifier ID .)
    RPAREN          reduce using rule 51 (Parameter -> TypeIdentifier ID .)


state 34

    (78) TypeIdentifier -> TypeIdentifier DOT . ID

    ID              shift and go to state 49


state 35

    (79) TypeIdentifier -> TypeIdentifier TIMES .

    ID              reduce using rule 79 (TypeIdentifier -> TypeIdentifier TIMES .)
    DOT             reduce using rule 79 (TypeIdentifier -> TypeIdentifier TIMES .)
    TIMES           reduce using rule 79 (TypeIdentifier -> TypeIdentifier TIMES .)
    LT              reduce using rule 79 (TypeIdentifier -> TypeIdentifier TIMES .)
    COMMA           reduce using rule 79 (TypeIdentifier -> TypeIdentifier TIMES .)
    GT              reduce using rule 79 (TypeIdentifier -> TypeIdentifier TIMES .)
    LBRACE          reduce using rule 79 (TypeIdentifier -> TypeIdentifier TIMES .)


state 36

    (80) TypeIdentifier -> TypeIdentifier LT . TypeArgumentListR GT
    (74) TypeArgumentListR -> . TypeIdentifier COMMA TypeArgumentListR
    (75) TypeArgumentListR -> . TypeIdentifier
    (76) TypeArgumentListR -> . empty
    (77) TypeIdentifier -> . ID
    (78) TypeIdentifier -> . TypeIdentifier DOT ID
    (79) TypeIdentifier -> . TypeIdentifier TIMES
    (80) TypeIdentifier -> . TypeIdentifier LT TypeArgumentListR GT
    (96) empty -> .

    ID              shift and go to state 16
    GT              reduce using rule 96 (empty -> .)

    TypeIdentifier                 shift and go to state 50
    TypeArgumentListR              shift and go to state 51
    empty                          shift and go to state 52

state 37

    (52) ParameterListR -> Parameter COMMA . ParameterListR
    (52) ParameterListR -> . Parameter COMMA ParameterListR
    (53) ParameterListR -> . Parameter
    (54) ParameterListR -> . empty
    (51) Parameter -> . TypeIdentifier ID
    (96) empty -> .
    (77) TypeIdentifier -> . ID
    (78) TypeIdentifier -> . TypeIdentifier DOT ID
    (79) TypeIdentifier -> . TypeIdentifier TIMES
    (80) TypeIdentifier -> . TypeIdentifier LT TypeArgumentListR GT

    RPAREN          reduce using rule 96 (empty -> .)
    ID              shift and go to state 16

    Parameter                      shift and go to state 19
    ParameterListR                 shift and go to state 53
    empty                          shift and go to state 20
    TypeIdentifier                 shift and go to state 18

state 38

    (82) TypeParameter -> ID ASSIGNMENT . TypeIdentifier
    (77) TypeIdentifier -> . ID
    (78) TypeIdentifier -> . TypeIdentifier DOT ID
    (79) TypeIdentifier -> . TypeIdentifier TIMES
    (80) TypeIdentifier -> . TypeIdentifier LT TypeArgumentListR GT

    ID              shift and go to state 16

    TypeIdentifier                 shift and go to state 54

state 39

    (39) FunctionDefinition -> FN ID LT TypeParameterListR GT . LPAREN ParameterListR RPAREN Block
    (41) FunctionDefinition -> FN ID LT TypeParameterListR GT . LPAREN ParameterListR RPAREN ARROW TypeIdentifier Block

    LPAREN          shift and go to state 55


state 40

    (84) TypeParameterListR -> TypeParameter COMMA . TypeParameterListR
    (84) TypeParameterListR -> . TypeParameter COMMA TypeParameterListR
    (85) TypeParameterListR -> . TypeParameter
    (86) TypeParameterListR -> . empty
    (81) TypeParameter -> . TypeIdentifier
    (82) TypeParameter -> . ID ASSIGNMENT TypeIdentifier
    (83) TypeParameter -> . SPEC ID ASSIGNMENT TypeIdentifier
    (96) empty -> .
    (77) TypeIdentifier -> . ID
    (78) TypeIdentifier -> . TypeIdentifier DOT ID
    (79) TypeIdentifier -> . TypeIdentifier TIMES
    (80) TypeIdentifier -> . TypeIdentifier LT TypeArgumentListR GT

    ID              shift and go to state 21
    SPEC            shift and go to state 26
    GT              reduce using rule 96 (empty -> .)

    TypeParameter                  shift and go to state 24
    TypeParameterListR             shift and go to state 56
    empty                          shift and go to state 25
    TypeIdentifier                 shift and go to state 23

state 41

    (83) TypeParameter -> SPEC ID . ASSIGNMENT TypeIdentifier

    ASSIGNMENT      shift and go to state 57


state 42

    (69) StructDefinition -> STRUCT ID LBRACE StructMemberListR RBRACE .

    FN              reduce using rule 69 (StructDefinition -> STRUCT ID LBRACE StructMemberListR RBRACE .)
    STRUCT          reduce using rule 69 (StructDefinition -> STRUCT ID LBRACE StructMemberListR RBRACE .)
    $end            reduce using rule 69 (StructDefinition -> STRUCT ID LBRACE StructMemberListR RBRACE .)


state 43

    (72) StructMemberListR -> StructMember StructMemberListR .

    RBRACE          reduce using rule 72 (StructMemberListR -> StructMember StructMemberListR .)


state 44

    (71) StructMember -> TypeIdentifier ID . SEMICOLON

    SEMICOLON       shift and go to state 58


state 45

    (70) StructDefinition -> STRUCT ID LT TypeParameterListR GT . LBRACE StructMemberListR RBRACE

    LBRACE          shift and go to state 59


state 46

    (38) FunctionDefinition -> FN ID LPAREN ParameterListR RPAREN Block .

    FN              reduce using rule 38 (FunctionDefinition -> FN ID LPAREN ParameterListR RPAREN Block .)
    STRUCT          reduce using rule 38 (FunctionDefinition -> FN ID LPAREN ParameterListR RPAREN Block .)
    $end            reduce using rule 38 (FunctionDefinition -> FN ID LPAREN ParameterListR RPAREN Block .)


state 47

    (40) FunctionDefinition -> FN ID LPAREN ParameterListR RPAREN ARROW . TypeIdentifier Block
    (77) TypeIdentifier -> . ID
    (78) TypeIdentifier -> . TypeIdentifier DOT ID
    (79) TypeIdentifier -> . TypeIdentifier TIMES
    (80) TypeIdentifier -> . TypeIdentifier LT TypeArgumentListR GT

    ID              shift and go to state 16

    TypeIdentifier                 shift and go to state 60

state 48

    (20) Block -> LBRACE . StatementListR RBRACE
    (67) StatementListR -> . Statement StatementListR
    (68) StatementListR -> . empty
    (57) Statement -> . AssignmentStatement
    (58) Statement -> . InitStatement
    (59) Statement -> . Expression SEMICOLON
    (60) Statement -> . IfElseStatement
    (61) Statement -> . ForStatement
    (62) Statement -> . WhileStatement
    (63) Statement -> . BreakStatement
    (64) Statement -> . ReturnStatement
    (65) Statement -> . BlockStatement
    (66) Statement -> . BlankStatement
    (96) empty -> .
    (6) AssignmentStatement -> . Expression ASSIGNMENT Expression SEMICOLON
    (7) AssignmentStatement -> . Expression ASSIGNMENT Expression
    (47) InitStatement -> . LET ID ASSIGNMENT Expression SEMICOLON
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (42) IfElseStatement -> . IF LPAREN Expression RPAREN Block ELSE Block
    (43) IfElseStatement -> . IF LPAREN Expression RPAREN Block
    (35) ForStatement -> . FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block
    (95) WhileStatement -> . WHILE LPAREN Expression RPAREN Block
    (24) BreakStatement -> . BREAK INTL SEMICOLON
    (25) BreakStatement -> . BREAK SEMICOLON
    (55) ReturnStatement -> . RETURN Expression SEMICOLON
    (56) ReturnStatement -> . RETURN SEMICOLON
    (21) BlockStatement -> . Block
    (19) BlankStatement -> . SEMICOLON
    (8) BinaryExpression -> . Expression PLUS Expression
    (9) BinaryExpression -> . Expression MINUS Expression
    (10) BinaryExpression -> . Expression TIMES Expression
    (11) BinaryExpression -> . Expression DIVIDE Expression
    (12) BinaryExpression -> . Expression MOD Expression
    (13) BinaryExpression -> . Expression LEQ Expression
    (14) BinaryExpression -> . Expression GEQ Expression
    (15) BinaryExpression -> . Expression LT Expression
    (16) BinaryExpression -> . Expression GT Expression
    (17) BinaryExpression -> . Expression EQ Expression
    (18) BinaryExpression -> . Expression NE Expression
    (87) UnaryExpression -> . Literal
    (88) UnaryExpression -> . FunctionCall
    (89) UnaryExpression -> . BracketCall
    (90) UnaryExpression -> . InitCall
    (91) UnaryExpression -> . DotExpression
    (92) UnaryExpression -> . LPAREN Expression RPAREN
    (93) UnaryExpression -> . DereferenceExpression
    (94) UnaryExpression -> . AddressExpression
    (20) Block -> . LBRACE StatementListR RBRACE
    (49) Literal -> . IntLiteral
    (50) Literal -> . BoolLiteral
    (36) FunctionCall -> . ID LPAREN ArgumentListR RPAREN
    (37) FunctionCall -> . ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (44) InitCall -> . ID LBRACE ArgumentListR RBRACE
    (45) InitCall -> . LT TypeIdentifier GT LBRACE ArgumentListR RBRACE
    (46) InitCall -> . ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE
    (31) DotExpression -> . ID
    (32) DotExpression -> . Expression DOT ID
    (30) DereferenceExpression -> . TIMES Expression
    (1) AddressExpression -> . AMPERSAND Expression
    (48) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL

    RBRACE          reduce using rule 96 (empty -> .)
    LET             shift and go to state 75
    IF              shift and go to state 79
    FOR             shift and go to state 82
    WHILE           shift and go to state 83
    BREAK           shift and go to state 84
    RETURN          shift and go to state 86
    SEMICOLON       shift and go to state 67
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 48
    ID              shift and go to state 76
    LT              shift and go to state 88
    TIMES           shift and go to state 87
    AMPERSAND       shift and go to state 98
    INTL            shift and go to state 85
    BOOLL           shift and go to state 99

    StatementListR                 shift and go to state 61
    Statement                      shift and go to state 62
    empty                          shift and go to state 63
    AssignmentStatement            shift and go to state 64
    InitStatement                  shift and go to state 65
    Expression                     shift and go to state 66
    IfElseStatement                shift and go to state 68
    ForStatement                   shift and go to state 69
    WhileStatement                 shift and go to state 70
    BreakStatement                 shift and go to state 71
    ReturnStatement                shift and go to state 72
    BlockStatement                 shift and go to state 73
    BlankStatement                 shift and go to state 74
    BinaryExpression               shift and go to state 77
    UnaryExpression                shift and go to state 78
    Block                          shift and go to state 81
    Literal                        shift and go to state 89
    FunctionCall                   shift and go to state 90
    BracketCall                    shift and go to state 91
    InitCall                       shift and go to state 92
    DotExpression                  shift and go to state 93
    DereferenceExpression          shift and go to state 94
    AddressExpression              shift and go to state 95
    IntLiteral                     shift and go to state 96
    BoolLiteral                    shift and go to state 97

state 49

    (78) TypeIdentifier -> TypeIdentifier DOT ID .

    ID              reduce using rule 78 (TypeIdentifier -> TypeIdentifier DOT ID .)
    DOT             reduce using rule 78 (TypeIdentifier -> TypeIdentifier DOT ID .)
    TIMES           reduce using rule 78 (TypeIdentifier -> TypeIdentifier DOT ID .)
    LT              reduce using rule 78 (TypeIdentifier -> TypeIdentifier DOT ID .)
    COMMA           reduce using rule 78 (TypeIdentifier -> TypeIdentifier DOT ID .)
    GT              reduce using rule 78 (TypeIdentifier -> TypeIdentifier DOT ID .)
    LBRACE          reduce using rule 78 (TypeIdentifier -> TypeIdentifier DOT ID .)


state 50

    (74) TypeArgumentListR -> TypeIdentifier . COMMA TypeArgumentListR
    (75) TypeArgumentListR -> TypeIdentifier .
    (78) TypeIdentifier -> TypeIdentifier . DOT ID
    (79) TypeIdentifier -> TypeIdentifier . TIMES
    (80) TypeIdentifier -> TypeIdentifier . LT TypeArgumentListR GT

    COMMA           shift and go to state 100
    GT              reduce using rule 75 (TypeArgumentListR -> TypeIdentifier .)
    DOT             shift and go to state 34
    TIMES           shift and go to state 35
    LT              shift and go to state 36


state 51

    (80) TypeIdentifier -> TypeIdentifier LT TypeArgumentListR . GT

    GT              shift and go to state 101


state 52

    (76) TypeArgumentListR -> empty .

    GT              reduce using rule 76 (TypeArgumentListR -> empty .)


state 53

    (52) ParameterListR -> Parameter COMMA ParameterListR .

    RPAREN          reduce using rule 52 (ParameterListR -> Parameter COMMA ParameterListR .)


state 54

    (82) TypeParameter -> ID ASSIGNMENT TypeIdentifier .
    (78) TypeIdentifier -> TypeIdentifier . DOT ID
    (79) TypeIdentifier -> TypeIdentifier . TIMES
    (80) TypeIdentifier -> TypeIdentifier . LT TypeArgumentListR GT

    COMMA           reduce using rule 82 (TypeParameter -> ID ASSIGNMENT TypeIdentifier .)
    GT              reduce using rule 82 (TypeParameter -> ID ASSIGNMENT TypeIdentifier .)
    DOT             shift and go to state 34
    TIMES           shift and go to state 35
    LT              shift and go to state 36


state 55

    (39) FunctionDefinition -> FN ID LT TypeParameterListR GT LPAREN . ParameterListR RPAREN Block
    (41) FunctionDefinition -> FN ID LT TypeParameterListR GT LPAREN . ParameterListR RPAREN ARROW TypeIdentifier Block
    (52) ParameterListR -> . Parameter COMMA ParameterListR
    (53) ParameterListR -> . Parameter
    (54) ParameterListR -> . empty
    (51) Parameter -> . TypeIdentifier ID
    (96) empty -> .
    (77) TypeIdentifier -> . ID
    (78) TypeIdentifier -> . TypeIdentifier DOT ID
    (79) TypeIdentifier -> . TypeIdentifier TIMES
    (80) TypeIdentifier -> . TypeIdentifier LT TypeArgumentListR GT

    RPAREN          reduce using rule 96 (empty -> .)
    ID              shift and go to state 16

    ParameterListR                 shift and go to state 102
    TypeIdentifier                 shift and go to state 18
    Parameter                      shift and go to state 19
    empty                          shift and go to state 20

state 56

    (84) TypeParameterListR -> TypeParameter COMMA TypeParameterListR .

    GT              reduce using rule 84 (TypeParameterListR -> TypeParameter COMMA TypeParameterListR .)


state 57

    (83) TypeParameter -> SPEC ID ASSIGNMENT . TypeIdentifier
    (77) TypeIdentifier -> . ID
    (78) TypeIdentifier -> . TypeIdentifier DOT ID
    (79) TypeIdentifier -> . TypeIdentifier TIMES
    (80) TypeIdentifier -> . TypeIdentifier LT TypeArgumentListR GT

    ID              shift and go to state 16

    TypeIdentifier                 shift and go to state 103

state 58

    (71) StructMember -> TypeIdentifier ID SEMICOLON .

    ID              reduce using rule 71 (StructMember -> TypeIdentifier ID SEMICOLON .)
    RBRACE          reduce using rule 71 (StructMember -> TypeIdentifier ID SEMICOLON .)


state 59

    (70) StructDefinition -> STRUCT ID LT TypeParameterListR GT LBRACE . StructMemberListR RBRACE
    (72) StructMemberListR -> . StructMember StructMemberListR
    (73) StructMemberListR -> . empty
    (71) StructMember -> . TypeIdentifier ID SEMICOLON
    (96) empty -> .
    (77) TypeIdentifier -> . ID
    (78) TypeIdentifier -> . TypeIdentifier DOT ID
    (79) TypeIdentifier -> . TypeIdentifier TIMES
    (80) TypeIdentifier -> . TypeIdentifier LT TypeArgumentListR GT

    RBRACE          reduce using rule 96 (empty -> .)
    ID              shift and go to state 16

    StructMemberListR              shift and go to state 104
    StructMember                   shift and go to state 28
    empty                          shift and go to state 29
    TypeIdentifier                 shift and go to state 30

state 60

    (40) FunctionDefinition -> FN ID LPAREN ParameterListR RPAREN ARROW TypeIdentifier . Block
    (78) TypeIdentifier -> TypeIdentifier . DOT ID
    (79) TypeIdentifier -> TypeIdentifier . TIMES
    (80) TypeIdentifier -> TypeIdentifier . LT TypeArgumentListR GT
    (20) Block -> . LBRACE StatementListR RBRACE

    DOT             shift and go to state 34
    TIMES           shift and go to state 35
    LT              shift and go to state 36
    LBRACE          shift and go to state 48

    Block                          shift and go to state 105

state 61

    (20) Block -> LBRACE StatementListR . RBRACE

    RBRACE          shift and go to state 106


state 62

    (67) StatementListR -> Statement . StatementListR
    (67) StatementListR -> . Statement StatementListR
    (68) StatementListR -> . empty
    (57) Statement -> . AssignmentStatement
    (58) Statement -> . InitStatement
    (59) Statement -> . Expression SEMICOLON
    (60) Statement -> . IfElseStatement
    (61) Statement -> . ForStatement
    (62) Statement -> . WhileStatement
    (63) Statement -> . BreakStatement
    (64) Statement -> . ReturnStatement
    (65) Statement -> . BlockStatement
    (66) Statement -> . BlankStatement
    (96) empty -> .
    (6) AssignmentStatement -> . Expression ASSIGNMENT Expression SEMICOLON
    (7) AssignmentStatement -> . Expression ASSIGNMENT Expression
    (47) InitStatement -> . LET ID ASSIGNMENT Expression SEMICOLON
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (42) IfElseStatement -> . IF LPAREN Expression RPAREN Block ELSE Block
    (43) IfElseStatement -> . IF LPAREN Expression RPAREN Block
    (35) ForStatement -> . FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block
    (95) WhileStatement -> . WHILE LPAREN Expression RPAREN Block
    (24) BreakStatement -> . BREAK INTL SEMICOLON
    (25) BreakStatement -> . BREAK SEMICOLON
    (55) ReturnStatement -> . RETURN Expression SEMICOLON
    (56) ReturnStatement -> . RETURN SEMICOLON
    (21) BlockStatement -> . Block
    (19) BlankStatement -> . SEMICOLON
    (8) BinaryExpression -> . Expression PLUS Expression
    (9) BinaryExpression -> . Expression MINUS Expression
    (10) BinaryExpression -> . Expression TIMES Expression
    (11) BinaryExpression -> . Expression DIVIDE Expression
    (12) BinaryExpression -> . Expression MOD Expression
    (13) BinaryExpression -> . Expression LEQ Expression
    (14) BinaryExpression -> . Expression GEQ Expression
    (15) BinaryExpression -> . Expression LT Expression
    (16) BinaryExpression -> . Expression GT Expression
    (17) BinaryExpression -> . Expression EQ Expression
    (18) BinaryExpression -> . Expression NE Expression
    (87) UnaryExpression -> . Literal
    (88) UnaryExpression -> . FunctionCall
    (89) UnaryExpression -> . BracketCall
    (90) UnaryExpression -> . InitCall
    (91) UnaryExpression -> . DotExpression
    (92) UnaryExpression -> . LPAREN Expression RPAREN
    (93) UnaryExpression -> . DereferenceExpression
    (94) UnaryExpression -> . AddressExpression
    (20) Block -> . LBRACE StatementListR RBRACE
    (49) Literal -> . IntLiteral
    (50) Literal -> . BoolLiteral
    (36) FunctionCall -> . ID LPAREN ArgumentListR RPAREN
    (37) FunctionCall -> . ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (44) InitCall -> . ID LBRACE ArgumentListR RBRACE
    (45) InitCall -> . LT TypeIdentifier GT LBRACE ArgumentListR RBRACE
    (46) InitCall -> . ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE
    (31) DotExpression -> . ID
    (32) DotExpression -> . Expression DOT ID
    (30) DereferenceExpression -> . TIMES Expression
    (1) AddressExpression -> . AMPERSAND Expression
    (48) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL

    RBRACE          reduce using rule 96 (empty -> .)
    LET             shift and go to state 75
    IF              shift and go to state 79
    FOR             shift and go to state 82
    WHILE           shift and go to state 83
    BREAK           shift and go to state 84
    RETURN          shift and go to state 86
    SEMICOLON       shift and go to state 67
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 48
    ID              shift and go to state 76
    LT              shift and go to state 88
    TIMES           shift and go to state 87
    AMPERSAND       shift and go to state 98
    INTL            shift and go to state 85
    BOOLL           shift and go to state 99

    Statement                      shift and go to state 62
    StatementListR                 shift and go to state 107
    empty                          shift and go to state 63
    AssignmentStatement            shift and go to state 64
    InitStatement                  shift and go to state 65
    Expression                     shift and go to state 66
    IfElseStatement                shift and go to state 68
    ForStatement                   shift and go to state 69
    WhileStatement                 shift and go to state 70
    BreakStatement                 shift and go to state 71
    ReturnStatement                shift and go to state 72
    BlockStatement                 shift and go to state 73
    BlankStatement                 shift and go to state 74
    BinaryExpression               shift and go to state 77
    UnaryExpression                shift and go to state 78
    Block                          shift and go to state 81
    Literal                        shift and go to state 89
    FunctionCall                   shift and go to state 90
    BracketCall                    shift and go to state 91
    InitCall                       shift and go to state 92
    DotExpression                  shift and go to state 93
    DereferenceExpression          shift and go to state 94
    AddressExpression              shift and go to state 95
    IntLiteral                     shift and go to state 96
    BoolLiteral                    shift and go to state 97

state 63

    (68) StatementListR -> empty .

    RBRACE          reduce using rule 68 (StatementListR -> empty .)


state 64

    (57) Statement -> AssignmentStatement .

    LET             reduce using rule 57 (Statement -> AssignmentStatement .)
    IF              reduce using rule 57 (Statement -> AssignmentStatement .)
    FOR             reduce using rule 57 (Statement -> AssignmentStatement .)
    WHILE           reduce using rule 57 (Statement -> AssignmentStatement .)
    BREAK           reduce using rule 57 (Statement -> AssignmentStatement .)
    RETURN          reduce using rule 57 (Statement -> AssignmentStatement .)
    SEMICOLON       reduce using rule 57 (Statement -> AssignmentStatement .)
    LPAREN          reduce using rule 57 (Statement -> AssignmentStatement .)
    LBRACE          reduce using rule 57 (Statement -> AssignmentStatement .)
    ID              reduce using rule 57 (Statement -> AssignmentStatement .)
    LT              reduce using rule 57 (Statement -> AssignmentStatement .)
    TIMES           reduce using rule 57 (Statement -> AssignmentStatement .)
    AMPERSAND       reduce using rule 57 (Statement -> AssignmentStatement .)
    INTL            reduce using rule 57 (Statement -> AssignmentStatement .)
    BOOLL           reduce using rule 57 (Statement -> AssignmentStatement .)
    RBRACE          reduce using rule 57 (Statement -> AssignmentStatement .)
    RPAREN          reduce using rule 57 (Statement -> AssignmentStatement .)


state 65

    (58) Statement -> InitStatement .

    LET             reduce using rule 58 (Statement -> InitStatement .)
    IF              reduce using rule 58 (Statement -> InitStatement .)
    FOR             reduce using rule 58 (Statement -> InitStatement .)
    WHILE           reduce using rule 58 (Statement -> InitStatement .)
    BREAK           reduce using rule 58 (Statement -> InitStatement .)
    RETURN          reduce using rule 58 (Statement -> InitStatement .)
    SEMICOLON       reduce using rule 58 (Statement -> InitStatement .)
    LPAREN          reduce using rule 58 (Statement -> InitStatement .)
    LBRACE          reduce using rule 58 (Statement -> InitStatement .)
    ID              reduce using rule 58 (Statement -> InitStatement .)
    LT              reduce using rule 58 (Statement -> InitStatement .)
    TIMES           reduce using rule 58 (Statement -> InitStatement .)
    AMPERSAND       reduce using rule 58 (Statement -> InitStatement .)
    INTL            reduce using rule 58 (Statement -> InitStatement .)
    BOOLL           reduce using rule 58 (Statement -> InitStatement .)
    RBRACE          reduce using rule 58 (Statement -> InitStatement .)
    RPAREN          reduce using rule 58 (Statement -> InitStatement .)


state 66

    (59) Statement -> Expression . SEMICOLON
    (6) AssignmentStatement -> Expression . ASSIGNMENT Expression SEMICOLON
    (7) AssignmentStatement -> Expression . ASSIGNMENT Expression
    (8) BinaryExpression -> Expression . PLUS Expression
    (9) BinaryExpression -> Expression . MINUS Expression
    (10) BinaryExpression -> Expression . TIMES Expression
    (11) BinaryExpression -> Expression . DIVIDE Expression
    (12) BinaryExpression -> Expression . MOD Expression
    (13) BinaryExpression -> Expression . LEQ Expression
    (14) BinaryExpression -> Expression . GEQ Expression
    (15) BinaryExpression -> Expression . LT Expression
    (16) BinaryExpression -> Expression . GT Expression
    (17) BinaryExpression -> Expression . EQ Expression
    (18) BinaryExpression -> Expression . NE Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET
    (32) DotExpression -> Expression . DOT ID

    SEMICOLON       shift and go to state 108
    ASSIGNMENT      shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    TIMES           shift and go to state 112
    DIVIDE          shift and go to state 113
    MOD             shift and go to state 114
    LEQ             shift and go to state 115
    GEQ             shift and go to state 116
    LT              shift and go to state 117
    GT              shift and go to state 118
    EQ              shift and go to state 119
    NE              shift and go to state 120
    LBRACKET        shift and go to state 121
    DOT             shift and go to state 122


state 67

    (19) BlankStatement -> SEMICOLON .

    LET             reduce using rule 19 (BlankStatement -> SEMICOLON .)
    IF              reduce using rule 19 (BlankStatement -> SEMICOLON .)
    FOR             reduce using rule 19 (BlankStatement -> SEMICOLON .)
    WHILE           reduce using rule 19 (BlankStatement -> SEMICOLON .)
    BREAK           reduce using rule 19 (BlankStatement -> SEMICOLON .)
    RETURN          reduce using rule 19 (BlankStatement -> SEMICOLON .)
    SEMICOLON       reduce using rule 19 (BlankStatement -> SEMICOLON .)
    LPAREN          reduce using rule 19 (BlankStatement -> SEMICOLON .)
    LBRACE          reduce using rule 19 (BlankStatement -> SEMICOLON .)
    ID              reduce using rule 19 (BlankStatement -> SEMICOLON .)
    LT              reduce using rule 19 (BlankStatement -> SEMICOLON .)
    TIMES           reduce using rule 19 (BlankStatement -> SEMICOLON .)
    AMPERSAND       reduce using rule 19 (BlankStatement -> SEMICOLON .)
    INTL            reduce using rule 19 (BlankStatement -> SEMICOLON .)
    BOOLL           reduce using rule 19 (BlankStatement -> SEMICOLON .)
    RBRACE          reduce using rule 19 (BlankStatement -> SEMICOLON .)
    RPAREN          reduce using rule 19 (BlankStatement -> SEMICOLON .)


state 68

    (60) Statement -> IfElseStatement .

    LET             reduce using rule 60 (Statement -> IfElseStatement .)
    IF              reduce using rule 60 (Statement -> IfElseStatement .)
    FOR             reduce using rule 60 (Statement -> IfElseStatement .)
    WHILE           reduce using rule 60 (Statement -> IfElseStatement .)
    BREAK           reduce using rule 60 (Statement -> IfElseStatement .)
    RETURN          reduce using rule 60 (Statement -> IfElseStatement .)
    SEMICOLON       reduce using rule 60 (Statement -> IfElseStatement .)
    LPAREN          reduce using rule 60 (Statement -> IfElseStatement .)
    LBRACE          reduce using rule 60 (Statement -> IfElseStatement .)
    ID              reduce using rule 60 (Statement -> IfElseStatement .)
    LT              reduce using rule 60 (Statement -> IfElseStatement .)
    TIMES           reduce using rule 60 (Statement -> IfElseStatement .)
    AMPERSAND       reduce using rule 60 (Statement -> IfElseStatement .)
    INTL            reduce using rule 60 (Statement -> IfElseStatement .)
    BOOLL           reduce using rule 60 (Statement -> IfElseStatement .)
    RBRACE          reduce using rule 60 (Statement -> IfElseStatement .)
    RPAREN          reduce using rule 60 (Statement -> IfElseStatement .)


state 69

    (61) Statement -> ForStatement .

    LET             reduce using rule 61 (Statement -> ForStatement .)
    IF              reduce using rule 61 (Statement -> ForStatement .)
    FOR             reduce using rule 61 (Statement -> ForStatement .)
    WHILE           reduce using rule 61 (Statement -> ForStatement .)
    BREAK           reduce using rule 61 (Statement -> ForStatement .)
    RETURN          reduce using rule 61 (Statement -> ForStatement .)
    SEMICOLON       reduce using rule 61 (Statement -> ForStatement .)
    LPAREN          reduce using rule 61 (Statement -> ForStatement .)
    LBRACE          reduce using rule 61 (Statement -> ForStatement .)
    ID              reduce using rule 61 (Statement -> ForStatement .)
    LT              reduce using rule 61 (Statement -> ForStatement .)
    TIMES           reduce using rule 61 (Statement -> ForStatement .)
    AMPERSAND       reduce using rule 61 (Statement -> ForStatement .)
    INTL            reduce using rule 61 (Statement -> ForStatement .)
    BOOLL           reduce using rule 61 (Statement -> ForStatement .)
    RBRACE          reduce using rule 61 (Statement -> ForStatement .)
    RPAREN          reduce using rule 61 (Statement -> ForStatement .)


state 70

    (62) Statement -> WhileStatement .

    LET             reduce using rule 62 (Statement -> WhileStatement .)
    IF              reduce using rule 62 (Statement -> WhileStatement .)
    FOR             reduce using rule 62 (Statement -> WhileStatement .)
    WHILE           reduce using rule 62 (Statement -> WhileStatement .)
    BREAK           reduce using rule 62 (Statement -> WhileStatement .)
    RETURN          reduce using rule 62 (Statement -> WhileStatement .)
    SEMICOLON       reduce using rule 62 (Statement -> WhileStatement .)
    LPAREN          reduce using rule 62 (Statement -> WhileStatement .)
    LBRACE          reduce using rule 62 (Statement -> WhileStatement .)
    ID              reduce using rule 62 (Statement -> WhileStatement .)
    LT              reduce using rule 62 (Statement -> WhileStatement .)
    TIMES           reduce using rule 62 (Statement -> WhileStatement .)
    AMPERSAND       reduce using rule 62 (Statement -> WhileStatement .)
    INTL            reduce using rule 62 (Statement -> WhileStatement .)
    BOOLL           reduce using rule 62 (Statement -> WhileStatement .)
    RBRACE          reduce using rule 62 (Statement -> WhileStatement .)
    RPAREN          reduce using rule 62 (Statement -> WhileStatement .)


state 71

    (63) Statement -> BreakStatement .

    LET             reduce using rule 63 (Statement -> BreakStatement .)
    IF              reduce using rule 63 (Statement -> BreakStatement .)
    FOR             reduce using rule 63 (Statement -> BreakStatement .)
    WHILE           reduce using rule 63 (Statement -> BreakStatement .)
    BREAK           reduce using rule 63 (Statement -> BreakStatement .)
    RETURN          reduce using rule 63 (Statement -> BreakStatement .)
    SEMICOLON       reduce using rule 63 (Statement -> BreakStatement .)
    LPAREN          reduce using rule 63 (Statement -> BreakStatement .)
    LBRACE          reduce using rule 63 (Statement -> BreakStatement .)
    ID              reduce using rule 63 (Statement -> BreakStatement .)
    LT              reduce using rule 63 (Statement -> BreakStatement .)
    TIMES           reduce using rule 63 (Statement -> BreakStatement .)
    AMPERSAND       reduce using rule 63 (Statement -> BreakStatement .)
    INTL            reduce using rule 63 (Statement -> BreakStatement .)
    BOOLL           reduce using rule 63 (Statement -> BreakStatement .)
    RBRACE          reduce using rule 63 (Statement -> BreakStatement .)
    RPAREN          reduce using rule 63 (Statement -> BreakStatement .)


state 72

    (64) Statement -> ReturnStatement .

    LET             reduce using rule 64 (Statement -> ReturnStatement .)
    IF              reduce using rule 64 (Statement -> ReturnStatement .)
    FOR             reduce using rule 64 (Statement -> ReturnStatement .)
    WHILE           reduce using rule 64 (Statement -> ReturnStatement .)
    BREAK           reduce using rule 64 (Statement -> ReturnStatement .)
    RETURN          reduce using rule 64 (Statement -> ReturnStatement .)
    SEMICOLON       reduce using rule 64 (Statement -> ReturnStatement .)
    LPAREN          reduce using rule 64 (Statement -> ReturnStatement .)
    LBRACE          reduce using rule 64 (Statement -> ReturnStatement .)
    ID              reduce using rule 64 (Statement -> ReturnStatement .)
    LT              reduce using rule 64 (Statement -> ReturnStatement .)
    TIMES           reduce using rule 64 (Statement -> ReturnStatement .)
    AMPERSAND       reduce using rule 64 (Statement -> ReturnStatement .)
    INTL            reduce using rule 64 (Statement -> ReturnStatement .)
    BOOLL           reduce using rule 64 (Statement -> ReturnStatement .)
    RBRACE          reduce using rule 64 (Statement -> ReturnStatement .)
    RPAREN          reduce using rule 64 (Statement -> ReturnStatement .)


state 73

    (65) Statement -> BlockStatement .

    LET             reduce using rule 65 (Statement -> BlockStatement .)
    IF              reduce using rule 65 (Statement -> BlockStatement .)
    FOR             reduce using rule 65 (Statement -> BlockStatement .)
    WHILE           reduce using rule 65 (Statement -> BlockStatement .)
    BREAK           reduce using rule 65 (Statement -> BlockStatement .)
    RETURN          reduce using rule 65 (Statement -> BlockStatement .)
    SEMICOLON       reduce using rule 65 (Statement -> BlockStatement .)
    LPAREN          reduce using rule 65 (Statement -> BlockStatement .)
    LBRACE          reduce using rule 65 (Statement -> BlockStatement .)
    ID              reduce using rule 65 (Statement -> BlockStatement .)
    LT              reduce using rule 65 (Statement -> BlockStatement .)
    TIMES           reduce using rule 65 (Statement -> BlockStatement .)
    AMPERSAND       reduce using rule 65 (Statement -> BlockStatement .)
    INTL            reduce using rule 65 (Statement -> BlockStatement .)
    BOOLL           reduce using rule 65 (Statement -> BlockStatement .)
    RBRACE          reduce using rule 65 (Statement -> BlockStatement .)
    RPAREN          reduce using rule 65 (Statement -> BlockStatement .)


state 74

    (66) Statement -> BlankStatement .

    LET             reduce using rule 66 (Statement -> BlankStatement .)
    IF              reduce using rule 66 (Statement -> BlankStatement .)
    FOR             reduce using rule 66 (Statement -> BlankStatement .)
    WHILE           reduce using rule 66 (Statement -> BlankStatement .)
    BREAK           reduce using rule 66 (Statement -> BlankStatement .)
    RETURN          reduce using rule 66 (Statement -> BlankStatement .)
    SEMICOLON       reduce using rule 66 (Statement -> BlankStatement .)
    LPAREN          reduce using rule 66 (Statement -> BlankStatement .)
    LBRACE          reduce using rule 66 (Statement -> BlankStatement .)
    ID              reduce using rule 66 (Statement -> BlankStatement .)
    LT              reduce using rule 66 (Statement -> BlankStatement .)
    TIMES           reduce using rule 66 (Statement -> BlankStatement .)
    AMPERSAND       reduce using rule 66 (Statement -> BlankStatement .)
    INTL            reduce using rule 66 (Statement -> BlankStatement .)
    BOOLL           reduce using rule 66 (Statement -> BlankStatement .)
    RBRACE          reduce using rule 66 (Statement -> BlankStatement .)
    RPAREN          reduce using rule 66 (Statement -> BlankStatement .)


state 75

    (47) InitStatement -> LET . ID ASSIGNMENT Expression SEMICOLON

    ID              shift and go to state 123


state 76

    (36) FunctionCall -> ID . LPAREN ArgumentListR RPAREN
    (37) FunctionCall -> ID . LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN
    (44) InitCall -> ID . LBRACE ArgumentListR RBRACE
    (46) InitCall -> ID . LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE
    (31) DotExpression -> ID .

  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
    LPAREN          shift and go to state 124
    LT              shift and go to state 125
    LBRACE          shift and go to state 126
    SEMICOLON       reduce using rule 31 (DotExpression -> ID .)
    ASSIGNMENT      reduce using rule 31 (DotExpression -> ID .)
    PLUS            reduce using rule 31 (DotExpression -> ID .)
    MINUS           reduce using rule 31 (DotExpression -> ID .)
    TIMES           reduce using rule 31 (DotExpression -> ID .)
    DIVIDE          reduce using rule 31 (DotExpression -> ID .)
    MOD             reduce using rule 31 (DotExpression -> ID .)
    LEQ             reduce using rule 31 (DotExpression -> ID .)
    GEQ             reduce using rule 31 (DotExpression -> ID .)
    GT              reduce using rule 31 (DotExpression -> ID .)
    EQ              reduce using rule 31 (DotExpression -> ID .)
    NE              reduce using rule 31 (DotExpression -> ID .)
    LBRACKET        reduce using rule 31 (DotExpression -> ID .)
    DOT             reduce using rule 31 (DotExpression -> ID .)
    RPAREN          reduce using rule 31 (DotExpression -> ID .)
    LET             reduce using rule 31 (DotExpression -> ID .)
    IF              reduce using rule 31 (DotExpression -> ID .)
    FOR             reduce using rule 31 (DotExpression -> ID .)
    WHILE           reduce using rule 31 (DotExpression -> ID .)
    BREAK           reduce using rule 31 (DotExpression -> ID .)
    RETURN          reduce using rule 31 (DotExpression -> ID .)
    ID              reduce using rule 31 (DotExpression -> ID .)
    AMPERSAND       reduce using rule 31 (DotExpression -> ID .)
    INTL            reduce using rule 31 (DotExpression -> ID .)
    BOOLL           reduce using rule 31 (DotExpression -> ID .)
    RBRACE          reduce using rule 31 (DotExpression -> ID .)
    RBRACKET        reduce using rule 31 (DotExpression -> ID .)
    COMMA           reduce using rule 31 (DotExpression -> ID .)

  ! LT              [ reduce using rule 31 (DotExpression -> ID .) ]
  ! LPAREN          [ reduce using rule 31 (DotExpression -> ID .) ]
  ! LBRACE          [ reduce using rule 31 (DotExpression -> ID .) ]


state 77

    (33) Expression -> BinaryExpression .

    SEMICOLON       reduce using rule 33 (Expression -> BinaryExpression .)
    ASSIGNMENT      reduce using rule 33 (Expression -> BinaryExpression .)
    PLUS            reduce using rule 33 (Expression -> BinaryExpression .)
    MINUS           reduce using rule 33 (Expression -> BinaryExpression .)
    TIMES           reduce using rule 33 (Expression -> BinaryExpression .)
    DIVIDE          reduce using rule 33 (Expression -> BinaryExpression .)
    MOD             reduce using rule 33 (Expression -> BinaryExpression .)
    LEQ             reduce using rule 33 (Expression -> BinaryExpression .)
    GEQ             reduce using rule 33 (Expression -> BinaryExpression .)
    LT              reduce using rule 33 (Expression -> BinaryExpression .)
    GT              reduce using rule 33 (Expression -> BinaryExpression .)
    EQ              reduce using rule 33 (Expression -> BinaryExpression .)
    NE              reduce using rule 33 (Expression -> BinaryExpression .)
    LBRACKET        reduce using rule 33 (Expression -> BinaryExpression .)
    DOT             reduce using rule 33 (Expression -> BinaryExpression .)
    RPAREN          reduce using rule 33 (Expression -> BinaryExpression .)
    LET             reduce using rule 33 (Expression -> BinaryExpression .)
    IF              reduce using rule 33 (Expression -> BinaryExpression .)
    FOR             reduce using rule 33 (Expression -> BinaryExpression .)
    WHILE           reduce using rule 33 (Expression -> BinaryExpression .)
    BREAK           reduce using rule 33 (Expression -> BinaryExpression .)
    RETURN          reduce using rule 33 (Expression -> BinaryExpression .)
    LPAREN          reduce using rule 33 (Expression -> BinaryExpression .)
    LBRACE          reduce using rule 33 (Expression -> BinaryExpression .)
    ID              reduce using rule 33 (Expression -> BinaryExpression .)
    AMPERSAND       reduce using rule 33 (Expression -> BinaryExpression .)
    INTL            reduce using rule 33 (Expression -> BinaryExpression .)
    BOOLL           reduce using rule 33 (Expression -> BinaryExpression .)
    RBRACE          reduce using rule 33 (Expression -> BinaryExpression .)
    RBRACKET        reduce using rule 33 (Expression -> BinaryExpression .)
    COMMA           reduce using rule 33 (Expression -> BinaryExpression .)


state 78

    (34) Expression -> UnaryExpression .

    SEMICOLON       reduce using rule 34 (Expression -> UnaryExpression .)
    ASSIGNMENT      reduce using rule 34 (Expression -> UnaryExpression .)
    PLUS            reduce using rule 34 (Expression -> UnaryExpression .)
    MINUS           reduce using rule 34 (Expression -> UnaryExpression .)
    TIMES           reduce using rule 34 (Expression -> UnaryExpression .)
    DIVIDE          reduce using rule 34 (Expression -> UnaryExpression .)
    MOD             reduce using rule 34 (Expression -> UnaryExpression .)
    LEQ             reduce using rule 34 (Expression -> UnaryExpression .)
    GEQ             reduce using rule 34 (Expression -> UnaryExpression .)
    LT              reduce using rule 34 (Expression -> UnaryExpression .)
    GT              reduce using rule 34 (Expression -> UnaryExpression .)
    EQ              reduce using rule 34 (Expression -> UnaryExpression .)
    NE              reduce using rule 34 (Expression -> UnaryExpression .)
    LBRACKET        reduce using rule 34 (Expression -> UnaryExpression .)
    DOT             reduce using rule 34 (Expression -> UnaryExpression .)
    RPAREN          reduce using rule 34 (Expression -> UnaryExpression .)
    LET             reduce using rule 34 (Expression -> UnaryExpression .)
    IF              reduce using rule 34 (Expression -> UnaryExpression .)
    FOR             reduce using rule 34 (Expression -> UnaryExpression .)
    WHILE           reduce using rule 34 (Expression -> UnaryExpression .)
    BREAK           reduce using rule 34 (Expression -> UnaryExpression .)
    RETURN          reduce using rule 34 (Expression -> UnaryExpression .)
    LPAREN          reduce using rule 34 (Expression -> UnaryExpression .)
    LBRACE          reduce using rule 34 (Expression -> UnaryExpression .)
    ID              reduce using rule 34 (Expression -> UnaryExpression .)
    AMPERSAND       reduce using rule 34 (Expression -> UnaryExpression .)
    INTL            reduce using rule 34 (Expression -> UnaryExpression .)
    BOOLL           reduce using rule 34 (Expression -> UnaryExpression .)
    RBRACE          reduce using rule 34 (Expression -> UnaryExpression .)
    RBRACKET        reduce using rule 34 (Expression -> UnaryExpression .)
    COMMA           reduce using rule 34 (Expression -> UnaryExpression .)


state 79

    (42) IfElseStatement -> IF . LPAREN Expression RPAREN Block ELSE Block
    (43) IfElseStatement -> IF . LPAREN Expression RPAREN Block

    LPAREN          shift and go to state 127


state 80

    (92) UnaryExpression -> LPAREN . Expression RPAREN
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (8) BinaryExpression -> . Expression PLUS Expression
    (9) BinaryExpression -> . Expression MINUS Expression
    (10) BinaryExpression -> . Expression TIMES Expression
    (11) BinaryExpression -> . Expression DIVIDE Expression
    (12) BinaryExpression -> . Expression MOD Expression
    (13) BinaryExpression -> . Expression LEQ Expression
    (14) BinaryExpression -> . Expression GEQ Expression
    (15) BinaryExpression -> . Expression LT Expression
    (16) BinaryExpression -> . Expression GT Expression
    (17) BinaryExpression -> . Expression EQ Expression
    (18) BinaryExpression -> . Expression NE Expression
    (87) UnaryExpression -> . Literal
    (88) UnaryExpression -> . FunctionCall
    (89) UnaryExpression -> . BracketCall
    (90) UnaryExpression -> . InitCall
    (91) UnaryExpression -> . DotExpression
    (92) UnaryExpression -> . LPAREN Expression RPAREN
    (93) UnaryExpression -> . DereferenceExpression
    (94) UnaryExpression -> . AddressExpression
    (49) Literal -> . IntLiteral
    (50) Literal -> . BoolLiteral
    (36) FunctionCall -> . ID LPAREN ArgumentListR RPAREN
    (37) FunctionCall -> . ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (44) InitCall -> . ID LBRACE ArgumentListR RBRACE
    (45) InitCall -> . LT TypeIdentifier GT LBRACE ArgumentListR RBRACE
    (46) InitCall -> . ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE
    (31) DotExpression -> . ID
    (32) DotExpression -> . Expression DOT ID
    (30) DereferenceExpression -> . TIMES Expression
    (1) AddressExpression -> . AMPERSAND Expression
    (48) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL

    LPAREN          shift and go to state 80
    ID              shift and go to state 76
    LT              shift and go to state 88
    TIMES           shift and go to state 87
    AMPERSAND       shift and go to state 98
    INTL            shift and go to state 85
    BOOLL           shift and go to state 99

    Expression                     shift and go to state 128
    BinaryExpression               shift and go to state 77
    UnaryExpression                shift and go to state 78
    Literal                        shift and go to state 89
    FunctionCall                   shift and go to state 90
    BracketCall                    shift and go to state 91
    InitCall                       shift and go to state 92
    DotExpression                  shift and go to state 93
    DereferenceExpression          shift and go to state 94
    AddressExpression              shift and go to state 95
    IntLiteral                     shift and go to state 96
    BoolLiteral                    shift and go to state 97

state 81

    (21) BlockStatement -> Block .

    LET             reduce using rule 21 (BlockStatement -> Block .)
    IF              reduce using rule 21 (BlockStatement -> Block .)
    FOR             reduce using rule 21 (BlockStatement -> Block .)
    WHILE           reduce using rule 21 (BlockStatement -> Block .)
    BREAK           reduce using rule 21 (BlockStatement -> Block .)
    RETURN          reduce using rule 21 (BlockStatement -> Block .)
    SEMICOLON       reduce using rule 21 (BlockStatement -> Block .)
    LPAREN          reduce using rule 21 (BlockStatement -> Block .)
    LBRACE          reduce using rule 21 (BlockStatement -> Block .)
    ID              reduce using rule 21 (BlockStatement -> Block .)
    LT              reduce using rule 21 (BlockStatement -> Block .)
    TIMES           reduce using rule 21 (BlockStatement -> Block .)
    AMPERSAND       reduce using rule 21 (BlockStatement -> Block .)
    INTL            reduce using rule 21 (BlockStatement -> Block .)
    BOOLL           reduce using rule 21 (BlockStatement -> Block .)
    RBRACE          reduce using rule 21 (BlockStatement -> Block .)
    RPAREN          reduce using rule 21 (BlockStatement -> Block .)


state 82

    (35) ForStatement -> FOR . LPAREN Statement Expression SEMICOLON Statement RPAREN Block

    LPAREN          shift and go to state 129


state 83

    (95) WhileStatement -> WHILE . LPAREN Expression RPAREN Block

    LPAREN          shift and go to state 130


state 84

    (24) BreakStatement -> BREAK . INTL SEMICOLON
    (25) BreakStatement -> BREAK . SEMICOLON

    INTL            shift and go to state 131
    SEMICOLON       shift and go to state 132


state 85

    (48) IntLiteral -> INTL .

    SEMICOLON       reduce using rule 48 (IntLiteral -> INTL .)
    ASSIGNMENT      reduce using rule 48 (IntLiteral -> INTL .)
    PLUS            reduce using rule 48 (IntLiteral -> INTL .)
    MINUS           reduce using rule 48 (IntLiteral -> INTL .)
    TIMES           reduce using rule 48 (IntLiteral -> INTL .)
    DIVIDE          reduce using rule 48 (IntLiteral -> INTL .)
    MOD             reduce using rule 48 (IntLiteral -> INTL .)
    LEQ             reduce using rule 48 (IntLiteral -> INTL .)
    GEQ             reduce using rule 48 (IntLiteral -> INTL .)
    LT              reduce using rule 48 (IntLiteral -> INTL .)
    GT              reduce using rule 48 (IntLiteral -> INTL .)
    EQ              reduce using rule 48 (IntLiteral -> INTL .)
    NE              reduce using rule 48 (IntLiteral -> INTL .)
    LBRACKET        reduce using rule 48 (IntLiteral -> INTL .)
    DOT             reduce using rule 48 (IntLiteral -> INTL .)
    RPAREN          reduce using rule 48 (IntLiteral -> INTL .)
    LET             reduce using rule 48 (IntLiteral -> INTL .)
    IF              reduce using rule 48 (IntLiteral -> INTL .)
    FOR             reduce using rule 48 (IntLiteral -> INTL .)
    WHILE           reduce using rule 48 (IntLiteral -> INTL .)
    BREAK           reduce using rule 48 (IntLiteral -> INTL .)
    RETURN          reduce using rule 48 (IntLiteral -> INTL .)
    LPAREN          reduce using rule 48 (IntLiteral -> INTL .)
    LBRACE          reduce using rule 48 (IntLiteral -> INTL .)
    ID              reduce using rule 48 (IntLiteral -> INTL .)
    AMPERSAND       reduce using rule 48 (IntLiteral -> INTL .)
    INTL            reduce using rule 48 (IntLiteral -> INTL .)
    BOOLL           reduce using rule 48 (IntLiteral -> INTL .)
    RBRACE          reduce using rule 48 (IntLiteral -> INTL .)
    RBRACKET        reduce using rule 48 (IntLiteral -> INTL .)
    COMMA           reduce using rule 48 (IntLiteral -> INTL .)


state 86

    (55) ReturnStatement -> RETURN . Expression SEMICOLON
    (56) ReturnStatement -> RETURN . SEMICOLON
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (8) BinaryExpression -> . Expression PLUS Expression
    (9) BinaryExpression -> . Expression MINUS Expression
    (10) BinaryExpression -> . Expression TIMES Expression
    (11) BinaryExpression -> . Expression DIVIDE Expression
    (12) BinaryExpression -> . Expression MOD Expression
    (13) BinaryExpression -> . Expression LEQ Expression
    (14) BinaryExpression -> . Expression GEQ Expression
    (15) BinaryExpression -> . Expression LT Expression
    (16) BinaryExpression -> . Expression GT Expression
    (17) BinaryExpression -> . Expression EQ Expression
    (18) BinaryExpression -> . Expression NE Expression
    (87) UnaryExpression -> . Literal
    (88) UnaryExpression -> . FunctionCall
    (89) UnaryExpression -> . BracketCall
    (90) UnaryExpression -> . InitCall
    (91) UnaryExpression -> . DotExpression
    (92) UnaryExpression -> . LPAREN Expression RPAREN
    (93) UnaryExpression -> . DereferenceExpression
    (94) UnaryExpression -> . AddressExpression
    (49) Literal -> . IntLiteral
    (50) Literal -> . BoolLiteral
    (36) FunctionCall -> . ID LPAREN ArgumentListR RPAREN
    (37) FunctionCall -> . ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (44) InitCall -> . ID LBRACE ArgumentListR RBRACE
    (45) InitCall -> . LT TypeIdentifier GT LBRACE ArgumentListR RBRACE
    (46) InitCall -> . ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE
    (31) DotExpression -> . ID
    (32) DotExpression -> . Expression DOT ID
    (30) DereferenceExpression -> . TIMES Expression
    (1) AddressExpression -> . AMPERSAND Expression
    (48) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL

    SEMICOLON       shift and go to state 134
    LPAREN          shift and go to state 80
    ID              shift and go to state 76
    LT              shift and go to state 88
    TIMES           shift and go to state 87
    AMPERSAND       shift and go to state 98
    INTL            shift and go to state 85
    BOOLL           shift and go to state 99

    Expression                     shift and go to state 133
    BinaryExpression               shift and go to state 77
    UnaryExpression                shift and go to state 78
    Literal                        shift and go to state 89
    FunctionCall                   shift and go to state 90
    BracketCall                    shift and go to state 91
    InitCall                       shift and go to state 92
    DotExpression                  shift and go to state 93
    DereferenceExpression          shift and go to state 94
    AddressExpression              shift and go to state 95
    IntLiteral                     shift and go to state 96
    BoolLiteral                    shift and go to state 97

state 87

    (30) DereferenceExpression -> TIMES . Expression
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (8) BinaryExpression -> . Expression PLUS Expression
    (9) BinaryExpression -> . Expression MINUS Expression
    (10) BinaryExpression -> . Expression TIMES Expression
    (11) BinaryExpression -> . Expression DIVIDE Expression
    (12) BinaryExpression -> . Expression MOD Expression
    (13) BinaryExpression -> . Expression LEQ Expression
    (14) BinaryExpression -> . Expression GEQ Expression
    (15) BinaryExpression -> . Expression LT Expression
    (16) BinaryExpression -> . Expression GT Expression
    (17) BinaryExpression -> . Expression EQ Expression
    (18) BinaryExpression -> . Expression NE Expression
    (87) UnaryExpression -> . Literal
    (88) UnaryExpression -> . FunctionCall
    (89) UnaryExpression -> . BracketCall
    (90) UnaryExpression -> . InitCall
    (91) UnaryExpression -> . DotExpression
    (92) UnaryExpression -> . LPAREN Expression RPAREN
    (93) UnaryExpression -> . DereferenceExpression
    (94) UnaryExpression -> . AddressExpression
    (49) Literal -> . IntLiteral
    (50) Literal -> . BoolLiteral
    (36) FunctionCall -> . ID LPAREN ArgumentListR RPAREN
    (37) FunctionCall -> . ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (44) InitCall -> . ID LBRACE ArgumentListR RBRACE
    (45) InitCall -> . LT TypeIdentifier GT LBRACE ArgumentListR RBRACE
    (46) InitCall -> . ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE
    (31) DotExpression -> . ID
    (32) DotExpression -> . Expression DOT ID
    (30) DereferenceExpression -> . TIMES Expression
    (1) AddressExpression -> . AMPERSAND Expression
    (48) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL

    LPAREN          shift and go to state 80
    ID              shift and go to state 76
    LT              shift and go to state 88
    TIMES           shift and go to state 87
    AMPERSAND       shift and go to state 98
    INTL            shift and go to state 85
    BOOLL           shift and go to state 99

    Expression                     shift and go to state 135
    BinaryExpression               shift and go to state 77
    UnaryExpression                shift and go to state 78
    Literal                        shift and go to state 89
    FunctionCall                   shift and go to state 90
    BracketCall                    shift and go to state 91
    InitCall                       shift and go to state 92
    DotExpression                  shift and go to state 93
    DereferenceExpression          shift and go to state 94
    AddressExpression              shift and go to state 95
    IntLiteral                     shift and go to state 96
    BoolLiteral                    shift and go to state 97

state 88

    (45) InitCall -> LT . TypeIdentifier GT LBRACE ArgumentListR RBRACE
    (77) TypeIdentifier -> . ID
    (78) TypeIdentifier -> . TypeIdentifier DOT ID
    (79) TypeIdentifier -> . TypeIdentifier TIMES
    (80) TypeIdentifier -> . TypeIdentifier LT TypeArgumentListR GT

    ID              shift and go to state 16

    TypeIdentifier                 shift and go to state 136

state 89

    (87) UnaryExpression -> Literal .

    SEMICOLON       reduce using rule 87 (UnaryExpression -> Literal .)
    ASSIGNMENT      reduce using rule 87 (UnaryExpression -> Literal .)
    PLUS            reduce using rule 87 (UnaryExpression -> Literal .)
    MINUS           reduce using rule 87 (UnaryExpression -> Literal .)
    TIMES           reduce using rule 87 (UnaryExpression -> Literal .)
    DIVIDE          reduce using rule 87 (UnaryExpression -> Literal .)
    MOD             reduce using rule 87 (UnaryExpression -> Literal .)
    LEQ             reduce using rule 87 (UnaryExpression -> Literal .)
    GEQ             reduce using rule 87 (UnaryExpression -> Literal .)
    LT              reduce using rule 87 (UnaryExpression -> Literal .)
    GT              reduce using rule 87 (UnaryExpression -> Literal .)
    EQ              reduce using rule 87 (UnaryExpression -> Literal .)
    NE              reduce using rule 87 (UnaryExpression -> Literal .)
    LBRACKET        reduce using rule 87 (UnaryExpression -> Literal .)
    DOT             reduce using rule 87 (UnaryExpression -> Literal .)
    RPAREN          reduce using rule 87 (UnaryExpression -> Literal .)
    LET             reduce using rule 87 (UnaryExpression -> Literal .)
    IF              reduce using rule 87 (UnaryExpression -> Literal .)
    FOR             reduce using rule 87 (UnaryExpression -> Literal .)
    WHILE           reduce using rule 87 (UnaryExpression -> Literal .)
    BREAK           reduce using rule 87 (UnaryExpression -> Literal .)
    RETURN          reduce using rule 87 (UnaryExpression -> Literal .)
    LPAREN          reduce using rule 87 (UnaryExpression -> Literal .)
    LBRACE          reduce using rule 87 (UnaryExpression -> Literal .)
    ID              reduce using rule 87 (UnaryExpression -> Literal .)
    AMPERSAND       reduce using rule 87 (UnaryExpression -> Literal .)
    INTL            reduce using rule 87 (UnaryExpression -> Literal .)
    BOOLL           reduce using rule 87 (UnaryExpression -> Literal .)
    RBRACE          reduce using rule 87 (UnaryExpression -> Literal .)
    RBRACKET        reduce using rule 87 (UnaryExpression -> Literal .)
    COMMA           reduce using rule 87 (UnaryExpression -> Literal .)


state 90

    (88) UnaryExpression -> FunctionCall .

    SEMICOLON       reduce using rule 88 (UnaryExpression -> FunctionCall .)
    ASSIGNMENT      reduce using rule 88 (UnaryExpression -> FunctionCall .)
    PLUS            reduce using rule 88 (UnaryExpression -> FunctionCall .)
    MINUS           reduce using rule 88 (UnaryExpression -> FunctionCall .)
    TIMES           reduce using rule 88 (UnaryExpression -> FunctionCall .)
    DIVIDE          reduce using rule 88 (UnaryExpression -> FunctionCall .)
    MOD             reduce using rule 88 (UnaryExpression -> FunctionCall .)
    LEQ             reduce using rule 88 (UnaryExpression -> FunctionCall .)
    GEQ             reduce using rule 88 (UnaryExpression -> FunctionCall .)
    LT              reduce using rule 88 (UnaryExpression -> FunctionCall .)
    GT              reduce using rule 88 (UnaryExpression -> FunctionCall .)
    EQ              reduce using rule 88 (UnaryExpression -> FunctionCall .)
    NE              reduce using rule 88 (UnaryExpression -> FunctionCall .)
    LBRACKET        reduce using rule 88 (UnaryExpression -> FunctionCall .)
    DOT             reduce using rule 88 (UnaryExpression -> FunctionCall .)
    RPAREN          reduce using rule 88 (UnaryExpression -> FunctionCall .)
    LET             reduce using rule 88 (UnaryExpression -> FunctionCall .)
    IF              reduce using rule 88 (UnaryExpression -> FunctionCall .)
    FOR             reduce using rule 88 (UnaryExpression -> FunctionCall .)
    WHILE           reduce using rule 88 (UnaryExpression -> FunctionCall .)
    BREAK           reduce using rule 88 (UnaryExpression -> FunctionCall .)
    RETURN          reduce using rule 88 (UnaryExpression -> FunctionCall .)
    LPAREN          reduce using rule 88 (UnaryExpression -> FunctionCall .)
    LBRACE          reduce using rule 88 (UnaryExpression -> FunctionCall .)
    ID              reduce using rule 88 (UnaryExpression -> FunctionCall .)
    AMPERSAND       reduce using rule 88 (UnaryExpression -> FunctionCall .)
    INTL            reduce using rule 88 (UnaryExpression -> FunctionCall .)
    BOOLL           reduce using rule 88 (UnaryExpression -> FunctionCall .)
    RBRACE          reduce using rule 88 (UnaryExpression -> FunctionCall .)
    RBRACKET        reduce using rule 88 (UnaryExpression -> FunctionCall .)
    COMMA           reduce using rule 88 (UnaryExpression -> FunctionCall .)


state 91

    (89) UnaryExpression -> BracketCall .

    SEMICOLON       reduce using rule 89 (UnaryExpression -> BracketCall .)
    ASSIGNMENT      reduce using rule 89 (UnaryExpression -> BracketCall .)
    PLUS            reduce using rule 89 (UnaryExpression -> BracketCall .)
    MINUS           reduce using rule 89 (UnaryExpression -> BracketCall .)
    TIMES           reduce using rule 89 (UnaryExpression -> BracketCall .)
    DIVIDE          reduce using rule 89 (UnaryExpression -> BracketCall .)
    MOD             reduce using rule 89 (UnaryExpression -> BracketCall .)
    LEQ             reduce using rule 89 (UnaryExpression -> BracketCall .)
    GEQ             reduce using rule 89 (UnaryExpression -> BracketCall .)
    LT              reduce using rule 89 (UnaryExpression -> BracketCall .)
    GT              reduce using rule 89 (UnaryExpression -> BracketCall .)
    EQ              reduce using rule 89 (UnaryExpression -> BracketCall .)
    NE              reduce using rule 89 (UnaryExpression -> BracketCall .)
    LBRACKET        reduce using rule 89 (UnaryExpression -> BracketCall .)
    DOT             reduce using rule 89 (UnaryExpression -> BracketCall .)
    RPAREN          reduce using rule 89 (UnaryExpression -> BracketCall .)
    LET             reduce using rule 89 (UnaryExpression -> BracketCall .)
    IF              reduce using rule 89 (UnaryExpression -> BracketCall .)
    FOR             reduce using rule 89 (UnaryExpression -> BracketCall .)
    WHILE           reduce using rule 89 (UnaryExpression -> BracketCall .)
    BREAK           reduce using rule 89 (UnaryExpression -> BracketCall .)
    RETURN          reduce using rule 89 (UnaryExpression -> BracketCall .)
    LPAREN          reduce using rule 89 (UnaryExpression -> BracketCall .)
    LBRACE          reduce using rule 89 (UnaryExpression -> BracketCall .)
    ID              reduce using rule 89 (UnaryExpression -> BracketCall .)
    AMPERSAND       reduce using rule 89 (UnaryExpression -> BracketCall .)
    INTL            reduce using rule 89 (UnaryExpression -> BracketCall .)
    BOOLL           reduce using rule 89 (UnaryExpression -> BracketCall .)
    RBRACE          reduce using rule 89 (UnaryExpression -> BracketCall .)
    RBRACKET        reduce using rule 89 (UnaryExpression -> BracketCall .)
    COMMA           reduce using rule 89 (UnaryExpression -> BracketCall .)


state 92

    (90) UnaryExpression -> InitCall .

    SEMICOLON       reduce using rule 90 (UnaryExpression -> InitCall .)
    ASSIGNMENT      reduce using rule 90 (UnaryExpression -> InitCall .)
    PLUS            reduce using rule 90 (UnaryExpression -> InitCall .)
    MINUS           reduce using rule 90 (UnaryExpression -> InitCall .)
    TIMES           reduce using rule 90 (UnaryExpression -> InitCall .)
    DIVIDE          reduce using rule 90 (UnaryExpression -> InitCall .)
    MOD             reduce using rule 90 (UnaryExpression -> InitCall .)
    LEQ             reduce using rule 90 (UnaryExpression -> InitCall .)
    GEQ             reduce using rule 90 (UnaryExpression -> InitCall .)
    LT              reduce using rule 90 (UnaryExpression -> InitCall .)
    GT              reduce using rule 90 (UnaryExpression -> InitCall .)
    EQ              reduce using rule 90 (UnaryExpression -> InitCall .)
    NE              reduce using rule 90 (UnaryExpression -> InitCall .)
    LBRACKET        reduce using rule 90 (UnaryExpression -> InitCall .)
    DOT             reduce using rule 90 (UnaryExpression -> InitCall .)
    RPAREN          reduce using rule 90 (UnaryExpression -> InitCall .)
    LET             reduce using rule 90 (UnaryExpression -> InitCall .)
    IF              reduce using rule 90 (UnaryExpression -> InitCall .)
    FOR             reduce using rule 90 (UnaryExpression -> InitCall .)
    WHILE           reduce using rule 90 (UnaryExpression -> InitCall .)
    BREAK           reduce using rule 90 (UnaryExpression -> InitCall .)
    RETURN          reduce using rule 90 (UnaryExpression -> InitCall .)
    LPAREN          reduce using rule 90 (UnaryExpression -> InitCall .)
    LBRACE          reduce using rule 90 (UnaryExpression -> InitCall .)
    ID              reduce using rule 90 (UnaryExpression -> InitCall .)
    AMPERSAND       reduce using rule 90 (UnaryExpression -> InitCall .)
    INTL            reduce using rule 90 (UnaryExpression -> InitCall .)
    BOOLL           reduce using rule 90 (UnaryExpression -> InitCall .)
    RBRACE          reduce using rule 90 (UnaryExpression -> InitCall .)
    RBRACKET        reduce using rule 90 (UnaryExpression -> InitCall .)
    COMMA           reduce using rule 90 (UnaryExpression -> InitCall .)


state 93

    (91) UnaryExpression -> DotExpression .

    SEMICOLON       reduce using rule 91 (UnaryExpression -> DotExpression .)
    ASSIGNMENT      reduce using rule 91 (UnaryExpression -> DotExpression .)
    PLUS            reduce using rule 91 (UnaryExpression -> DotExpression .)
    MINUS           reduce using rule 91 (UnaryExpression -> DotExpression .)
    TIMES           reduce using rule 91 (UnaryExpression -> DotExpression .)
    DIVIDE          reduce using rule 91 (UnaryExpression -> DotExpression .)
    MOD             reduce using rule 91 (UnaryExpression -> DotExpression .)
    LEQ             reduce using rule 91 (UnaryExpression -> DotExpression .)
    GEQ             reduce using rule 91 (UnaryExpression -> DotExpression .)
    LT              reduce using rule 91 (UnaryExpression -> DotExpression .)
    GT              reduce using rule 91 (UnaryExpression -> DotExpression .)
    EQ              reduce using rule 91 (UnaryExpression -> DotExpression .)
    NE              reduce using rule 91 (UnaryExpression -> DotExpression .)
    LBRACKET        reduce using rule 91 (UnaryExpression -> DotExpression .)
    DOT             reduce using rule 91 (UnaryExpression -> DotExpression .)
    RPAREN          reduce using rule 91 (UnaryExpression -> DotExpression .)
    LET             reduce using rule 91 (UnaryExpression -> DotExpression .)
    IF              reduce using rule 91 (UnaryExpression -> DotExpression .)
    FOR             reduce using rule 91 (UnaryExpression -> DotExpression .)
    WHILE           reduce using rule 91 (UnaryExpression -> DotExpression .)
    BREAK           reduce using rule 91 (UnaryExpression -> DotExpression .)
    RETURN          reduce using rule 91 (UnaryExpression -> DotExpression .)
    LPAREN          reduce using rule 91 (UnaryExpression -> DotExpression .)
    LBRACE          reduce using rule 91 (UnaryExpression -> DotExpression .)
    ID              reduce using rule 91 (UnaryExpression -> DotExpression .)
    AMPERSAND       reduce using rule 91 (UnaryExpression -> DotExpression .)
    INTL            reduce using rule 91 (UnaryExpression -> DotExpression .)
    BOOLL           reduce using rule 91 (UnaryExpression -> DotExpression .)
    RBRACE          reduce using rule 91 (UnaryExpression -> DotExpression .)
    RBRACKET        reduce using rule 91 (UnaryExpression -> DotExpression .)
    COMMA           reduce using rule 91 (UnaryExpression -> DotExpression .)


state 94

    (93) UnaryExpression -> DereferenceExpression .

    SEMICOLON       reduce using rule 93 (UnaryExpression -> DereferenceExpression .)
    ASSIGNMENT      reduce using rule 93 (UnaryExpression -> DereferenceExpression .)
    PLUS            reduce using rule 93 (UnaryExpression -> DereferenceExpression .)
    MINUS           reduce using rule 93 (UnaryExpression -> DereferenceExpression .)
    TIMES           reduce using rule 93 (UnaryExpression -> DereferenceExpression .)
    DIVIDE          reduce using rule 93 (UnaryExpression -> DereferenceExpression .)
    MOD             reduce using rule 93 (UnaryExpression -> DereferenceExpression .)
    LEQ             reduce using rule 93 (UnaryExpression -> DereferenceExpression .)
    GEQ             reduce using rule 93 (UnaryExpression -> DereferenceExpression .)
    LT              reduce using rule 93 (UnaryExpression -> DereferenceExpression .)
    GT              reduce using rule 93 (UnaryExpression -> DereferenceExpression .)
    EQ              reduce using rule 93 (UnaryExpression -> DereferenceExpression .)
    NE              reduce using rule 93 (UnaryExpression -> DereferenceExpression .)
    LBRACKET        reduce using rule 93 (UnaryExpression -> DereferenceExpression .)
    DOT             reduce using rule 93 (UnaryExpression -> DereferenceExpression .)
    RPAREN          reduce using rule 93 (UnaryExpression -> DereferenceExpression .)
    LET             reduce using rule 93 (UnaryExpression -> DereferenceExpression .)
    IF              reduce using rule 93 (UnaryExpression -> DereferenceExpression .)
    FOR             reduce using rule 93 (UnaryExpression -> DereferenceExpression .)
    WHILE           reduce using rule 93 (UnaryExpression -> DereferenceExpression .)
    BREAK           reduce using rule 93 (UnaryExpression -> DereferenceExpression .)
    RETURN          reduce using rule 93 (UnaryExpression -> DereferenceExpression .)
    LPAREN          reduce using rule 93 (UnaryExpression -> DereferenceExpression .)
    LBRACE          reduce using rule 93 (UnaryExpression -> DereferenceExpression .)
    ID              reduce using rule 93 (UnaryExpression -> DereferenceExpression .)
    AMPERSAND       reduce using rule 93 (UnaryExpression -> DereferenceExpression .)
    INTL            reduce using rule 93 (UnaryExpression -> DereferenceExpression .)
    BOOLL           reduce using rule 93 (UnaryExpression -> DereferenceExpression .)
    RBRACE          reduce using rule 93 (UnaryExpression -> DereferenceExpression .)
    RBRACKET        reduce using rule 93 (UnaryExpression -> DereferenceExpression .)
    COMMA           reduce using rule 93 (UnaryExpression -> DereferenceExpression .)


state 95

    (94) UnaryExpression -> AddressExpression .

    SEMICOLON       reduce using rule 94 (UnaryExpression -> AddressExpression .)
    ASSIGNMENT      reduce using rule 94 (UnaryExpression -> AddressExpression .)
    PLUS            reduce using rule 94 (UnaryExpression -> AddressExpression .)
    MINUS           reduce using rule 94 (UnaryExpression -> AddressExpression .)
    TIMES           reduce using rule 94 (UnaryExpression -> AddressExpression .)
    DIVIDE          reduce using rule 94 (UnaryExpression -> AddressExpression .)
    MOD             reduce using rule 94 (UnaryExpression -> AddressExpression .)
    LEQ             reduce using rule 94 (UnaryExpression -> AddressExpression .)
    GEQ             reduce using rule 94 (UnaryExpression -> AddressExpression .)
    LT              reduce using rule 94 (UnaryExpression -> AddressExpression .)
    GT              reduce using rule 94 (UnaryExpression -> AddressExpression .)
    EQ              reduce using rule 94 (UnaryExpression -> AddressExpression .)
    NE              reduce using rule 94 (UnaryExpression -> AddressExpression .)
    LBRACKET        reduce using rule 94 (UnaryExpression -> AddressExpression .)
    DOT             reduce using rule 94 (UnaryExpression -> AddressExpression .)
    RPAREN          reduce using rule 94 (UnaryExpression -> AddressExpression .)
    LET             reduce using rule 94 (UnaryExpression -> AddressExpression .)
    IF              reduce using rule 94 (UnaryExpression -> AddressExpression .)
    FOR             reduce using rule 94 (UnaryExpression -> AddressExpression .)
    WHILE           reduce using rule 94 (UnaryExpression -> AddressExpression .)
    BREAK           reduce using rule 94 (UnaryExpression -> AddressExpression .)
    RETURN          reduce using rule 94 (UnaryExpression -> AddressExpression .)
    LPAREN          reduce using rule 94 (UnaryExpression -> AddressExpression .)
    LBRACE          reduce using rule 94 (UnaryExpression -> AddressExpression .)
    ID              reduce using rule 94 (UnaryExpression -> AddressExpression .)
    AMPERSAND       reduce using rule 94 (UnaryExpression -> AddressExpression .)
    INTL            reduce using rule 94 (UnaryExpression -> AddressExpression .)
    BOOLL           reduce using rule 94 (UnaryExpression -> AddressExpression .)
    RBRACE          reduce using rule 94 (UnaryExpression -> AddressExpression .)
    RBRACKET        reduce using rule 94 (UnaryExpression -> AddressExpression .)
    COMMA           reduce using rule 94 (UnaryExpression -> AddressExpression .)


state 96

    (49) Literal -> IntLiteral .

    SEMICOLON       reduce using rule 49 (Literal -> IntLiteral .)
    ASSIGNMENT      reduce using rule 49 (Literal -> IntLiteral .)
    PLUS            reduce using rule 49 (Literal -> IntLiteral .)
    MINUS           reduce using rule 49 (Literal -> IntLiteral .)
    TIMES           reduce using rule 49 (Literal -> IntLiteral .)
    DIVIDE          reduce using rule 49 (Literal -> IntLiteral .)
    MOD             reduce using rule 49 (Literal -> IntLiteral .)
    LEQ             reduce using rule 49 (Literal -> IntLiteral .)
    GEQ             reduce using rule 49 (Literal -> IntLiteral .)
    LT              reduce using rule 49 (Literal -> IntLiteral .)
    GT              reduce using rule 49 (Literal -> IntLiteral .)
    EQ              reduce using rule 49 (Literal -> IntLiteral .)
    NE              reduce using rule 49 (Literal -> IntLiteral .)
    LBRACKET        reduce using rule 49 (Literal -> IntLiteral .)
    DOT             reduce using rule 49 (Literal -> IntLiteral .)
    RPAREN          reduce using rule 49 (Literal -> IntLiteral .)
    LET             reduce using rule 49 (Literal -> IntLiteral .)
    IF              reduce using rule 49 (Literal -> IntLiteral .)
    FOR             reduce using rule 49 (Literal -> IntLiteral .)
    WHILE           reduce using rule 49 (Literal -> IntLiteral .)
    BREAK           reduce using rule 49 (Literal -> IntLiteral .)
    RETURN          reduce using rule 49 (Literal -> IntLiteral .)
    LPAREN          reduce using rule 49 (Literal -> IntLiteral .)
    LBRACE          reduce using rule 49 (Literal -> IntLiteral .)
    ID              reduce using rule 49 (Literal -> IntLiteral .)
    AMPERSAND       reduce using rule 49 (Literal -> IntLiteral .)
    INTL            reduce using rule 49 (Literal -> IntLiteral .)
    BOOLL           reduce using rule 49 (Literal -> IntLiteral .)
    RBRACE          reduce using rule 49 (Literal -> IntLiteral .)
    RBRACKET        reduce using rule 49 (Literal -> IntLiteral .)
    COMMA           reduce using rule 49 (Literal -> IntLiteral .)


state 97

    (50) Literal -> BoolLiteral .

    SEMICOLON       reduce using rule 50 (Literal -> BoolLiteral .)
    ASSIGNMENT      reduce using rule 50 (Literal -> BoolLiteral .)
    PLUS            reduce using rule 50 (Literal -> BoolLiteral .)
    MINUS           reduce using rule 50 (Literal -> BoolLiteral .)
    TIMES           reduce using rule 50 (Literal -> BoolLiteral .)
    DIVIDE          reduce using rule 50 (Literal -> BoolLiteral .)
    MOD             reduce using rule 50 (Literal -> BoolLiteral .)
    LEQ             reduce using rule 50 (Literal -> BoolLiteral .)
    GEQ             reduce using rule 50 (Literal -> BoolLiteral .)
    LT              reduce using rule 50 (Literal -> BoolLiteral .)
    GT              reduce using rule 50 (Literal -> BoolLiteral .)
    EQ              reduce using rule 50 (Literal -> BoolLiteral .)
    NE              reduce using rule 50 (Literal -> BoolLiteral .)
    LBRACKET        reduce using rule 50 (Literal -> BoolLiteral .)
    DOT             reduce using rule 50 (Literal -> BoolLiteral .)
    RPAREN          reduce using rule 50 (Literal -> BoolLiteral .)
    LET             reduce using rule 50 (Literal -> BoolLiteral .)
    IF              reduce using rule 50 (Literal -> BoolLiteral .)
    FOR             reduce using rule 50 (Literal -> BoolLiteral .)
    WHILE           reduce using rule 50 (Literal -> BoolLiteral .)
    BREAK           reduce using rule 50 (Literal -> BoolLiteral .)
    RETURN          reduce using rule 50 (Literal -> BoolLiteral .)
    LPAREN          reduce using rule 50 (Literal -> BoolLiteral .)
    LBRACE          reduce using rule 50 (Literal -> BoolLiteral .)
    ID              reduce using rule 50 (Literal -> BoolLiteral .)
    AMPERSAND       reduce using rule 50 (Literal -> BoolLiteral .)
    INTL            reduce using rule 50 (Literal -> BoolLiteral .)
    BOOLL           reduce using rule 50 (Literal -> BoolLiteral .)
    RBRACE          reduce using rule 50 (Literal -> BoolLiteral .)
    RBRACKET        reduce using rule 50 (Literal -> BoolLiteral .)
    COMMA           reduce using rule 50 (Literal -> BoolLiteral .)


state 98

    (1) AddressExpression -> AMPERSAND . Expression
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (8) BinaryExpression -> . Expression PLUS Expression
    (9) BinaryExpression -> . Expression MINUS Expression
    (10) BinaryExpression -> . Expression TIMES Expression
    (11) BinaryExpression -> . Expression DIVIDE Expression
    (12) BinaryExpression -> . Expression MOD Expression
    (13) BinaryExpression -> . Expression LEQ Expression
    (14) BinaryExpression -> . Expression GEQ Expression
    (15) BinaryExpression -> . Expression LT Expression
    (16) BinaryExpression -> . Expression GT Expression
    (17) BinaryExpression -> . Expression EQ Expression
    (18) BinaryExpression -> . Expression NE Expression
    (87) UnaryExpression -> . Literal
    (88) UnaryExpression -> . FunctionCall
    (89) UnaryExpression -> . BracketCall
    (90) UnaryExpression -> . InitCall
    (91) UnaryExpression -> . DotExpression
    (92) UnaryExpression -> . LPAREN Expression RPAREN
    (93) UnaryExpression -> . DereferenceExpression
    (94) UnaryExpression -> . AddressExpression
    (49) Literal -> . IntLiteral
    (50) Literal -> . BoolLiteral
    (36) FunctionCall -> . ID LPAREN ArgumentListR RPAREN
    (37) FunctionCall -> . ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (44) InitCall -> . ID LBRACE ArgumentListR RBRACE
    (45) InitCall -> . LT TypeIdentifier GT LBRACE ArgumentListR RBRACE
    (46) InitCall -> . ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE
    (31) DotExpression -> . ID
    (32) DotExpression -> . Expression DOT ID
    (30) DereferenceExpression -> . TIMES Expression
    (1) AddressExpression -> . AMPERSAND Expression
    (48) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL

    LPAREN          shift and go to state 80
    ID              shift and go to state 76
    LT              shift and go to state 88
    TIMES           shift and go to state 87
    AMPERSAND       shift and go to state 98
    INTL            shift and go to state 85
    BOOLL           shift and go to state 99

    Expression                     shift and go to state 137
    BinaryExpression               shift and go to state 77
    UnaryExpression                shift and go to state 78
    Literal                        shift and go to state 89
    FunctionCall                   shift and go to state 90
    BracketCall                    shift and go to state 91
    InitCall                       shift and go to state 92
    DotExpression                  shift and go to state 93
    DereferenceExpression          shift and go to state 94
    AddressExpression              shift and go to state 95
    IntLiteral                     shift and go to state 96
    BoolLiteral                    shift and go to state 97

state 99

    (22) BoolLiteral -> BOOLL .

    SEMICOLON       reduce using rule 22 (BoolLiteral -> BOOLL .)
    ASSIGNMENT      reduce using rule 22 (BoolLiteral -> BOOLL .)
    PLUS            reduce using rule 22 (BoolLiteral -> BOOLL .)
    MINUS           reduce using rule 22 (BoolLiteral -> BOOLL .)
    TIMES           reduce using rule 22 (BoolLiteral -> BOOLL .)
    DIVIDE          reduce using rule 22 (BoolLiteral -> BOOLL .)
    MOD             reduce using rule 22 (BoolLiteral -> BOOLL .)
    LEQ             reduce using rule 22 (BoolLiteral -> BOOLL .)
    GEQ             reduce using rule 22 (BoolLiteral -> BOOLL .)
    LT              reduce using rule 22 (BoolLiteral -> BOOLL .)
    GT              reduce using rule 22 (BoolLiteral -> BOOLL .)
    EQ              reduce using rule 22 (BoolLiteral -> BOOLL .)
    NE              reduce using rule 22 (BoolLiteral -> BOOLL .)
    LBRACKET        reduce using rule 22 (BoolLiteral -> BOOLL .)
    DOT             reduce using rule 22 (BoolLiteral -> BOOLL .)
    RPAREN          reduce using rule 22 (BoolLiteral -> BOOLL .)
    LET             reduce using rule 22 (BoolLiteral -> BOOLL .)
    IF              reduce using rule 22 (BoolLiteral -> BOOLL .)
    FOR             reduce using rule 22 (BoolLiteral -> BOOLL .)
    WHILE           reduce using rule 22 (BoolLiteral -> BOOLL .)
    BREAK           reduce using rule 22 (BoolLiteral -> BOOLL .)
    RETURN          reduce using rule 22 (BoolLiteral -> BOOLL .)
    LPAREN          reduce using rule 22 (BoolLiteral -> BOOLL .)
    LBRACE          reduce using rule 22 (BoolLiteral -> BOOLL .)
    ID              reduce using rule 22 (BoolLiteral -> BOOLL .)
    AMPERSAND       reduce using rule 22 (BoolLiteral -> BOOLL .)
    INTL            reduce using rule 22 (BoolLiteral -> BOOLL .)
    BOOLL           reduce using rule 22 (BoolLiteral -> BOOLL .)
    RBRACE          reduce using rule 22 (BoolLiteral -> BOOLL .)
    RBRACKET        reduce using rule 22 (BoolLiteral -> BOOLL .)
    COMMA           reduce using rule 22 (BoolLiteral -> BOOLL .)


state 100

    (74) TypeArgumentListR -> TypeIdentifier COMMA . TypeArgumentListR
    (74) TypeArgumentListR -> . TypeIdentifier COMMA TypeArgumentListR
    (75) TypeArgumentListR -> . TypeIdentifier
    (76) TypeArgumentListR -> . empty
    (77) TypeIdentifier -> . ID
    (78) TypeIdentifier -> . TypeIdentifier DOT ID
    (79) TypeIdentifier -> . TypeIdentifier TIMES
    (80) TypeIdentifier -> . TypeIdentifier LT TypeArgumentListR GT
    (96) empty -> .

    ID              shift and go to state 16
    GT              reduce using rule 96 (empty -> .)

    TypeIdentifier                 shift and go to state 50
    TypeArgumentListR              shift and go to state 138
    empty                          shift and go to state 52

state 101

    (80) TypeIdentifier -> TypeIdentifier LT TypeArgumentListR GT .

    ID              reduce using rule 80 (TypeIdentifier -> TypeIdentifier LT TypeArgumentListR GT .)
    DOT             reduce using rule 80 (TypeIdentifier -> TypeIdentifier LT TypeArgumentListR GT .)
    TIMES           reduce using rule 80 (TypeIdentifier -> TypeIdentifier LT TypeArgumentListR GT .)
    LT              reduce using rule 80 (TypeIdentifier -> TypeIdentifier LT TypeArgumentListR GT .)
    COMMA           reduce using rule 80 (TypeIdentifier -> TypeIdentifier LT TypeArgumentListR GT .)
    GT              reduce using rule 80 (TypeIdentifier -> TypeIdentifier LT TypeArgumentListR GT .)
    LBRACE          reduce using rule 80 (TypeIdentifier -> TypeIdentifier LT TypeArgumentListR GT .)


state 102

    (39) FunctionDefinition -> FN ID LT TypeParameterListR GT LPAREN ParameterListR . RPAREN Block
    (41) FunctionDefinition -> FN ID LT TypeParameterListR GT LPAREN ParameterListR . RPAREN ARROW TypeIdentifier Block

    RPAREN          shift and go to state 139


state 103

    (83) TypeParameter -> SPEC ID ASSIGNMENT TypeIdentifier .
    (78) TypeIdentifier -> TypeIdentifier . DOT ID
    (79) TypeIdentifier -> TypeIdentifier . TIMES
    (80) TypeIdentifier -> TypeIdentifier . LT TypeArgumentListR GT

    COMMA           reduce using rule 83 (TypeParameter -> SPEC ID ASSIGNMENT TypeIdentifier .)
    GT              reduce using rule 83 (TypeParameter -> SPEC ID ASSIGNMENT TypeIdentifier .)
    DOT             shift and go to state 34
    TIMES           shift and go to state 35
    LT              shift and go to state 36


state 104

    (70) StructDefinition -> STRUCT ID LT TypeParameterListR GT LBRACE StructMemberListR . RBRACE

    RBRACE          shift and go to state 140


state 105

    (40) FunctionDefinition -> FN ID LPAREN ParameterListR RPAREN ARROW TypeIdentifier Block .

    FN              reduce using rule 40 (FunctionDefinition -> FN ID LPAREN ParameterListR RPAREN ARROW TypeIdentifier Block .)
    STRUCT          reduce using rule 40 (FunctionDefinition -> FN ID LPAREN ParameterListR RPAREN ARROW TypeIdentifier Block .)
    $end            reduce using rule 40 (FunctionDefinition -> FN ID LPAREN ParameterListR RPAREN ARROW TypeIdentifier Block .)


state 106

    (20) Block -> LBRACE StatementListR RBRACE .

    FN              reduce using rule 20 (Block -> LBRACE StatementListR RBRACE .)
    STRUCT          reduce using rule 20 (Block -> LBRACE StatementListR RBRACE .)
    $end            reduce using rule 20 (Block -> LBRACE StatementListR RBRACE .)
    LET             reduce using rule 20 (Block -> LBRACE StatementListR RBRACE .)
    IF              reduce using rule 20 (Block -> LBRACE StatementListR RBRACE .)
    FOR             reduce using rule 20 (Block -> LBRACE StatementListR RBRACE .)
    WHILE           reduce using rule 20 (Block -> LBRACE StatementListR RBRACE .)
    BREAK           reduce using rule 20 (Block -> LBRACE StatementListR RBRACE .)
    RETURN          reduce using rule 20 (Block -> LBRACE StatementListR RBRACE .)
    SEMICOLON       reduce using rule 20 (Block -> LBRACE StatementListR RBRACE .)
    LPAREN          reduce using rule 20 (Block -> LBRACE StatementListR RBRACE .)
    LBRACE          reduce using rule 20 (Block -> LBRACE StatementListR RBRACE .)
    ID              reduce using rule 20 (Block -> LBRACE StatementListR RBRACE .)
    LT              reduce using rule 20 (Block -> LBRACE StatementListR RBRACE .)
    TIMES           reduce using rule 20 (Block -> LBRACE StatementListR RBRACE .)
    AMPERSAND       reduce using rule 20 (Block -> LBRACE StatementListR RBRACE .)
    INTL            reduce using rule 20 (Block -> LBRACE StatementListR RBRACE .)
    BOOLL           reduce using rule 20 (Block -> LBRACE StatementListR RBRACE .)
    RBRACE          reduce using rule 20 (Block -> LBRACE StatementListR RBRACE .)
    ELSE            reduce using rule 20 (Block -> LBRACE StatementListR RBRACE .)
    RPAREN          reduce using rule 20 (Block -> LBRACE StatementListR RBRACE .)


state 107

    (67) StatementListR -> Statement StatementListR .

    RBRACE          reduce using rule 67 (StatementListR -> Statement StatementListR .)


state 108

    (59) Statement -> Expression SEMICOLON .

    LET             reduce using rule 59 (Statement -> Expression SEMICOLON .)
    IF              reduce using rule 59 (Statement -> Expression SEMICOLON .)
    FOR             reduce using rule 59 (Statement -> Expression SEMICOLON .)
    WHILE           reduce using rule 59 (Statement -> Expression SEMICOLON .)
    BREAK           reduce using rule 59 (Statement -> Expression SEMICOLON .)
    RETURN          reduce using rule 59 (Statement -> Expression SEMICOLON .)
    SEMICOLON       reduce using rule 59 (Statement -> Expression SEMICOLON .)
    LPAREN          reduce using rule 59 (Statement -> Expression SEMICOLON .)
    LBRACE          reduce using rule 59 (Statement -> Expression SEMICOLON .)
    ID              reduce using rule 59 (Statement -> Expression SEMICOLON .)
    LT              reduce using rule 59 (Statement -> Expression SEMICOLON .)
    TIMES           reduce using rule 59 (Statement -> Expression SEMICOLON .)
    AMPERSAND       reduce using rule 59 (Statement -> Expression SEMICOLON .)
    INTL            reduce using rule 59 (Statement -> Expression SEMICOLON .)
    BOOLL           reduce using rule 59 (Statement -> Expression SEMICOLON .)
    RBRACE          reduce using rule 59 (Statement -> Expression SEMICOLON .)
    RPAREN          reduce using rule 59 (Statement -> Expression SEMICOLON .)


state 109

    (6) AssignmentStatement -> Expression ASSIGNMENT . Expression SEMICOLON
    (7) AssignmentStatement -> Expression ASSIGNMENT . Expression
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (8) BinaryExpression -> . Expression PLUS Expression
    (9) BinaryExpression -> . Expression MINUS Expression
    (10) BinaryExpression -> . Expression TIMES Expression
    (11) BinaryExpression -> . Expression DIVIDE Expression
    (12) BinaryExpression -> . Expression MOD Expression
    (13) BinaryExpression -> . Expression LEQ Expression
    (14) BinaryExpression -> . Expression GEQ Expression
    (15) BinaryExpression -> . Expression LT Expression
    (16) BinaryExpression -> . Expression GT Expression
    (17) BinaryExpression -> . Expression EQ Expression
    (18) BinaryExpression -> . Expression NE Expression
    (87) UnaryExpression -> . Literal
    (88) UnaryExpression -> . FunctionCall
    (89) UnaryExpression -> . BracketCall
    (90) UnaryExpression -> . InitCall
    (91) UnaryExpression -> . DotExpression
    (92) UnaryExpression -> . LPAREN Expression RPAREN
    (93) UnaryExpression -> . DereferenceExpression
    (94) UnaryExpression -> . AddressExpression
    (49) Literal -> . IntLiteral
    (50) Literal -> . BoolLiteral
    (36) FunctionCall -> . ID LPAREN ArgumentListR RPAREN
    (37) FunctionCall -> . ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (44) InitCall -> . ID LBRACE ArgumentListR RBRACE
    (45) InitCall -> . LT TypeIdentifier GT LBRACE ArgumentListR RBRACE
    (46) InitCall -> . ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE
    (31) DotExpression -> . ID
    (32) DotExpression -> . Expression DOT ID
    (30) DereferenceExpression -> . TIMES Expression
    (1) AddressExpression -> . AMPERSAND Expression
    (48) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL

    LPAREN          shift and go to state 80
    ID              shift and go to state 76
    LT              shift and go to state 88
    TIMES           shift and go to state 87
    AMPERSAND       shift and go to state 98
    INTL            shift and go to state 85
    BOOLL           shift and go to state 99

    Expression                     shift and go to state 141
    BinaryExpression               shift and go to state 77
    UnaryExpression                shift and go to state 78
    Literal                        shift and go to state 89
    FunctionCall                   shift and go to state 90
    BracketCall                    shift and go to state 91
    InitCall                       shift and go to state 92
    DotExpression                  shift and go to state 93
    DereferenceExpression          shift and go to state 94
    AddressExpression              shift and go to state 95
    IntLiteral                     shift and go to state 96
    BoolLiteral                    shift and go to state 97

state 110

    (8) BinaryExpression -> Expression PLUS . Expression
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (8) BinaryExpression -> . Expression PLUS Expression
    (9) BinaryExpression -> . Expression MINUS Expression
    (10) BinaryExpression -> . Expression TIMES Expression
    (11) BinaryExpression -> . Expression DIVIDE Expression
    (12) BinaryExpression -> . Expression MOD Expression
    (13) BinaryExpression -> . Expression LEQ Expression
    (14) BinaryExpression -> . Expression GEQ Expression
    (15) BinaryExpression -> . Expression LT Expression
    (16) BinaryExpression -> . Expression GT Expression
    (17) BinaryExpression -> . Expression EQ Expression
    (18) BinaryExpression -> . Expression NE Expression
    (87) UnaryExpression -> . Literal
    (88) UnaryExpression -> . FunctionCall
    (89) UnaryExpression -> . BracketCall
    (90) UnaryExpression -> . InitCall
    (91) UnaryExpression -> . DotExpression
    (92) UnaryExpression -> . LPAREN Expression RPAREN
    (93) UnaryExpression -> . DereferenceExpression
    (94) UnaryExpression -> . AddressExpression
    (49) Literal -> . IntLiteral
    (50) Literal -> . BoolLiteral
    (36) FunctionCall -> . ID LPAREN ArgumentListR RPAREN
    (37) FunctionCall -> . ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (44) InitCall -> . ID LBRACE ArgumentListR RBRACE
    (45) InitCall -> . LT TypeIdentifier GT LBRACE ArgumentListR RBRACE
    (46) InitCall -> . ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE
    (31) DotExpression -> . ID
    (32) DotExpression -> . Expression DOT ID
    (30) DereferenceExpression -> . TIMES Expression
    (1) AddressExpression -> . AMPERSAND Expression
    (48) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL

    LPAREN          shift and go to state 80
    ID              shift and go to state 76
    LT              shift and go to state 88
    TIMES           shift and go to state 87
    AMPERSAND       shift and go to state 98
    INTL            shift and go to state 85
    BOOLL           shift and go to state 99

    Expression                     shift and go to state 142
    BinaryExpression               shift and go to state 77
    UnaryExpression                shift and go to state 78
    Literal                        shift and go to state 89
    FunctionCall                   shift and go to state 90
    BracketCall                    shift and go to state 91
    InitCall                       shift and go to state 92
    DotExpression                  shift and go to state 93
    DereferenceExpression          shift and go to state 94
    AddressExpression              shift and go to state 95
    IntLiteral                     shift and go to state 96
    BoolLiteral                    shift and go to state 97

state 111

    (9) BinaryExpression -> Expression MINUS . Expression
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (8) BinaryExpression -> . Expression PLUS Expression
    (9) BinaryExpression -> . Expression MINUS Expression
    (10) BinaryExpression -> . Expression TIMES Expression
    (11) BinaryExpression -> . Expression DIVIDE Expression
    (12) BinaryExpression -> . Expression MOD Expression
    (13) BinaryExpression -> . Expression LEQ Expression
    (14) BinaryExpression -> . Expression GEQ Expression
    (15) BinaryExpression -> . Expression LT Expression
    (16) BinaryExpression -> . Expression GT Expression
    (17) BinaryExpression -> . Expression EQ Expression
    (18) BinaryExpression -> . Expression NE Expression
    (87) UnaryExpression -> . Literal
    (88) UnaryExpression -> . FunctionCall
    (89) UnaryExpression -> . BracketCall
    (90) UnaryExpression -> . InitCall
    (91) UnaryExpression -> . DotExpression
    (92) UnaryExpression -> . LPAREN Expression RPAREN
    (93) UnaryExpression -> . DereferenceExpression
    (94) UnaryExpression -> . AddressExpression
    (49) Literal -> . IntLiteral
    (50) Literal -> . BoolLiteral
    (36) FunctionCall -> . ID LPAREN ArgumentListR RPAREN
    (37) FunctionCall -> . ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (44) InitCall -> . ID LBRACE ArgumentListR RBRACE
    (45) InitCall -> . LT TypeIdentifier GT LBRACE ArgumentListR RBRACE
    (46) InitCall -> . ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE
    (31) DotExpression -> . ID
    (32) DotExpression -> . Expression DOT ID
    (30) DereferenceExpression -> . TIMES Expression
    (1) AddressExpression -> . AMPERSAND Expression
    (48) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL

    LPAREN          shift and go to state 80
    ID              shift and go to state 76
    LT              shift and go to state 88
    TIMES           shift and go to state 87
    AMPERSAND       shift and go to state 98
    INTL            shift and go to state 85
    BOOLL           shift and go to state 99

    Expression                     shift and go to state 143
    BinaryExpression               shift and go to state 77
    UnaryExpression                shift and go to state 78
    Literal                        shift and go to state 89
    FunctionCall                   shift and go to state 90
    BracketCall                    shift and go to state 91
    InitCall                       shift and go to state 92
    DotExpression                  shift and go to state 93
    DereferenceExpression          shift and go to state 94
    AddressExpression              shift and go to state 95
    IntLiteral                     shift and go to state 96
    BoolLiteral                    shift and go to state 97

state 112

    (10) BinaryExpression -> Expression TIMES . Expression
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (8) BinaryExpression -> . Expression PLUS Expression
    (9) BinaryExpression -> . Expression MINUS Expression
    (10) BinaryExpression -> . Expression TIMES Expression
    (11) BinaryExpression -> . Expression DIVIDE Expression
    (12) BinaryExpression -> . Expression MOD Expression
    (13) BinaryExpression -> . Expression LEQ Expression
    (14) BinaryExpression -> . Expression GEQ Expression
    (15) BinaryExpression -> . Expression LT Expression
    (16) BinaryExpression -> . Expression GT Expression
    (17) BinaryExpression -> . Expression EQ Expression
    (18) BinaryExpression -> . Expression NE Expression
    (87) UnaryExpression -> . Literal
    (88) UnaryExpression -> . FunctionCall
    (89) UnaryExpression -> . BracketCall
    (90) UnaryExpression -> . InitCall
    (91) UnaryExpression -> . DotExpression
    (92) UnaryExpression -> . LPAREN Expression RPAREN
    (93) UnaryExpression -> . DereferenceExpression
    (94) UnaryExpression -> . AddressExpression
    (49) Literal -> . IntLiteral
    (50) Literal -> . BoolLiteral
    (36) FunctionCall -> . ID LPAREN ArgumentListR RPAREN
    (37) FunctionCall -> . ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (44) InitCall -> . ID LBRACE ArgumentListR RBRACE
    (45) InitCall -> . LT TypeIdentifier GT LBRACE ArgumentListR RBRACE
    (46) InitCall -> . ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE
    (31) DotExpression -> . ID
    (32) DotExpression -> . Expression DOT ID
    (30) DereferenceExpression -> . TIMES Expression
    (1) AddressExpression -> . AMPERSAND Expression
    (48) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL

    LPAREN          shift and go to state 80
    ID              shift and go to state 76
    LT              shift and go to state 88
    TIMES           shift and go to state 87
    AMPERSAND       shift and go to state 98
    INTL            shift and go to state 85
    BOOLL           shift and go to state 99

    Expression                     shift and go to state 144
    BinaryExpression               shift and go to state 77
    UnaryExpression                shift and go to state 78
    Literal                        shift and go to state 89
    FunctionCall                   shift and go to state 90
    BracketCall                    shift and go to state 91
    InitCall                       shift and go to state 92
    DotExpression                  shift and go to state 93
    DereferenceExpression          shift and go to state 94
    AddressExpression              shift and go to state 95
    IntLiteral                     shift and go to state 96
    BoolLiteral                    shift and go to state 97

state 113

    (11) BinaryExpression -> Expression DIVIDE . Expression
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (8) BinaryExpression -> . Expression PLUS Expression
    (9) BinaryExpression -> . Expression MINUS Expression
    (10) BinaryExpression -> . Expression TIMES Expression
    (11) BinaryExpression -> . Expression DIVIDE Expression
    (12) BinaryExpression -> . Expression MOD Expression
    (13) BinaryExpression -> . Expression LEQ Expression
    (14) BinaryExpression -> . Expression GEQ Expression
    (15) BinaryExpression -> . Expression LT Expression
    (16) BinaryExpression -> . Expression GT Expression
    (17) BinaryExpression -> . Expression EQ Expression
    (18) BinaryExpression -> . Expression NE Expression
    (87) UnaryExpression -> . Literal
    (88) UnaryExpression -> . FunctionCall
    (89) UnaryExpression -> . BracketCall
    (90) UnaryExpression -> . InitCall
    (91) UnaryExpression -> . DotExpression
    (92) UnaryExpression -> . LPAREN Expression RPAREN
    (93) UnaryExpression -> . DereferenceExpression
    (94) UnaryExpression -> . AddressExpression
    (49) Literal -> . IntLiteral
    (50) Literal -> . BoolLiteral
    (36) FunctionCall -> . ID LPAREN ArgumentListR RPAREN
    (37) FunctionCall -> . ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (44) InitCall -> . ID LBRACE ArgumentListR RBRACE
    (45) InitCall -> . LT TypeIdentifier GT LBRACE ArgumentListR RBRACE
    (46) InitCall -> . ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE
    (31) DotExpression -> . ID
    (32) DotExpression -> . Expression DOT ID
    (30) DereferenceExpression -> . TIMES Expression
    (1) AddressExpression -> . AMPERSAND Expression
    (48) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL

    LPAREN          shift and go to state 80
    ID              shift and go to state 76
    LT              shift and go to state 88
    TIMES           shift and go to state 87
    AMPERSAND       shift and go to state 98
    INTL            shift and go to state 85
    BOOLL           shift and go to state 99

    Expression                     shift and go to state 145
    BinaryExpression               shift and go to state 77
    UnaryExpression                shift and go to state 78
    Literal                        shift and go to state 89
    FunctionCall                   shift and go to state 90
    BracketCall                    shift and go to state 91
    InitCall                       shift and go to state 92
    DotExpression                  shift and go to state 93
    DereferenceExpression          shift and go to state 94
    AddressExpression              shift and go to state 95
    IntLiteral                     shift and go to state 96
    BoolLiteral                    shift and go to state 97

state 114

    (12) BinaryExpression -> Expression MOD . Expression
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (8) BinaryExpression -> . Expression PLUS Expression
    (9) BinaryExpression -> . Expression MINUS Expression
    (10) BinaryExpression -> . Expression TIMES Expression
    (11) BinaryExpression -> . Expression DIVIDE Expression
    (12) BinaryExpression -> . Expression MOD Expression
    (13) BinaryExpression -> . Expression LEQ Expression
    (14) BinaryExpression -> . Expression GEQ Expression
    (15) BinaryExpression -> . Expression LT Expression
    (16) BinaryExpression -> . Expression GT Expression
    (17) BinaryExpression -> . Expression EQ Expression
    (18) BinaryExpression -> . Expression NE Expression
    (87) UnaryExpression -> . Literal
    (88) UnaryExpression -> . FunctionCall
    (89) UnaryExpression -> . BracketCall
    (90) UnaryExpression -> . InitCall
    (91) UnaryExpression -> . DotExpression
    (92) UnaryExpression -> . LPAREN Expression RPAREN
    (93) UnaryExpression -> . DereferenceExpression
    (94) UnaryExpression -> . AddressExpression
    (49) Literal -> . IntLiteral
    (50) Literal -> . BoolLiteral
    (36) FunctionCall -> . ID LPAREN ArgumentListR RPAREN
    (37) FunctionCall -> . ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (44) InitCall -> . ID LBRACE ArgumentListR RBRACE
    (45) InitCall -> . LT TypeIdentifier GT LBRACE ArgumentListR RBRACE
    (46) InitCall -> . ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE
    (31) DotExpression -> . ID
    (32) DotExpression -> . Expression DOT ID
    (30) DereferenceExpression -> . TIMES Expression
    (1) AddressExpression -> . AMPERSAND Expression
    (48) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL

    LPAREN          shift and go to state 80
    ID              shift and go to state 76
    LT              shift and go to state 88
    TIMES           shift and go to state 87
    AMPERSAND       shift and go to state 98
    INTL            shift and go to state 85
    BOOLL           shift and go to state 99

    Expression                     shift and go to state 146
    BinaryExpression               shift and go to state 77
    UnaryExpression                shift and go to state 78
    Literal                        shift and go to state 89
    FunctionCall                   shift and go to state 90
    BracketCall                    shift and go to state 91
    InitCall                       shift and go to state 92
    DotExpression                  shift and go to state 93
    DereferenceExpression          shift and go to state 94
    AddressExpression              shift and go to state 95
    IntLiteral                     shift and go to state 96
    BoolLiteral                    shift and go to state 97

state 115

    (13) BinaryExpression -> Expression LEQ . Expression
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (8) BinaryExpression -> . Expression PLUS Expression
    (9) BinaryExpression -> . Expression MINUS Expression
    (10) BinaryExpression -> . Expression TIMES Expression
    (11) BinaryExpression -> . Expression DIVIDE Expression
    (12) BinaryExpression -> . Expression MOD Expression
    (13) BinaryExpression -> . Expression LEQ Expression
    (14) BinaryExpression -> . Expression GEQ Expression
    (15) BinaryExpression -> . Expression LT Expression
    (16) BinaryExpression -> . Expression GT Expression
    (17) BinaryExpression -> . Expression EQ Expression
    (18) BinaryExpression -> . Expression NE Expression
    (87) UnaryExpression -> . Literal
    (88) UnaryExpression -> . FunctionCall
    (89) UnaryExpression -> . BracketCall
    (90) UnaryExpression -> . InitCall
    (91) UnaryExpression -> . DotExpression
    (92) UnaryExpression -> . LPAREN Expression RPAREN
    (93) UnaryExpression -> . DereferenceExpression
    (94) UnaryExpression -> . AddressExpression
    (49) Literal -> . IntLiteral
    (50) Literal -> . BoolLiteral
    (36) FunctionCall -> . ID LPAREN ArgumentListR RPAREN
    (37) FunctionCall -> . ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (44) InitCall -> . ID LBRACE ArgumentListR RBRACE
    (45) InitCall -> . LT TypeIdentifier GT LBRACE ArgumentListR RBRACE
    (46) InitCall -> . ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE
    (31) DotExpression -> . ID
    (32) DotExpression -> . Expression DOT ID
    (30) DereferenceExpression -> . TIMES Expression
    (1) AddressExpression -> . AMPERSAND Expression
    (48) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL

    LPAREN          shift and go to state 80
    ID              shift and go to state 76
    LT              shift and go to state 88
    TIMES           shift and go to state 87
    AMPERSAND       shift and go to state 98
    INTL            shift and go to state 85
    BOOLL           shift and go to state 99

    Expression                     shift and go to state 147
    BinaryExpression               shift and go to state 77
    UnaryExpression                shift and go to state 78
    Literal                        shift and go to state 89
    FunctionCall                   shift and go to state 90
    BracketCall                    shift and go to state 91
    InitCall                       shift and go to state 92
    DotExpression                  shift and go to state 93
    DereferenceExpression          shift and go to state 94
    AddressExpression              shift and go to state 95
    IntLiteral                     shift and go to state 96
    BoolLiteral                    shift and go to state 97

state 116

    (14) BinaryExpression -> Expression GEQ . Expression
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (8) BinaryExpression -> . Expression PLUS Expression
    (9) BinaryExpression -> . Expression MINUS Expression
    (10) BinaryExpression -> . Expression TIMES Expression
    (11) BinaryExpression -> . Expression DIVIDE Expression
    (12) BinaryExpression -> . Expression MOD Expression
    (13) BinaryExpression -> . Expression LEQ Expression
    (14) BinaryExpression -> . Expression GEQ Expression
    (15) BinaryExpression -> . Expression LT Expression
    (16) BinaryExpression -> . Expression GT Expression
    (17) BinaryExpression -> . Expression EQ Expression
    (18) BinaryExpression -> . Expression NE Expression
    (87) UnaryExpression -> . Literal
    (88) UnaryExpression -> . FunctionCall
    (89) UnaryExpression -> . BracketCall
    (90) UnaryExpression -> . InitCall
    (91) UnaryExpression -> . DotExpression
    (92) UnaryExpression -> . LPAREN Expression RPAREN
    (93) UnaryExpression -> . DereferenceExpression
    (94) UnaryExpression -> . AddressExpression
    (49) Literal -> . IntLiteral
    (50) Literal -> . BoolLiteral
    (36) FunctionCall -> . ID LPAREN ArgumentListR RPAREN
    (37) FunctionCall -> . ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (44) InitCall -> . ID LBRACE ArgumentListR RBRACE
    (45) InitCall -> . LT TypeIdentifier GT LBRACE ArgumentListR RBRACE
    (46) InitCall -> . ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE
    (31) DotExpression -> . ID
    (32) DotExpression -> . Expression DOT ID
    (30) DereferenceExpression -> . TIMES Expression
    (1) AddressExpression -> . AMPERSAND Expression
    (48) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL

    LPAREN          shift and go to state 80
    ID              shift and go to state 76
    LT              shift and go to state 88
    TIMES           shift and go to state 87
    AMPERSAND       shift and go to state 98
    INTL            shift and go to state 85
    BOOLL           shift and go to state 99

    Expression                     shift and go to state 148
    BinaryExpression               shift and go to state 77
    UnaryExpression                shift and go to state 78
    Literal                        shift and go to state 89
    FunctionCall                   shift and go to state 90
    BracketCall                    shift and go to state 91
    InitCall                       shift and go to state 92
    DotExpression                  shift and go to state 93
    DereferenceExpression          shift and go to state 94
    AddressExpression              shift and go to state 95
    IntLiteral                     shift and go to state 96
    BoolLiteral                    shift and go to state 97

state 117

    (15) BinaryExpression -> Expression LT . Expression
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (8) BinaryExpression -> . Expression PLUS Expression
    (9) BinaryExpression -> . Expression MINUS Expression
    (10) BinaryExpression -> . Expression TIMES Expression
    (11) BinaryExpression -> . Expression DIVIDE Expression
    (12) BinaryExpression -> . Expression MOD Expression
    (13) BinaryExpression -> . Expression LEQ Expression
    (14) BinaryExpression -> . Expression GEQ Expression
    (15) BinaryExpression -> . Expression LT Expression
    (16) BinaryExpression -> . Expression GT Expression
    (17) BinaryExpression -> . Expression EQ Expression
    (18) BinaryExpression -> . Expression NE Expression
    (87) UnaryExpression -> . Literal
    (88) UnaryExpression -> . FunctionCall
    (89) UnaryExpression -> . BracketCall
    (90) UnaryExpression -> . InitCall
    (91) UnaryExpression -> . DotExpression
    (92) UnaryExpression -> . LPAREN Expression RPAREN
    (93) UnaryExpression -> . DereferenceExpression
    (94) UnaryExpression -> . AddressExpression
    (49) Literal -> . IntLiteral
    (50) Literal -> . BoolLiteral
    (36) FunctionCall -> . ID LPAREN ArgumentListR RPAREN
    (37) FunctionCall -> . ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (44) InitCall -> . ID LBRACE ArgumentListR RBRACE
    (45) InitCall -> . LT TypeIdentifier GT LBRACE ArgumentListR RBRACE
    (46) InitCall -> . ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE
    (31) DotExpression -> . ID
    (32) DotExpression -> . Expression DOT ID
    (30) DereferenceExpression -> . TIMES Expression
    (1) AddressExpression -> . AMPERSAND Expression
    (48) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL

    LPAREN          shift and go to state 80
    ID              shift and go to state 76
    LT              shift and go to state 88
    TIMES           shift and go to state 87
    AMPERSAND       shift and go to state 98
    INTL            shift and go to state 85
    BOOLL           shift and go to state 99

    Expression                     shift and go to state 149
    BinaryExpression               shift and go to state 77
    UnaryExpression                shift and go to state 78
    Literal                        shift and go to state 89
    FunctionCall                   shift and go to state 90
    BracketCall                    shift and go to state 91
    InitCall                       shift and go to state 92
    DotExpression                  shift and go to state 93
    DereferenceExpression          shift and go to state 94
    AddressExpression              shift and go to state 95
    IntLiteral                     shift and go to state 96
    BoolLiteral                    shift and go to state 97

state 118

    (16) BinaryExpression -> Expression GT . Expression
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (8) BinaryExpression -> . Expression PLUS Expression
    (9) BinaryExpression -> . Expression MINUS Expression
    (10) BinaryExpression -> . Expression TIMES Expression
    (11) BinaryExpression -> . Expression DIVIDE Expression
    (12) BinaryExpression -> . Expression MOD Expression
    (13) BinaryExpression -> . Expression LEQ Expression
    (14) BinaryExpression -> . Expression GEQ Expression
    (15) BinaryExpression -> . Expression LT Expression
    (16) BinaryExpression -> . Expression GT Expression
    (17) BinaryExpression -> . Expression EQ Expression
    (18) BinaryExpression -> . Expression NE Expression
    (87) UnaryExpression -> . Literal
    (88) UnaryExpression -> . FunctionCall
    (89) UnaryExpression -> . BracketCall
    (90) UnaryExpression -> . InitCall
    (91) UnaryExpression -> . DotExpression
    (92) UnaryExpression -> . LPAREN Expression RPAREN
    (93) UnaryExpression -> . DereferenceExpression
    (94) UnaryExpression -> . AddressExpression
    (49) Literal -> . IntLiteral
    (50) Literal -> . BoolLiteral
    (36) FunctionCall -> . ID LPAREN ArgumentListR RPAREN
    (37) FunctionCall -> . ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (44) InitCall -> . ID LBRACE ArgumentListR RBRACE
    (45) InitCall -> . LT TypeIdentifier GT LBRACE ArgumentListR RBRACE
    (46) InitCall -> . ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE
    (31) DotExpression -> . ID
    (32) DotExpression -> . Expression DOT ID
    (30) DereferenceExpression -> . TIMES Expression
    (1) AddressExpression -> . AMPERSAND Expression
    (48) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL

    LPAREN          shift and go to state 80
    ID              shift and go to state 76
    LT              shift and go to state 88
    TIMES           shift and go to state 87
    AMPERSAND       shift and go to state 98
    INTL            shift and go to state 85
    BOOLL           shift and go to state 99

    Expression                     shift and go to state 150
    BinaryExpression               shift and go to state 77
    UnaryExpression                shift and go to state 78
    Literal                        shift and go to state 89
    FunctionCall                   shift and go to state 90
    BracketCall                    shift and go to state 91
    InitCall                       shift and go to state 92
    DotExpression                  shift and go to state 93
    DereferenceExpression          shift and go to state 94
    AddressExpression              shift and go to state 95
    IntLiteral                     shift and go to state 96
    BoolLiteral                    shift and go to state 97

state 119

    (17) BinaryExpression -> Expression EQ . Expression
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (8) BinaryExpression -> . Expression PLUS Expression
    (9) BinaryExpression -> . Expression MINUS Expression
    (10) BinaryExpression -> . Expression TIMES Expression
    (11) BinaryExpression -> . Expression DIVIDE Expression
    (12) BinaryExpression -> . Expression MOD Expression
    (13) BinaryExpression -> . Expression LEQ Expression
    (14) BinaryExpression -> . Expression GEQ Expression
    (15) BinaryExpression -> . Expression LT Expression
    (16) BinaryExpression -> . Expression GT Expression
    (17) BinaryExpression -> . Expression EQ Expression
    (18) BinaryExpression -> . Expression NE Expression
    (87) UnaryExpression -> . Literal
    (88) UnaryExpression -> . FunctionCall
    (89) UnaryExpression -> . BracketCall
    (90) UnaryExpression -> . InitCall
    (91) UnaryExpression -> . DotExpression
    (92) UnaryExpression -> . LPAREN Expression RPAREN
    (93) UnaryExpression -> . DereferenceExpression
    (94) UnaryExpression -> . AddressExpression
    (49) Literal -> . IntLiteral
    (50) Literal -> . BoolLiteral
    (36) FunctionCall -> . ID LPAREN ArgumentListR RPAREN
    (37) FunctionCall -> . ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (44) InitCall -> . ID LBRACE ArgumentListR RBRACE
    (45) InitCall -> . LT TypeIdentifier GT LBRACE ArgumentListR RBRACE
    (46) InitCall -> . ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE
    (31) DotExpression -> . ID
    (32) DotExpression -> . Expression DOT ID
    (30) DereferenceExpression -> . TIMES Expression
    (1) AddressExpression -> . AMPERSAND Expression
    (48) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL

    LPAREN          shift and go to state 80
    ID              shift and go to state 76
    LT              shift and go to state 88
    TIMES           shift and go to state 87
    AMPERSAND       shift and go to state 98
    INTL            shift and go to state 85
    BOOLL           shift and go to state 99

    Expression                     shift and go to state 151
    BinaryExpression               shift and go to state 77
    UnaryExpression                shift and go to state 78
    Literal                        shift and go to state 89
    FunctionCall                   shift and go to state 90
    BracketCall                    shift and go to state 91
    InitCall                       shift and go to state 92
    DotExpression                  shift and go to state 93
    DereferenceExpression          shift and go to state 94
    AddressExpression              shift and go to state 95
    IntLiteral                     shift and go to state 96
    BoolLiteral                    shift and go to state 97

state 120

    (18) BinaryExpression -> Expression NE . Expression
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (8) BinaryExpression -> . Expression PLUS Expression
    (9) BinaryExpression -> . Expression MINUS Expression
    (10) BinaryExpression -> . Expression TIMES Expression
    (11) BinaryExpression -> . Expression DIVIDE Expression
    (12) BinaryExpression -> . Expression MOD Expression
    (13) BinaryExpression -> . Expression LEQ Expression
    (14) BinaryExpression -> . Expression GEQ Expression
    (15) BinaryExpression -> . Expression LT Expression
    (16) BinaryExpression -> . Expression GT Expression
    (17) BinaryExpression -> . Expression EQ Expression
    (18) BinaryExpression -> . Expression NE Expression
    (87) UnaryExpression -> . Literal
    (88) UnaryExpression -> . FunctionCall
    (89) UnaryExpression -> . BracketCall
    (90) UnaryExpression -> . InitCall
    (91) UnaryExpression -> . DotExpression
    (92) UnaryExpression -> . LPAREN Expression RPAREN
    (93) UnaryExpression -> . DereferenceExpression
    (94) UnaryExpression -> . AddressExpression
    (49) Literal -> . IntLiteral
    (50) Literal -> . BoolLiteral
    (36) FunctionCall -> . ID LPAREN ArgumentListR RPAREN
    (37) FunctionCall -> . ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (44) InitCall -> . ID LBRACE ArgumentListR RBRACE
    (45) InitCall -> . LT TypeIdentifier GT LBRACE ArgumentListR RBRACE
    (46) InitCall -> . ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE
    (31) DotExpression -> . ID
    (32) DotExpression -> . Expression DOT ID
    (30) DereferenceExpression -> . TIMES Expression
    (1) AddressExpression -> . AMPERSAND Expression
    (48) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL

    LPAREN          shift and go to state 80
    ID              shift and go to state 76
    LT              shift and go to state 88
    TIMES           shift and go to state 87
    AMPERSAND       shift and go to state 98
    INTL            shift and go to state 85
    BOOLL           shift and go to state 99

    Expression                     shift and go to state 152
    BinaryExpression               shift and go to state 77
    UnaryExpression                shift and go to state 78
    Literal                        shift and go to state 89
    FunctionCall                   shift and go to state 90
    BracketCall                    shift and go to state 91
    InitCall                       shift and go to state 92
    DotExpression                  shift and go to state 93
    DereferenceExpression          shift and go to state 94
    AddressExpression              shift and go to state 95
    IntLiteral                     shift and go to state 96
    BoolLiteral                    shift and go to state 97

state 121

    (23) BracketCall -> Expression LBRACKET . Expression RBRACKET
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (8) BinaryExpression -> . Expression PLUS Expression
    (9) BinaryExpression -> . Expression MINUS Expression
    (10) BinaryExpression -> . Expression TIMES Expression
    (11) BinaryExpression -> . Expression DIVIDE Expression
    (12) BinaryExpression -> . Expression MOD Expression
    (13) BinaryExpression -> . Expression LEQ Expression
    (14) BinaryExpression -> . Expression GEQ Expression
    (15) BinaryExpression -> . Expression LT Expression
    (16) BinaryExpression -> . Expression GT Expression
    (17) BinaryExpression -> . Expression EQ Expression
    (18) BinaryExpression -> . Expression NE Expression
    (87) UnaryExpression -> . Literal
    (88) UnaryExpression -> . FunctionCall
    (89) UnaryExpression -> . BracketCall
    (90) UnaryExpression -> . InitCall
    (91) UnaryExpression -> . DotExpression
    (92) UnaryExpression -> . LPAREN Expression RPAREN
    (93) UnaryExpression -> . DereferenceExpression
    (94) UnaryExpression -> . AddressExpression
    (49) Literal -> . IntLiteral
    (50) Literal -> . BoolLiteral
    (36) FunctionCall -> . ID LPAREN ArgumentListR RPAREN
    (37) FunctionCall -> . ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (44) InitCall -> . ID LBRACE ArgumentListR RBRACE
    (45) InitCall -> . LT TypeIdentifier GT LBRACE ArgumentListR RBRACE
    (46) InitCall -> . ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE
    (31) DotExpression -> . ID
    (32) DotExpression -> . Expression DOT ID
    (30) DereferenceExpression -> . TIMES Expression
    (1) AddressExpression -> . AMPERSAND Expression
    (48) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL

    LPAREN          shift and go to state 80
    ID              shift and go to state 76
    LT              shift and go to state 88
    TIMES           shift and go to state 87
    AMPERSAND       shift and go to state 98
    INTL            shift and go to state 85
    BOOLL           shift and go to state 99

    Expression                     shift and go to state 153
    BinaryExpression               shift and go to state 77
    UnaryExpression                shift and go to state 78
    Literal                        shift and go to state 89
    FunctionCall                   shift and go to state 90
    BracketCall                    shift and go to state 91
    InitCall                       shift and go to state 92
    DotExpression                  shift and go to state 93
    DereferenceExpression          shift and go to state 94
    AddressExpression              shift and go to state 95
    IntLiteral                     shift and go to state 96
    BoolLiteral                    shift and go to state 97

state 122

    (32) DotExpression -> Expression DOT . ID

    ID              shift and go to state 154


state 123

    (47) InitStatement -> LET ID . ASSIGNMENT Expression SEMICOLON

    ASSIGNMENT      shift and go to state 155


state 124

    (36) FunctionCall -> ID LPAREN . ArgumentListR RPAREN
    (3) ArgumentListR -> . Argument COMMA ArgumentListR
    (4) ArgumentListR -> . Argument
    (5) ArgumentListR -> . empty
    (2) Argument -> . Expression
    (96) empty -> .
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (8) BinaryExpression -> . Expression PLUS Expression
    (9) BinaryExpression -> . Expression MINUS Expression
    (10) BinaryExpression -> . Expression TIMES Expression
    (11) BinaryExpression -> . Expression DIVIDE Expression
    (12) BinaryExpression -> . Expression MOD Expression
    (13) BinaryExpression -> . Expression LEQ Expression
    (14) BinaryExpression -> . Expression GEQ Expression
    (15) BinaryExpression -> . Expression LT Expression
    (16) BinaryExpression -> . Expression GT Expression
    (17) BinaryExpression -> . Expression EQ Expression
    (18) BinaryExpression -> . Expression NE Expression
    (87) UnaryExpression -> . Literal
    (88) UnaryExpression -> . FunctionCall
    (89) UnaryExpression -> . BracketCall
    (90) UnaryExpression -> . InitCall
    (91) UnaryExpression -> . DotExpression
    (92) UnaryExpression -> . LPAREN Expression RPAREN
    (93) UnaryExpression -> . DereferenceExpression
    (94) UnaryExpression -> . AddressExpression
    (49) Literal -> . IntLiteral
    (50) Literal -> . BoolLiteral
    (36) FunctionCall -> . ID LPAREN ArgumentListR RPAREN
    (37) FunctionCall -> . ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (44) InitCall -> . ID LBRACE ArgumentListR RBRACE
    (45) InitCall -> . LT TypeIdentifier GT LBRACE ArgumentListR RBRACE
    (46) InitCall -> . ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE
    (31) DotExpression -> . ID
    (32) DotExpression -> . Expression DOT ID
    (30) DereferenceExpression -> . TIMES Expression
    (1) AddressExpression -> . AMPERSAND Expression
    (48) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL

    RPAREN          reduce using rule 96 (empty -> .)
    LPAREN          shift and go to state 80
    ID              shift and go to state 76
    LT              shift and go to state 88
    TIMES           shift and go to state 87
    AMPERSAND       shift and go to state 98
    INTL            shift and go to state 85
    BOOLL           shift and go to state 99

    ArgumentListR                  shift and go to state 156
    Argument                       shift and go to state 157
    empty                          shift and go to state 158
    Expression                     shift and go to state 159
    BinaryExpression               shift and go to state 77
    UnaryExpression                shift and go to state 78
    Literal                        shift and go to state 89
    FunctionCall                   shift and go to state 90
    BracketCall                    shift and go to state 91
    InitCall                       shift and go to state 92
    DotExpression                  shift and go to state 93
    DereferenceExpression          shift and go to state 94
    AddressExpression              shift and go to state 95
    IntLiteral                     shift and go to state 96
    BoolLiteral                    shift and go to state 97

state 125

    (37) FunctionCall -> ID LT . TypeArgumentListR GT LPAREN ArgumentListR RPAREN
    (46) InitCall -> ID LT . TypeArgumentListR GT LBRACE ArgumentListR RBRACE
    (74) TypeArgumentListR -> . TypeIdentifier COMMA TypeArgumentListR
    (75) TypeArgumentListR -> . TypeIdentifier
    (76) TypeArgumentListR -> . empty
    (77) TypeIdentifier -> . ID
    (78) TypeIdentifier -> . TypeIdentifier DOT ID
    (79) TypeIdentifier -> . TypeIdentifier TIMES
    (80) TypeIdentifier -> . TypeIdentifier LT TypeArgumentListR GT
    (96) empty -> .

    ID              shift and go to state 16
    GT              reduce using rule 96 (empty -> .)

    TypeArgumentListR              shift and go to state 160
    TypeIdentifier                 shift and go to state 50
    empty                          shift and go to state 52

state 126

    (44) InitCall -> ID LBRACE . ArgumentListR RBRACE
    (3) ArgumentListR -> . Argument COMMA ArgumentListR
    (4) ArgumentListR -> . Argument
    (5) ArgumentListR -> . empty
    (2) Argument -> . Expression
    (96) empty -> .
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (8) BinaryExpression -> . Expression PLUS Expression
    (9) BinaryExpression -> . Expression MINUS Expression
    (10) BinaryExpression -> . Expression TIMES Expression
    (11) BinaryExpression -> . Expression DIVIDE Expression
    (12) BinaryExpression -> . Expression MOD Expression
    (13) BinaryExpression -> . Expression LEQ Expression
    (14) BinaryExpression -> . Expression GEQ Expression
    (15) BinaryExpression -> . Expression LT Expression
    (16) BinaryExpression -> . Expression GT Expression
    (17) BinaryExpression -> . Expression EQ Expression
    (18) BinaryExpression -> . Expression NE Expression
    (87) UnaryExpression -> . Literal
    (88) UnaryExpression -> . FunctionCall
    (89) UnaryExpression -> . BracketCall
    (90) UnaryExpression -> . InitCall
    (91) UnaryExpression -> . DotExpression
    (92) UnaryExpression -> . LPAREN Expression RPAREN
    (93) UnaryExpression -> . DereferenceExpression
    (94) UnaryExpression -> . AddressExpression
    (49) Literal -> . IntLiteral
    (50) Literal -> . BoolLiteral
    (36) FunctionCall -> . ID LPAREN ArgumentListR RPAREN
    (37) FunctionCall -> . ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (44) InitCall -> . ID LBRACE ArgumentListR RBRACE
    (45) InitCall -> . LT TypeIdentifier GT LBRACE ArgumentListR RBRACE
    (46) InitCall -> . ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE
    (31) DotExpression -> . ID
    (32) DotExpression -> . Expression DOT ID
    (30) DereferenceExpression -> . TIMES Expression
    (1) AddressExpression -> . AMPERSAND Expression
    (48) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL

    RBRACE          reduce using rule 96 (empty -> .)
    LPAREN          shift and go to state 80
    ID              shift and go to state 76
    LT              shift and go to state 88
    TIMES           shift and go to state 87
    AMPERSAND       shift and go to state 98
    INTL            shift and go to state 85
    BOOLL           shift and go to state 99

    ArgumentListR                  shift and go to state 161
    Argument                       shift and go to state 157
    empty                          shift and go to state 158
    Expression                     shift and go to state 159
    BinaryExpression               shift and go to state 77
    UnaryExpression                shift and go to state 78
    Literal                        shift and go to state 89
    FunctionCall                   shift and go to state 90
    BracketCall                    shift and go to state 91
    InitCall                       shift and go to state 92
    DotExpression                  shift and go to state 93
    DereferenceExpression          shift and go to state 94
    AddressExpression              shift and go to state 95
    IntLiteral                     shift and go to state 96
    BoolLiteral                    shift and go to state 97

state 127

    (42) IfElseStatement -> IF LPAREN . Expression RPAREN Block ELSE Block
    (43) IfElseStatement -> IF LPAREN . Expression RPAREN Block
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (8) BinaryExpression -> . Expression PLUS Expression
    (9) BinaryExpression -> . Expression MINUS Expression
    (10) BinaryExpression -> . Expression TIMES Expression
    (11) BinaryExpression -> . Expression DIVIDE Expression
    (12) BinaryExpression -> . Expression MOD Expression
    (13) BinaryExpression -> . Expression LEQ Expression
    (14) BinaryExpression -> . Expression GEQ Expression
    (15) BinaryExpression -> . Expression LT Expression
    (16) BinaryExpression -> . Expression GT Expression
    (17) BinaryExpression -> . Expression EQ Expression
    (18) BinaryExpression -> . Expression NE Expression
    (87) UnaryExpression -> . Literal
    (88) UnaryExpression -> . FunctionCall
    (89) UnaryExpression -> . BracketCall
    (90) UnaryExpression -> . InitCall
    (91) UnaryExpression -> . DotExpression
    (92) UnaryExpression -> . LPAREN Expression RPAREN
    (93) UnaryExpression -> . DereferenceExpression
    (94) UnaryExpression -> . AddressExpression
    (49) Literal -> . IntLiteral
    (50) Literal -> . BoolLiteral
    (36) FunctionCall -> . ID LPAREN ArgumentListR RPAREN
    (37) FunctionCall -> . ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (44) InitCall -> . ID LBRACE ArgumentListR RBRACE
    (45) InitCall -> . LT TypeIdentifier GT LBRACE ArgumentListR RBRACE
    (46) InitCall -> . ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE
    (31) DotExpression -> . ID
    (32) DotExpression -> . Expression DOT ID
    (30) DereferenceExpression -> . TIMES Expression
    (1) AddressExpression -> . AMPERSAND Expression
    (48) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL

    LPAREN          shift and go to state 80
    ID              shift and go to state 76
    LT              shift and go to state 88
    TIMES           shift and go to state 87
    AMPERSAND       shift and go to state 98
    INTL            shift and go to state 85
    BOOLL           shift and go to state 99

    Expression                     shift and go to state 162
    BinaryExpression               shift and go to state 77
    UnaryExpression                shift and go to state 78
    Literal                        shift and go to state 89
    FunctionCall                   shift and go to state 90
    BracketCall                    shift and go to state 91
    InitCall                       shift and go to state 92
    DotExpression                  shift and go to state 93
    DereferenceExpression          shift and go to state 94
    AddressExpression              shift and go to state 95
    IntLiteral                     shift and go to state 96
    BoolLiteral                    shift and go to state 97

state 128

    (92) UnaryExpression -> LPAREN Expression . RPAREN
    (8) BinaryExpression -> Expression . PLUS Expression
    (9) BinaryExpression -> Expression . MINUS Expression
    (10) BinaryExpression -> Expression . TIMES Expression
    (11) BinaryExpression -> Expression . DIVIDE Expression
    (12) BinaryExpression -> Expression . MOD Expression
    (13) BinaryExpression -> Expression . LEQ Expression
    (14) BinaryExpression -> Expression . GEQ Expression
    (15) BinaryExpression -> Expression . LT Expression
    (16) BinaryExpression -> Expression . GT Expression
    (17) BinaryExpression -> Expression . EQ Expression
    (18) BinaryExpression -> Expression . NE Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET
    (32) DotExpression -> Expression . DOT ID

    RPAREN          shift and go to state 163
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    TIMES           shift and go to state 112
    DIVIDE          shift and go to state 113
    MOD             shift and go to state 114
    LEQ             shift and go to state 115
    GEQ             shift and go to state 116
    LT              shift and go to state 117
    GT              shift and go to state 118
    EQ              shift and go to state 119
    NE              shift and go to state 120
    LBRACKET        shift and go to state 121
    DOT             shift and go to state 122


state 129

    (35) ForStatement -> FOR LPAREN . Statement Expression SEMICOLON Statement RPAREN Block
    (57) Statement -> . AssignmentStatement
    (58) Statement -> . InitStatement
    (59) Statement -> . Expression SEMICOLON
    (60) Statement -> . IfElseStatement
    (61) Statement -> . ForStatement
    (62) Statement -> . WhileStatement
    (63) Statement -> . BreakStatement
    (64) Statement -> . ReturnStatement
    (65) Statement -> . BlockStatement
    (66) Statement -> . BlankStatement
    (6) AssignmentStatement -> . Expression ASSIGNMENT Expression SEMICOLON
    (7) AssignmentStatement -> . Expression ASSIGNMENT Expression
    (47) InitStatement -> . LET ID ASSIGNMENT Expression SEMICOLON
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (42) IfElseStatement -> . IF LPAREN Expression RPAREN Block ELSE Block
    (43) IfElseStatement -> . IF LPAREN Expression RPAREN Block
    (35) ForStatement -> . FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block
    (95) WhileStatement -> . WHILE LPAREN Expression RPAREN Block
    (24) BreakStatement -> . BREAK INTL SEMICOLON
    (25) BreakStatement -> . BREAK SEMICOLON
    (55) ReturnStatement -> . RETURN Expression SEMICOLON
    (56) ReturnStatement -> . RETURN SEMICOLON
    (21) BlockStatement -> . Block
    (19) BlankStatement -> . SEMICOLON
    (8) BinaryExpression -> . Expression PLUS Expression
    (9) BinaryExpression -> . Expression MINUS Expression
    (10) BinaryExpression -> . Expression TIMES Expression
    (11) BinaryExpression -> . Expression DIVIDE Expression
    (12) BinaryExpression -> . Expression MOD Expression
    (13) BinaryExpression -> . Expression LEQ Expression
    (14) BinaryExpression -> . Expression GEQ Expression
    (15) BinaryExpression -> . Expression LT Expression
    (16) BinaryExpression -> . Expression GT Expression
    (17) BinaryExpression -> . Expression EQ Expression
    (18) BinaryExpression -> . Expression NE Expression
    (87) UnaryExpression -> . Literal
    (88) UnaryExpression -> . FunctionCall
    (89) UnaryExpression -> . BracketCall
    (90) UnaryExpression -> . InitCall
    (91) UnaryExpression -> . DotExpression
    (92) UnaryExpression -> . LPAREN Expression RPAREN
    (93) UnaryExpression -> . DereferenceExpression
    (94) UnaryExpression -> . AddressExpression
    (20) Block -> . LBRACE StatementListR RBRACE
    (49) Literal -> . IntLiteral
    (50) Literal -> . BoolLiteral
    (36) FunctionCall -> . ID LPAREN ArgumentListR RPAREN
    (37) FunctionCall -> . ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (44) InitCall -> . ID LBRACE ArgumentListR RBRACE
    (45) InitCall -> . LT TypeIdentifier GT LBRACE ArgumentListR RBRACE
    (46) InitCall -> . ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE
    (31) DotExpression -> . ID
    (32) DotExpression -> . Expression DOT ID
    (30) DereferenceExpression -> . TIMES Expression
    (1) AddressExpression -> . AMPERSAND Expression
    (48) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL

    LET             shift and go to state 75
    IF              shift and go to state 79
    FOR             shift and go to state 82
    WHILE           shift and go to state 83
    BREAK           shift and go to state 84
    RETURN          shift and go to state 86
    SEMICOLON       shift and go to state 67
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 48
    ID              shift and go to state 76
    LT              shift and go to state 88
    TIMES           shift and go to state 87
    AMPERSAND       shift and go to state 98
    INTL            shift and go to state 85
    BOOLL           shift and go to state 99

    Statement                      shift and go to state 164
    Expression                     shift and go to state 66
    Block                          shift and go to state 81
    AssignmentStatement            shift and go to state 64
    InitStatement                  shift and go to state 65
    IfElseStatement                shift and go to state 68
    ForStatement                   shift and go to state 69
    WhileStatement                 shift and go to state 70
    BreakStatement                 shift and go to state 71
    ReturnStatement                shift and go to state 72
    BlockStatement                 shift and go to state 73
    BlankStatement                 shift and go to state 74
    BinaryExpression               shift and go to state 77
    UnaryExpression                shift and go to state 78
    Literal                        shift and go to state 89
    FunctionCall                   shift and go to state 90
    BracketCall                    shift and go to state 91
    InitCall                       shift and go to state 92
    DotExpression                  shift and go to state 93
    DereferenceExpression          shift and go to state 94
    AddressExpression              shift and go to state 95
    IntLiteral                     shift and go to state 96
    BoolLiteral                    shift and go to state 97

state 130

    (95) WhileStatement -> WHILE LPAREN . Expression RPAREN Block
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (8) BinaryExpression -> . Expression PLUS Expression
    (9) BinaryExpression -> . Expression MINUS Expression
    (10) BinaryExpression -> . Expression TIMES Expression
    (11) BinaryExpression -> . Expression DIVIDE Expression
    (12) BinaryExpression -> . Expression MOD Expression
    (13) BinaryExpression -> . Expression LEQ Expression
    (14) BinaryExpression -> . Expression GEQ Expression
    (15) BinaryExpression -> . Expression LT Expression
    (16) BinaryExpression -> . Expression GT Expression
    (17) BinaryExpression -> . Expression EQ Expression
    (18) BinaryExpression -> . Expression NE Expression
    (87) UnaryExpression -> . Literal
    (88) UnaryExpression -> . FunctionCall
    (89) UnaryExpression -> . BracketCall
    (90) UnaryExpression -> . InitCall
    (91) UnaryExpression -> . DotExpression
    (92) UnaryExpression -> . LPAREN Expression RPAREN
    (93) UnaryExpression -> . DereferenceExpression
    (94) UnaryExpression -> . AddressExpression
    (49) Literal -> . IntLiteral
    (50) Literal -> . BoolLiteral
    (36) FunctionCall -> . ID LPAREN ArgumentListR RPAREN
    (37) FunctionCall -> . ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (44) InitCall -> . ID LBRACE ArgumentListR RBRACE
    (45) InitCall -> . LT TypeIdentifier GT LBRACE ArgumentListR RBRACE
    (46) InitCall -> . ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE
    (31) DotExpression -> . ID
    (32) DotExpression -> . Expression DOT ID
    (30) DereferenceExpression -> . TIMES Expression
    (1) AddressExpression -> . AMPERSAND Expression
    (48) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL

    LPAREN          shift and go to state 80
    ID              shift and go to state 76
    LT              shift and go to state 88
    TIMES           shift and go to state 87
    AMPERSAND       shift and go to state 98
    INTL            shift and go to state 85
    BOOLL           shift and go to state 99

    Expression                     shift and go to state 165
    BinaryExpression               shift and go to state 77
    UnaryExpression                shift and go to state 78
    Literal                        shift and go to state 89
    FunctionCall                   shift and go to state 90
    BracketCall                    shift and go to state 91
    InitCall                       shift and go to state 92
    DotExpression                  shift and go to state 93
    DereferenceExpression          shift and go to state 94
    AddressExpression              shift and go to state 95
    IntLiteral                     shift and go to state 96
    BoolLiteral                    shift and go to state 97

state 131

    (24) BreakStatement -> BREAK INTL . SEMICOLON

    SEMICOLON       shift and go to state 166


state 132

    (25) BreakStatement -> BREAK SEMICOLON .

    LET             reduce using rule 25 (BreakStatement -> BREAK SEMICOLON .)
    IF              reduce using rule 25 (BreakStatement -> BREAK SEMICOLON .)
    FOR             reduce using rule 25 (BreakStatement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 25 (BreakStatement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 25 (BreakStatement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 25 (BreakStatement -> BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 25 (BreakStatement -> BREAK SEMICOLON .)
    LPAREN          reduce using rule 25 (BreakStatement -> BREAK SEMICOLON .)
    LBRACE          reduce using rule 25 (BreakStatement -> BREAK SEMICOLON .)
    ID              reduce using rule 25 (BreakStatement -> BREAK SEMICOLON .)
    LT              reduce using rule 25 (BreakStatement -> BREAK SEMICOLON .)
    TIMES           reduce using rule 25 (BreakStatement -> BREAK SEMICOLON .)
    AMPERSAND       reduce using rule 25 (BreakStatement -> BREAK SEMICOLON .)
    INTL            reduce using rule 25 (BreakStatement -> BREAK SEMICOLON .)
    BOOLL           reduce using rule 25 (BreakStatement -> BREAK SEMICOLON .)
    RBRACE          reduce using rule 25 (BreakStatement -> BREAK SEMICOLON .)
    RPAREN          reduce using rule 25 (BreakStatement -> BREAK SEMICOLON .)


state 133

    (55) ReturnStatement -> RETURN Expression . SEMICOLON
    (8) BinaryExpression -> Expression . PLUS Expression
    (9) BinaryExpression -> Expression . MINUS Expression
    (10) BinaryExpression -> Expression . TIMES Expression
    (11) BinaryExpression -> Expression . DIVIDE Expression
    (12) BinaryExpression -> Expression . MOD Expression
    (13) BinaryExpression -> Expression . LEQ Expression
    (14) BinaryExpression -> Expression . GEQ Expression
    (15) BinaryExpression -> Expression . LT Expression
    (16) BinaryExpression -> Expression . GT Expression
    (17) BinaryExpression -> Expression . EQ Expression
    (18) BinaryExpression -> Expression . NE Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET
    (32) DotExpression -> Expression . DOT ID

    SEMICOLON       shift and go to state 167
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    TIMES           shift and go to state 112
    DIVIDE          shift and go to state 113
    MOD             shift and go to state 114
    LEQ             shift and go to state 115
    GEQ             shift and go to state 116
    LT              shift and go to state 117
    GT              shift and go to state 118
    EQ              shift and go to state 119
    NE              shift and go to state 120
    LBRACKET        shift and go to state 121
    DOT             shift and go to state 122


state 134

    (56) ReturnStatement -> RETURN SEMICOLON .

    LET             reduce using rule 56 (ReturnStatement -> RETURN SEMICOLON .)
    IF              reduce using rule 56 (ReturnStatement -> RETURN SEMICOLON .)
    FOR             reduce using rule 56 (ReturnStatement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 56 (ReturnStatement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 56 (ReturnStatement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 56 (ReturnStatement -> RETURN SEMICOLON .)
    SEMICOLON       reduce using rule 56 (ReturnStatement -> RETURN SEMICOLON .)
    LPAREN          reduce using rule 56 (ReturnStatement -> RETURN SEMICOLON .)
    LBRACE          reduce using rule 56 (ReturnStatement -> RETURN SEMICOLON .)
    ID              reduce using rule 56 (ReturnStatement -> RETURN SEMICOLON .)
    LT              reduce using rule 56 (ReturnStatement -> RETURN SEMICOLON .)
    TIMES           reduce using rule 56 (ReturnStatement -> RETURN SEMICOLON .)
    AMPERSAND       reduce using rule 56 (ReturnStatement -> RETURN SEMICOLON .)
    INTL            reduce using rule 56 (ReturnStatement -> RETURN SEMICOLON .)
    BOOLL           reduce using rule 56 (ReturnStatement -> RETURN SEMICOLON .)
    RBRACE          reduce using rule 56 (ReturnStatement -> RETURN SEMICOLON .)
    RPAREN          reduce using rule 56 (ReturnStatement -> RETURN SEMICOLON .)


state 135

    (30) DereferenceExpression -> TIMES Expression .
    (8) BinaryExpression -> Expression . PLUS Expression
    (9) BinaryExpression -> Expression . MINUS Expression
    (10) BinaryExpression -> Expression . TIMES Expression
    (11) BinaryExpression -> Expression . DIVIDE Expression
    (12) BinaryExpression -> Expression . MOD Expression
    (13) BinaryExpression -> Expression . LEQ Expression
    (14) BinaryExpression -> Expression . GEQ Expression
    (15) BinaryExpression -> Expression . LT Expression
    (16) BinaryExpression -> Expression . GT Expression
    (17) BinaryExpression -> Expression . EQ Expression
    (18) BinaryExpression -> Expression . NE Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET
    (32) DotExpression -> Expression . DOT ID

    SEMICOLON       reduce using rule 30 (DereferenceExpression -> TIMES Expression .)
    ASSIGNMENT      reduce using rule 30 (DereferenceExpression -> TIMES Expression .)
    PLUS            reduce using rule 30 (DereferenceExpression -> TIMES Expression .)
    MINUS           reduce using rule 30 (DereferenceExpression -> TIMES Expression .)
    TIMES           reduce using rule 30 (DereferenceExpression -> TIMES Expression .)
    DIVIDE          reduce using rule 30 (DereferenceExpression -> TIMES Expression .)
    MOD             reduce using rule 30 (DereferenceExpression -> TIMES Expression .)
    LBRACKET        reduce using rule 30 (DereferenceExpression -> TIMES Expression .)
    DOT             reduce using rule 30 (DereferenceExpression -> TIMES Expression .)
    RPAREN          reduce using rule 30 (DereferenceExpression -> TIMES Expression .)
    LET             reduce using rule 30 (DereferenceExpression -> TIMES Expression .)
    IF              reduce using rule 30 (DereferenceExpression -> TIMES Expression .)
    FOR             reduce using rule 30 (DereferenceExpression -> TIMES Expression .)
    WHILE           reduce using rule 30 (DereferenceExpression -> TIMES Expression .)
    BREAK           reduce using rule 30 (DereferenceExpression -> TIMES Expression .)
    RETURN          reduce using rule 30 (DereferenceExpression -> TIMES Expression .)
    LPAREN          reduce using rule 30 (DereferenceExpression -> TIMES Expression .)
    LBRACE          reduce using rule 30 (DereferenceExpression -> TIMES Expression .)
    ID              reduce using rule 30 (DereferenceExpression -> TIMES Expression .)
    AMPERSAND       reduce using rule 30 (DereferenceExpression -> TIMES Expression .)
    INTL            reduce using rule 30 (DereferenceExpression -> TIMES Expression .)
    BOOLL           reduce using rule 30 (DereferenceExpression -> TIMES Expression .)
    RBRACE          reduce using rule 30 (DereferenceExpression -> TIMES Expression .)
    RBRACKET        reduce using rule 30 (DereferenceExpression -> TIMES Expression .)
    COMMA           reduce using rule 30 (DereferenceExpression -> TIMES Expression .)
    LEQ             shift and go to state 115
    GEQ             shift and go to state 116
    LT              shift and go to state 117
    GT              shift and go to state 118
    EQ              shift and go to state 119
    NE              shift and go to state 120

  ! LEQ             [ reduce using rule 30 (DereferenceExpression -> TIMES Expression .) ]
  ! GEQ             [ reduce using rule 30 (DereferenceExpression -> TIMES Expression .) ]
  ! LT              [ reduce using rule 30 (DereferenceExpression -> TIMES Expression .) ]
  ! GT              [ reduce using rule 30 (DereferenceExpression -> TIMES Expression .) ]
  ! EQ              [ reduce using rule 30 (DereferenceExpression -> TIMES Expression .) ]
  ! NE              [ reduce using rule 30 (DereferenceExpression -> TIMES Expression .) ]
  ! PLUS            [ shift and go to state 110 ]
  ! MINUS           [ shift and go to state 111 ]
  ! TIMES           [ shift and go to state 112 ]
  ! DIVIDE          [ shift and go to state 113 ]
  ! MOD             [ shift and go to state 114 ]
  ! LBRACKET        [ shift and go to state 121 ]
  ! DOT             [ shift and go to state 122 ]


state 136

    (45) InitCall -> LT TypeIdentifier . GT LBRACE ArgumentListR RBRACE
    (78) TypeIdentifier -> TypeIdentifier . DOT ID
    (79) TypeIdentifier -> TypeIdentifier . TIMES
    (80) TypeIdentifier -> TypeIdentifier . LT TypeArgumentListR GT

    GT              shift and go to state 168
    DOT             shift and go to state 34
    TIMES           shift and go to state 35
    LT              shift and go to state 36


state 137

    (1) AddressExpression -> AMPERSAND Expression .
    (8) BinaryExpression -> Expression . PLUS Expression
    (9) BinaryExpression -> Expression . MINUS Expression
    (10) BinaryExpression -> Expression . TIMES Expression
    (11) BinaryExpression -> Expression . DIVIDE Expression
    (12) BinaryExpression -> Expression . MOD Expression
    (13) BinaryExpression -> Expression . LEQ Expression
    (14) BinaryExpression -> Expression . GEQ Expression
    (15) BinaryExpression -> Expression . LT Expression
    (16) BinaryExpression -> Expression . GT Expression
    (17) BinaryExpression -> Expression . EQ Expression
    (18) BinaryExpression -> Expression . NE Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET
    (32) DotExpression -> Expression . DOT ID

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LEQ resolved as shift
  ! shift/reduce conflict for GEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    SEMICOLON       reduce using rule 1 (AddressExpression -> AMPERSAND Expression .)
    ASSIGNMENT      reduce using rule 1 (AddressExpression -> AMPERSAND Expression .)
    RPAREN          reduce using rule 1 (AddressExpression -> AMPERSAND Expression .)
    LET             reduce using rule 1 (AddressExpression -> AMPERSAND Expression .)
    IF              reduce using rule 1 (AddressExpression -> AMPERSAND Expression .)
    FOR             reduce using rule 1 (AddressExpression -> AMPERSAND Expression .)
    WHILE           reduce using rule 1 (AddressExpression -> AMPERSAND Expression .)
    BREAK           reduce using rule 1 (AddressExpression -> AMPERSAND Expression .)
    RETURN          reduce using rule 1 (AddressExpression -> AMPERSAND Expression .)
    LPAREN          reduce using rule 1 (AddressExpression -> AMPERSAND Expression .)
    LBRACE          reduce using rule 1 (AddressExpression -> AMPERSAND Expression .)
    ID              reduce using rule 1 (AddressExpression -> AMPERSAND Expression .)
    AMPERSAND       reduce using rule 1 (AddressExpression -> AMPERSAND Expression .)
    INTL            reduce using rule 1 (AddressExpression -> AMPERSAND Expression .)
    BOOLL           reduce using rule 1 (AddressExpression -> AMPERSAND Expression .)
    RBRACE          reduce using rule 1 (AddressExpression -> AMPERSAND Expression .)
    RBRACKET        reduce using rule 1 (AddressExpression -> AMPERSAND Expression .)
    COMMA           reduce using rule 1 (AddressExpression -> AMPERSAND Expression .)
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    TIMES           shift and go to state 112
    DIVIDE          shift and go to state 113
    MOD             shift and go to state 114
    LEQ             shift and go to state 115
    GEQ             shift and go to state 116
    LT              shift and go to state 117
    GT              shift and go to state 118
    EQ              shift and go to state 119
    NE              shift and go to state 120
    LBRACKET        shift and go to state 121
    DOT             shift and go to state 122

  ! PLUS            [ reduce using rule 1 (AddressExpression -> AMPERSAND Expression .) ]
  ! MINUS           [ reduce using rule 1 (AddressExpression -> AMPERSAND Expression .) ]
  ! TIMES           [ reduce using rule 1 (AddressExpression -> AMPERSAND Expression .) ]
  ! DIVIDE          [ reduce using rule 1 (AddressExpression -> AMPERSAND Expression .) ]
  ! MOD             [ reduce using rule 1 (AddressExpression -> AMPERSAND Expression .) ]
  ! LEQ             [ reduce using rule 1 (AddressExpression -> AMPERSAND Expression .) ]
  ! GEQ             [ reduce using rule 1 (AddressExpression -> AMPERSAND Expression .) ]
  ! LT              [ reduce using rule 1 (AddressExpression -> AMPERSAND Expression .) ]
  ! GT              [ reduce using rule 1 (AddressExpression -> AMPERSAND Expression .) ]
  ! EQ              [ reduce using rule 1 (AddressExpression -> AMPERSAND Expression .) ]
  ! NE              [ reduce using rule 1 (AddressExpression -> AMPERSAND Expression .) ]
  ! LBRACKET        [ reduce using rule 1 (AddressExpression -> AMPERSAND Expression .) ]
  ! DOT             [ reduce using rule 1 (AddressExpression -> AMPERSAND Expression .) ]


state 138

    (74) TypeArgumentListR -> TypeIdentifier COMMA TypeArgumentListR .

    GT              reduce using rule 74 (TypeArgumentListR -> TypeIdentifier COMMA TypeArgumentListR .)


state 139

    (39) FunctionDefinition -> FN ID LT TypeParameterListR GT LPAREN ParameterListR RPAREN . Block
    (41) FunctionDefinition -> FN ID LT TypeParameterListR GT LPAREN ParameterListR RPAREN . ARROW TypeIdentifier Block
    (20) Block -> . LBRACE StatementListR RBRACE

    ARROW           shift and go to state 170
    LBRACE          shift and go to state 48

    Block                          shift and go to state 169

state 140

    (70) StructDefinition -> STRUCT ID LT TypeParameterListR GT LBRACE StructMemberListR RBRACE .

    FN              reduce using rule 70 (StructDefinition -> STRUCT ID LT TypeParameterListR GT LBRACE StructMemberListR RBRACE .)
    STRUCT          reduce using rule 70 (StructDefinition -> STRUCT ID LT TypeParameterListR GT LBRACE StructMemberListR RBRACE .)
    $end            reduce using rule 70 (StructDefinition -> STRUCT ID LT TypeParameterListR GT LBRACE StructMemberListR RBRACE .)


state 141

    (6) AssignmentStatement -> Expression ASSIGNMENT Expression . SEMICOLON
    (7) AssignmentStatement -> Expression ASSIGNMENT Expression .
    (8) BinaryExpression -> Expression . PLUS Expression
    (9) BinaryExpression -> Expression . MINUS Expression
    (10) BinaryExpression -> Expression . TIMES Expression
    (11) BinaryExpression -> Expression . DIVIDE Expression
    (12) BinaryExpression -> Expression . MOD Expression
    (13) BinaryExpression -> Expression . LEQ Expression
    (14) BinaryExpression -> Expression . GEQ Expression
    (15) BinaryExpression -> Expression . LT Expression
    (16) BinaryExpression -> Expression . GT Expression
    (17) BinaryExpression -> Expression . EQ Expression
    (18) BinaryExpression -> Expression . NE Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET
    (32) DotExpression -> Expression . DOT ID

  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for LT resolved as shift
    SEMICOLON       shift and go to state 171
    LET             reduce using rule 7 (AssignmentStatement -> Expression ASSIGNMENT Expression .)
    IF              reduce using rule 7 (AssignmentStatement -> Expression ASSIGNMENT Expression .)
    FOR             reduce using rule 7 (AssignmentStatement -> Expression ASSIGNMENT Expression .)
    WHILE           reduce using rule 7 (AssignmentStatement -> Expression ASSIGNMENT Expression .)
    BREAK           reduce using rule 7 (AssignmentStatement -> Expression ASSIGNMENT Expression .)
    RETURN          reduce using rule 7 (AssignmentStatement -> Expression ASSIGNMENT Expression .)
    LPAREN          reduce using rule 7 (AssignmentStatement -> Expression ASSIGNMENT Expression .)
    LBRACE          reduce using rule 7 (AssignmentStatement -> Expression ASSIGNMENT Expression .)
    ID              reduce using rule 7 (AssignmentStatement -> Expression ASSIGNMENT Expression .)
    AMPERSAND       reduce using rule 7 (AssignmentStatement -> Expression ASSIGNMENT Expression .)
    INTL            reduce using rule 7 (AssignmentStatement -> Expression ASSIGNMENT Expression .)
    BOOLL           reduce using rule 7 (AssignmentStatement -> Expression ASSIGNMENT Expression .)
    RBRACE          reduce using rule 7 (AssignmentStatement -> Expression ASSIGNMENT Expression .)
    RPAREN          reduce using rule 7 (AssignmentStatement -> Expression ASSIGNMENT Expression .)
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    TIMES           shift and go to state 112
    DIVIDE          shift and go to state 113
    MOD             shift and go to state 114
    LEQ             shift and go to state 115
    GEQ             shift and go to state 116
    LT              shift and go to state 117
    GT              shift and go to state 118
    EQ              shift and go to state 119
    NE              shift and go to state 120
    LBRACKET        shift and go to state 121
    DOT             shift and go to state 122

  ! SEMICOLON       [ reduce using rule 7 (AssignmentStatement -> Expression ASSIGNMENT Expression .) ]
  ! LT              [ reduce using rule 7 (AssignmentStatement -> Expression ASSIGNMENT Expression .) ]
  ! TIMES           [ reduce using rule 7 (AssignmentStatement -> Expression ASSIGNMENT Expression .) ]


state 142

    (8) BinaryExpression -> Expression PLUS Expression .
    (8) BinaryExpression -> Expression . PLUS Expression
    (9) BinaryExpression -> Expression . MINUS Expression
    (10) BinaryExpression -> Expression . TIMES Expression
    (11) BinaryExpression -> Expression . DIVIDE Expression
    (12) BinaryExpression -> Expression . MOD Expression
    (13) BinaryExpression -> Expression . LEQ Expression
    (14) BinaryExpression -> Expression . GEQ Expression
    (15) BinaryExpression -> Expression . LT Expression
    (16) BinaryExpression -> Expression . GT Expression
    (17) BinaryExpression -> Expression . EQ Expression
    (18) BinaryExpression -> Expression . NE Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET
    (32) DotExpression -> Expression . DOT ID

    SEMICOLON       reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .)
    ASSIGNMENT      reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .)
    PLUS            reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .)
    MINUS           reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .)
    LBRACKET        reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .)
    DOT             reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .)
    RPAREN          reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .)
    LET             reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .)
    IF              reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .)
    FOR             reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .)
    WHILE           reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .)
    BREAK           reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .)
    RETURN          reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .)
    LPAREN          reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .)
    LBRACE          reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .)
    ID              reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .)
    AMPERSAND       reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .)
    INTL            reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .)
    BOOLL           reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .)
    RBRACE          reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .)
    RBRACKET        reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .)
    COMMA           reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .)
    TIMES           shift and go to state 112
    DIVIDE          shift and go to state 113
    MOD             shift and go to state 114
    LEQ             shift and go to state 115
    GEQ             shift and go to state 116
    LT              shift and go to state 117
    GT              shift and go to state 118
    EQ              shift and go to state 119
    NE              shift and go to state 120

  ! TIMES           [ reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .) ]
  ! DIVIDE          [ reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .) ]
  ! MOD             [ reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .) ]
  ! LEQ             [ reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .) ]
  ! GEQ             [ reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .) ]
  ! LT              [ reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .) ]
  ! GT              [ reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .) ]
  ! EQ              [ reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .) ]
  ! NE              [ reduce using rule 8 (BinaryExpression -> Expression PLUS Expression .) ]
  ! PLUS            [ shift and go to state 110 ]
  ! MINUS           [ shift and go to state 111 ]
  ! LBRACKET        [ shift and go to state 121 ]
  ! DOT             [ shift and go to state 122 ]


state 143

    (9) BinaryExpression -> Expression MINUS Expression .
    (8) BinaryExpression -> Expression . PLUS Expression
    (9) BinaryExpression -> Expression . MINUS Expression
    (10) BinaryExpression -> Expression . TIMES Expression
    (11) BinaryExpression -> Expression . DIVIDE Expression
    (12) BinaryExpression -> Expression . MOD Expression
    (13) BinaryExpression -> Expression . LEQ Expression
    (14) BinaryExpression -> Expression . GEQ Expression
    (15) BinaryExpression -> Expression . LT Expression
    (16) BinaryExpression -> Expression . GT Expression
    (17) BinaryExpression -> Expression . EQ Expression
    (18) BinaryExpression -> Expression . NE Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET
    (32) DotExpression -> Expression . DOT ID

    SEMICOLON       reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .)
    ASSIGNMENT      reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .)
    PLUS            reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .)
    MINUS           reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .)
    LBRACKET        reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .)
    DOT             reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .)
    RPAREN          reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .)
    LET             reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .)
    IF              reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .)
    FOR             reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .)
    WHILE           reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .)
    BREAK           reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .)
    RETURN          reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .)
    LPAREN          reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .)
    LBRACE          reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .)
    ID              reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .)
    AMPERSAND       reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .)
    INTL            reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .)
    BOOLL           reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .)
    RBRACE          reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .)
    RBRACKET        reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .)
    COMMA           reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .)
    TIMES           shift and go to state 112
    DIVIDE          shift and go to state 113
    MOD             shift and go to state 114
    LEQ             shift and go to state 115
    GEQ             shift and go to state 116
    LT              shift and go to state 117
    GT              shift and go to state 118
    EQ              shift and go to state 119
    NE              shift and go to state 120

  ! TIMES           [ reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .) ]
  ! DIVIDE          [ reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .) ]
  ! MOD             [ reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .) ]
  ! LEQ             [ reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .) ]
  ! GEQ             [ reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .) ]
  ! LT              [ reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .) ]
  ! GT              [ reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .) ]
  ! EQ              [ reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .) ]
  ! NE              [ reduce using rule 9 (BinaryExpression -> Expression MINUS Expression .) ]
  ! PLUS            [ shift and go to state 110 ]
  ! MINUS           [ shift and go to state 111 ]
  ! LBRACKET        [ shift and go to state 121 ]
  ! DOT             [ shift and go to state 122 ]


state 144

    (10) BinaryExpression -> Expression TIMES Expression .
    (8) BinaryExpression -> Expression . PLUS Expression
    (9) BinaryExpression -> Expression . MINUS Expression
    (10) BinaryExpression -> Expression . TIMES Expression
    (11) BinaryExpression -> Expression . DIVIDE Expression
    (12) BinaryExpression -> Expression . MOD Expression
    (13) BinaryExpression -> Expression . LEQ Expression
    (14) BinaryExpression -> Expression . GEQ Expression
    (15) BinaryExpression -> Expression . LT Expression
    (16) BinaryExpression -> Expression . GT Expression
    (17) BinaryExpression -> Expression . EQ Expression
    (18) BinaryExpression -> Expression . NE Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET
    (32) DotExpression -> Expression . DOT ID

    SEMICOLON       reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .)
    ASSIGNMENT      reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .)
    PLUS            reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .)
    MINUS           reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .)
    TIMES           reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .)
    DIVIDE          reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .)
    MOD             reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .)
    LBRACKET        reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .)
    DOT             reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .)
    RPAREN          reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .)
    LET             reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .)
    IF              reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .)
    FOR             reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .)
    WHILE           reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .)
    BREAK           reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .)
    RETURN          reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .)
    LPAREN          reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .)
    LBRACE          reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .)
    ID              reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .)
    AMPERSAND       reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .)
    INTL            reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .)
    BOOLL           reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .)
    RBRACE          reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .)
    RBRACKET        reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .)
    COMMA           reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .)
    LEQ             shift and go to state 115
    GEQ             shift and go to state 116
    LT              shift and go to state 117
    GT              shift and go to state 118
    EQ              shift and go to state 119
    NE              shift and go to state 120

  ! LEQ             [ reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .) ]
  ! GEQ             [ reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .) ]
  ! LT              [ reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .) ]
  ! GT              [ reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .) ]
  ! EQ              [ reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .) ]
  ! NE              [ reduce using rule 10 (BinaryExpression -> Expression TIMES Expression .) ]
  ! PLUS            [ shift and go to state 110 ]
  ! MINUS           [ shift and go to state 111 ]
  ! TIMES           [ shift and go to state 112 ]
  ! DIVIDE          [ shift and go to state 113 ]
  ! MOD             [ shift and go to state 114 ]
  ! LBRACKET        [ shift and go to state 121 ]
  ! DOT             [ shift and go to state 122 ]


state 145

    (11) BinaryExpression -> Expression DIVIDE Expression .
    (8) BinaryExpression -> Expression . PLUS Expression
    (9) BinaryExpression -> Expression . MINUS Expression
    (10) BinaryExpression -> Expression . TIMES Expression
    (11) BinaryExpression -> Expression . DIVIDE Expression
    (12) BinaryExpression -> Expression . MOD Expression
    (13) BinaryExpression -> Expression . LEQ Expression
    (14) BinaryExpression -> Expression . GEQ Expression
    (15) BinaryExpression -> Expression . LT Expression
    (16) BinaryExpression -> Expression . GT Expression
    (17) BinaryExpression -> Expression . EQ Expression
    (18) BinaryExpression -> Expression . NE Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET
    (32) DotExpression -> Expression . DOT ID

    SEMICOLON       reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .)
    ASSIGNMENT      reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .)
    PLUS            reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .)
    MINUS           reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .)
    TIMES           reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .)
    DIVIDE          reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .)
    MOD             reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .)
    LBRACKET        reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .)
    DOT             reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .)
    RPAREN          reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .)
    LET             reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .)
    IF              reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .)
    FOR             reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .)
    WHILE           reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .)
    BREAK           reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .)
    RETURN          reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .)
    LPAREN          reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .)
    LBRACE          reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .)
    ID              reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .)
    AMPERSAND       reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .)
    INTL            reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .)
    BOOLL           reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .)
    RBRACE          reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .)
    RBRACKET        reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .)
    COMMA           reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .)
    LEQ             shift and go to state 115
    GEQ             shift and go to state 116
    LT              shift and go to state 117
    GT              shift and go to state 118
    EQ              shift and go to state 119
    NE              shift and go to state 120

  ! LEQ             [ reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .) ]
  ! GEQ             [ reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .) ]
  ! LT              [ reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .) ]
  ! GT              [ reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .) ]
  ! EQ              [ reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .) ]
  ! NE              [ reduce using rule 11 (BinaryExpression -> Expression DIVIDE Expression .) ]
  ! PLUS            [ shift and go to state 110 ]
  ! MINUS           [ shift and go to state 111 ]
  ! TIMES           [ shift and go to state 112 ]
  ! DIVIDE          [ shift and go to state 113 ]
  ! MOD             [ shift and go to state 114 ]
  ! LBRACKET        [ shift and go to state 121 ]
  ! DOT             [ shift and go to state 122 ]


state 146

    (12) BinaryExpression -> Expression MOD Expression .
    (8) BinaryExpression -> Expression . PLUS Expression
    (9) BinaryExpression -> Expression . MINUS Expression
    (10) BinaryExpression -> Expression . TIMES Expression
    (11) BinaryExpression -> Expression . DIVIDE Expression
    (12) BinaryExpression -> Expression . MOD Expression
    (13) BinaryExpression -> Expression . LEQ Expression
    (14) BinaryExpression -> Expression . GEQ Expression
    (15) BinaryExpression -> Expression . LT Expression
    (16) BinaryExpression -> Expression . GT Expression
    (17) BinaryExpression -> Expression . EQ Expression
    (18) BinaryExpression -> Expression . NE Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET
    (32) DotExpression -> Expression . DOT ID

    SEMICOLON       reduce using rule 12 (BinaryExpression -> Expression MOD Expression .)
    ASSIGNMENT      reduce using rule 12 (BinaryExpression -> Expression MOD Expression .)
    PLUS            reduce using rule 12 (BinaryExpression -> Expression MOD Expression .)
    MINUS           reduce using rule 12 (BinaryExpression -> Expression MOD Expression .)
    TIMES           reduce using rule 12 (BinaryExpression -> Expression MOD Expression .)
    DIVIDE          reduce using rule 12 (BinaryExpression -> Expression MOD Expression .)
    MOD             reduce using rule 12 (BinaryExpression -> Expression MOD Expression .)
    LBRACKET        reduce using rule 12 (BinaryExpression -> Expression MOD Expression .)
    DOT             reduce using rule 12 (BinaryExpression -> Expression MOD Expression .)
    RPAREN          reduce using rule 12 (BinaryExpression -> Expression MOD Expression .)
    LET             reduce using rule 12 (BinaryExpression -> Expression MOD Expression .)
    IF              reduce using rule 12 (BinaryExpression -> Expression MOD Expression .)
    FOR             reduce using rule 12 (BinaryExpression -> Expression MOD Expression .)
    WHILE           reduce using rule 12 (BinaryExpression -> Expression MOD Expression .)
    BREAK           reduce using rule 12 (BinaryExpression -> Expression MOD Expression .)
    RETURN          reduce using rule 12 (BinaryExpression -> Expression MOD Expression .)
    LPAREN          reduce using rule 12 (BinaryExpression -> Expression MOD Expression .)
    LBRACE          reduce using rule 12 (BinaryExpression -> Expression MOD Expression .)
    ID              reduce using rule 12 (BinaryExpression -> Expression MOD Expression .)
    AMPERSAND       reduce using rule 12 (BinaryExpression -> Expression MOD Expression .)
    INTL            reduce using rule 12 (BinaryExpression -> Expression MOD Expression .)
    BOOLL           reduce using rule 12 (BinaryExpression -> Expression MOD Expression .)
    RBRACE          reduce using rule 12 (BinaryExpression -> Expression MOD Expression .)
    RBRACKET        reduce using rule 12 (BinaryExpression -> Expression MOD Expression .)
    COMMA           reduce using rule 12 (BinaryExpression -> Expression MOD Expression .)
    LEQ             shift and go to state 115
    GEQ             shift and go to state 116
    LT              shift and go to state 117
    GT              shift and go to state 118
    EQ              shift and go to state 119
    NE              shift and go to state 120

  ! LEQ             [ reduce using rule 12 (BinaryExpression -> Expression MOD Expression .) ]
  ! GEQ             [ reduce using rule 12 (BinaryExpression -> Expression MOD Expression .) ]
  ! LT              [ reduce using rule 12 (BinaryExpression -> Expression MOD Expression .) ]
  ! GT              [ reduce using rule 12 (BinaryExpression -> Expression MOD Expression .) ]
  ! EQ              [ reduce using rule 12 (BinaryExpression -> Expression MOD Expression .) ]
  ! NE              [ reduce using rule 12 (BinaryExpression -> Expression MOD Expression .) ]
  ! PLUS            [ shift and go to state 110 ]
  ! MINUS           [ shift and go to state 111 ]
  ! TIMES           [ shift and go to state 112 ]
  ! DIVIDE          [ shift and go to state 113 ]
  ! MOD             [ shift and go to state 114 ]
  ! LBRACKET        [ shift and go to state 121 ]
  ! DOT             [ shift and go to state 122 ]


state 147

    (13) BinaryExpression -> Expression LEQ Expression .
    (8) BinaryExpression -> Expression . PLUS Expression
    (9) BinaryExpression -> Expression . MINUS Expression
    (10) BinaryExpression -> Expression . TIMES Expression
    (11) BinaryExpression -> Expression . DIVIDE Expression
    (12) BinaryExpression -> Expression . MOD Expression
    (13) BinaryExpression -> Expression . LEQ Expression
    (14) BinaryExpression -> Expression . GEQ Expression
    (15) BinaryExpression -> Expression . LT Expression
    (16) BinaryExpression -> Expression . GT Expression
    (17) BinaryExpression -> Expression . EQ Expression
    (18) BinaryExpression -> Expression . NE Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET
    (32) DotExpression -> Expression . DOT ID

    SEMICOLON       reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    ASSIGNMENT      reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    PLUS            reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    MINUS           reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    TIMES           reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    DIVIDE          reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    MOD             reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    LEQ             reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    GEQ             reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    LT              reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    GT              reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    EQ              reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    NE              reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    LBRACKET        reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    DOT             reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    RPAREN          reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    LET             reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    IF              reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    FOR             reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    WHILE           reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    BREAK           reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    RETURN          reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    LPAREN          reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    LBRACE          reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    ID              reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    AMPERSAND       reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    INTL            reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    BOOLL           reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    RBRACE          reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    RBRACKET        reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)
    COMMA           reduce using rule 13 (BinaryExpression -> Expression LEQ Expression .)

  ! PLUS            [ shift and go to state 110 ]
  ! MINUS           [ shift and go to state 111 ]
  ! TIMES           [ shift and go to state 112 ]
  ! DIVIDE          [ shift and go to state 113 ]
  ! MOD             [ shift and go to state 114 ]
  ! LEQ             [ shift and go to state 115 ]
  ! GEQ             [ shift and go to state 116 ]
  ! LT              [ shift and go to state 117 ]
  ! GT              [ shift and go to state 118 ]
  ! EQ              [ shift and go to state 119 ]
  ! NE              [ shift and go to state 120 ]
  ! LBRACKET        [ shift and go to state 121 ]
  ! DOT             [ shift and go to state 122 ]


state 148

    (14) BinaryExpression -> Expression GEQ Expression .
    (8) BinaryExpression -> Expression . PLUS Expression
    (9) BinaryExpression -> Expression . MINUS Expression
    (10) BinaryExpression -> Expression . TIMES Expression
    (11) BinaryExpression -> Expression . DIVIDE Expression
    (12) BinaryExpression -> Expression . MOD Expression
    (13) BinaryExpression -> Expression . LEQ Expression
    (14) BinaryExpression -> Expression . GEQ Expression
    (15) BinaryExpression -> Expression . LT Expression
    (16) BinaryExpression -> Expression . GT Expression
    (17) BinaryExpression -> Expression . EQ Expression
    (18) BinaryExpression -> Expression . NE Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET
    (32) DotExpression -> Expression . DOT ID

    SEMICOLON       reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    ASSIGNMENT      reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    PLUS            reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    MINUS           reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    TIMES           reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    DIVIDE          reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    MOD             reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    LEQ             reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    GEQ             reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    LT              reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    GT              reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    EQ              reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    NE              reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    LBRACKET        reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    DOT             reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    RPAREN          reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    LET             reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    IF              reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    FOR             reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    WHILE           reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    BREAK           reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    RETURN          reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    LPAREN          reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    LBRACE          reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    ID              reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    AMPERSAND       reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    INTL            reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    BOOLL           reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    RBRACE          reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    RBRACKET        reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)
    COMMA           reduce using rule 14 (BinaryExpression -> Expression GEQ Expression .)

  ! PLUS            [ shift and go to state 110 ]
  ! MINUS           [ shift and go to state 111 ]
  ! TIMES           [ shift and go to state 112 ]
  ! DIVIDE          [ shift and go to state 113 ]
  ! MOD             [ shift and go to state 114 ]
  ! LEQ             [ shift and go to state 115 ]
  ! GEQ             [ shift and go to state 116 ]
  ! LT              [ shift and go to state 117 ]
  ! GT              [ shift and go to state 118 ]
  ! EQ              [ shift and go to state 119 ]
  ! NE              [ shift and go to state 120 ]
  ! LBRACKET        [ shift and go to state 121 ]
  ! DOT             [ shift and go to state 122 ]


state 149

    (15) BinaryExpression -> Expression LT Expression .
    (8) BinaryExpression -> Expression . PLUS Expression
    (9) BinaryExpression -> Expression . MINUS Expression
    (10) BinaryExpression -> Expression . TIMES Expression
    (11) BinaryExpression -> Expression . DIVIDE Expression
    (12) BinaryExpression -> Expression . MOD Expression
    (13) BinaryExpression -> Expression . LEQ Expression
    (14) BinaryExpression -> Expression . GEQ Expression
    (15) BinaryExpression -> Expression . LT Expression
    (16) BinaryExpression -> Expression . GT Expression
    (17) BinaryExpression -> Expression . EQ Expression
    (18) BinaryExpression -> Expression . NE Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET
    (32) DotExpression -> Expression . DOT ID

    SEMICOLON       reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    ASSIGNMENT      reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    PLUS            reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    MINUS           reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    TIMES           reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    DIVIDE          reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    MOD             reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    LEQ             reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    GEQ             reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    LT              reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    GT              reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    EQ              reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    NE              reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    LBRACKET        reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    DOT             reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    RPAREN          reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    LET             reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    IF              reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    FOR             reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    WHILE           reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    BREAK           reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    RETURN          reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    LPAREN          reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    LBRACE          reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    ID              reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    AMPERSAND       reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    INTL            reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    BOOLL           reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    RBRACE          reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    RBRACKET        reduce using rule 15 (BinaryExpression -> Expression LT Expression .)
    COMMA           reduce using rule 15 (BinaryExpression -> Expression LT Expression .)

  ! PLUS            [ shift and go to state 110 ]
  ! MINUS           [ shift and go to state 111 ]
  ! TIMES           [ shift and go to state 112 ]
  ! DIVIDE          [ shift and go to state 113 ]
  ! MOD             [ shift and go to state 114 ]
  ! LEQ             [ shift and go to state 115 ]
  ! GEQ             [ shift and go to state 116 ]
  ! LT              [ shift and go to state 117 ]
  ! GT              [ shift and go to state 118 ]
  ! EQ              [ shift and go to state 119 ]
  ! NE              [ shift and go to state 120 ]
  ! LBRACKET        [ shift and go to state 121 ]
  ! DOT             [ shift and go to state 122 ]


state 150

    (16) BinaryExpression -> Expression GT Expression .
    (8) BinaryExpression -> Expression . PLUS Expression
    (9) BinaryExpression -> Expression . MINUS Expression
    (10) BinaryExpression -> Expression . TIMES Expression
    (11) BinaryExpression -> Expression . DIVIDE Expression
    (12) BinaryExpression -> Expression . MOD Expression
    (13) BinaryExpression -> Expression . LEQ Expression
    (14) BinaryExpression -> Expression . GEQ Expression
    (15) BinaryExpression -> Expression . LT Expression
    (16) BinaryExpression -> Expression . GT Expression
    (17) BinaryExpression -> Expression . EQ Expression
    (18) BinaryExpression -> Expression . NE Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET
    (32) DotExpression -> Expression . DOT ID

    SEMICOLON       reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    ASSIGNMENT      reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    PLUS            reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    MINUS           reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    TIMES           reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    DIVIDE          reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    MOD             reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    LEQ             reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    GEQ             reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    LT              reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    GT              reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    EQ              reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    NE              reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    LBRACKET        reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    DOT             reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    RPAREN          reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    LET             reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    IF              reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    FOR             reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    WHILE           reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    BREAK           reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    RETURN          reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    LPAREN          reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    LBRACE          reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    ID              reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    AMPERSAND       reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    INTL            reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    BOOLL           reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    RBRACE          reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    RBRACKET        reduce using rule 16 (BinaryExpression -> Expression GT Expression .)
    COMMA           reduce using rule 16 (BinaryExpression -> Expression GT Expression .)

  ! PLUS            [ shift and go to state 110 ]
  ! MINUS           [ shift and go to state 111 ]
  ! TIMES           [ shift and go to state 112 ]
  ! DIVIDE          [ shift and go to state 113 ]
  ! MOD             [ shift and go to state 114 ]
  ! LEQ             [ shift and go to state 115 ]
  ! GEQ             [ shift and go to state 116 ]
  ! LT              [ shift and go to state 117 ]
  ! GT              [ shift and go to state 118 ]
  ! EQ              [ shift and go to state 119 ]
  ! NE              [ shift and go to state 120 ]
  ! LBRACKET        [ shift and go to state 121 ]
  ! DOT             [ shift and go to state 122 ]


state 151

    (17) BinaryExpression -> Expression EQ Expression .
    (8) BinaryExpression -> Expression . PLUS Expression
    (9) BinaryExpression -> Expression . MINUS Expression
    (10) BinaryExpression -> Expression . TIMES Expression
    (11) BinaryExpression -> Expression . DIVIDE Expression
    (12) BinaryExpression -> Expression . MOD Expression
    (13) BinaryExpression -> Expression . LEQ Expression
    (14) BinaryExpression -> Expression . GEQ Expression
    (15) BinaryExpression -> Expression . LT Expression
    (16) BinaryExpression -> Expression . GT Expression
    (17) BinaryExpression -> Expression . EQ Expression
    (18) BinaryExpression -> Expression . NE Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET
    (32) DotExpression -> Expression . DOT ID

    SEMICOLON       reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    ASSIGNMENT      reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    PLUS            reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    MINUS           reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    TIMES           reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    DIVIDE          reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    MOD             reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    LEQ             reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    GEQ             reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    LT              reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    GT              reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    EQ              reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    NE              reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    LBRACKET        reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    DOT             reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    RPAREN          reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    LET             reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    IF              reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    FOR             reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    WHILE           reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    BREAK           reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    RETURN          reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    LPAREN          reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    LBRACE          reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    ID              reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    AMPERSAND       reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    INTL            reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    BOOLL           reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    RBRACE          reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    RBRACKET        reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)
    COMMA           reduce using rule 17 (BinaryExpression -> Expression EQ Expression .)

  ! PLUS            [ shift and go to state 110 ]
  ! MINUS           [ shift and go to state 111 ]
  ! TIMES           [ shift and go to state 112 ]
  ! DIVIDE          [ shift and go to state 113 ]
  ! MOD             [ shift and go to state 114 ]
  ! LEQ             [ shift and go to state 115 ]
  ! GEQ             [ shift and go to state 116 ]
  ! LT              [ shift and go to state 117 ]
  ! GT              [ shift and go to state 118 ]
  ! EQ              [ shift and go to state 119 ]
  ! NE              [ shift and go to state 120 ]
  ! LBRACKET        [ shift and go to state 121 ]
  ! DOT             [ shift and go to state 122 ]


state 152

    (18) BinaryExpression -> Expression NE Expression .
    (8) BinaryExpression -> Expression . PLUS Expression
    (9) BinaryExpression -> Expression . MINUS Expression
    (10) BinaryExpression -> Expression . TIMES Expression
    (11) BinaryExpression -> Expression . DIVIDE Expression
    (12) BinaryExpression -> Expression . MOD Expression
    (13) BinaryExpression -> Expression . LEQ Expression
    (14) BinaryExpression -> Expression . GEQ Expression
    (15) BinaryExpression -> Expression . LT Expression
    (16) BinaryExpression -> Expression . GT Expression
    (17) BinaryExpression -> Expression . EQ Expression
    (18) BinaryExpression -> Expression . NE Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET
    (32) DotExpression -> Expression . DOT ID

    SEMICOLON       reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    ASSIGNMENT      reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    PLUS            reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    MINUS           reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    TIMES           reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    DIVIDE          reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    MOD             reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    LEQ             reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    GEQ             reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    LT              reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    GT              reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    EQ              reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    NE              reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    LBRACKET        reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    DOT             reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    RPAREN          reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    LET             reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    IF              reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    FOR             reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    WHILE           reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    BREAK           reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    RETURN          reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    LPAREN          reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    LBRACE          reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    ID              reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    AMPERSAND       reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    INTL            reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    BOOLL           reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    RBRACE          reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    RBRACKET        reduce using rule 18 (BinaryExpression -> Expression NE Expression .)
    COMMA           reduce using rule 18 (BinaryExpression -> Expression NE Expression .)

  ! PLUS            [ shift and go to state 110 ]
  ! MINUS           [ shift and go to state 111 ]
  ! TIMES           [ shift and go to state 112 ]
  ! DIVIDE          [ shift and go to state 113 ]
  ! MOD             [ shift and go to state 114 ]
  ! LEQ             [ shift and go to state 115 ]
  ! GEQ             [ shift and go to state 116 ]
  ! LT              [ shift and go to state 117 ]
  ! GT              [ shift and go to state 118 ]
  ! EQ              [ shift and go to state 119 ]
  ! NE              [ shift and go to state 120 ]
  ! LBRACKET        [ shift and go to state 121 ]
  ! DOT             [ shift and go to state 122 ]


state 153

    (23) BracketCall -> Expression LBRACKET Expression . RBRACKET
    (8) BinaryExpression -> Expression . PLUS Expression
    (9) BinaryExpression -> Expression . MINUS Expression
    (10) BinaryExpression -> Expression . TIMES Expression
    (11) BinaryExpression -> Expression . DIVIDE Expression
    (12) BinaryExpression -> Expression . MOD Expression
    (13) BinaryExpression -> Expression . LEQ Expression
    (14) BinaryExpression -> Expression . GEQ Expression
    (15) BinaryExpression -> Expression . LT Expression
    (16) BinaryExpression -> Expression . GT Expression
    (17) BinaryExpression -> Expression . EQ Expression
    (18) BinaryExpression -> Expression . NE Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET
    (32) DotExpression -> Expression . DOT ID

    RBRACKET        shift and go to state 172
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    TIMES           shift and go to state 112
    DIVIDE          shift and go to state 113
    MOD             shift and go to state 114
    LEQ             shift and go to state 115
    GEQ             shift and go to state 116
    LT              shift and go to state 117
    GT              shift and go to state 118
    EQ              shift and go to state 119
    NE              shift and go to state 120
    LBRACKET        shift and go to state 121
    DOT             shift and go to state 122


state 154

    (32) DotExpression -> Expression DOT ID .

    SEMICOLON       reduce using rule 32 (DotExpression -> Expression DOT ID .)
    ASSIGNMENT      reduce using rule 32 (DotExpression -> Expression DOT ID .)
    PLUS            reduce using rule 32 (DotExpression -> Expression DOT ID .)
    MINUS           reduce using rule 32 (DotExpression -> Expression DOT ID .)
    TIMES           reduce using rule 32 (DotExpression -> Expression DOT ID .)
    DIVIDE          reduce using rule 32 (DotExpression -> Expression DOT ID .)
    MOD             reduce using rule 32 (DotExpression -> Expression DOT ID .)
    LEQ             reduce using rule 32 (DotExpression -> Expression DOT ID .)
    GEQ             reduce using rule 32 (DotExpression -> Expression DOT ID .)
    LT              reduce using rule 32 (DotExpression -> Expression DOT ID .)
    GT              reduce using rule 32 (DotExpression -> Expression DOT ID .)
    EQ              reduce using rule 32 (DotExpression -> Expression DOT ID .)
    NE              reduce using rule 32 (DotExpression -> Expression DOT ID .)
    LBRACKET        reduce using rule 32 (DotExpression -> Expression DOT ID .)
    DOT             reduce using rule 32 (DotExpression -> Expression DOT ID .)
    RPAREN          reduce using rule 32 (DotExpression -> Expression DOT ID .)
    LET             reduce using rule 32 (DotExpression -> Expression DOT ID .)
    IF              reduce using rule 32 (DotExpression -> Expression DOT ID .)
    FOR             reduce using rule 32 (DotExpression -> Expression DOT ID .)
    WHILE           reduce using rule 32 (DotExpression -> Expression DOT ID .)
    BREAK           reduce using rule 32 (DotExpression -> Expression DOT ID .)
    RETURN          reduce using rule 32 (DotExpression -> Expression DOT ID .)
    LPAREN          reduce using rule 32 (DotExpression -> Expression DOT ID .)
    LBRACE          reduce using rule 32 (DotExpression -> Expression DOT ID .)
    ID              reduce using rule 32 (DotExpression -> Expression DOT ID .)
    AMPERSAND       reduce using rule 32 (DotExpression -> Expression DOT ID .)
    INTL            reduce using rule 32 (DotExpression -> Expression DOT ID .)
    BOOLL           reduce using rule 32 (DotExpression -> Expression DOT ID .)
    RBRACE          reduce using rule 32 (DotExpression -> Expression DOT ID .)
    RBRACKET        reduce using rule 32 (DotExpression -> Expression DOT ID .)
    COMMA           reduce using rule 32 (DotExpression -> Expression DOT ID .)


state 155

    (47) InitStatement -> LET ID ASSIGNMENT . Expression SEMICOLON
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (8) BinaryExpression -> . Expression PLUS Expression
    (9) BinaryExpression -> . Expression MINUS Expression
    (10) BinaryExpression -> . Expression TIMES Expression
    (11) BinaryExpression -> . Expression DIVIDE Expression
    (12) BinaryExpression -> . Expression MOD Expression
    (13) BinaryExpression -> . Expression LEQ Expression
    (14) BinaryExpression -> . Expression GEQ Expression
    (15) BinaryExpression -> . Expression LT Expression
    (16) BinaryExpression -> . Expression GT Expression
    (17) BinaryExpression -> . Expression EQ Expression
    (18) BinaryExpression -> . Expression NE Expression
    (87) UnaryExpression -> . Literal
    (88) UnaryExpression -> . FunctionCall
    (89) UnaryExpression -> . BracketCall
    (90) UnaryExpression -> . InitCall
    (91) UnaryExpression -> . DotExpression
    (92) UnaryExpression -> . LPAREN Expression RPAREN
    (93) UnaryExpression -> . DereferenceExpression
    (94) UnaryExpression -> . AddressExpression
    (49) Literal -> . IntLiteral
    (50) Literal -> . BoolLiteral
    (36) FunctionCall -> . ID LPAREN ArgumentListR RPAREN
    (37) FunctionCall -> . ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (44) InitCall -> . ID LBRACE ArgumentListR RBRACE
    (45) InitCall -> . LT TypeIdentifier GT LBRACE ArgumentListR RBRACE
    (46) InitCall -> . ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE
    (31) DotExpression -> . ID
    (32) DotExpression -> . Expression DOT ID
    (30) DereferenceExpression -> . TIMES Expression
    (1) AddressExpression -> . AMPERSAND Expression
    (48) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL

    LPAREN          shift and go to state 80
    ID              shift and go to state 76
    LT              shift and go to state 88
    TIMES           shift and go to state 87
    AMPERSAND       shift and go to state 98
    INTL            shift and go to state 85
    BOOLL           shift and go to state 99

    Expression                     shift and go to state 173
    BinaryExpression               shift and go to state 77
    UnaryExpression                shift and go to state 78
    Literal                        shift and go to state 89
    FunctionCall                   shift and go to state 90
    BracketCall                    shift and go to state 91
    InitCall                       shift and go to state 92
    DotExpression                  shift and go to state 93
    DereferenceExpression          shift and go to state 94
    AddressExpression              shift and go to state 95
    IntLiteral                     shift and go to state 96
    BoolLiteral                    shift and go to state 97

state 156

    (36) FunctionCall -> ID LPAREN ArgumentListR . RPAREN

    RPAREN          shift and go to state 174


state 157

    (3) ArgumentListR -> Argument . COMMA ArgumentListR
    (4) ArgumentListR -> Argument .

    COMMA           shift and go to state 175
    RPAREN          reduce using rule 4 (ArgumentListR -> Argument .)
    RBRACE          reduce using rule 4 (ArgumentListR -> Argument .)


state 158

    (5) ArgumentListR -> empty .

    RPAREN          reduce using rule 5 (ArgumentListR -> empty .)
    RBRACE          reduce using rule 5 (ArgumentListR -> empty .)


state 159

    (2) Argument -> Expression .
    (8) BinaryExpression -> Expression . PLUS Expression
    (9) BinaryExpression -> Expression . MINUS Expression
    (10) BinaryExpression -> Expression . TIMES Expression
    (11) BinaryExpression -> Expression . DIVIDE Expression
    (12) BinaryExpression -> Expression . MOD Expression
    (13) BinaryExpression -> Expression . LEQ Expression
    (14) BinaryExpression -> Expression . GEQ Expression
    (15) BinaryExpression -> Expression . LT Expression
    (16) BinaryExpression -> Expression . GT Expression
    (17) BinaryExpression -> Expression . EQ Expression
    (18) BinaryExpression -> Expression . NE Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET
    (32) DotExpression -> Expression . DOT ID

    COMMA           reduce using rule 2 (Argument -> Expression .)
    RPAREN          reduce using rule 2 (Argument -> Expression .)
    RBRACE          reduce using rule 2 (Argument -> Expression .)
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    TIMES           shift and go to state 112
    DIVIDE          shift and go to state 113
    MOD             shift and go to state 114
    LEQ             shift and go to state 115
    GEQ             shift and go to state 116
    LT              shift and go to state 117
    GT              shift and go to state 118
    EQ              shift and go to state 119
    NE              shift and go to state 120
    LBRACKET        shift and go to state 121
    DOT             shift and go to state 122


state 160

    (37) FunctionCall -> ID LT TypeArgumentListR . GT LPAREN ArgumentListR RPAREN
    (46) InitCall -> ID LT TypeArgumentListR . GT LBRACE ArgumentListR RBRACE

    GT              shift and go to state 176


state 161

    (44) InitCall -> ID LBRACE ArgumentListR . RBRACE

    RBRACE          shift and go to state 177


state 162

    (42) IfElseStatement -> IF LPAREN Expression . RPAREN Block ELSE Block
    (43) IfElseStatement -> IF LPAREN Expression . RPAREN Block
    (8) BinaryExpression -> Expression . PLUS Expression
    (9) BinaryExpression -> Expression . MINUS Expression
    (10) BinaryExpression -> Expression . TIMES Expression
    (11) BinaryExpression -> Expression . DIVIDE Expression
    (12) BinaryExpression -> Expression . MOD Expression
    (13) BinaryExpression -> Expression . LEQ Expression
    (14) BinaryExpression -> Expression . GEQ Expression
    (15) BinaryExpression -> Expression . LT Expression
    (16) BinaryExpression -> Expression . GT Expression
    (17) BinaryExpression -> Expression . EQ Expression
    (18) BinaryExpression -> Expression . NE Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET
    (32) DotExpression -> Expression . DOT ID

    RPAREN          shift and go to state 178
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    TIMES           shift and go to state 112
    DIVIDE          shift and go to state 113
    MOD             shift and go to state 114
    LEQ             shift and go to state 115
    GEQ             shift and go to state 116
    LT              shift and go to state 117
    GT              shift and go to state 118
    EQ              shift and go to state 119
    NE              shift and go to state 120
    LBRACKET        shift and go to state 121
    DOT             shift and go to state 122


state 163

    (92) UnaryExpression -> LPAREN Expression RPAREN .

    SEMICOLON       reduce using rule 92 (UnaryExpression -> LPAREN Expression RPAREN .)
    ASSIGNMENT      reduce using rule 92 (UnaryExpression -> LPAREN Expression RPAREN .)
    PLUS            reduce using rule 92 (UnaryExpression -> LPAREN Expression RPAREN .)
    MINUS           reduce using rule 92 (UnaryExpression -> LPAREN Expression RPAREN .)
    TIMES           reduce using rule 92 (UnaryExpression -> LPAREN Expression RPAREN .)
    DIVIDE          reduce using rule 92 (UnaryExpression -> LPAREN Expression RPAREN .)
    MOD             reduce using rule 92 (UnaryExpression -> LPAREN Expression RPAREN .)
    LEQ             reduce using rule 92 (UnaryExpression -> LPAREN Expression RPAREN .)
    GEQ             reduce using rule 92 (UnaryExpression -> LPAREN Expression RPAREN .)
    LT              reduce using rule 92 (UnaryExpression -> LPAREN Expression RPAREN .)
    GT              reduce using rule 92 (UnaryExpression -> LPAREN Expression RPAREN .)
    EQ              reduce using rule 92 (UnaryExpression -> LPAREN Expression RPAREN .)
    NE              reduce using rule 92 (UnaryExpression -> LPAREN Expression RPAREN .)
    LBRACKET        reduce using rule 92 (UnaryExpression -> LPAREN Expression RPAREN .)
    DOT             reduce using rule 92 (UnaryExpression -> LPAREN Expression RPAREN .)
    RPAREN          reduce using rule 92 (UnaryExpression -> LPAREN Expression RPAREN .)
    LET             reduce using rule 92 (UnaryExpression -> LPAREN Expression RPAREN .)
    IF              reduce using rule 92 (UnaryExpression -> LPAREN Expression RPAREN .)
    FOR             reduce using rule 92 (UnaryExpression -> LPAREN Expression RPAREN .)
    WHILE           reduce using rule 92 (UnaryExpression -> LPAREN Expression RPAREN .)
    BREAK           reduce using rule 92 (UnaryExpression -> LPAREN Expression RPAREN .)
    RETURN          reduce using rule 92 (UnaryExpression -> LPAREN Expression RPAREN .)
    LPAREN          reduce using rule 92 (UnaryExpression -> LPAREN Expression RPAREN .)
    LBRACE          reduce using rule 92 (UnaryExpression -> LPAREN Expression RPAREN .)
    ID              reduce using rule 92 (UnaryExpression -> LPAREN Expression RPAREN .)
    AMPERSAND       reduce using rule 92 (UnaryExpression -> LPAREN Expression RPAREN .)
    INTL            reduce using rule 92 (UnaryExpression -> LPAREN Expression RPAREN .)
    BOOLL           reduce using rule 92 (UnaryExpression -> LPAREN Expression RPAREN .)
    RBRACE          reduce using rule 92 (UnaryExpression -> LPAREN Expression RPAREN .)
    RBRACKET        reduce using rule 92 (UnaryExpression -> LPAREN Expression RPAREN .)
    COMMA           reduce using rule 92 (UnaryExpression -> LPAREN Expression RPAREN .)


state 164

    (35) ForStatement -> FOR LPAREN Statement . Expression SEMICOLON Statement RPAREN Block
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (8) BinaryExpression -> . Expression PLUS Expression
    (9) BinaryExpression -> . Expression MINUS Expression
    (10) BinaryExpression -> . Expression TIMES Expression
    (11) BinaryExpression -> . Expression DIVIDE Expression
    (12) BinaryExpression -> . Expression MOD Expression
    (13) BinaryExpression -> . Expression LEQ Expression
    (14) BinaryExpression -> . Expression GEQ Expression
    (15) BinaryExpression -> . Expression LT Expression
    (16) BinaryExpression -> . Expression GT Expression
    (17) BinaryExpression -> . Expression EQ Expression
    (18) BinaryExpression -> . Expression NE Expression
    (87) UnaryExpression -> . Literal
    (88) UnaryExpression -> . FunctionCall
    (89) UnaryExpression -> . BracketCall
    (90) UnaryExpression -> . InitCall
    (91) UnaryExpression -> . DotExpression
    (92) UnaryExpression -> . LPAREN Expression RPAREN
    (93) UnaryExpression -> . DereferenceExpression
    (94) UnaryExpression -> . AddressExpression
    (49) Literal -> . IntLiteral
    (50) Literal -> . BoolLiteral
    (36) FunctionCall -> . ID LPAREN ArgumentListR RPAREN
    (37) FunctionCall -> . ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (44) InitCall -> . ID LBRACE ArgumentListR RBRACE
    (45) InitCall -> . LT TypeIdentifier GT LBRACE ArgumentListR RBRACE
    (46) InitCall -> . ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE
    (31) DotExpression -> . ID
    (32) DotExpression -> . Expression DOT ID
    (30) DereferenceExpression -> . TIMES Expression
    (1) AddressExpression -> . AMPERSAND Expression
    (48) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL

    LPAREN          shift and go to state 80
    ID              shift and go to state 76
    LT              shift and go to state 88
    TIMES           shift and go to state 87
    AMPERSAND       shift and go to state 98
    INTL            shift and go to state 85
    BOOLL           shift and go to state 99

    Expression                     shift and go to state 179
    BinaryExpression               shift and go to state 77
    UnaryExpression                shift and go to state 78
    Literal                        shift and go to state 89
    FunctionCall                   shift and go to state 90
    BracketCall                    shift and go to state 91
    InitCall                       shift and go to state 92
    DotExpression                  shift and go to state 93
    DereferenceExpression          shift and go to state 94
    AddressExpression              shift and go to state 95
    IntLiteral                     shift and go to state 96
    BoolLiteral                    shift and go to state 97

state 165

    (95) WhileStatement -> WHILE LPAREN Expression . RPAREN Block
    (8) BinaryExpression -> Expression . PLUS Expression
    (9) BinaryExpression -> Expression . MINUS Expression
    (10) BinaryExpression -> Expression . TIMES Expression
    (11) BinaryExpression -> Expression . DIVIDE Expression
    (12) BinaryExpression -> Expression . MOD Expression
    (13) BinaryExpression -> Expression . LEQ Expression
    (14) BinaryExpression -> Expression . GEQ Expression
    (15) BinaryExpression -> Expression . LT Expression
    (16) BinaryExpression -> Expression . GT Expression
    (17) BinaryExpression -> Expression . EQ Expression
    (18) BinaryExpression -> Expression . NE Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET
    (32) DotExpression -> Expression . DOT ID

    RPAREN          shift and go to state 180
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    TIMES           shift and go to state 112
    DIVIDE          shift and go to state 113
    MOD             shift and go to state 114
    LEQ             shift and go to state 115
    GEQ             shift and go to state 116
    LT              shift and go to state 117
    GT              shift and go to state 118
    EQ              shift and go to state 119
    NE              shift and go to state 120
    LBRACKET        shift and go to state 121
    DOT             shift and go to state 122


state 166

    (24) BreakStatement -> BREAK INTL SEMICOLON .

    LET             reduce using rule 24 (BreakStatement -> BREAK INTL SEMICOLON .)
    IF              reduce using rule 24 (BreakStatement -> BREAK INTL SEMICOLON .)
    FOR             reduce using rule 24 (BreakStatement -> BREAK INTL SEMICOLON .)
    WHILE           reduce using rule 24 (BreakStatement -> BREAK INTL SEMICOLON .)
    BREAK           reduce using rule 24 (BreakStatement -> BREAK INTL SEMICOLON .)
    RETURN          reduce using rule 24 (BreakStatement -> BREAK INTL SEMICOLON .)
    SEMICOLON       reduce using rule 24 (BreakStatement -> BREAK INTL SEMICOLON .)
    LPAREN          reduce using rule 24 (BreakStatement -> BREAK INTL SEMICOLON .)
    LBRACE          reduce using rule 24 (BreakStatement -> BREAK INTL SEMICOLON .)
    ID              reduce using rule 24 (BreakStatement -> BREAK INTL SEMICOLON .)
    LT              reduce using rule 24 (BreakStatement -> BREAK INTL SEMICOLON .)
    TIMES           reduce using rule 24 (BreakStatement -> BREAK INTL SEMICOLON .)
    AMPERSAND       reduce using rule 24 (BreakStatement -> BREAK INTL SEMICOLON .)
    INTL            reduce using rule 24 (BreakStatement -> BREAK INTL SEMICOLON .)
    BOOLL           reduce using rule 24 (BreakStatement -> BREAK INTL SEMICOLON .)
    RBRACE          reduce using rule 24 (BreakStatement -> BREAK INTL SEMICOLON .)
    RPAREN          reduce using rule 24 (BreakStatement -> BREAK INTL SEMICOLON .)


state 167

    (55) ReturnStatement -> RETURN Expression SEMICOLON .

    LET             reduce using rule 55 (ReturnStatement -> RETURN Expression SEMICOLON .)
    IF              reduce using rule 55 (ReturnStatement -> RETURN Expression SEMICOLON .)
    FOR             reduce using rule 55 (ReturnStatement -> RETURN Expression SEMICOLON .)
    WHILE           reduce using rule 55 (ReturnStatement -> RETURN Expression SEMICOLON .)
    BREAK           reduce using rule 55 (ReturnStatement -> RETURN Expression SEMICOLON .)
    RETURN          reduce using rule 55 (ReturnStatement -> RETURN Expression SEMICOLON .)
    SEMICOLON       reduce using rule 55 (ReturnStatement -> RETURN Expression SEMICOLON .)
    LPAREN          reduce using rule 55 (ReturnStatement -> RETURN Expression SEMICOLON .)
    LBRACE          reduce using rule 55 (ReturnStatement -> RETURN Expression SEMICOLON .)
    ID              reduce using rule 55 (ReturnStatement -> RETURN Expression SEMICOLON .)
    LT              reduce using rule 55 (ReturnStatement -> RETURN Expression SEMICOLON .)
    TIMES           reduce using rule 55 (ReturnStatement -> RETURN Expression SEMICOLON .)
    AMPERSAND       reduce using rule 55 (ReturnStatement -> RETURN Expression SEMICOLON .)
    INTL            reduce using rule 55 (ReturnStatement -> RETURN Expression SEMICOLON .)
    BOOLL           reduce using rule 55 (ReturnStatement -> RETURN Expression SEMICOLON .)
    RBRACE          reduce using rule 55 (ReturnStatement -> RETURN Expression SEMICOLON .)
    RPAREN          reduce using rule 55 (ReturnStatement -> RETURN Expression SEMICOLON .)


state 168

    (45) InitCall -> LT TypeIdentifier GT . LBRACE ArgumentListR RBRACE

    LBRACE          shift and go to state 181


state 169

    (39) FunctionDefinition -> FN ID LT TypeParameterListR GT LPAREN ParameterListR RPAREN Block .

    FN              reduce using rule 39 (FunctionDefinition -> FN ID LT TypeParameterListR GT LPAREN ParameterListR RPAREN Block .)
    STRUCT          reduce using rule 39 (FunctionDefinition -> FN ID LT TypeParameterListR GT LPAREN ParameterListR RPAREN Block .)
    $end            reduce using rule 39 (FunctionDefinition -> FN ID LT TypeParameterListR GT LPAREN ParameterListR RPAREN Block .)


state 170

    (41) FunctionDefinition -> FN ID LT TypeParameterListR GT LPAREN ParameterListR RPAREN ARROW . TypeIdentifier Block
    (77) TypeIdentifier -> . ID
    (78) TypeIdentifier -> . TypeIdentifier DOT ID
    (79) TypeIdentifier -> . TypeIdentifier TIMES
    (80) TypeIdentifier -> . TypeIdentifier LT TypeArgumentListR GT

    ID              shift and go to state 16

    TypeIdentifier                 shift and go to state 182

state 171

    (6) AssignmentStatement -> Expression ASSIGNMENT Expression SEMICOLON .

    LET             reduce using rule 6 (AssignmentStatement -> Expression ASSIGNMENT Expression SEMICOLON .)
    IF              reduce using rule 6 (AssignmentStatement -> Expression ASSIGNMENT Expression SEMICOLON .)
    FOR             reduce using rule 6 (AssignmentStatement -> Expression ASSIGNMENT Expression SEMICOLON .)
    WHILE           reduce using rule 6 (AssignmentStatement -> Expression ASSIGNMENT Expression SEMICOLON .)
    BREAK           reduce using rule 6 (AssignmentStatement -> Expression ASSIGNMENT Expression SEMICOLON .)
    RETURN          reduce using rule 6 (AssignmentStatement -> Expression ASSIGNMENT Expression SEMICOLON .)
    SEMICOLON       reduce using rule 6 (AssignmentStatement -> Expression ASSIGNMENT Expression SEMICOLON .)
    LPAREN          reduce using rule 6 (AssignmentStatement -> Expression ASSIGNMENT Expression SEMICOLON .)
    LBRACE          reduce using rule 6 (AssignmentStatement -> Expression ASSIGNMENT Expression SEMICOLON .)
    ID              reduce using rule 6 (AssignmentStatement -> Expression ASSIGNMENT Expression SEMICOLON .)
    LT              reduce using rule 6 (AssignmentStatement -> Expression ASSIGNMENT Expression SEMICOLON .)
    TIMES           reduce using rule 6 (AssignmentStatement -> Expression ASSIGNMENT Expression SEMICOLON .)
    AMPERSAND       reduce using rule 6 (AssignmentStatement -> Expression ASSIGNMENT Expression SEMICOLON .)
    INTL            reduce using rule 6 (AssignmentStatement -> Expression ASSIGNMENT Expression SEMICOLON .)
    BOOLL           reduce using rule 6 (AssignmentStatement -> Expression ASSIGNMENT Expression SEMICOLON .)
    RBRACE          reduce using rule 6 (AssignmentStatement -> Expression ASSIGNMENT Expression SEMICOLON .)
    RPAREN          reduce using rule 6 (AssignmentStatement -> Expression ASSIGNMENT Expression SEMICOLON .)


state 172

    (23) BracketCall -> Expression LBRACKET Expression RBRACKET .

    SEMICOLON       reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    ASSIGNMENT      reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    PLUS            reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    MINUS           reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    TIMES           reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    DIVIDE          reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    MOD             reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    LEQ             reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    GEQ             reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    LT              reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    GT              reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    EQ              reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    NE              reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    LBRACKET        reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    DOT             reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    RPAREN          reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    LET             reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    IF              reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    FOR             reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    WHILE           reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    BREAK           reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    RETURN          reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    LPAREN          reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    LBRACE          reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    ID              reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    AMPERSAND       reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    INTL            reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    BOOLL           reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    RBRACE          reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    RBRACKET        reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)
    COMMA           reduce using rule 23 (BracketCall -> Expression LBRACKET Expression RBRACKET .)


state 173

    (47) InitStatement -> LET ID ASSIGNMENT Expression . SEMICOLON
    (8) BinaryExpression -> Expression . PLUS Expression
    (9) BinaryExpression -> Expression . MINUS Expression
    (10) BinaryExpression -> Expression . TIMES Expression
    (11) BinaryExpression -> Expression . DIVIDE Expression
    (12) BinaryExpression -> Expression . MOD Expression
    (13) BinaryExpression -> Expression . LEQ Expression
    (14) BinaryExpression -> Expression . GEQ Expression
    (15) BinaryExpression -> Expression . LT Expression
    (16) BinaryExpression -> Expression . GT Expression
    (17) BinaryExpression -> Expression . EQ Expression
    (18) BinaryExpression -> Expression . NE Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET
    (32) DotExpression -> Expression . DOT ID

    SEMICOLON       shift and go to state 183
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    TIMES           shift and go to state 112
    DIVIDE          shift and go to state 113
    MOD             shift and go to state 114
    LEQ             shift and go to state 115
    GEQ             shift and go to state 116
    LT              shift and go to state 117
    GT              shift and go to state 118
    EQ              shift and go to state 119
    NE              shift and go to state 120
    LBRACKET        shift and go to state 121
    DOT             shift and go to state 122


state 174

    (36) FunctionCall -> ID LPAREN ArgumentListR RPAREN .

    SEMICOLON       reduce using rule 36 (FunctionCall -> ID LPAREN ArgumentListR RPAREN .)
    ASSIGNMENT      reduce using rule 36 (FunctionCall -> ID LPAREN ArgumentListR RPAREN .)
    PLUS            reduce using rule 36 (FunctionCall -> ID LPAREN ArgumentListR RPAREN .)
    MINUS           reduce using rule 36 (FunctionCall -> ID LPAREN ArgumentListR RPAREN .)
    TIMES           reduce using rule 36 (FunctionCall -> ID LPAREN ArgumentListR RPAREN .)
    DIVIDE          reduce using rule 36 (FunctionCall -> ID LPAREN ArgumentListR RPAREN .)
    MOD             reduce using rule 36 (FunctionCall -> ID LPAREN ArgumentListR RPAREN .)
    LEQ             reduce using rule 36 (FunctionCall -> ID LPAREN ArgumentListR RPAREN .)
    GEQ             reduce using rule 36 (FunctionCall -> ID LPAREN ArgumentListR RPAREN .)
    LT              reduce using rule 36 (FunctionCall -> ID LPAREN ArgumentListR RPAREN .)
    GT              reduce using rule 36 (FunctionCall -> ID LPAREN ArgumentListR RPAREN .)
    EQ              reduce using rule 36 (FunctionCall -> ID LPAREN ArgumentListR RPAREN .)
    NE              reduce using rule 36 (FunctionCall -> ID LPAREN ArgumentListR RPAREN .)
    LBRACKET        reduce using rule 36 (FunctionCall -> ID LPAREN ArgumentListR RPAREN .)
    DOT             reduce using rule 36 (FunctionCall -> ID LPAREN ArgumentListR RPAREN .)
    RPAREN          reduce using rule 36 (FunctionCall -> ID LPAREN ArgumentListR RPAREN .)
    LET             reduce using rule 36 (FunctionCall -> ID LPAREN ArgumentListR RPAREN .)
    IF              reduce using rule 36 (FunctionCall -> ID LPAREN ArgumentListR RPAREN .)
    FOR             reduce using rule 36 (FunctionCall -> ID LPAREN ArgumentListR RPAREN .)
    WHILE           reduce using rule 36 (FunctionCall -> ID LPAREN ArgumentListR RPAREN .)
    BREAK           reduce using rule 36 (FunctionCall -> ID LPAREN ArgumentListR RPAREN .)
    RETURN          reduce using rule 36 (FunctionCall -> ID LPAREN ArgumentListR RPAREN .)
    LPAREN          reduce using rule 36 (FunctionCall -> ID LPAREN ArgumentListR RPAREN .)
    LBRACE          reduce using rule 36 (FunctionCall -> ID LPAREN ArgumentListR RPAREN .)
    ID              reduce using rule 36 (FunctionCall -> ID LPAREN ArgumentListR RPAREN .)
    AMPERSAND       reduce using rule 36 (FunctionCall -> ID LPAREN ArgumentListR RPAREN .)
    INTL            reduce using rule 36 (FunctionCall -> ID LPAREN ArgumentListR RPAREN .)
    BOOLL           reduce using rule 36 (FunctionCall -> ID LPAREN ArgumentListR RPAREN .)
    RBRACE          reduce using rule 36 (FunctionCall -> ID LPAREN ArgumentListR RPAREN .)
    RBRACKET        reduce using rule 36 (FunctionCall -> ID LPAREN ArgumentListR RPAREN .)
    COMMA           reduce using rule 36 (FunctionCall -> ID LPAREN ArgumentListR RPAREN .)


state 175

    (3) ArgumentListR -> Argument COMMA . ArgumentListR
    (3) ArgumentListR -> . Argument COMMA ArgumentListR
    (4) ArgumentListR -> . Argument
    (5) ArgumentListR -> . empty
    (2) Argument -> . Expression
    (96) empty -> .
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (8) BinaryExpression -> . Expression PLUS Expression
    (9) BinaryExpression -> . Expression MINUS Expression
    (10) BinaryExpression -> . Expression TIMES Expression
    (11) BinaryExpression -> . Expression DIVIDE Expression
    (12) BinaryExpression -> . Expression MOD Expression
    (13) BinaryExpression -> . Expression LEQ Expression
    (14) BinaryExpression -> . Expression GEQ Expression
    (15) BinaryExpression -> . Expression LT Expression
    (16) BinaryExpression -> . Expression GT Expression
    (17) BinaryExpression -> . Expression EQ Expression
    (18) BinaryExpression -> . Expression NE Expression
    (87) UnaryExpression -> . Literal
    (88) UnaryExpression -> . FunctionCall
    (89) UnaryExpression -> . BracketCall
    (90) UnaryExpression -> . InitCall
    (91) UnaryExpression -> . DotExpression
    (92) UnaryExpression -> . LPAREN Expression RPAREN
    (93) UnaryExpression -> . DereferenceExpression
    (94) UnaryExpression -> . AddressExpression
    (49) Literal -> . IntLiteral
    (50) Literal -> . BoolLiteral
    (36) FunctionCall -> . ID LPAREN ArgumentListR RPAREN
    (37) FunctionCall -> . ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (44) InitCall -> . ID LBRACE ArgumentListR RBRACE
    (45) InitCall -> . LT TypeIdentifier GT LBRACE ArgumentListR RBRACE
    (46) InitCall -> . ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE
    (31) DotExpression -> . ID
    (32) DotExpression -> . Expression DOT ID
    (30) DereferenceExpression -> . TIMES Expression
    (1) AddressExpression -> . AMPERSAND Expression
    (48) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL

    RPAREN          reduce using rule 96 (empty -> .)
    RBRACE          reduce using rule 96 (empty -> .)
    LPAREN          shift and go to state 80
    ID              shift and go to state 76
    LT              shift and go to state 88
    TIMES           shift and go to state 87
    AMPERSAND       shift and go to state 98
    INTL            shift and go to state 85
    BOOLL           shift and go to state 99

    Argument                       shift and go to state 157
    ArgumentListR                  shift and go to state 184
    empty                          shift and go to state 158
    Expression                     shift and go to state 159
    BinaryExpression               shift and go to state 77
    UnaryExpression                shift and go to state 78
    Literal                        shift and go to state 89
    FunctionCall                   shift and go to state 90
    BracketCall                    shift and go to state 91
    InitCall                       shift and go to state 92
    DotExpression                  shift and go to state 93
    DereferenceExpression          shift and go to state 94
    AddressExpression              shift and go to state 95
    IntLiteral                     shift and go to state 96
    BoolLiteral                    shift and go to state 97

state 176

    (37) FunctionCall -> ID LT TypeArgumentListR GT . LPAREN ArgumentListR RPAREN
    (46) InitCall -> ID LT TypeArgumentListR GT . LBRACE ArgumentListR RBRACE

    LPAREN          shift and go to state 185
    LBRACE          shift and go to state 186


state 177

    (44) InitCall -> ID LBRACE ArgumentListR RBRACE .

    SEMICOLON       reduce using rule 44 (InitCall -> ID LBRACE ArgumentListR RBRACE .)
    ASSIGNMENT      reduce using rule 44 (InitCall -> ID LBRACE ArgumentListR RBRACE .)
    PLUS            reduce using rule 44 (InitCall -> ID LBRACE ArgumentListR RBRACE .)
    MINUS           reduce using rule 44 (InitCall -> ID LBRACE ArgumentListR RBRACE .)
    TIMES           reduce using rule 44 (InitCall -> ID LBRACE ArgumentListR RBRACE .)
    DIVIDE          reduce using rule 44 (InitCall -> ID LBRACE ArgumentListR RBRACE .)
    MOD             reduce using rule 44 (InitCall -> ID LBRACE ArgumentListR RBRACE .)
    LEQ             reduce using rule 44 (InitCall -> ID LBRACE ArgumentListR RBRACE .)
    GEQ             reduce using rule 44 (InitCall -> ID LBRACE ArgumentListR RBRACE .)
    LT              reduce using rule 44 (InitCall -> ID LBRACE ArgumentListR RBRACE .)
    GT              reduce using rule 44 (InitCall -> ID LBRACE ArgumentListR RBRACE .)
    EQ              reduce using rule 44 (InitCall -> ID LBRACE ArgumentListR RBRACE .)
    NE              reduce using rule 44 (InitCall -> ID LBRACE ArgumentListR RBRACE .)
    LBRACKET        reduce using rule 44 (InitCall -> ID LBRACE ArgumentListR RBRACE .)
    DOT             reduce using rule 44 (InitCall -> ID LBRACE ArgumentListR RBRACE .)
    RPAREN          reduce using rule 44 (InitCall -> ID LBRACE ArgumentListR RBRACE .)
    LET             reduce using rule 44 (InitCall -> ID LBRACE ArgumentListR RBRACE .)
    IF              reduce using rule 44 (InitCall -> ID LBRACE ArgumentListR RBRACE .)
    FOR             reduce using rule 44 (InitCall -> ID LBRACE ArgumentListR RBRACE .)
    WHILE           reduce using rule 44 (InitCall -> ID LBRACE ArgumentListR RBRACE .)
    BREAK           reduce using rule 44 (InitCall -> ID LBRACE ArgumentListR RBRACE .)
    RETURN          reduce using rule 44 (InitCall -> ID LBRACE ArgumentListR RBRACE .)
    LPAREN          reduce using rule 44 (InitCall -> ID LBRACE ArgumentListR RBRACE .)
    LBRACE          reduce using rule 44 (InitCall -> ID LBRACE ArgumentListR RBRACE .)
    ID              reduce using rule 44 (InitCall -> ID LBRACE ArgumentListR RBRACE .)
    AMPERSAND       reduce using rule 44 (InitCall -> ID LBRACE ArgumentListR RBRACE .)
    INTL            reduce using rule 44 (InitCall -> ID LBRACE ArgumentListR RBRACE .)
    BOOLL           reduce using rule 44 (InitCall -> ID LBRACE ArgumentListR RBRACE .)
    RBRACE          reduce using rule 44 (InitCall -> ID LBRACE ArgumentListR RBRACE .)
    RBRACKET        reduce using rule 44 (InitCall -> ID LBRACE ArgumentListR RBRACE .)
    COMMA           reduce using rule 44 (InitCall -> ID LBRACE ArgumentListR RBRACE .)


state 178

    (42) IfElseStatement -> IF LPAREN Expression RPAREN . Block ELSE Block
    (43) IfElseStatement -> IF LPAREN Expression RPAREN . Block
    (20) Block -> . LBRACE StatementListR RBRACE

    LBRACE          shift and go to state 48

    Block                          shift and go to state 187

state 179

    (35) ForStatement -> FOR LPAREN Statement Expression . SEMICOLON Statement RPAREN Block
    (8) BinaryExpression -> Expression . PLUS Expression
    (9) BinaryExpression -> Expression . MINUS Expression
    (10) BinaryExpression -> Expression . TIMES Expression
    (11) BinaryExpression -> Expression . DIVIDE Expression
    (12) BinaryExpression -> Expression . MOD Expression
    (13) BinaryExpression -> Expression . LEQ Expression
    (14) BinaryExpression -> Expression . GEQ Expression
    (15) BinaryExpression -> Expression . LT Expression
    (16) BinaryExpression -> Expression . GT Expression
    (17) BinaryExpression -> Expression . EQ Expression
    (18) BinaryExpression -> Expression . NE Expression
    (23) BracketCall -> Expression . LBRACKET Expression RBRACKET
    (32) DotExpression -> Expression . DOT ID

    SEMICOLON       shift and go to state 188
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    TIMES           shift and go to state 112
    DIVIDE          shift and go to state 113
    MOD             shift and go to state 114
    LEQ             shift and go to state 115
    GEQ             shift and go to state 116
    LT              shift and go to state 117
    GT              shift and go to state 118
    EQ              shift and go to state 119
    NE              shift and go to state 120
    LBRACKET        shift and go to state 121
    DOT             shift and go to state 122


state 180

    (95) WhileStatement -> WHILE LPAREN Expression RPAREN . Block
    (20) Block -> . LBRACE StatementListR RBRACE

    LBRACE          shift and go to state 48

    Block                          shift and go to state 189

state 181

    (45) InitCall -> LT TypeIdentifier GT LBRACE . ArgumentListR RBRACE
    (3) ArgumentListR -> . Argument COMMA ArgumentListR
    (4) ArgumentListR -> . Argument
    (5) ArgumentListR -> . empty
    (2) Argument -> . Expression
    (96) empty -> .
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (8) BinaryExpression -> . Expression PLUS Expression
    (9) BinaryExpression -> . Expression MINUS Expression
    (10) BinaryExpression -> . Expression TIMES Expression
    (11) BinaryExpression -> . Expression DIVIDE Expression
    (12) BinaryExpression -> . Expression MOD Expression
    (13) BinaryExpression -> . Expression LEQ Expression
    (14) BinaryExpression -> . Expression GEQ Expression
    (15) BinaryExpression -> . Expression LT Expression
    (16) BinaryExpression -> . Expression GT Expression
    (17) BinaryExpression -> . Expression EQ Expression
    (18) BinaryExpression -> . Expression NE Expression
    (87) UnaryExpression -> . Literal
    (88) UnaryExpression -> . FunctionCall
    (89) UnaryExpression -> . BracketCall
    (90) UnaryExpression -> . InitCall
    (91) UnaryExpression -> . DotExpression
    (92) UnaryExpression -> . LPAREN Expression RPAREN
    (93) UnaryExpression -> . DereferenceExpression
    (94) UnaryExpression -> . AddressExpression
    (49) Literal -> . IntLiteral
    (50) Literal -> . BoolLiteral
    (36) FunctionCall -> . ID LPAREN ArgumentListR RPAREN
    (37) FunctionCall -> . ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (44) InitCall -> . ID LBRACE ArgumentListR RBRACE
    (45) InitCall -> . LT TypeIdentifier GT LBRACE ArgumentListR RBRACE
    (46) InitCall -> . ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE
    (31) DotExpression -> . ID
    (32) DotExpression -> . Expression DOT ID
    (30) DereferenceExpression -> . TIMES Expression
    (1) AddressExpression -> . AMPERSAND Expression
    (48) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL

    RBRACE          reduce using rule 96 (empty -> .)
    LPAREN          shift and go to state 80
    ID              shift and go to state 76
    LT              shift and go to state 88
    TIMES           shift and go to state 87
    AMPERSAND       shift and go to state 98
    INTL            shift and go to state 85
    BOOLL           shift and go to state 99

    ArgumentListR                  shift and go to state 190
    Argument                       shift and go to state 157
    empty                          shift and go to state 158
    Expression                     shift and go to state 159
    BinaryExpression               shift and go to state 77
    UnaryExpression                shift and go to state 78
    Literal                        shift and go to state 89
    FunctionCall                   shift and go to state 90
    BracketCall                    shift and go to state 91
    InitCall                       shift and go to state 92
    DotExpression                  shift and go to state 93
    DereferenceExpression          shift and go to state 94
    AddressExpression              shift and go to state 95
    IntLiteral                     shift and go to state 96
    BoolLiteral                    shift and go to state 97

state 182

    (41) FunctionDefinition -> FN ID LT TypeParameterListR GT LPAREN ParameterListR RPAREN ARROW TypeIdentifier . Block
    (78) TypeIdentifier -> TypeIdentifier . DOT ID
    (79) TypeIdentifier -> TypeIdentifier . TIMES
    (80) TypeIdentifier -> TypeIdentifier . LT TypeArgumentListR GT
    (20) Block -> . LBRACE StatementListR RBRACE

    DOT             shift and go to state 34
    TIMES           shift and go to state 35
    LT              shift and go to state 36
    LBRACE          shift and go to state 48

    Block                          shift and go to state 191

state 183

    (47) InitStatement -> LET ID ASSIGNMENT Expression SEMICOLON .

    LET             reduce using rule 47 (InitStatement -> LET ID ASSIGNMENT Expression SEMICOLON .)
    IF              reduce using rule 47 (InitStatement -> LET ID ASSIGNMENT Expression SEMICOLON .)
    FOR             reduce using rule 47 (InitStatement -> LET ID ASSIGNMENT Expression SEMICOLON .)
    WHILE           reduce using rule 47 (InitStatement -> LET ID ASSIGNMENT Expression SEMICOLON .)
    BREAK           reduce using rule 47 (InitStatement -> LET ID ASSIGNMENT Expression SEMICOLON .)
    RETURN          reduce using rule 47 (InitStatement -> LET ID ASSIGNMENT Expression SEMICOLON .)
    SEMICOLON       reduce using rule 47 (InitStatement -> LET ID ASSIGNMENT Expression SEMICOLON .)
    LPAREN          reduce using rule 47 (InitStatement -> LET ID ASSIGNMENT Expression SEMICOLON .)
    LBRACE          reduce using rule 47 (InitStatement -> LET ID ASSIGNMENT Expression SEMICOLON .)
    ID              reduce using rule 47 (InitStatement -> LET ID ASSIGNMENT Expression SEMICOLON .)
    LT              reduce using rule 47 (InitStatement -> LET ID ASSIGNMENT Expression SEMICOLON .)
    TIMES           reduce using rule 47 (InitStatement -> LET ID ASSIGNMENT Expression SEMICOLON .)
    AMPERSAND       reduce using rule 47 (InitStatement -> LET ID ASSIGNMENT Expression SEMICOLON .)
    INTL            reduce using rule 47 (InitStatement -> LET ID ASSIGNMENT Expression SEMICOLON .)
    BOOLL           reduce using rule 47 (InitStatement -> LET ID ASSIGNMENT Expression SEMICOLON .)
    RBRACE          reduce using rule 47 (InitStatement -> LET ID ASSIGNMENT Expression SEMICOLON .)
    RPAREN          reduce using rule 47 (InitStatement -> LET ID ASSIGNMENT Expression SEMICOLON .)


state 184

    (3) ArgumentListR -> Argument COMMA ArgumentListR .

    RPAREN          reduce using rule 3 (ArgumentListR -> Argument COMMA ArgumentListR .)
    RBRACE          reduce using rule 3 (ArgumentListR -> Argument COMMA ArgumentListR .)


state 185

    (37) FunctionCall -> ID LT TypeArgumentListR GT LPAREN . ArgumentListR RPAREN
    (3) ArgumentListR -> . Argument COMMA ArgumentListR
    (4) ArgumentListR -> . Argument
    (5) ArgumentListR -> . empty
    (2) Argument -> . Expression
    (96) empty -> .
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (8) BinaryExpression -> . Expression PLUS Expression
    (9) BinaryExpression -> . Expression MINUS Expression
    (10) BinaryExpression -> . Expression TIMES Expression
    (11) BinaryExpression -> . Expression DIVIDE Expression
    (12) BinaryExpression -> . Expression MOD Expression
    (13) BinaryExpression -> . Expression LEQ Expression
    (14) BinaryExpression -> . Expression GEQ Expression
    (15) BinaryExpression -> . Expression LT Expression
    (16) BinaryExpression -> . Expression GT Expression
    (17) BinaryExpression -> . Expression EQ Expression
    (18) BinaryExpression -> . Expression NE Expression
    (87) UnaryExpression -> . Literal
    (88) UnaryExpression -> . FunctionCall
    (89) UnaryExpression -> . BracketCall
    (90) UnaryExpression -> . InitCall
    (91) UnaryExpression -> . DotExpression
    (92) UnaryExpression -> . LPAREN Expression RPAREN
    (93) UnaryExpression -> . DereferenceExpression
    (94) UnaryExpression -> . AddressExpression
    (49) Literal -> . IntLiteral
    (50) Literal -> . BoolLiteral
    (36) FunctionCall -> . ID LPAREN ArgumentListR RPAREN
    (37) FunctionCall -> . ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (44) InitCall -> . ID LBRACE ArgumentListR RBRACE
    (45) InitCall -> . LT TypeIdentifier GT LBRACE ArgumentListR RBRACE
    (46) InitCall -> . ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE
    (31) DotExpression -> . ID
    (32) DotExpression -> . Expression DOT ID
    (30) DereferenceExpression -> . TIMES Expression
    (1) AddressExpression -> . AMPERSAND Expression
    (48) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL

    RPAREN          reduce using rule 96 (empty -> .)
    LPAREN          shift and go to state 80
    ID              shift and go to state 76
    LT              shift and go to state 88
    TIMES           shift and go to state 87
    AMPERSAND       shift and go to state 98
    INTL            shift and go to state 85
    BOOLL           shift and go to state 99

    ArgumentListR                  shift and go to state 192
    Argument                       shift and go to state 157
    empty                          shift and go to state 158
    Expression                     shift and go to state 159
    BinaryExpression               shift and go to state 77
    UnaryExpression                shift and go to state 78
    Literal                        shift and go to state 89
    FunctionCall                   shift and go to state 90
    BracketCall                    shift and go to state 91
    InitCall                       shift and go to state 92
    DotExpression                  shift and go to state 93
    DereferenceExpression          shift and go to state 94
    AddressExpression              shift and go to state 95
    IntLiteral                     shift and go to state 96
    BoolLiteral                    shift and go to state 97

state 186

    (46) InitCall -> ID LT TypeArgumentListR GT LBRACE . ArgumentListR RBRACE
    (3) ArgumentListR -> . Argument COMMA ArgumentListR
    (4) ArgumentListR -> . Argument
    (5) ArgumentListR -> . empty
    (2) Argument -> . Expression
    (96) empty -> .
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (8) BinaryExpression -> . Expression PLUS Expression
    (9) BinaryExpression -> . Expression MINUS Expression
    (10) BinaryExpression -> . Expression TIMES Expression
    (11) BinaryExpression -> . Expression DIVIDE Expression
    (12) BinaryExpression -> . Expression MOD Expression
    (13) BinaryExpression -> . Expression LEQ Expression
    (14) BinaryExpression -> . Expression GEQ Expression
    (15) BinaryExpression -> . Expression LT Expression
    (16) BinaryExpression -> . Expression GT Expression
    (17) BinaryExpression -> . Expression EQ Expression
    (18) BinaryExpression -> . Expression NE Expression
    (87) UnaryExpression -> . Literal
    (88) UnaryExpression -> . FunctionCall
    (89) UnaryExpression -> . BracketCall
    (90) UnaryExpression -> . InitCall
    (91) UnaryExpression -> . DotExpression
    (92) UnaryExpression -> . LPAREN Expression RPAREN
    (93) UnaryExpression -> . DereferenceExpression
    (94) UnaryExpression -> . AddressExpression
    (49) Literal -> . IntLiteral
    (50) Literal -> . BoolLiteral
    (36) FunctionCall -> . ID LPAREN ArgumentListR RPAREN
    (37) FunctionCall -> . ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (44) InitCall -> . ID LBRACE ArgumentListR RBRACE
    (45) InitCall -> . LT TypeIdentifier GT LBRACE ArgumentListR RBRACE
    (46) InitCall -> . ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE
    (31) DotExpression -> . ID
    (32) DotExpression -> . Expression DOT ID
    (30) DereferenceExpression -> . TIMES Expression
    (1) AddressExpression -> . AMPERSAND Expression
    (48) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL

    RBRACE          reduce using rule 96 (empty -> .)
    LPAREN          shift and go to state 80
    ID              shift and go to state 76
    LT              shift and go to state 88
    TIMES           shift and go to state 87
    AMPERSAND       shift and go to state 98
    INTL            shift and go to state 85
    BOOLL           shift and go to state 99

    ArgumentListR                  shift and go to state 193
    Argument                       shift and go to state 157
    empty                          shift and go to state 158
    Expression                     shift and go to state 159
    BinaryExpression               shift and go to state 77
    UnaryExpression                shift and go to state 78
    Literal                        shift and go to state 89
    FunctionCall                   shift and go to state 90
    BracketCall                    shift and go to state 91
    InitCall                       shift and go to state 92
    DotExpression                  shift and go to state 93
    DereferenceExpression          shift and go to state 94
    AddressExpression              shift and go to state 95
    IntLiteral                     shift and go to state 96
    BoolLiteral                    shift and go to state 97

state 187

    (42) IfElseStatement -> IF LPAREN Expression RPAREN Block . ELSE Block
    (43) IfElseStatement -> IF LPAREN Expression RPAREN Block .

    ELSE            shift and go to state 194
    LET             reduce using rule 43 (IfElseStatement -> IF LPAREN Expression RPAREN Block .)
    IF              reduce using rule 43 (IfElseStatement -> IF LPAREN Expression RPAREN Block .)
    FOR             reduce using rule 43 (IfElseStatement -> IF LPAREN Expression RPAREN Block .)
    WHILE           reduce using rule 43 (IfElseStatement -> IF LPAREN Expression RPAREN Block .)
    BREAK           reduce using rule 43 (IfElseStatement -> IF LPAREN Expression RPAREN Block .)
    RETURN          reduce using rule 43 (IfElseStatement -> IF LPAREN Expression RPAREN Block .)
    SEMICOLON       reduce using rule 43 (IfElseStatement -> IF LPAREN Expression RPAREN Block .)
    LPAREN          reduce using rule 43 (IfElseStatement -> IF LPAREN Expression RPAREN Block .)
    LBRACE          reduce using rule 43 (IfElseStatement -> IF LPAREN Expression RPAREN Block .)
    ID              reduce using rule 43 (IfElseStatement -> IF LPAREN Expression RPAREN Block .)
    LT              reduce using rule 43 (IfElseStatement -> IF LPAREN Expression RPAREN Block .)
    TIMES           reduce using rule 43 (IfElseStatement -> IF LPAREN Expression RPAREN Block .)
    AMPERSAND       reduce using rule 43 (IfElseStatement -> IF LPAREN Expression RPAREN Block .)
    INTL            reduce using rule 43 (IfElseStatement -> IF LPAREN Expression RPAREN Block .)
    BOOLL           reduce using rule 43 (IfElseStatement -> IF LPAREN Expression RPAREN Block .)
    RBRACE          reduce using rule 43 (IfElseStatement -> IF LPAREN Expression RPAREN Block .)
    RPAREN          reduce using rule 43 (IfElseStatement -> IF LPAREN Expression RPAREN Block .)


state 188

    (35) ForStatement -> FOR LPAREN Statement Expression SEMICOLON . Statement RPAREN Block
    (57) Statement -> . AssignmentStatement
    (58) Statement -> . InitStatement
    (59) Statement -> . Expression SEMICOLON
    (60) Statement -> . IfElseStatement
    (61) Statement -> . ForStatement
    (62) Statement -> . WhileStatement
    (63) Statement -> . BreakStatement
    (64) Statement -> . ReturnStatement
    (65) Statement -> . BlockStatement
    (66) Statement -> . BlankStatement
    (6) AssignmentStatement -> . Expression ASSIGNMENT Expression SEMICOLON
    (7) AssignmentStatement -> . Expression ASSIGNMENT Expression
    (47) InitStatement -> . LET ID ASSIGNMENT Expression SEMICOLON
    (33) Expression -> . BinaryExpression
    (34) Expression -> . UnaryExpression
    (42) IfElseStatement -> . IF LPAREN Expression RPAREN Block ELSE Block
    (43) IfElseStatement -> . IF LPAREN Expression RPAREN Block
    (35) ForStatement -> . FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block
    (95) WhileStatement -> . WHILE LPAREN Expression RPAREN Block
    (24) BreakStatement -> . BREAK INTL SEMICOLON
    (25) BreakStatement -> . BREAK SEMICOLON
    (55) ReturnStatement -> . RETURN Expression SEMICOLON
    (56) ReturnStatement -> . RETURN SEMICOLON
    (21) BlockStatement -> . Block
    (19) BlankStatement -> . SEMICOLON
    (8) BinaryExpression -> . Expression PLUS Expression
    (9) BinaryExpression -> . Expression MINUS Expression
    (10) BinaryExpression -> . Expression TIMES Expression
    (11) BinaryExpression -> . Expression DIVIDE Expression
    (12) BinaryExpression -> . Expression MOD Expression
    (13) BinaryExpression -> . Expression LEQ Expression
    (14) BinaryExpression -> . Expression GEQ Expression
    (15) BinaryExpression -> . Expression LT Expression
    (16) BinaryExpression -> . Expression GT Expression
    (17) BinaryExpression -> . Expression EQ Expression
    (18) BinaryExpression -> . Expression NE Expression
    (87) UnaryExpression -> . Literal
    (88) UnaryExpression -> . FunctionCall
    (89) UnaryExpression -> . BracketCall
    (90) UnaryExpression -> . InitCall
    (91) UnaryExpression -> . DotExpression
    (92) UnaryExpression -> . LPAREN Expression RPAREN
    (93) UnaryExpression -> . DereferenceExpression
    (94) UnaryExpression -> . AddressExpression
    (20) Block -> . LBRACE StatementListR RBRACE
    (49) Literal -> . IntLiteral
    (50) Literal -> . BoolLiteral
    (36) FunctionCall -> . ID LPAREN ArgumentListR RPAREN
    (37) FunctionCall -> . ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN
    (23) BracketCall -> . Expression LBRACKET Expression RBRACKET
    (44) InitCall -> . ID LBRACE ArgumentListR RBRACE
    (45) InitCall -> . LT TypeIdentifier GT LBRACE ArgumentListR RBRACE
    (46) InitCall -> . ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE
    (31) DotExpression -> . ID
    (32) DotExpression -> . Expression DOT ID
    (30) DereferenceExpression -> . TIMES Expression
    (1) AddressExpression -> . AMPERSAND Expression
    (48) IntLiteral -> . INTL
    (22) BoolLiteral -> . BOOLL

    LET             shift and go to state 75
    IF              shift and go to state 79
    FOR             shift and go to state 82
    WHILE           shift and go to state 83
    BREAK           shift and go to state 84
    RETURN          shift and go to state 86
    SEMICOLON       shift and go to state 67
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 48
    ID              shift and go to state 76
    LT              shift and go to state 88
    TIMES           shift and go to state 87
    AMPERSAND       shift and go to state 98
    INTL            shift and go to state 85
    BOOLL           shift and go to state 99

    Statement                      shift and go to state 195
    Expression                     shift and go to state 66
    Block                          shift and go to state 81
    AssignmentStatement            shift and go to state 64
    InitStatement                  shift and go to state 65
    IfElseStatement                shift and go to state 68
    ForStatement                   shift and go to state 69
    WhileStatement                 shift and go to state 70
    BreakStatement                 shift and go to state 71
    ReturnStatement                shift and go to state 72
    BlockStatement                 shift and go to state 73
    BlankStatement                 shift and go to state 74
    BinaryExpression               shift and go to state 77
    UnaryExpression                shift and go to state 78
    Literal                        shift and go to state 89
    FunctionCall                   shift and go to state 90
    BracketCall                    shift and go to state 91
    InitCall                       shift and go to state 92
    DotExpression                  shift and go to state 93
    DereferenceExpression          shift and go to state 94
    AddressExpression              shift and go to state 95
    IntLiteral                     shift and go to state 96
    BoolLiteral                    shift and go to state 97

state 189

    (95) WhileStatement -> WHILE LPAREN Expression RPAREN Block .

    LET             reduce using rule 95 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    IF              reduce using rule 95 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    FOR             reduce using rule 95 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    WHILE           reduce using rule 95 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    BREAK           reduce using rule 95 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    RETURN          reduce using rule 95 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    SEMICOLON       reduce using rule 95 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    LPAREN          reduce using rule 95 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    LBRACE          reduce using rule 95 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    ID              reduce using rule 95 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    LT              reduce using rule 95 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    TIMES           reduce using rule 95 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    AMPERSAND       reduce using rule 95 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    INTL            reduce using rule 95 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    BOOLL           reduce using rule 95 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    RBRACE          reduce using rule 95 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    RPAREN          reduce using rule 95 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)


state 190

    (45) InitCall -> LT TypeIdentifier GT LBRACE ArgumentListR . RBRACE

    RBRACE          shift and go to state 196


state 191

    (41) FunctionDefinition -> FN ID LT TypeParameterListR GT LPAREN ParameterListR RPAREN ARROW TypeIdentifier Block .

    FN              reduce using rule 41 (FunctionDefinition -> FN ID LT TypeParameterListR GT LPAREN ParameterListR RPAREN ARROW TypeIdentifier Block .)
    STRUCT          reduce using rule 41 (FunctionDefinition -> FN ID LT TypeParameterListR GT LPAREN ParameterListR RPAREN ARROW TypeIdentifier Block .)
    $end            reduce using rule 41 (FunctionDefinition -> FN ID LT TypeParameterListR GT LPAREN ParameterListR RPAREN ARROW TypeIdentifier Block .)


state 192

    (37) FunctionCall -> ID LT TypeArgumentListR GT LPAREN ArgumentListR . RPAREN

    RPAREN          shift and go to state 197


state 193

    (46) InitCall -> ID LT TypeArgumentListR GT LBRACE ArgumentListR . RBRACE

    RBRACE          shift and go to state 198


state 194

    (42) IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE . Block
    (20) Block -> . LBRACE StatementListR RBRACE

    LBRACE          shift and go to state 48

    Block                          shift and go to state 199

state 195

    (35) ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement . RPAREN Block

    RPAREN          shift and go to state 200


state 196

    (45) InitCall -> LT TypeIdentifier GT LBRACE ArgumentListR RBRACE .

    SEMICOLON       reduce using rule 45 (InitCall -> LT TypeIdentifier GT LBRACE ArgumentListR RBRACE .)
    ASSIGNMENT      reduce using rule 45 (InitCall -> LT TypeIdentifier GT LBRACE ArgumentListR RBRACE .)
    PLUS            reduce using rule 45 (InitCall -> LT TypeIdentifier GT LBRACE ArgumentListR RBRACE .)
    MINUS           reduce using rule 45 (InitCall -> LT TypeIdentifier GT LBRACE ArgumentListR RBRACE .)
    TIMES           reduce using rule 45 (InitCall -> LT TypeIdentifier GT LBRACE ArgumentListR RBRACE .)
    DIVIDE          reduce using rule 45 (InitCall -> LT TypeIdentifier GT LBRACE ArgumentListR RBRACE .)
    MOD             reduce using rule 45 (InitCall -> LT TypeIdentifier GT LBRACE ArgumentListR RBRACE .)
    LEQ             reduce using rule 45 (InitCall -> LT TypeIdentifier GT LBRACE ArgumentListR RBRACE .)
    GEQ             reduce using rule 45 (InitCall -> LT TypeIdentifier GT LBRACE ArgumentListR RBRACE .)
    LT              reduce using rule 45 (InitCall -> LT TypeIdentifier GT LBRACE ArgumentListR RBRACE .)
    GT              reduce using rule 45 (InitCall -> LT TypeIdentifier GT LBRACE ArgumentListR RBRACE .)
    EQ              reduce using rule 45 (InitCall -> LT TypeIdentifier GT LBRACE ArgumentListR RBRACE .)
    NE              reduce using rule 45 (InitCall -> LT TypeIdentifier GT LBRACE ArgumentListR RBRACE .)
    LBRACKET        reduce using rule 45 (InitCall -> LT TypeIdentifier GT LBRACE ArgumentListR RBRACE .)
    DOT             reduce using rule 45 (InitCall -> LT TypeIdentifier GT LBRACE ArgumentListR RBRACE .)
    RPAREN          reduce using rule 45 (InitCall -> LT TypeIdentifier GT LBRACE ArgumentListR RBRACE .)
    LET             reduce using rule 45 (InitCall -> LT TypeIdentifier GT LBRACE ArgumentListR RBRACE .)
    IF              reduce using rule 45 (InitCall -> LT TypeIdentifier GT LBRACE ArgumentListR RBRACE .)
    FOR             reduce using rule 45 (InitCall -> LT TypeIdentifier GT LBRACE ArgumentListR RBRACE .)
    WHILE           reduce using rule 45 (InitCall -> LT TypeIdentifier GT LBRACE ArgumentListR RBRACE .)
    BREAK           reduce using rule 45 (InitCall -> LT TypeIdentifier GT LBRACE ArgumentListR RBRACE .)
    RETURN          reduce using rule 45 (InitCall -> LT TypeIdentifier GT LBRACE ArgumentListR RBRACE .)
    LPAREN          reduce using rule 45 (InitCall -> LT TypeIdentifier GT LBRACE ArgumentListR RBRACE .)
    LBRACE          reduce using rule 45 (InitCall -> LT TypeIdentifier GT LBRACE ArgumentListR RBRACE .)
    ID              reduce using rule 45 (InitCall -> LT TypeIdentifier GT LBRACE ArgumentListR RBRACE .)
    AMPERSAND       reduce using rule 45 (InitCall -> LT TypeIdentifier GT LBRACE ArgumentListR RBRACE .)
    INTL            reduce using rule 45 (InitCall -> LT TypeIdentifier GT LBRACE ArgumentListR RBRACE .)
    BOOLL           reduce using rule 45 (InitCall -> LT TypeIdentifier GT LBRACE ArgumentListR RBRACE .)
    RBRACE          reduce using rule 45 (InitCall -> LT TypeIdentifier GT LBRACE ArgumentListR RBRACE .)
    RBRACKET        reduce using rule 45 (InitCall -> LT TypeIdentifier GT LBRACE ArgumentListR RBRACE .)
    COMMA           reduce using rule 45 (InitCall -> LT TypeIdentifier GT LBRACE ArgumentListR RBRACE .)


state 197

    (37) FunctionCall -> ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN .

    SEMICOLON       reduce using rule 37 (FunctionCall -> ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN .)
    ASSIGNMENT      reduce using rule 37 (FunctionCall -> ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN .)
    PLUS            reduce using rule 37 (FunctionCall -> ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN .)
    MINUS           reduce using rule 37 (FunctionCall -> ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN .)
    TIMES           reduce using rule 37 (FunctionCall -> ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN .)
    DIVIDE          reduce using rule 37 (FunctionCall -> ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN .)
    MOD             reduce using rule 37 (FunctionCall -> ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN .)
    LEQ             reduce using rule 37 (FunctionCall -> ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN .)
    GEQ             reduce using rule 37 (FunctionCall -> ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN .)
    LT              reduce using rule 37 (FunctionCall -> ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN .)
    GT              reduce using rule 37 (FunctionCall -> ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN .)
    EQ              reduce using rule 37 (FunctionCall -> ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN .)
    NE              reduce using rule 37 (FunctionCall -> ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN .)
    LBRACKET        reduce using rule 37 (FunctionCall -> ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN .)
    DOT             reduce using rule 37 (FunctionCall -> ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN .)
    RPAREN          reduce using rule 37 (FunctionCall -> ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN .)
    LET             reduce using rule 37 (FunctionCall -> ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN .)
    IF              reduce using rule 37 (FunctionCall -> ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN .)
    FOR             reduce using rule 37 (FunctionCall -> ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN .)
    WHILE           reduce using rule 37 (FunctionCall -> ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN .)
    BREAK           reduce using rule 37 (FunctionCall -> ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN .)
    RETURN          reduce using rule 37 (FunctionCall -> ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN .)
    LPAREN          reduce using rule 37 (FunctionCall -> ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN .)
    LBRACE          reduce using rule 37 (FunctionCall -> ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN .)
    ID              reduce using rule 37 (FunctionCall -> ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN .)
    AMPERSAND       reduce using rule 37 (FunctionCall -> ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN .)
    INTL            reduce using rule 37 (FunctionCall -> ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN .)
    BOOLL           reduce using rule 37 (FunctionCall -> ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN .)
    RBRACE          reduce using rule 37 (FunctionCall -> ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN .)
    RBRACKET        reduce using rule 37 (FunctionCall -> ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN .)
    COMMA           reduce using rule 37 (FunctionCall -> ID LT TypeArgumentListR GT LPAREN ArgumentListR RPAREN .)


state 198

    (46) InitCall -> ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE .

    SEMICOLON       reduce using rule 46 (InitCall -> ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE .)
    ASSIGNMENT      reduce using rule 46 (InitCall -> ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE .)
    PLUS            reduce using rule 46 (InitCall -> ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE .)
    MINUS           reduce using rule 46 (InitCall -> ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE .)
    TIMES           reduce using rule 46 (InitCall -> ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE .)
    DIVIDE          reduce using rule 46 (InitCall -> ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE .)
    MOD             reduce using rule 46 (InitCall -> ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE .)
    LEQ             reduce using rule 46 (InitCall -> ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE .)
    GEQ             reduce using rule 46 (InitCall -> ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE .)
    LT              reduce using rule 46 (InitCall -> ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE .)
    GT              reduce using rule 46 (InitCall -> ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE .)
    EQ              reduce using rule 46 (InitCall -> ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE .)
    NE              reduce using rule 46 (InitCall -> ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE .)
    LBRACKET        reduce using rule 46 (InitCall -> ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE .)
    DOT             reduce using rule 46 (InitCall -> ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE .)
    RPAREN          reduce using rule 46 (InitCall -> ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE .)
    LET             reduce using rule 46 (InitCall -> ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE .)
    IF              reduce using rule 46 (InitCall -> ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE .)
    FOR             reduce using rule 46 (InitCall -> ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE .)
    WHILE           reduce using rule 46 (InitCall -> ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE .)
    BREAK           reduce using rule 46 (InitCall -> ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE .)
    RETURN          reduce using rule 46 (InitCall -> ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE .)
    LPAREN          reduce using rule 46 (InitCall -> ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE .)
    LBRACE          reduce using rule 46 (InitCall -> ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE .)
    ID              reduce using rule 46 (InitCall -> ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE .)
    AMPERSAND       reduce using rule 46 (InitCall -> ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE .)
    INTL            reduce using rule 46 (InitCall -> ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE .)
    BOOLL           reduce using rule 46 (InitCall -> ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE .)
    RBRACE          reduce using rule 46 (InitCall -> ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE .)
    RBRACKET        reduce using rule 46 (InitCall -> ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE .)
    COMMA           reduce using rule 46 (InitCall -> ID LT TypeArgumentListR GT LBRACE ArgumentListR RBRACE .)


state 199

    (42) IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .

    LET             reduce using rule 42 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)
    IF              reduce using rule 42 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)
    FOR             reduce using rule 42 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)
    WHILE           reduce using rule 42 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)
    BREAK           reduce using rule 42 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)
    RETURN          reduce using rule 42 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)
    SEMICOLON       reduce using rule 42 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)
    LPAREN          reduce using rule 42 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)
    LBRACE          reduce using rule 42 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)
    ID              reduce using rule 42 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)
    LT              reduce using rule 42 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)
    TIMES           reduce using rule 42 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)
    AMPERSAND       reduce using rule 42 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)
    INTL            reduce using rule 42 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)
    BOOLL           reduce using rule 42 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)
    RBRACE          reduce using rule 42 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)
    RPAREN          reduce using rule 42 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)


state 200

    (35) ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN . Block
    (20) Block -> . LBRACE StatementListR RBRACE

    LBRACE          shift and go to state 48

    Block                          shift and go to state 201

state 201

    (35) ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .

    LET             reduce using rule 35 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)
    IF              reduce using rule 35 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)
    FOR             reduce using rule 35 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)
    WHILE           reduce using rule 35 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)
    BREAK           reduce using rule 35 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)
    RETURN          reduce using rule 35 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)
    SEMICOLON       reduce using rule 35 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)
    LPAREN          reduce using rule 35 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)
    LBRACE          reduce using rule 35 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)
    ID              reduce using rule 35 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)
    LT              reduce using rule 35 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)
    TIMES           reduce using rule 35 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)
    AMPERSAND       reduce using rule 35 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)
    INTL            reduce using rule 35 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)
    BOOLL           reduce using rule 35 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)
    RBRACE          reduce using rule 35 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)
    RPAREN          reduce using rule 35 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LT in state 76 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 76 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 76 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 137 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 137 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 137 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 137 resolved as shift
WARNING: shift/reduce conflict for MOD in state 137 resolved as shift
WARNING: shift/reduce conflict for LEQ in state 137 resolved as shift
WARNING: shift/reduce conflict for GEQ in state 137 resolved as shift
WARNING: shift/reduce conflict for LT in state 137 resolved as shift
WARNING: shift/reduce conflict for GT in state 137 resolved as shift
WARNING: shift/reduce conflict for EQ in state 137 resolved as shift
WARNING: shift/reduce conflict for NE in state 137 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 137 resolved as shift
WARNING: shift/reduce conflict for DOT in state 137 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 141 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 141 resolved as shift
WARNING: shift/reduce conflict for LT in state 141 resolved as shift
