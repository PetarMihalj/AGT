Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BEQ
    EQ
    LEQ
    NEQ

Grammar

Rule 0     S' -> CompilationUnit
Rule 1     Argument -> Expression
Rule 2     ArgumentListR -> Argument , ArgumentListR
Rule 3     ArgumentListR -> Argument
Rule 4     ArgumentListR -> empty
Rule 5     AssignmentStatement -> ID = Expression ;
Rule 6     Block -> { StatementListR }
Rule 7     BoolLiteral -> BOOLL
Rule 8     BreakStatement -> BREAK INTL ;
Rule 9     BreakStatement -> BREAK ;
Rule 10    CharLiteral -> CHARL
Rule 11    CompilationUnit -> DefinitionListR
Rule 12    DeclarationAssignmentStatement -> TypeName ID = Expression ;
Rule 13    DeclarationStatement -> TypeName ID ;
Rule 14    DecrementAfter -> ID DEC
Rule 15    DecrementBefore -> DEC ID
Rule 16    DefinitionListR -> FunctionDefinition DefinitionListR
Rule 17    DefinitionListR -> empty
Rule 18    Expression -> UnaryExpression
Rule 19    ForStatement -> FOR ( Statement ; Expression ; Statement ) Block
Rule 20    FunctionCall -> ID ( ArgumentListR )
Rule 21    FunctionDefinition -> TypeName ID ( ParameterListR ) Block
Rule 22    IfElseStatement -> IF ( Expression ) Block ELSE Block
Rule 23    IncrementAfter -> ID INC
Rule 24    IncrementBefore -> INC ID
Rule 25    IntLiteral -> INTL
Rule 26    Literal -> IntLiteral
Rule 27    Literal -> BoolLiteral
Rule 28    Literal -> CharLiteral
Rule 29    Negate -> - ID
Rule 30    Parameter -> TypeName ID
Rule 31    ParameterListR -> Parameter , ParameterListR
Rule 32    ParameterListR -> Parameter
Rule 33    ParameterListR -> empty
Rule 34    ReturnStatement -> RETURN Expression ;
Rule 35    ReturnStatement -> RETURN ;
Rule 36    Statement -> AssignmentStatement
Rule 37    Statement -> DeclarationAssignmentStatement
Rule 38    Statement -> Expression ;
Rule 39    Statement -> DeclarationStatement
Rule 40    Statement -> IfElseStatement
Rule 41    Statement -> ForStatement
Rule 42    Statement -> WhileStatement
Rule 43    Statement -> BreakStatement
Rule 44    Statement -> ReturnStatement
Rule 45    StatementListR -> Statement StatementListR
Rule 46    StatementListR -> empty
Rule 47    TypeName -> ID
Rule 48    UnaryExpression -> Negate
Rule 49    UnaryExpression -> IncrementAfter
Rule 50    UnaryExpression -> IncrementBefore
Rule 51    UnaryExpression -> DecrementAfter
Rule 52    UnaryExpression -> DecrementBefore
Rule 53    UnaryExpression -> FunctionCall
Rule 54    UnaryExpression -> ID
Rule 55    UnaryExpression -> Literal
Rule 56    WhileStatement -> WHILE ( Expression ) Block
Rule 57    empty -> <empty>

Terminals, with rules where they appear

(                    : 19 20 21 22 56
)                    : 19 20 21 22 56
,                    : 2 31
-                    : 29
;                    : 5 8 9 12 13 19 19 34 35 38
=                    : 5 12
BEQ                  : 
BOOLL                : 7
BREAK                : 8 9
CHARL                : 10
DEC                  : 14 15
ELSE                 : 22
EQ                   : 
FOR                  : 19
ID                   : 5 12 13 14 15 20 21 23 24 29 30 47 54
IF                   : 22
INC                  : 23 24
INTL                 : 8 25
LEQ                  : 
NEQ                  : 
RETURN               : 34 35
WHILE                : 56
error                : 
{                    : 6
}                    : 6

Nonterminals, with rules where they appear

Argument             : 2 3
ArgumentListR        : 2 20
AssignmentStatement  : 36
Block                : 19 21 22 22 56
BoolLiteral          : 27
BreakStatement       : 43
CharLiteral          : 28
CompilationUnit      : 0
DeclarationAssignmentStatement : 37
DeclarationStatement : 39
DecrementAfter       : 51
DecrementBefore      : 52
DefinitionListR      : 11 16
Expression           : 1 5 12 19 22 34 38 56
ForStatement         : 41
FunctionCall         : 53
FunctionDefinition   : 16
IfElseStatement      : 40
IncrementAfter       : 49
IncrementBefore      : 50
IntLiteral           : 26
Literal              : 55
Negate               : 48
Parameter            : 31 32
ParameterListR       : 21 31
ReturnStatement      : 44
Statement            : 19 19 45
StatementListR       : 6 45
TypeName             : 12 13 21 30
UnaryExpression      : 18
WhileStatement       : 42
empty                : 4 17 33 46

Parsing method: LALR

state 0

    (0) S' -> . CompilationUnit
    (11) CompilationUnit -> . DefinitionListR
    (16) DefinitionListR -> . FunctionDefinition DefinitionListR
    (17) DefinitionListR -> . empty
    (21) FunctionDefinition -> . TypeName ID ( ParameterListR ) Block
    (57) empty -> .
    (47) TypeName -> . ID

    $end            reduce using rule 57 (empty -> .)
    ID              shift and go to state 6

    CompilationUnit                shift and go to state 1
    DefinitionListR                shift and go to state 2
    FunctionDefinition             shift and go to state 3
    empty                          shift and go to state 4
    TypeName                       shift and go to state 5

state 1

    (0) S' -> CompilationUnit .



state 2

    (11) CompilationUnit -> DefinitionListR .

    $end            reduce using rule 11 (CompilationUnit -> DefinitionListR .)


state 3

    (16) DefinitionListR -> FunctionDefinition . DefinitionListR
    (16) DefinitionListR -> . FunctionDefinition DefinitionListR
    (17) DefinitionListR -> . empty
    (21) FunctionDefinition -> . TypeName ID ( ParameterListR ) Block
    (57) empty -> .
    (47) TypeName -> . ID

    $end            reduce using rule 57 (empty -> .)
    ID              shift and go to state 6

    FunctionDefinition             shift and go to state 3
    DefinitionListR                shift and go to state 7
    empty                          shift and go to state 4
    TypeName                       shift and go to state 5

state 4

    (17) DefinitionListR -> empty .

    $end            reduce using rule 17 (DefinitionListR -> empty .)


state 5

    (21) FunctionDefinition -> TypeName . ID ( ParameterListR ) Block

    ID              shift and go to state 8


state 6

    (47) TypeName -> ID .

    ID              reduce using rule 47 (TypeName -> ID .)


state 7

    (16) DefinitionListR -> FunctionDefinition DefinitionListR .

    $end            reduce using rule 16 (DefinitionListR -> FunctionDefinition DefinitionListR .)


state 8

    (21) FunctionDefinition -> TypeName ID . ( ParameterListR ) Block

    (               shift and go to state 9


state 9

    (21) FunctionDefinition -> TypeName ID ( . ParameterListR ) Block
    (31) ParameterListR -> . Parameter , ParameterListR
    (32) ParameterListR -> . Parameter
    (33) ParameterListR -> . empty
    (30) Parameter -> . TypeName ID
    (57) empty -> .
    (47) TypeName -> . ID

    )               reduce using rule 57 (empty -> .)
    ID              shift and go to state 6

    TypeName                       shift and go to state 10
    ParameterListR                 shift and go to state 11
    Parameter                      shift and go to state 12
    empty                          shift and go to state 13

state 10

    (30) Parameter -> TypeName . ID

    ID              shift and go to state 14


state 11

    (21) FunctionDefinition -> TypeName ID ( ParameterListR . ) Block

    )               shift and go to state 15


state 12

    (31) ParameterListR -> Parameter . , ParameterListR
    (32) ParameterListR -> Parameter .

    ,               shift and go to state 16
    )               reduce using rule 32 (ParameterListR -> Parameter .)


state 13

    (33) ParameterListR -> empty .

    )               reduce using rule 33 (ParameterListR -> empty .)


state 14

    (30) Parameter -> TypeName ID .

    ,               reduce using rule 30 (Parameter -> TypeName ID .)
    )               reduce using rule 30 (Parameter -> TypeName ID .)


state 15

    (21) FunctionDefinition -> TypeName ID ( ParameterListR ) . Block
    (6) Block -> . { StatementListR }

    {               shift and go to state 18

    Block                          shift and go to state 17

state 16

    (31) ParameterListR -> Parameter , . ParameterListR
    (31) ParameterListR -> . Parameter , ParameterListR
    (32) ParameterListR -> . Parameter
    (33) ParameterListR -> . empty
    (30) Parameter -> . TypeName ID
    (57) empty -> .
    (47) TypeName -> . ID

    )               reduce using rule 57 (empty -> .)
    ID              shift and go to state 6

    Parameter                      shift and go to state 12
    ParameterListR                 shift and go to state 19
    empty                          shift and go to state 13
    TypeName                       shift and go to state 10

state 17

    (21) FunctionDefinition -> TypeName ID ( ParameterListR ) Block .

    ID              reduce using rule 21 (FunctionDefinition -> TypeName ID ( ParameterListR ) Block .)
    $end            reduce using rule 21 (FunctionDefinition -> TypeName ID ( ParameterListR ) Block .)


state 18

    (6) Block -> { . StatementListR }
    (45) StatementListR -> . Statement StatementListR
    (46) StatementListR -> . empty
    (36) Statement -> . AssignmentStatement
    (37) Statement -> . DeclarationAssignmentStatement
    (38) Statement -> . Expression ;
    (39) Statement -> . DeclarationStatement
    (40) Statement -> . IfElseStatement
    (41) Statement -> . ForStatement
    (42) Statement -> . WhileStatement
    (43) Statement -> . BreakStatement
    (44) Statement -> . ReturnStatement
    (57) empty -> .
    (5) AssignmentStatement -> . ID = Expression ;
    (12) DeclarationAssignmentStatement -> . TypeName ID = Expression ;
    (18) Expression -> . UnaryExpression
    (13) DeclarationStatement -> . TypeName ID ;
    (22) IfElseStatement -> . IF ( Expression ) Block ELSE Block
    (19) ForStatement -> . FOR ( Statement ; Expression ; Statement ) Block
    (56) WhileStatement -> . WHILE ( Expression ) Block
    (8) BreakStatement -> . BREAK INTL ;
    (9) BreakStatement -> . BREAK ;
    (34) ReturnStatement -> . RETURN Expression ;
    (35) ReturnStatement -> . RETURN ;
    (47) TypeName -> . ID
    (48) UnaryExpression -> . Negate
    (49) UnaryExpression -> . IncrementAfter
    (50) UnaryExpression -> . IncrementBefore
    (51) UnaryExpression -> . DecrementAfter
    (52) UnaryExpression -> . DecrementBefore
    (53) UnaryExpression -> . FunctionCall
    (54) UnaryExpression -> . ID
    (55) UnaryExpression -> . Literal
    (29) Negate -> . - ID
    (23) IncrementAfter -> . ID INC
    (24) IncrementBefore -> . INC ID
    (14) DecrementAfter -> . ID DEC
    (15) DecrementBefore -> . DEC ID
    (20) FunctionCall -> . ID ( ArgumentListR )
    (26) Literal -> . IntLiteral
    (27) Literal -> . BoolLiteral
    (28) Literal -> . CharLiteral
    (25) IntLiteral -> . INTL
    (7) BoolLiteral -> . BOOLL
    (10) CharLiteral -> . CHARL

    }               reduce using rule 57 (empty -> .)
    ID              shift and go to state 32
    IF              shift and go to state 35
    FOR             shift and go to state 36
    WHILE           shift and go to state 37
    BREAK           shift and go to state 38
    RETURN          shift and go to state 40
    -               shift and go to state 48
    INC             shift and go to state 49
    DEC             shift and go to state 50
    INTL            shift and go to state 39
    BOOLL           shift and go to state 54
    CHARL           shift and go to state 55

    StatementListR                 shift and go to state 20
    Statement                      shift and go to state 21
    empty                          shift and go to state 22
    AssignmentStatement            shift and go to state 23
    DeclarationAssignmentStatement shift and go to state 24
    Expression                     shift and go to state 25
    DeclarationStatement           shift and go to state 26
    IfElseStatement                shift and go to state 27
    ForStatement                   shift and go to state 28
    WhileStatement                 shift and go to state 29
    BreakStatement                 shift and go to state 30
    ReturnStatement                shift and go to state 31
    TypeName                       shift and go to state 33
    UnaryExpression                shift and go to state 34
    Negate                         shift and go to state 41
    IncrementAfter                 shift and go to state 42
    IncrementBefore                shift and go to state 43
    DecrementAfter                 shift and go to state 44
    DecrementBefore                shift and go to state 45
    FunctionCall                   shift and go to state 46
    Literal                        shift and go to state 47
    IntLiteral                     shift and go to state 51
    BoolLiteral                    shift and go to state 52
    CharLiteral                    shift and go to state 53

state 19

    (31) ParameterListR -> Parameter , ParameterListR .

    )               reduce using rule 31 (ParameterListR -> Parameter , ParameterListR .)


state 20

    (6) Block -> { StatementListR . }

    }               shift and go to state 56


state 21

    (45) StatementListR -> Statement . StatementListR
    (45) StatementListR -> . Statement StatementListR
    (46) StatementListR -> . empty
    (36) Statement -> . AssignmentStatement
    (37) Statement -> . DeclarationAssignmentStatement
    (38) Statement -> . Expression ;
    (39) Statement -> . DeclarationStatement
    (40) Statement -> . IfElseStatement
    (41) Statement -> . ForStatement
    (42) Statement -> . WhileStatement
    (43) Statement -> . BreakStatement
    (44) Statement -> . ReturnStatement
    (57) empty -> .
    (5) AssignmentStatement -> . ID = Expression ;
    (12) DeclarationAssignmentStatement -> . TypeName ID = Expression ;
    (18) Expression -> . UnaryExpression
    (13) DeclarationStatement -> . TypeName ID ;
    (22) IfElseStatement -> . IF ( Expression ) Block ELSE Block
    (19) ForStatement -> . FOR ( Statement ; Expression ; Statement ) Block
    (56) WhileStatement -> . WHILE ( Expression ) Block
    (8) BreakStatement -> . BREAK INTL ;
    (9) BreakStatement -> . BREAK ;
    (34) ReturnStatement -> . RETURN Expression ;
    (35) ReturnStatement -> . RETURN ;
    (47) TypeName -> . ID
    (48) UnaryExpression -> . Negate
    (49) UnaryExpression -> . IncrementAfter
    (50) UnaryExpression -> . IncrementBefore
    (51) UnaryExpression -> . DecrementAfter
    (52) UnaryExpression -> . DecrementBefore
    (53) UnaryExpression -> . FunctionCall
    (54) UnaryExpression -> . ID
    (55) UnaryExpression -> . Literal
    (29) Negate -> . - ID
    (23) IncrementAfter -> . ID INC
    (24) IncrementBefore -> . INC ID
    (14) DecrementAfter -> . ID DEC
    (15) DecrementBefore -> . DEC ID
    (20) FunctionCall -> . ID ( ArgumentListR )
    (26) Literal -> . IntLiteral
    (27) Literal -> . BoolLiteral
    (28) Literal -> . CharLiteral
    (25) IntLiteral -> . INTL
    (7) BoolLiteral -> . BOOLL
    (10) CharLiteral -> . CHARL

    }               reduce using rule 57 (empty -> .)
    ID              shift and go to state 32
    IF              shift and go to state 35
    FOR             shift and go to state 36
    WHILE           shift and go to state 37
    BREAK           shift and go to state 38
    RETURN          shift and go to state 40
    -               shift and go to state 48
    INC             shift and go to state 49
    DEC             shift and go to state 50
    INTL            shift and go to state 39
    BOOLL           shift and go to state 54
    CHARL           shift and go to state 55

    Statement                      shift and go to state 21
    StatementListR                 shift and go to state 57
    empty                          shift and go to state 22
    AssignmentStatement            shift and go to state 23
    DeclarationAssignmentStatement shift and go to state 24
    Expression                     shift and go to state 25
    DeclarationStatement           shift and go to state 26
    IfElseStatement                shift and go to state 27
    ForStatement                   shift and go to state 28
    WhileStatement                 shift and go to state 29
    BreakStatement                 shift and go to state 30
    ReturnStatement                shift and go to state 31
    TypeName                       shift and go to state 33
    UnaryExpression                shift and go to state 34
    Negate                         shift and go to state 41
    IncrementAfter                 shift and go to state 42
    IncrementBefore                shift and go to state 43
    DecrementAfter                 shift and go to state 44
    DecrementBefore                shift and go to state 45
    FunctionCall                   shift and go to state 46
    Literal                        shift and go to state 47
    IntLiteral                     shift and go to state 51
    BoolLiteral                    shift and go to state 52
    CharLiteral                    shift and go to state 53

state 22

    (46) StatementListR -> empty .

    }               reduce using rule 46 (StatementListR -> empty .)


state 23

    (36) Statement -> AssignmentStatement .

    ID              reduce using rule 36 (Statement -> AssignmentStatement .)
    IF              reduce using rule 36 (Statement -> AssignmentStatement .)
    FOR             reduce using rule 36 (Statement -> AssignmentStatement .)
    WHILE           reduce using rule 36 (Statement -> AssignmentStatement .)
    BREAK           reduce using rule 36 (Statement -> AssignmentStatement .)
    RETURN          reduce using rule 36 (Statement -> AssignmentStatement .)
    -               reduce using rule 36 (Statement -> AssignmentStatement .)
    INC             reduce using rule 36 (Statement -> AssignmentStatement .)
    DEC             reduce using rule 36 (Statement -> AssignmentStatement .)
    INTL            reduce using rule 36 (Statement -> AssignmentStatement .)
    BOOLL           reduce using rule 36 (Statement -> AssignmentStatement .)
    CHARL           reduce using rule 36 (Statement -> AssignmentStatement .)
    }               reduce using rule 36 (Statement -> AssignmentStatement .)
    ;               reduce using rule 36 (Statement -> AssignmentStatement .)
    )               reduce using rule 36 (Statement -> AssignmentStatement .)


state 24

    (37) Statement -> DeclarationAssignmentStatement .

    ID              reduce using rule 37 (Statement -> DeclarationAssignmentStatement .)
    IF              reduce using rule 37 (Statement -> DeclarationAssignmentStatement .)
    FOR             reduce using rule 37 (Statement -> DeclarationAssignmentStatement .)
    WHILE           reduce using rule 37 (Statement -> DeclarationAssignmentStatement .)
    BREAK           reduce using rule 37 (Statement -> DeclarationAssignmentStatement .)
    RETURN          reduce using rule 37 (Statement -> DeclarationAssignmentStatement .)
    -               reduce using rule 37 (Statement -> DeclarationAssignmentStatement .)
    INC             reduce using rule 37 (Statement -> DeclarationAssignmentStatement .)
    DEC             reduce using rule 37 (Statement -> DeclarationAssignmentStatement .)
    INTL            reduce using rule 37 (Statement -> DeclarationAssignmentStatement .)
    BOOLL           reduce using rule 37 (Statement -> DeclarationAssignmentStatement .)
    CHARL           reduce using rule 37 (Statement -> DeclarationAssignmentStatement .)
    }               reduce using rule 37 (Statement -> DeclarationAssignmentStatement .)
    ;               reduce using rule 37 (Statement -> DeclarationAssignmentStatement .)
    )               reduce using rule 37 (Statement -> DeclarationAssignmentStatement .)


state 25

    (38) Statement -> Expression . ;

    ;               shift and go to state 58


state 26

    (39) Statement -> DeclarationStatement .

    ID              reduce using rule 39 (Statement -> DeclarationStatement .)
    IF              reduce using rule 39 (Statement -> DeclarationStatement .)
    FOR             reduce using rule 39 (Statement -> DeclarationStatement .)
    WHILE           reduce using rule 39 (Statement -> DeclarationStatement .)
    BREAK           reduce using rule 39 (Statement -> DeclarationStatement .)
    RETURN          reduce using rule 39 (Statement -> DeclarationStatement .)
    -               reduce using rule 39 (Statement -> DeclarationStatement .)
    INC             reduce using rule 39 (Statement -> DeclarationStatement .)
    DEC             reduce using rule 39 (Statement -> DeclarationStatement .)
    INTL            reduce using rule 39 (Statement -> DeclarationStatement .)
    BOOLL           reduce using rule 39 (Statement -> DeclarationStatement .)
    CHARL           reduce using rule 39 (Statement -> DeclarationStatement .)
    }               reduce using rule 39 (Statement -> DeclarationStatement .)
    ;               reduce using rule 39 (Statement -> DeclarationStatement .)
    )               reduce using rule 39 (Statement -> DeclarationStatement .)


state 27

    (40) Statement -> IfElseStatement .

    ID              reduce using rule 40 (Statement -> IfElseStatement .)
    IF              reduce using rule 40 (Statement -> IfElseStatement .)
    FOR             reduce using rule 40 (Statement -> IfElseStatement .)
    WHILE           reduce using rule 40 (Statement -> IfElseStatement .)
    BREAK           reduce using rule 40 (Statement -> IfElseStatement .)
    RETURN          reduce using rule 40 (Statement -> IfElseStatement .)
    -               reduce using rule 40 (Statement -> IfElseStatement .)
    INC             reduce using rule 40 (Statement -> IfElseStatement .)
    DEC             reduce using rule 40 (Statement -> IfElseStatement .)
    INTL            reduce using rule 40 (Statement -> IfElseStatement .)
    BOOLL           reduce using rule 40 (Statement -> IfElseStatement .)
    CHARL           reduce using rule 40 (Statement -> IfElseStatement .)
    }               reduce using rule 40 (Statement -> IfElseStatement .)
    ;               reduce using rule 40 (Statement -> IfElseStatement .)
    )               reduce using rule 40 (Statement -> IfElseStatement .)


state 28

    (41) Statement -> ForStatement .

    ID              reduce using rule 41 (Statement -> ForStatement .)
    IF              reduce using rule 41 (Statement -> ForStatement .)
    FOR             reduce using rule 41 (Statement -> ForStatement .)
    WHILE           reduce using rule 41 (Statement -> ForStatement .)
    BREAK           reduce using rule 41 (Statement -> ForStatement .)
    RETURN          reduce using rule 41 (Statement -> ForStatement .)
    -               reduce using rule 41 (Statement -> ForStatement .)
    INC             reduce using rule 41 (Statement -> ForStatement .)
    DEC             reduce using rule 41 (Statement -> ForStatement .)
    INTL            reduce using rule 41 (Statement -> ForStatement .)
    BOOLL           reduce using rule 41 (Statement -> ForStatement .)
    CHARL           reduce using rule 41 (Statement -> ForStatement .)
    }               reduce using rule 41 (Statement -> ForStatement .)
    ;               reduce using rule 41 (Statement -> ForStatement .)
    )               reduce using rule 41 (Statement -> ForStatement .)


state 29

    (42) Statement -> WhileStatement .

    ID              reduce using rule 42 (Statement -> WhileStatement .)
    IF              reduce using rule 42 (Statement -> WhileStatement .)
    FOR             reduce using rule 42 (Statement -> WhileStatement .)
    WHILE           reduce using rule 42 (Statement -> WhileStatement .)
    BREAK           reduce using rule 42 (Statement -> WhileStatement .)
    RETURN          reduce using rule 42 (Statement -> WhileStatement .)
    -               reduce using rule 42 (Statement -> WhileStatement .)
    INC             reduce using rule 42 (Statement -> WhileStatement .)
    DEC             reduce using rule 42 (Statement -> WhileStatement .)
    INTL            reduce using rule 42 (Statement -> WhileStatement .)
    BOOLL           reduce using rule 42 (Statement -> WhileStatement .)
    CHARL           reduce using rule 42 (Statement -> WhileStatement .)
    }               reduce using rule 42 (Statement -> WhileStatement .)
    ;               reduce using rule 42 (Statement -> WhileStatement .)
    )               reduce using rule 42 (Statement -> WhileStatement .)


state 30

    (43) Statement -> BreakStatement .

    ID              reduce using rule 43 (Statement -> BreakStatement .)
    IF              reduce using rule 43 (Statement -> BreakStatement .)
    FOR             reduce using rule 43 (Statement -> BreakStatement .)
    WHILE           reduce using rule 43 (Statement -> BreakStatement .)
    BREAK           reduce using rule 43 (Statement -> BreakStatement .)
    RETURN          reduce using rule 43 (Statement -> BreakStatement .)
    -               reduce using rule 43 (Statement -> BreakStatement .)
    INC             reduce using rule 43 (Statement -> BreakStatement .)
    DEC             reduce using rule 43 (Statement -> BreakStatement .)
    INTL            reduce using rule 43 (Statement -> BreakStatement .)
    BOOLL           reduce using rule 43 (Statement -> BreakStatement .)
    CHARL           reduce using rule 43 (Statement -> BreakStatement .)
    }               reduce using rule 43 (Statement -> BreakStatement .)
    ;               reduce using rule 43 (Statement -> BreakStatement .)
    )               reduce using rule 43 (Statement -> BreakStatement .)


state 31

    (44) Statement -> ReturnStatement .

    ID              reduce using rule 44 (Statement -> ReturnStatement .)
    IF              reduce using rule 44 (Statement -> ReturnStatement .)
    FOR             reduce using rule 44 (Statement -> ReturnStatement .)
    WHILE           reduce using rule 44 (Statement -> ReturnStatement .)
    BREAK           reduce using rule 44 (Statement -> ReturnStatement .)
    RETURN          reduce using rule 44 (Statement -> ReturnStatement .)
    -               reduce using rule 44 (Statement -> ReturnStatement .)
    INC             reduce using rule 44 (Statement -> ReturnStatement .)
    DEC             reduce using rule 44 (Statement -> ReturnStatement .)
    INTL            reduce using rule 44 (Statement -> ReturnStatement .)
    BOOLL           reduce using rule 44 (Statement -> ReturnStatement .)
    CHARL           reduce using rule 44 (Statement -> ReturnStatement .)
    }               reduce using rule 44 (Statement -> ReturnStatement .)
    ;               reduce using rule 44 (Statement -> ReturnStatement .)
    )               reduce using rule 44 (Statement -> ReturnStatement .)


state 32

    (5) AssignmentStatement -> ID . = Expression ;
    (47) TypeName -> ID .
    (54) UnaryExpression -> ID .
    (23) IncrementAfter -> ID . INC
    (14) DecrementAfter -> ID . DEC
    (20) FunctionCall -> ID . ( ArgumentListR )

    =               shift and go to state 59
    ID              reduce using rule 47 (TypeName -> ID .)
    ;               reduce using rule 54 (UnaryExpression -> ID .)
    INC             shift and go to state 60
    DEC             shift and go to state 61
    (               shift and go to state 62


state 33

    (12) DeclarationAssignmentStatement -> TypeName . ID = Expression ;
    (13) DeclarationStatement -> TypeName . ID ;

    ID              shift and go to state 63


state 34

    (18) Expression -> UnaryExpression .

    ;               reduce using rule 18 (Expression -> UnaryExpression .)
    ,               reduce using rule 18 (Expression -> UnaryExpression .)
    )               reduce using rule 18 (Expression -> UnaryExpression .)


state 35

    (22) IfElseStatement -> IF . ( Expression ) Block ELSE Block

    (               shift and go to state 64


state 36

    (19) ForStatement -> FOR . ( Statement ; Expression ; Statement ) Block

    (               shift and go to state 65


state 37

    (56) WhileStatement -> WHILE . ( Expression ) Block

    (               shift and go to state 66


state 38

    (8) BreakStatement -> BREAK . INTL ;
    (9) BreakStatement -> BREAK . ;

    INTL            shift and go to state 67
    ;               shift and go to state 68


state 39

    (25) IntLiteral -> INTL .

    ;               reduce using rule 25 (IntLiteral -> INTL .)
    ,               reduce using rule 25 (IntLiteral -> INTL .)
    )               reduce using rule 25 (IntLiteral -> INTL .)


state 40

    (34) ReturnStatement -> RETURN . Expression ;
    (35) ReturnStatement -> RETURN . ;
    (18) Expression -> . UnaryExpression
    (48) UnaryExpression -> . Negate
    (49) UnaryExpression -> . IncrementAfter
    (50) UnaryExpression -> . IncrementBefore
    (51) UnaryExpression -> . DecrementAfter
    (52) UnaryExpression -> . DecrementBefore
    (53) UnaryExpression -> . FunctionCall
    (54) UnaryExpression -> . ID
    (55) UnaryExpression -> . Literal
    (29) Negate -> . - ID
    (23) IncrementAfter -> . ID INC
    (24) IncrementBefore -> . INC ID
    (14) DecrementAfter -> . ID DEC
    (15) DecrementBefore -> . DEC ID
    (20) FunctionCall -> . ID ( ArgumentListR )
    (26) Literal -> . IntLiteral
    (27) Literal -> . BoolLiteral
    (28) Literal -> . CharLiteral
    (25) IntLiteral -> . INTL
    (7) BoolLiteral -> . BOOLL
    (10) CharLiteral -> . CHARL

    ;               shift and go to state 70
    ID              shift and go to state 71
    -               shift and go to state 48
    INC             shift and go to state 49
    DEC             shift and go to state 50
    INTL            shift and go to state 39
    BOOLL           shift and go to state 54
    CHARL           shift and go to state 55

    Expression                     shift and go to state 69
    UnaryExpression                shift and go to state 34
    Negate                         shift and go to state 41
    IncrementAfter                 shift and go to state 42
    IncrementBefore                shift and go to state 43
    DecrementAfter                 shift and go to state 44
    DecrementBefore                shift and go to state 45
    FunctionCall                   shift and go to state 46
    Literal                        shift and go to state 47
    IntLiteral                     shift and go to state 51
    BoolLiteral                    shift and go to state 52
    CharLiteral                    shift and go to state 53

state 41

    (48) UnaryExpression -> Negate .

    ;               reduce using rule 48 (UnaryExpression -> Negate .)
    ,               reduce using rule 48 (UnaryExpression -> Negate .)
    )               reduce using rule 48 (UnaryExpression -> Negate .)


state 42

    (49) UnaryExpression -> IncrementAfter .

    ;               reduce using rule 49 (UnaryExpression -> IncrementAfter .)
    ,               reduce using rule 49 (UnaryExpression -> IncrementAfter .)
    )               reduce using rule 49 (UnaryExpression -> IncrementAfter .)


state 43

    (50) UnaryExpression -> IncrementBefore .

    ;               reduce using rule 50 (UnaryExpression -> IncrementBefore .)
    ,               reduce using rule 50 (UnaryExpression -> IncrementBefore .)
    )               reduce using rule 50 (UnaryExpression -> IncrementBefore .)


state 44

    (51) UnaryExpression -> DecrementAfter .

    ;               reduce using rule 51 (UnaryExpression -> DecrementAfter .)
    ,               reduce using rule 51 (UnaryExpression -> DecrementAfter .)
    )               reduce using rule 51 (UnaryExpression -> DecrementAfter .)


state 45

    (52) UnaryExpression -> DecrementBefore .

    ;               reduce using rule 52 (UnaryExpression -> DecrementBefore .)
    ,               reduce using rule 52 (UnaryExpression -> DecrementBefore .)
    )               reduce using rule 52 (UnaryExpression -> DecrementBefore .)


state 46

    (53) UnaryExpression -> FunctionCall .

    ;               reduce using rule 53 (UnaryExpression -> FunctionCall .)
    ,               reduce using rule 53 (UnaryExpression -> FunctionCall .)
    )               reduce using rule 53 (UnaryExpression -> FunctionCall .)


state 47

    (55) UnaryExpression -> Literal .

    ;               reduce using rule 55 (UnaryExpression -> Literal .)
    ,               reduce using rule 55 (UnaryExpression -> Literal .)
    )               reduce using rule 55 (UnaryExpression -> Literal .)


state 48

    (29) Negate -> - . ID

    ID              shift and go to state 72


state 49

    (24) IncrementBefore -> INC . ID

    ID              shift and go to state 73


state 50

    (15) DecrementBefore -> DEC . ID

    ID              shift and go to state 74


state 51

    (26) Literal -> IntLiteral .

    ;               reduce using rule 26 (Literal -> IntLiteral .)
    ,               reduce using rule 26 (Literal -> IntLiteral .)
    )               reduce using rule 26 (Literal -> IntLiteral .)


state 52

    (27) Literal -> BoolLiteral .

    ;               reduce using rule 27 (Literal -> BoolLiteral .)
    ,               reduce using rule 27 (Literal -> BoolLiteral .)
    )               reduce using rule 27 (Literal -> BoolLiteral .)


state 53

    (28) Literal -> CharLiteral .

    ;               reduce using rule 28 (Literal -> CharLiteral .)
    ,               reduce using rule 28 (Literal -> CharLiteral .)
    )               reduce using rule 28 (Literal -> CharLiteral .)


state 54

    (7) BoolLiteral -> BOOLL .

    ;               reduce using rule 7 (BoolLiteral -> BOOLL .)
    ,               reduce using rule 7 (BoolLiteral -> BOOLL .)
    )               reduce using rule 7 (BoolLiteral -> BOOLL .)


state 55

    (10) CharLiteral -> CHARL .

    ;               reduce using rule 10 (CharLiteral -> CHARL .)
    ,               reduce using rule 10 (CharLiteral -> CHARL .)
    )               reduce using rule 10 (CharLiteral -> CHARL .)


state 56

    (6) Block -> { StatementListR } .

    ID              reduce using rule 6 (Block -> { StatementListR } .)
    $end            reduce using rule 6 (Block -> { StatementListR } .)
    ELSE            reduce using rule 6 (Block -> { StatementListR } .)
    IF              reduce using rule 6 (Block -> { StatementListR } .)
    FOR             reduce using rule 6 (Block -> { StatementListR } .)
    WHILE           reduce using rule 6 (Block -> { StatementListR } .)
    BREAK           reduce using rule 6 (Block -> { StatementListR } .)
    RETURN          reduce using rule 6 (Block -> { StatementListR } .)
    -               reduce using rule 6 (Block -> { StatementListR } .)
    INC             reduce using rule 6 (Block -> { StatementListR } .)
    DEC             reduce using rule 6 (Block -> { StatementListR } .)
    INTL            reduce using rule 6 (Block -> { StatementListR } .)
    BOOLL           reduce using rule 6 (Block -> { StatementListR } .)
    CHARL           reduce using rule 6 (Block -> { StatementListR } .)
    }               reduce using rule 6 (Block -> { StatementListR } .)
    ;               reduce using rule 6 (Block -> { StatementListR } .)
    )               reduce using rule 6 (Block -> { StatementListR } .)


state 57

    (45) StatementListR -> Statement StatementListR .

    }               reduce using rule 45 (StatementListR -> Statement StatementListR .)


state 58

    (38) Statement -> Expression ; .

    ID              reduce using rule 38 (Statement -> Expression ; .)
    IF              reduce using rule 38 (Statement -> Expression ; .)
    FOR             reduce using rule 38 (Statement -> Expression ; .)
    WHILE           reduce using rule 38 (Statement -> Expression ; .)
    BREAK           reduce using rule 38 (Statement -> Expression ; .)
    RETURN          reduce using rule 38 (Statement -> Expression ; .)
    -               reduce using rule 38 (Statement -> Expression ; .)
    INC             reduce using rule 38 (Statement -> Expression ; .)
    DEC             reduce using rule 38 (Statement -> Expression ; .)
    INTL            reduce using rule 38 (Statement -> Expression ; .)
    BOOLL           reduce using rule 38 (Statement -> Expression ; .)
    CHARL           reduce using rule 38 (Statement -> Expression ; .)
    }               reduce using rule 38 (Statement -> Expression ; .)
    ;               reduce using rule 38 (Statement -> Expression ; .)
    )               reduce using rule 38 (Statement -> Expression ; .)


state 59

    (5) AssignmentStatement -> ID = . Expression ;
    (18) Expression -> . UnaryExpression
    (48) UnaryExpression -> . Negate
    (49) UnaryExpression -> . IncrementAfter
    (50) UnaryExpression -> . IncrementBefore
    (51) UnaryExpression -> . DecrementAfter
    (52) UnaryExpression -> . DecrementBefore
    (53) UnaryExpression -> . FunctionCall
    (54) UnaryExpression -> . ID
    (55) UnaryExpression -> . Literal
    (29) Negate -> . - ID
    (23) IncrementAfter -> . ID INC
    (24) IncrementBefore -> . INC ID
    (14) DecrementAfter -> . ID DEC
    (15) DecrementBefore -> . DEC ID
    (20) FunctionCall -> . ID ( ArgumentListR )
    (26) Literal -> . IntLiteral
    (27) Literal -> . BoolLiteral
    (28) Literal -> . CharLiteral
    (25) IntLiteral -> . INTL
    (7) BoolLiteral -> . BOOLL
    (10) CharLiteral -> . CHARL

    ID              shift and go to state 71
    -               shift and go to state 48
    INC             shift and go to state 49
    DEC             shift and go to state 50
    INTL            shift and go to state 39
    BOOLL           shift and go to state 54
    CHARL           shift and go to state 55

    Expression                     shift and go to state 75
    UnaryExpression                shift and go to state 34
    Negate                         shift and go to state 41
    IncrementAfter                 shift and go to state 42
    IncrementBefore                shift and go to state 43
    DecrementAfter                 shift and go to state 44
    DecrementBefore                shift and go to state 45
    FunctionCall                   shift and go to state 46
    Literal                        shift and go to state 47
    IntLiteral                     shift and go to state 51
    BoolLiteral                    shift and go to state 52
    CharLiteral                    shift and go to state 53

state 60

    (23) IncrementAfter -> ID INC .

    ;               reduce using rule 23 (IncrementAfter -> ID INC .)
    ,               reduce using rule 23 (IncrementAfter -> ID INC .)
    )               reduce using rule 23 (IncrementAfter -> ID INC .)


state 61

    (14) DecrementAfter -> ID DEC .

    ;               reduce using rule 14 (DecrementAfter -> ID DEC .)
    ,               reduce using rule 14 (DecrementAfter -> ID DEC .)
    )               reduce using rule 14 (DecrementAfter -> ID DEC .)


state 62

    (20) FunctionCall -> ID ( . ArgumentListR )
    (2) ArgumentListR -> . Argument , ArgumentListR
    (3) ArgumentListR -> . Argument
    (4) ArgumentListR -> . empty
    (1) Argument -> . Expression
    (57) empty -> .
    (18) Expression -> . UnaryExpression
    (48) UnaryExpression -> . Negate
    (49) UnaryExpression -> . IncrementAfter
    (50) UnaryExpression -> . IncrementBefore
    (51) UnaryExpression -> . DecrementAfter
    (52) UnaryExpression -> . DecrementBefore
    (53) UnaryExpression -> . FunctionCall
    (54) UnaryExpression -> . ID
    (55) UnaryExpression -> . Literal
    (29) Negate -> . - ID
    (23) IncrementAfter -> . ID INC
    (24) IncrementBefore -> . INC ID
    (14) DecrementAfter -> . ID DEC
    (15) DecrementBefore -> . DEC ID
    (20) FunctionCall -> . ID ( ArgumentListR )
    (26) Literal -> . IntLiteral
    (27) Literal -> . BoolLiteral
    (28) Literal -> . CharLiteral
    (25) IntLiteral -> . INTL
    (7) BoolLiteral -> . BOOLL
    (10) CharLiteral -> . CHARL

    )               reduce using rule 57 (empty -> .)
    ID              shift and go to state 71
    -               shift and go to state 48
    INC             shift and go to state 49
    DEC             shift and go to state 50
    INTL            shift and go to state 39
    BOOLL           shift and go to state 54
    CHARL           shift and go to state 55

    ArgumentListR                  shift and go to state 76
    Argument                       shift and go to state 77
    empty                          shift and go to state 78
    Expression                     shift and go to state 79
    UnaryExpression                shift and go to state 34
    Negate                         shift and go to state 41
    IncrementAfter                 shift and go to state 42
    IncrementBefore                shift and go to state 43
    DecrementAfter                 shift and go to state 44
    DecrementBefore                shift and go to state 45
    FunctionCall                   shift and go to state 46
    Literal                        shift and go to state 47
    IntLiteral                     shift and go to state 51
    BoolLiteral                    shift and go to state 52
    CharLiteral                    shift and go to state 53

state 63

    (12) DeclarationAssignmentStatement -> TypeName ID . = Expression ;
    (13) DeclarationStatement -> TypeName ID . ;

    =               shift and go to state 80
    ;               shift and go to state 81


state 64

    (22) IfElseStatement -> IF ( . Expression ) Block ELSE Block
    (18) Expression -> . UnaryExpression
    (48) UnaryExpression -> . Negate
    (49) UnaryExpression -> . IncrementAfter
    (50) UnaryExpression -> . IncrementBefore
    (51) UnaryExpression -> . DecrementAfter
    (52) UnaryExpression -> . DecrementBefore
    (53) UnaryExpression -> . FunctionCall
    (54) UnaryExpression -> . ID
    (55) UnaryExpression -> . Literal
    (29) Negate -> . - ID
    (23) IncrementAfter -> . ID INC
    (24) IncrementBefore -> . INC ID
    (14) DecrementAfter -> . ID DEC
    (15) DecrementBefore -> . DEC ID
    (20) FunctionCall -> . ID ( ArgumentListR )
    (26) Literal -> . IntLiteral
    (27) Literal -> . BoolLiteral
    (28) Literal -> . CharLiteral
    (25) IntLiteral -> . INTL
    (7) BoolLiteral -> . BOOLL
    (10) CharLiteral -> . CHARL

    ID              shift and go to state 71
    -               shift and go to state 48
    INC             shift and go to state 49
    DEC             shift and go to state 50
    INTL            shift and go to state 39
    BOOLL           shift and go to state 54
    CHARL           shift and go to state 55

    Expression                     shift and go to state 82
    UnaryExpression                shift and go to state 34
    Negate                         shift and go to state 41
    IncrementAfter                 shift and go to state 42
    IncrementBefore                shift and go to state 43
    DecrementAfter                 shift and go to state 44
    DecrementBefore                shift and go to state 45
    FunctionCall                   shift and go to state 46
    Literal                        shift and go to state 47
    IntLiteral                     shift and go to state 51
    BoolLiteral                    shift and go to state 52
    CharLiteral                    shift and go to state 53

state 65

    (19) ForStatement -> FOR ( . Statement ; Expression ; Statement ) Block
    (36) Statement -> . AssignmentStatement
    (37) Statement -> . DeclarationAssignmentStatement
    (38) Statement -> . Expression ;
    (39) Statement -> . DeclarationStatement
    (40) Statement -> . IfElseStatement
    (41) Statement -> . ForStatement
    (42) Statement -> . WhileStatement
    (43) Statement -> . BreakStatement
    (44) Statement -> . ReturnStatement
    (5) AssignmentStatement -> . ID = Expression ;
    (12) DeclarationAssignmentStatement -> . TypeName ID = Expression ;
    (18) Expression -> . UnaryExpression
    (13) DeclarationStatement -> . TypeName ID ;
    (22) IfElseStatement -> . IF ( Expression ) Block ELSE Block
    (19) ForStatement -> . FOR ( Statement ; Expression ; Statement ) Block
    (56) WhileStatement -> . WHILE ( Expression ) Block
    (8) BreakStatement -> . BREAK INTL ;
    (9) BreakStatement -> . BREAK ;
    (34) ReturnStatement -> . RETURN Expression ;
    (35) ReturnStatement -> . RETURN ;
    (47) TypeName -> . ID
    (48) UnaryExpression -> . Negate
    (49) UnaryExpression -> . IncrementAfter
    (50) UnaryExpression -> . IncrementBefore
    (51) UnaryExpression -> . DecrementAfter
    (52) UnaryExpression -> . DecrementBefore
    (53) UnaryExpression -> . FunctionCall
    (54) UnaryExpression -> . ID
    (55) UnaryExpression -> . Literal
    (29) Negate -> . - ID
    (23) IncrementAfter -> . ID INC
    (24) IncrementBefore -> . INC ID
    (14) DecrementAfter -> . ID DEC
    (15) DecrementBefore -> . DEC ID
    (20) FunctionCall -> . ID ( ArgumentListR )
    (26) Literal -> . IntLiteral
    (27) Literal -> . BoolLiteral
    (28) Literal -> . CharLiteral
    (25) IntLiteral -> . INTL
    (7) BoolLiteral -> . BOOLL
    (10) CharLiteral -> . CHARL

    ID              shift and go to state 32
    IF              shift and go to state 35
    FOR             shift and go to state 36
    WHILE           shift and go to state 37
    BREAK           shift and go to state 38
    RETURN          shift and go to state 40
    -               shift and go to state 48
    INC             shift and go to state 49
    DEC             shift and go to state 50
    INTL            shift and go to state 39
    BOOLL           shift and go to state 54
    CHARL           shift and go to state 55

    Statement                      shift and go to state 83
    Expression                     shift and go to state 25
    AssignmentStatement            shift and go to state 23
    DeclarationAssignmentStatement shift and go to state 24
    DeclarationStatement           shift and go to state 26
    IfElseStatement                shift and go to state 27
    ForStatement                   shift and go to state 28
    WhileStatement                 shift and go to state 29
    BreakStatement                 shift and go to state 30
    ReturnStatement                shift and go to state 31
    TypeName                       shift and go to state 33
    UnaryExpression                shift and go to state 34
    Negate                         shift and go to state 41
    IncrementAfter                 shift and go to state 42
    IncrementBefore                shift and go to state 43
    DecrementAfter                 shift and go to state 44
    DecrementBefore                shift and go to state 45
    FunctionCall                   shift and go to state 46
    Literal                        shift and go to state 47
    IntLiteral                     shift and go to state 51
    BoolLiteral                    shift and go to state 52
    CharLiteral                    shift and go to state 53

state 66

    (56) WhileStatement -> WHILE ( . Expression ) Block
    (18) Expression -> . UnaryExpression
    (48) UnaryExpression -> . Negate
    (49) UnaryExpression -> . IncrementAfter
    (50) UnaryExpression -> . IncrementBefore
    (51) UnaryExpression -> . DecrementAfter
    (52) UnaryExpression -> . DecrementBefore
    (53) UnaryExpression -> . FunctionCall
    (54) UnaryExpression -> . ID
    (55) UnaryExpression -> . Literal
    (29) Negate -> . - ID
    (23) IncrementAfter -> . ID INC
    (24) IncrementBefore -> . INC ID
    (14) DecrementAfter -> . ID DEC
    (15) DecrementBefore -> . DEC ID
    (20) FunctionCall -> . ID ( ArgumentListR )
    (26) Literal -> . IntLiteral
    (27) Literal -> . BoolLiteral
    (28) Literal -> . CharLiteral
    (25) IntLiteral -> . INTL
    (7) BoolLiteral -> . BOOLL
    (10) CharLiteral -> . CHARL

    ID              shift and go to state 71
    -               shift and go to state 48
    INC             shift and go to state 49
    DEC             shift and go to state 50
    INTL            shift and go to state 39
    BOOLL           shift and go to state 54
    CHARL           shift and go to state 55

    Expression                     shift and go to state 84
    UnaryExpression                shift and go to state 34
    Negate                         shift and go to state 41
    IncrementAfter                 shift and go to state 42
    IncrementBefore                shift and go to state 43
    DecrementAfter                 shift and go to state 44
    DecrementBefore                shift and go to state 45
    FunctionCall                   shift and go to state 46
    Literal                        shift and go to state 47
    IntLiteral                     shift and go to state 51
    BoolLiteral                    shift and go to state 52
    CharLiteral                    shift and go to state 53

state 67

    (8) BreakStatement -> BREAK INTL . ;

    ;               shift and go to state 85


state 68

    (9) BreakStatement -> BREAK ; .

    ID              reduce using rule 9 (BreakStatement -> BREAK ; .)
    IF              reduce using rule 9 (BreakStatement -> BREAK ; .)
    FOR             reduce using rule 9 (BreakStatement -> BREAK ; .)
    WHILE           reduce using rule 9 (BreakStatement -> BREAK ; .)
    BREAK           reduce using rule 9 (BreakStatement -> BREAK ; .)
    RETURN          reduce using rule 9 (BreakStatement -> BREAK ; .)
    -               reduce using rule 9 (BreakStatement -> BREAK ; .)
    INC             reduce using rule 9 (BreakStatement -> BREAK ; .)
    DEC             reduce using rule 9 (BreakStatement -> BREAK ; .)
    INTL            reduce using rule 9 (BreakStatement -> BREAK ; .)
    BOOLL           reduce using rule 9 (BreakStatement -> BREAK ; .)
    CHARL           reduce using rule 9 (BreakStatement -> BREAK ; .)
    }               reduce using rule 9 (BreakStatement -> BREAK ; .)
    ;               reduce using rule 9 (BreakStatement -> BREAK ; .)
    )               reduce using rule 9 (BreakStatement -> BREAK ; .)


state 69

    (34) ReturnStatement -> RETURN Expression . ;

    ;               shift and go to state 86


state 70

    (35) ReturnStatement -> RETURN ; .

    ID              reduce using rule 35 (ReturnStatement -> RETURN ; .)
    IF              reduce using rule 35 (ReturnStatement -> RETURN ; .)
    FOR             reduce using rule 35 (ReturnStatement -> RETURN ; .)
    WHILE           reduce using rule 35 (ReturnStatement -> RETURN ; .)
    BREAK           reduce using rule 35 (ReturnStatement -> RETURN ; .)
    RETURN          reduce using rule 35 (ReturnStatement -> RETURN ; .)
    -               reduce using rule 35 (ReturnStatement -> RETURN ; .)
    INC             reduce using rule 35 (ReturnStatement -> RETURN ; .)
    DEC             reduce using rule 35 (ReturnStatement -> RETURN ; .)
    INTL            reduce using rule 35 (ReturnStatement -> RETURN ; .)
    BOOLL           reduce using rule 35 (ReturnStatement -> RETURN ; .)
    CHARL           reduce using rule 35 (ReturnStatement -> RETURN ; .)
    }               reduce using rule 35 (ReturnStatement -> RETURN ; .)
    ;               reduce using rule 35 (ReturnStatement -> RETURN ; .)
    )               reduce using rule 35 (ReturnStatement -> RETURN ; .)


state 71

    (54) UnaryExpression -> ID .
    (23) IncrementAfter -> ID . INC
    (14) DecrementAfter -> ID . DEC
    (20) FunctionCall -> ID . ( ArgumentListR )

    ;               reduce using rule 54 (UnaryExpression -> ID .)
    ,               reduce using rule 54 (UnaryExpression -> ID .)
    )               reduce using rule 54 (UnaryExpression -> ID .)
    INC             shift and go to state 60
    DEC             shift and go to state 61
    (               shift and go to state 62


state 72

    (29) Negate -> - ID .

    ;               reduce using rule 29 (Negate -> - ID .)
    ,               reduce using rule 29 (Negate -> - ID .)
    )               reduce using rule 29 (Negate -> - ID .)


state 73

    (24) IncrementBefore -> INC ID .

    ;               reduce using rule 24 (IncrementBefore -> INC ID .)
    ,               reduce using rule 24 (IncrementBefore -> INC ID .)
    )               reduce using rule 24 (IncrementBefore -> INC ID .)


state 74

    (15) DecrementBefore -> DEC ID .

    ;               reduce using rule 15 (DecrementBefore -> DEC ID .)
    ,               reduce using rule 15 (DecrementBefore -> DEC ID .)
    )               reduce using rule 15 (DecrementBefore -> DEC ID .)


state 75

    (5) AssignmentStatement -> ID = Expression . ;

    ;               shift and go to state 87


state 76

    (20) FunctionCall -> ID ( ArgumentListR . )

    )               shift and go to state 88


state 77

    (2) ArgumentListR -> Argument . , ArgumentListR
    (3) ArgumentListR -> Argument .

    ,               shift and go to state 89
    )               reduce using rule 3 (ArgumentListR -> Argument .)


state 78

    (4) ArgumentListR -> empty .

    )               reduce using rule 4 (ArgumentListR -> empty .)


state 79

    (1) Argument -> Expression .

    ,               reduce using rule 1 (Argument -> Expression .)
    )               reduce using rule 1 (Argument -> Expression .)


state 80

    (12) DeclarationAssignmentStatement -> TypeName ID = . Expression ;
    (18) Expression -> . UnaryExpression
    (48) UnaryExpression -> . Negate
    (49) UnaryExpression -> . IncrementAfter
    (50) UnaryExpression -> . IncrementBefore
    (51) UnaryExpression -> . DecrementAfter
    (52) UnaryExpression -> . DecrementBefore
    (53) UnaryExpression -> . FunctionCall
    (54) UnaryExpression -> . ID
    (55) UnaryExpression -> . Literal
    (29) Negate -> . - ID
    (23) IncrementAfter -> . ID INC
    (24) IncrementBefore -> . INC ID
    (14) DecrementAfter -> . ID DEC
    (15) DecrementBefore -> . DEC ID
    (20) FunctionCall -> . ID ( ArgumentListR )
    (26) Literal -> . IntLiteral
    (27) Literal -> . BoolLiteral
    (28) Literal -> . CharLiteral
    (25) IntLiteral -> . INTL
    (7) BoolLiteral -> . BOOLL
    (10) CharLiteral -> . CHARL

    ID              shift and go to state 71
    -               shift and go to state 48
    INC             shift and go to state 49
    DEC             shift and go to state 50
    INTL            shift and go to state 39
    BOOLL           shift and go to state 54
    CHARL           shift and go to state 55

    Expression                     shift and go to state 90
    UnaryExpression                shift and go to state 34
    Negate                         shift and go to state 41
    IncrementAfter                 shift and go to state 42
    IncrementBefore                shift and go to state 43
    DecrementAfter                 shift and go to state 44
    DecrementBefore                shift and go to state 45
    FunctionCall                   shift and go to state 46
    Literal                        shift and go to state 47
    IntLiteral                     shift and go to state 51
    BoolLiteral                    shift and go to state 52
    CharLiteral                    shift and go to state 53

state 81

    (13) DeclarationStatement -> TypeName ID ; .

    ID              reduce using rule 13 (DeclarationStatement -> TypeName ID ; .)
    IF              reduce using rule 13 (DeclarationStatement -> TypeName ID ; .)
    FOR             reduce using rule 13 (DeclarationStatement -> TypeName ID ; .)
    WHILE           reduce using rule 13 (DeclarationStatement -> TypeName ID ; .)
    BREAK           reduce using rule 13 (DeclarationStatement -> TypeName ID ; .)
    RETURN          reduce using rule 13 (DeclarationStatement -> TypeName ID ; .)
    -               reduce using rule 13 (DeclarationStatement -> TypeName ID ; .)
    INC             reduce using rule 13 (DeclarationStatement -> TypeName ID ; .)
    DEC             reduce using rule 13 (DeclarationStatement -> TypeName ID ; .)
    INTL            reduce using rule 13 (DeclarationStatement -> TypeName ID ; .)
    BOOLL           reduce using rule 13 (DeclarationStatement -> TypeName ID ; .)
    CHARL           reduce using rule 13 (DeclarationStatement -> TypeName ID ; .)
    }               reduce using rule 13 (DeclarationStatement -> TypeName ID ; .)
    ;               reduce using rule 13 (DeclarationStatement -> TypeName ID ; .)
    )               reduce using rule 13 (DeclarationStatement -> TypeName ID ; .)


state 82

    (22) IfElseStatement -> IF ( Expression . ) Block ELSE Block

    )               shift and go to state 91


state 83

    (19) ForStatement -> FOR ( Statement . ; Expression ; Statement ) Block

    ;               shift and go to state 92


state 84

    (56) WhileStatement -> WHILE ( Expression . ) Block

    )               shift and go to state 93


state 85

    (8) BreakStatement -> BREAK INTL ; .

    ID              reduce using rule 8 (BreakStatement -> BREAK INTL ; .)
    IF              reduce using rule 8 (BreakStatement -> BREAK INTL ; .)
    FOR             reduce using rule 8 (BreakStatement -> BREAK INTL ; .)
    WHILE           reduce using rule 8 (BreakStatement -> BREAK INTL ; .)
    BREAK           reduce using rule 8 (BreakStatement -> BREAK INTL ; .)
    RETURN          reduce using rule 8 (BreakStatement -> BREAK INTL ; .)
    -               reduce using rule 8 (BreakStatement -> BREAK INTL ; .)
    INC             reduce using rule 8 (BreakStatement -> BREAK INTL ; .)
    DEC             reduce using rule 8 (BreakStatement -> BREAK INTL ; .)
    INTL            reduce using rule 8 (BreakStatement -> BREAK INTL ; .)
    BOOLL           reduce using rule 8 (BreakStatement -> BREAK INTL ; .)
    CHARL           reduce using rule 8 (BreakStatement -> BREAK INTL ; .)
    }               reduce using rule 8 (BreakStatement -> BREAK INTL ; .)
    ;               reduce using rule 8 (BreakStatement -> BREAK INTL ; .)
    )               reduce using rule 8 (BreakStatement -> BREAK INTL ; .)


state 86

    (34) ReturnStatement -> RETURN Expression ; .

    ID              reduce using rule 34 (ReturnStatement -> RETURN Expression ; .)
    IF              reduce using rule 34 (ReturnStatement -> RETURN Expression ; .)
    FOR             reduce using rule 34 (ReturnStatement -> RETURN Expression ; .)
    WHILE           reduce using rule 34 (ReturnStatement -> RETURN Expression ; .)
    BREAK           reduce using rule 34 (ReturnStatement -> RETURN Expression ; .)
    RETURN          reduce using rule 34 (ReturnStatement -> RETURN Expression ; .)
    -               reduce using rule 34 (ReturnStatement -> RETURN Expression ; .)
    INC             reduce using rule 34 (ReturnStatement -> RETURN Expression ; .)
    DEC             reduce using rule 34 (ReturnStatement -> RETURN Expression ; .)
    INTL            reduce using rule 34 (ReturnStatement -> RETURN Expression ; .)
    BOOLL           reduce using rule 34 (ReturnStatement -> RETURN Expression ; .)
    CHARL           reduce using rule 34 (ReturnStatement -> RETURN Expression ; .)
    }               reduce using rule 34 (ReturnStatement -> RETURN Expression ; .)
    ;               reduce using rule 34 (ReturnStatement -> RETURN Expression ; .)
    )               reduce using rule 34 (ReturnStatement -> RETURN Expression ; .)


state 87

    (5) AssignmentStatement -> ID = Expression ; .

    ID              reduce using rule 5 (AssignmentStatement -> ID = Expression ; .)
    IF              reduce using rule 5 (AssignmentStatement -> ID = Expression ; .)
    FOR             reduce using rule 5 (AssignmentStatement -> ID = Expression ; .)
    WHILE           reduce using rule 5 (AssignmentStatement -> ID = Expression ; .)
    BREAK           reduce using rule 5 (AssignmentStatement -> ID = Expression ; .)
    RETURN          reduce using rule 5 (AssignmentStatement -> ID = Expression ; .)
    -               reduce using rule 5 (AssignmentStatement -> ID = Expression ; .)
    INC             reduce using rule 5 (AssignmentStatement -> ID = Expression ; .)
    DEC             reduce using rule 5 (AssignmentStatement -> ID = Expression ; .)
    INTL            reduce using rule 5 (AssignmentStatement -> ID = Expression ; .)
    BOOLL           reduce using rule 5 (AssignmentStatement -> ID = Expression ; .)
    CHARL           reduce using rule 5 (AssignmentStatement -> ID = Expression ; .)
    }               reduce using rule 5 (AssignmentStatement -> ID = Expression ; .)
    ;               reduce using rule 5 (AssignmentStatement -> ID = Expression ; .)
    )               reduce using rule 5 (AssignmentStatement -> ID = Expression ; .)


state 88

    (20) FunctionCall -> ID ( ArgumentListR ) .

    ;               reduce using rule 20 (FunctionCall -> ID ( ArgumentListR ) .)
    ,               reduce using rule 20 (FunctionCall -> ID ( ArgumentListR ) .)
    )               reduce using rule 20 (FunctionCall -> ID ( ArgumentListR ) .)


state 89

    (2) ArgumentListR -> Argument , . ArgumentListR
    (2) ArgumentListR -> . Argument , ArgumentListR
    (3) ArgumentListR -> . Argument
    (4) ArgumentListR -> . empty
    (1) Argument -> . Expression
    (57) empty -> .
    (18) Expression -> . UnaryExpression
    (48) UnaryExpression -> . Negate
    (49) UnaryExpression -> . IncrementAfter
    (50) UnaryExpression -> . IncrementBefore
    (51) UnaryExpression -> . DecrementAfter
    (52) UnaryExpression -> . DecrementBefore
    (53) UnaryExpression -> . FunctionCall
    (54) UnaryExpression -> . ID
    (55) UnaryExpression -> . Literal
    (29) Negate -> . - ID
    (23) IncrementAfter -> . ID INC
    (24) IncrementBefore -> . INC ID
    (14) DecrementAfter -> . ID DEC
    (15) DecrementBefore -> . DEC ID
    (20) FunctionCall -> . ID ( ArgumentListR )
    (26) Literal -> . IntLiteral
    (27) Literal -> . BoolLiteral
    (28) Literal -> . CharLiteral
    (25) IntLiteral -> . INTL
    (7) BoolLiteral -> . BOOLL
    (10) CharLiteral -> . CHARL

    )               reduce using rule 57 (empty -> .)
    ID              shift and go to state 71
    -               shift and go to state 48
    INC             shift and go to state 49
    DEC             shift and go to state 50
    INTL            shift and go to state 39
    BOOLL           shift and go to state 54
    CHARL           shift and go to state 55

    Argument                       shift and go to state 77
    ArgumentListR                  shift and go to state 94
    empty                          shift and go to state 78
    Expression                     shift and go to state 79
    UnaryExpression                shift and go to state 34
    Negate                         shift and go to state 41
    IncrementAfter                 shift and go to state 42
    IncrementBefore                shift and go to state 43
    DecrementAfter                 shift and go to state 44
    DecrementBefore                shift and go to state 45
    FunctionCall                   shift and go to state 46
    Literal                        shift and go to state 47
    IntLiteral                     shift and go to state 51
    BoolLiteral                    shift and go to state 52
    CharLiteral                    shift and go to state 53

state 90

    (12) DeclarationAssignmentStatement -> TypeName ID = Expression . ;

    ;               shift and go to state 95


state 91

    (22) IfElseStatement -> IF ( Expression ) . Block ELSE Block
    (6) Block -> . { StatementListR }

    {               shift and go to state 18

    Block                          shift and go to state 96

state 92

    (19) ForStatement -> FOR ( Statement ; . Expression ; Statement ) Block
    (18) Expression -> . UnaryExpression
    (48) UnaryExpression -> . Negate
    (49) UnaryExpression -> . IncrementAfter
    (50) UnaryExpression -> . IncrementBefore
    (51) UnaryExpression -> . DecrementAfter
    (52) UnaryExpression -> . DecrementBefore
    (53) UnaryExpression -> . FunctionCall
    (54) UnaryExpression -> . ID
    (55) UnaryExpression -> . Literal
    (29) Negate -> . - ID
    (23) IncrementAfter -> . ID INC
    (24) IncrementBefore -> . INC ID
    (14) DecrementAfter -> . ID DEC
    (15) DecrementBefore -> . DEC ID
    (20) FunctionCall -> . ID ( ArgumentListR )
    (26) Literal -> . IntLiteral
    (27) Literal -> . BoolLiteral
    (28) Literal -> . CharLiteral
    (25) IntLiteral -> . INTL
    (7) BoolLiteral -> . BOOLL
    (10) CharLiteral -> . CHARL

    ID              shift and go to state 71
    -               shift and go to state 48
    INC             shift and go to state 49
    DEC             shift and go to state 50
    INTL            shift and go to state 39
    BOOLL           shift and go to state 54
    CHARL           shift and go to state 55

    Expression                     shift and go to state 97
    UnaryExpression                shift and go to state 34
    Negate                         shift and go to state 41
    IncrementAfter                 shift and go to state 42
    IncrementBefore                shift and go to state 43
    DecrementAfter                 shift and go to state 44
    DecrementBefore                shift and go to state 45
    FunctionCall                   shift and go to state 46
    Literal                        shift and go to state 47
    IntLiteral                     shift and go to state 51
    BoolLiteral                    shift and go to state 52
    CharLiteral                    shift and go to state 53

state 93

    (56) WhileStatement -> WHILE ( Expression ) . Block
    (6) Block -> . { StatementListR }

    {               shift and go to state 18

    Block                          shift and go to state 98

state 94

    (2) ArgumentListR -> Argument , ArgumentListR .

    )               reduce using rule 2 (ArgumentListR -> Argument , ArgumentListR .)


state 95

    (12) DeclarationAssignmentStatement -> TypeName ID = Expression ; .

    ID              reduce using rule 12 (DeclarationAssignmentStatement -> TypeName ID = Expression ; .)
    IF              reduce using rule 12 (DeclarationAssignmentStatement -> TypeName ID = Expression ; .)
    FOR             reduce using rule 12 (DeclarationAssignmentStatement -> TypeName ID = Expression ; .)
    WHILE           reduce using rule 12 (DeclarationAssignmentStatement -> TypeName ID = Expression ; .)
    BREAK           reduce using rule 12 (DeclarationAssignmentStatement -> TypeName ID = Expression ; .)
    RETURN          reduce using rule 12 (DeclarationAssignmentStatement -> TypeName ID = Expression ; .)
    -               reduce using rule 12 (DeclarationAssignmentStatement -> TypeName ID = Expression ; .)
    INC             reduce using rule 12 (DeclarationAssignmentStatement -> TypeName ID = Expression ; .)
    DEC             reduce using rule 12 (DeclarationAssignmentStatement -> TypeName ID = Expression ; .)
    INTL            reduce using rule 12 (DeclarationAssignmentStatement -> TypeName ID = Expression ; .)
    BOOLL           reduce using rule 12 (DeclarationAssignmentStatement -> TypeName ID = Expression ; .)
    CHARL           reduce using rule 12 (DeclarationAssignmentStatement -> TypeName ID = Expression ; .)
    }               reduce using rule 12 (DeclarationAssignmentStatement -> TypeName ID = Expression ; .)
    ;               reduce using rule 12 (DeclarationAssignmentStatement -> TypeName ID = Expression ; .)
    )               reduce using rule 12 (DeclarationAssignmentStatement -> TypeName ID = Expression ; .)


state 96

    (22) IfElseStatement -> IF ( Expression ) Block . ELSE Block

    ELSE            shift and go to state 99


state 97

    (19) ForStatement -> FOR ( Statement ; Expression . ; Statement ) Block

    ;               shift and go to state 100


state 98

    (56) WhileStatement -> WHILE ( Expression ) Block .

    ID              reduce using rule 56 (WhileStatement -> WHILE ( Expression ) Block .)
    IF              reduce using rule 56 (WhileStatement -> WHILE ( Expression ) Block .)
    FOR             reduce using rule 56 (WhileStatement -> WHILE ( Expression ) Block .)
    WHILE           reduce using rule 56 (WhileStatement -> WHILE ( Expression ) Block .)
    BREAK           reduce using rule 56 (WhileStatement -> WHILE ( Expression ) Block .)
    RETURN          reduce using rule 56 (WhileStatement -> WHILE ( Expression ) Block .)
    -               reduce using rule 56 (WhileStatement -> WHILE ( Expression ) Block .)
    INC             reduce using rule 56 (WhileStatement -> WHILE ( Expression ) Block .)
    DEC             reduce using rule 56 (WhileStatement -> WHILE ( Expression ) Block .)
    INTL            reduce using rule 56 (WhileStatement -> WHILE ( Expression ) Block .)
    BOOLL           reduce using rule 56 (WhileStatement -> WHILE ( Expression ) Block .)
    CHARL           reduce using rule 56 (WhileStatement -> WHILE ( Expression ) Block .)
    }               reduce using rule 56 (WhileStatement -> WHILE ( Expression ) Block .)
    ;               reduce using rule 56 (WhileStatement -> WHILE ( Expression ) Block .)
    )               reduce using rule 56 (WhileStatement -> WHILE ( Expression ) Block .)


state 99

    (22) IfElseStatement -> IF ( Expression ) Block ELSE . Block
    (6) Block -> . { StatementListR }

    {               shift and go to state 18

    Block                          shift and go to state 101

state 100

    (19) ForStatement -> FOR ( Statement ; Expression ; . Statement ) Block
    (36) Statement -> . AssignmentStatement
    (37) Statement -> . DeclarationAssignmentStatement
    (38) Statement -> . Expression ;
    (39) Statement -> . DeclarationStatement
    (40) Statement -> . IfElseStatement
    (41) Statement -> . ForStatement
    (42) Statement -> . WhileStatement
    (43) Statement -> . BreakStatement
    (44) Statement -> . ReturnStatement
    (5) AssignmentStatement -> . ID = Expression ;
    (12) DeclarationAssignmentStatement -> . TypeName ID = Expression ;
    (18) Expression -> . UnaryExpression
    (13) DeclarationStatement -> . TypeName ID ;
    (22) IfElseStatement -> . IF ( Expression ) Block ELSE Block
    (19) ForStatement -> . FOR ( Statement ; Expression ; Statement ) Block
    (56) WhileStatement -> . WHILE ( Expression ) Block
    (8) BreakStatement -> . BREAK INTL ;
    (9) BreakStatement -> . BREAK ;
    (34) ReturnStatement -> . RETURN Expression ;
    (35) ReturnStatement -> . RETURN ;
    (47) TypeName -> . ID
    (48) UnaryExpression -> . Negate
    (49) UnaryExpression -> . IncrementAfter
    (50) UnaryExpression -> . IncrementBefore
    (51) UnaryExpression -> . DecrementAfter
    (52) UnaryExpression -> . DecrementBefore
    (53) UnaryExpression -> . FunctionCall
    (54) UnaryExpression -> . ID
    (55) UnaryExpression -> . Literal
    (29) Negate -> . - ID
    (23) IncrementAfter -> . ID INC
    (24) IncrementBefore -> . INC ID
    (14) DecrementAfter -> . ID DEC
    (15) DecrementBefore -> . DEC ID
    (20) FunctionCall -> . ID ( ArgumentListR )
    (26) Literal -> . IntLiteral
    (27) Literal -> . BoolLiteral
    (28) Literal -> . CharLiteral
    (25) IntLiteral -> . INTL
    (7) BoolLiteral -> . BOOLL
    (10) CharLiteral -> . CHARL

    ID              shift and go to state 32
    IF              shift and go to state 35
    FOR             shift and go to state 36
    WHILE           shift and go to state 37
    BREAK           shift and go to state 38
    RETURN          shift and go to state 40
    -               shift and go to state 48
    INC             shift and go to state 49
    DEC             shift and go to state 50
    INTL            shift and go to state 39
    BOOLL           shift and go to state 54
    CHARL           shift and go to state 55

    Statement                      shift and go to state 102
    Expression                     shift and go to state 25
    AssignmentStatement            shift and go to state 23
    DeclarationAssignmentStatement shift and go to state 24
    DeclarationStatement           shift and go to state 26
    IfElseStatement                shift and go to state 27
    ForStatement                   shift and go to state 28
    WhileStatement                 shift and go to state 29
    BreakStatement                 shift and go to state 30
    ReturnStatement                shift and go to state 31
    TypeName                       shift and go to state 33
    UnaryExpression                shift and go to state 34
    Negate                         shift and go to state 41
    IncrementAfter                 shift and go to state 42
    IncrementBefore                shift and go to state 43
    DecrementAfter                 shift and go to state 44
    DecrementBefore                shift and go to state 45
    FunctionCall                   shift and go to state 46
    Literal                        shift and go to state 47
    IntLiteral                     shift and go to state 51
    BoolLiteral                    shift and go to state 52
    CharLiteral                    shift and go to state 53

state 101

    (22) IfElseStatement -> IF ( Expression ) Block ELSE Block .

    ID              reduce using rule 22 (IfElseStatement -> IF ( Expression ) Block ELSE Block .)
    IF              reduce using rule 22 (IfElseStatement -> IF ( Expression ) Block ELSE Block .)
    FOR             reduce using rule 22 (IfElseStatement -> IF ( Expression ) Block ELSE Block .)
    WHILE           reduce using rule 22 (IfElseStatement -> IF ( Expression ) Block ELSE Block .)
    BREAK           reduce using rule 22 (IfElseStatement -> IF ( Expression ) Block ELSE Block .)
    RETURN          reduce using rule 22 (IfElseStatement -> IF ( Expression ) Block ELSE Block .)
    -               reduce using rule 22 (IfElseStatement -> IF ( Expression ) Block ELSE Block .)
    INC             reduce using rule 22 (IfElseStatement -> IF ( Expression ) Block ELSE Block .)
    DEC             reduce using rule 22 (IfElseStatement -> IF ( Expression ) Block ELSE Block .)
    INTL            reduce using rule 22 (IfElseStatement -> IF ( Expression ) Block ELSE Block .)
    BOOLL           reduce using rule 22 (IfElseStatement -> IF ( Expression ) Block ELSE Block .)
    CHARL           reduce using rule 22 (IfElseStatement -> IF ( Expression ) Block ELSE Block .)
    }               reduce using rule 22 (IfElseStatement -> IF ( Expression ) Block ELSE Block .)
    ;               reduce using rule 22 (IfElseStatement -> IF ( Expression ) Block ELSE Block .)
    )               reduce using rule 22 (IfElseStatement -> IF ( Expression ) Block ELSE Block .)


state 102

    (19) ForStatement -> FOR ( Statement ; Expression ; Statement . ) Block

    )               shift and go to state 103


state 103

    (19) ForStatement -> FOR ( Statement ; Expression ; Statement ) . Block
    (6) Block -> . { StatementListR }

    {               shift and go to state 18

    Block                          shift and go to state 104

state 104

    (19) ForStatement -> FOR ( Statement ; Expression ; Statement ) Block .

    ID              reduce using rule 19 (ForStatement -> FOR ( Statement ; Expression ; Statement ) Block .)
    IF              reduce using rule 19 (ForStatement -> FOR ( Statement ; Expression ; Statement ) Block .)
    FOR             reduce using rule 19 (ForStatement -> FOR ( Statement ; Expression ; Statement ) Block .)
    WHILE           reduce using rule 19 (ForStatement -> FOR ( Statement ; Expression ; Statement ) Block .)
    BREAK           reduce using rule 19 (ForStatement -> FOR ( Statement ; Expression ; Statement ) Block .)
    RETURN          reduce using rule 19 (ForStatement -> FOR ( Statement ; Expression ; Statement ) Block .)
    -               reduce using rule 19 (ForStatement -> FOR ( Statement ; Expression ; Statement ) Block .)
    INC             reduce using rule 19 (ForStatement -> FOR ( Statement ; Expression ; Statement ) Block .)
    DEC             reduce using rule 19 (ForStatement -> FOR ( Statement ; Expression ; Statement ) Block .)
    INTL            reduce using rule 19 (ForStatement -> FOR ( Statement ; Expression ; Statement ) Block .)
    BOOLL           reduce using rule 19 (ForStatement -> FOR ( Statement ; Expression ; Statement ) Block .)
    CHARL           reduce using rule 19 (ForStatement -> FOR ( Statement ; Expression ; Statement ) Block .)
    }               reduce using rule 19 (ForStatement -> FOR ( Statement ; Expression ; Statement ) Block .)
    ;               reduce using rule 19 (ForStatement -> FOR ( Statement ; Expression ; Statement ) Block .)
    )               reduce using rule 19 (ForStatement -> FOR ( Statement ; Expression ; Statement ) Block .)

