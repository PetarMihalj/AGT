Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> CompilationUnit
Rule 1     Argument -> Expression
Rule 2     ArgumentListR -> Argument COMMA ArgumentListR
Rule 3     ArgumentListR -> Argument
Rule 4     ArgumentListR -> empty
Rule 5     AssignmentStatement -> IdListR ASSIGNMENT Expression SEMICOLON
Rule 6     AssignmentStatement -> IdListR ASSIGNMENT Expression
Rule 7     BinaryExpression -> Expression PLUS Expression
Rule 8     BinaryExpression -> Expression MINUS Expression
Rule 9     BinaryExpression -> Expression TIMES Expression
Rule 10    BinaryExpression -> Expression DIVIDE Expression
Rule 11    BinaryExpression -> Expression MOD Expression
Rule 12    BinaryExpression -> Expression LEQ Expression
Rule 13    BinaryExpression -> Expression GEQ Expression
Rule 14    BinaryExpression -> Expression LT Expression
Rule 15    BinaryExpression -> Expression GT Expression
Rule 16    BinaryExpression -> Expression EQ Expression
Rule 17    BinaryExpression -> Expression NE Expression
Rule 18    BlankStatement -> ;
Rule 19    Block -> LBRACE StatementListR RBRACE
Rule 20    BlockStatement -> Block
Rule 21    BoolLiteral -> BOOLL
Rule 22    BracketCall -> IdListR LBRACKET Expression RBRACKET
Rule 23    BreakStatement -> BREAK INTL SEMICOLON
Rule 24    BreakStatement -> BREAK SEMICOLON
Rule 25    CompilationUnit -> DefinitionListR
Rule 26    DeclarationAssignmentStatement -> Type ID ASSIGNMENT Expression SEMICOLON
Rule 27    DeclarationFunctionCallStatement -> Type FunctionCall SEMICOLON
Rule 28    DeclarationStatement -> Type ID SEMICOLON
Rule 29    DefinitionListR -> FunctionDefinition DefinitionListR
Rule 30    DefinitionListR -> StructDefinition DefinitionListR
Rule 31    DefinitionListR -> empty
Rule 32    Expression -> BinaryExpression
Rule 33    Expression -> UnaryExpression
Rule 34    ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block
Rule 35    FunctionCall -> ID LPAREN ArgumentListR RPAREN
Rule 36    FunctionCall -> ID LT TypeParameterListR GT LPAREN ArgumentListR RPAREN
Rule 37    FunctionDefinition -> ID ID LPAREN ParameterListR RPAREN Block
Rule 38    FunctionDefinition -> ID ID LT TypeParameterListR GT LPAREN ParameterListR RPAREN Block
Rule 39    IdListR -> ID DOT IdListR
Rule 40    IdListR -> ID
Rule 41    IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block
Rule 42    IntLiteral -> INTL
Rule 43    Literal -> IntLiteral
Rule 44    Literal -> BoolLiteral
Rule 45    Parameter -> Type ID
Rule 46    ParameterListR -> Parameter COMMA ParameterListR
Rule 47    ParameterListR -> Parameter
Rule 48    ParameterListR -> empty
Rule 49    PointerListR -> TIMES PointerListR
Rule 50    PointerListR -> empty
Rule 51    ReturnStatement -> RETURN Expression SEMICOLON
Rule 52    ReturnStatement -> RETURN SEMICOLON
Rule 53    Statement -> AssignmentStatement
Rule 54    Statement -> DeclarationAssignmentStatement
Rule 55    Statement -> DeclarationFunctionCallStatement
Rule 56    Statement -> DeclarationStatement
Rule 57    Statement -> Expression SEMICOLON
Rule 58    Statement -> IfElseStatement
Rule 59    Statement -> ForStatement
Rule 60    Statement -> WhileStatement
Rule 61    Statement -> BreakStatement
Rule 62    Statement -> ReturnStatement
Rule 63    Statement -> BlockStatement
Rule 64    Statement -> BlankStatement
Rule 65    StatementListR -> Statement StatementListR
Rule 66    StatementListR -> empty
Rule 67    StructDefinition -> STRUCT ID LT TypeParameterListR GT LBRACE StructMemberDeclarationListR RBRACE
Rule 68    StructDefinition -> STRUCT ID LBRACE StructMemberDeclarationListR RBRACE
Rule 69    StructMemberDeclarationListR -> DeclarationStatement StructMemberDeclarationListR
Rule 70    StructMemberDeclarationListR -> empty
Rule 71    Type -> ID PointerListR
Rule 72    Type -> ID LT TypeParameterListR GT PointerListR
Rule 73    TypeParameter -> ID
Rule 74    TypeParameterListR -> TypeParameter COMMA TypeParameterListR
Rule 75    TypeParameterListR -> TypeParameter
Rule 76    TypeParameterListR -> empty
Rule 77    UnaryExpression -> IdListR
Rule 78    UnaryExpression -> Literal
Rule 79    UnaryExpression -> FunctionCall
Rule 80    UnaryExpression -> BracketCall
Rule 81    UnaryExpression -> LPAREN Expression RPAREN
Rule 82    WhileStatement -> WHILE LPAREN Expression RPAREN Block
Rule 83    empty -> <empty>

Terminals, with rules where they appear

;                    : 18
ASSIGNMENT           : 5 6 26
BOOLL                : 21
BREAK                : 23 24
COMMA                : 2 46 74
DIVIDE               : 10
DOT                  : 39
ELSE                 : 41
EQ                   : 16
FOR                  : 34
GEQ                  : 13
GT                   : 15 36 38 67 72
ID                   : 26 28 35 36 37 37 38 38 39 40 45 67 68 71 72 73
IF                   : 41
INTL                 : 23 42
LBRACE               : 19 67 68
LBRACKET             : 22
LEQ                  : 12
LPAREN               : 34 35 36 37 38 41 81 82
LT                   : 14 36 38 67 72
MINUS                : 8
MOD                  : 11
NE                   : 17
PLUS                 : 7
RBRACE               : 19 67 68
RBRACKET             : 22
RETURN               : 51 52
RPAREN               : 34 35 36 37 38 41 81 82
SEMICOLON            : 5 23 24 26 27 28 34 51 52 57
STRUCT               : 67 68
TIMES                : 9 49
WHILE                : 82
error                : 

Nonterminals, with rules where they appear

Argument             : 2 3
ArgumentListR        : 2 35 36
AssignmentStatement  : 53
BinaryExpression     : 32
BlankStatement       : 64
Block                : 20 34 37 38 41 41 82
BlockStatement       : 63
BoolLiteral          : 44
BracketCall          : 80
BreakStatement       : 61
CompilationUnit      : 0
DeclarationAssignmentStatement : 54
DeclarationFunctionCallStatement : 55
DeclarationStatement : 56 69
DefinitionListR      : 25 29 30
Expression           : 1 5 6 7 7 8 8 9 9 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17 17 22 26 34 41 51 57 81 82
ForStatement         : 59
FunctionCall         : 27 79
FunctionDefinition   : 29
IdListR              : 5 6 22 39 77
IfElseStatement      : 58
IntLiteral           : 43
Literal              : 78
Parameter            : 46 47
ParameterListR       : 37 38 46
PointerListR         : 49 71 72
ReturnStatement      : 62
Statement            : 34 34 65
StatementListR       : 19 65
StructDefinition     : 30
StructMemberDeclarationListR : 67 68 69
Type                 : 26 27 28 45
TypeParameter        : 74 75
TypeParameterListR   : 36 38 67 72 74
UnaryExpression      : 33
WhileStatement       : 60
empty                : 4 31 48 50 66 70 76

Parsing method: LALR

state 0

    (0) S' -> . CompilationUnit
    (25) CompilationUnit -> . DefinitionListR
    (29) DefinitionListR -> . FunctionDefinition DefinitionListR
    (30) DefinitionListR -> . StructDefinition DefinitionListR
    (31) DefinitionListR -> . empty
    (37) FunctionDefinition -> . ID ID LPAREN ParameterListR RPAREN Block
    (38) FunctionDefinition -> . ID ID LT TypeParameterListR GT LPAREN ParameterListR RPAREN Block
    (67) StructDefinition -> . STRUCT ID LT TypeParameterListR GT LBRACE StructMemberDeclarationListR RBRACE
    (68) StructDefinition -> . STRUCT ID LBRACE StructMemberDeclarationListR RBRACE
    (83) empty -> .

    ID              shift and go to state 6
    STRUCT          shift and go to state 7
    $end            reduce using rule 83 (empty -> .)

    CompilationUnit                shift and go to state 1
    DefinitionListR                shift and go to state 2
    FunctionDefinition             shift and go to state 3
    StructDefinition               shift and go to state 4
    empty                          shift and go to state 5

state 1

    (0) S' -> CompilationUnit .



state 2

    (25) CompilationUnit -> DefinitionListR .

    $end            reduce using rule 25 (CompilationUnit -> DefinitionListR .)


state 3

    (29) DefinitionListR -> FunctionDefinition . DefinitionListR
    (29) DefinitionListR -> . FunctionDefinition DefinitionListR
    (30) DefinitionListR -> . StructDefinition DefinitionListR
    (31) DefinitionListR -> . empty
    (37) FunctionDefinition -> . ID ID LPAREN ParameterListR RPAREN Block
    (38) FunctionDefinition -> . ID ID LT TypeParameterListR GT LPAREN ParameterListR RPAREN Block
    (67) StructDefinition -> . STRUCT ID LT TypeParameterListR GT LBRACE StructMemberDeclarationListR RBRACE
    (68) StructDefinition -> . STRUCT ID LBRACE StructMemberDeclarationListR RBRACE
    (83) empty -> .

    ID              shift and go to state 6
    STRUCT          shift and go to state 7
    $end            reduce using rule 83 (empty -> .)

    FunctionDefinition             shift and go to state 3
    DefinitionListR                shift and go to state 8
    StructDefinition               shift and go to state 4
    empty                          shift and go to state 5

state 4

    (30) DefinitionListR -> StructDefinition . DefinitionListR
    (29) DefinitionListR -> . FunctionDefinition DefinitionListR
    (30) DefinitionListR -> . StructDefinition DefinitionListR
    (31) DefinitionListR -> . empty
    (37) FunctionDefinition -> . ID ID LPAREN ParameterListR RPAREN Block
    (38) FunctionDefinition -> . ID ID LT TypeParameterListR GT LPAREN ParameterListR RPAREN Block
    (67) StructDefinition -> . STRUCT ID LT TypeParameterListR GT LBRACE StructMemberDeclarationListR RBRACE
    (68) StructDefinition -> . STRUCT ID LBRACE StructMemberDeclarationListR RBRACE
    (83) empty -> .

    ID              shift and go to state 6
    STRUCT          shift and go to state 7
    $end            reduce using rule 83 (empty -> .)

    StructDefinition               shift and go to state 4
    DefinitionListR                shift and go to state 9
    FunctionDefinition             shift and go to state 3
    empty                          shift and go to state 5

state 5

    (31) DefinitionListR -> empty .

    $end            reduce using rule 31 (DefinitionListR -> empty .)


state 6

    (37) FunctionDefinition -> ID . ID LPAREN ParameterListR RPAREN Block
    (38) FunctionDefinition -> ID . ID LT TypeParameterListR GT LPAREN ParameterListR RPAREN Block

    ID              shift and go to state 10


state 7

    (67) StructDefinition -> STRUCT . ID LT TypeParameterListR GT LBRACE StructMemberDeclarationListR RBRACE
    (68) StructDefinition -> STRUCT . ID LBRACE StructMemberDeclarationListR RBRACE

    ID              shift and go to state 11


state 8

    (29) DefinitionListR -> FunctionDefinition DefinitionListR .

    $end            reduce using rule 29 (DefinitionListR -> FunctionDefinition DefinitionListR .)


state 9

    (30) DefinitionListR -> StructDefinition DefinitionListR .

    $end            reduce using rule 30 (DefinitionListR -> StructDefinition DefinitionListR .)


state 10

    (37) FunctionDefinition -> ID ID . LPAREN ParameterListR RPAREN Block
    (38) FunctionDefinition -> ID ID . LT TypeParameterListR GT LPAREN ParameterListR RPAREN Block

    LPAREN          shift and go to state 12
    LT              shift and go to state 13


state 11

    (67) StructDefinition -> STRUCT ID . LT TypeParameterListR GT LBRACE StructMemberDeclarationListR RBRACE
    (68) StructDefinition -> STRUCT ID . LBRACE StructMemberDeclarationListR RBRACE

    LT              shift and go to state 14
    LBRACE          shift and go to state 15


state 12

    (37) FunctionDefinition -> ID ID LPAREN . ParameterListR RPAREN Block
    (46) ParameterListR -> . Parameter COMMA ParameterListR
    (47) ParameterListR -> . Parameter
    (48) ParameterListR -> . empty
    (45) Parameter -> . Type ID
    (83) empty -> .
    (71) Type -> . ID PointerListR
    (72) Type -> . ID LT TypeParameterListR GT PointerListR

    RPAREN          reduce using rule 83 (empty -> .)
    ID              shift and go to state 16

    ParameterListR                 shift and go to state 17
    Parameter                      shift and go to state 18
    empty                          shift and go to state 19
    Type                           shift and go to state 20

state 13

    (38) FunctionDefinition -> ID ID LT . TypeParameterListR GT LPAREN ParameterListR RPAREN Block
    (74) TypeParameterListR -> . TypeParameter COMMA TypeParameterListR
    (75) TypeParameterListR -> . TypeParameter
    (76) TypeParameterListR -> . empty
    (73) TypeParameter -> . ID
    (83) empty -> .

    ID              shift and go to state 21
    GT              reduce using rule 83 (empty -> .)

    TypeParameterListR             shift and go to state 22
    TypeParameter                  shift and go to state 23
    empty                          shift and go to state 24

state 14

    (67) StructDefinition -> STRUCT ID LT . TypeParameterListR GT LBRACE StructMemberDeclarationListR RBRACE
    (74) TypeParameterListR -> . TypeParameter COMMA TypeParameterListR
    (75) TypeParameterListR -> . TypeParameter
    (76) TypeParameterListR -> . empty
    (73) TypeParameter -> . ID
    (83) empty -> .

    ID              shift and go to state 21
    GT              reduce using rule 83 (empty -> .)

    TypeParameterListR             shift and go to state 25
    TypeParameter                  shift and go to state 23
    empty                          shift and go to state 24

state 15

    (68) StructDefinition -> STRUCT ID LBRACE . StructMemberDeclarationListR RBRACE
    (69) StructMemberDeclarationListR -> . DeclarationStatement StructMemberDeclarationListR
    (70) StructMemberDeclarationListR -> . empty
    (28) DeclarationStatement -> . Type ID SEMICOLON
    (83) empty -> .
    (71) Type -> . ID PointerListR
    (72) Type -> . ID LT TypeParameterListR GT PointerListR

    RBRACE          reduce using rule 83 (empty -> .)
    ID              shift and go to state 16

    StructMemberDeclarationListR   shift and go to state 26
    DeclarationStatement           shift and go to state 27
    empty                          shift and go to state 28
    Type                           shift and go to state 29

state 16

    (71) Type -> ID . PointerListR
    (72) Type -> ID . LT TypeParameterListR GT PointerListR
    (49) PointerListR -> . TIMES PointerListR
    (50) PointerListR -> . empty
    (83) empty -> .

    LT              shift and go to state 31
    TIMES           shift and go to state 32
    ID              reduce using rule 83 (empty -> .)

    PointerListR                   shift and go to state 30
    empty                          shift and go to state 33

state 17

    (37) FunctionDefinition -> ID ID LPAREN ParameterListR . RPAREN Block

    RPAREN          shift and go to state 34


state 18

    (46) ParameterListR -> Parameter . COMMA ParameterListR
    (47) ParameterListR -> Parameter .

    COMMA           shift and go to state 35
    RPAREN          reduce using rule 47 (ParameterListR -> Parameter .)


state 19

    (48) ParameterListR -> empty .

    RPAREN          reduce using rule 48 (ParameterListR -> empty .)


state 20

    (45) Parameter -> Type . ID

    ID              shift and go to state 36


state 21

    (73) TypeParameter -> ID .

    COMMA           reduce using rule 73 (TypeParameter -> ID .)
    GT              reduce using rule 73 (TypeParameter -> ID .)


state 22

    (38) FunctionDefinition -> ID ID LT TypeParameterListR . GT LPAREN ParameterListR RPAREN Block

    GT              shift and go to state 37


state 23

    (74) TypeParameterListR -> TypeParameter . COMMA TypeParameterListR
    (75) TypeParameterListR -> TypeParameter .

    COMMA           shift and go to state 38
    GT              reduce using rule 75 (TypeParameterListR -> TypeParameter .)


state 24

    (76) TypeParameterListR -> empty .

    GT              reduce using rule 76 (TypeParameterListR -> empty .)


state 25

    (67) StructDefinition -> STRUCT ID LT TypeParameterListR . GT LBRACE StructMemberDeclarationListR RBRACE

    GT              shift and go to state 39


state 26

    (68) StructDefinition -> STRUCT ID LBRACE StructMemberDeclarationListR . RBRACE

    RBRACE          shift and go to state 40


state 27

    (69) StructMemberDeclarationListR -> DeclarationStatement . StructMemberDeclarationListR
    (69) StructMemberDeclarationListR -> . DeclarationStatement StructMemberDeclarationListR
    (70) StructMemberDeclarationListR -> . empty
    (28) DeclarationStatement -> . Type ID SEMICOLON
    (83) empty -> .
    (71) Type -> . ID PointerListR
    (72) Type -> . ID LT TypeParameterListR GT PointerListR

    RBRACE          reduce using rule 83 (empty -> .)
    ID              shift and go to state 16

    DeclarationStatement           shift and go to state 27
    StructMemberDeclarationListR   shift and go to state 41
    empty                          shift and go to state 28
    Type                           shift and go to state 29

state 28

    (70) StructMemberDeclarationListR -> empty .

    RBRACE          reduce using rule 70 (StructMemberDeclarationListR -> empty .)


state 29

    (28) DeclarationStatement -> Type . ID SEMICOLON

    ID              shift and go to state 42


state 30

    (71) Type -> ID PointerListR .

    ID              reduce using rule 71 (Type -> ID PointerListR .)


state 31

    (72) Type -> ID LT . TypeParameterListR GT PointerListR
    (74) TypeParameterListR -> . TypeParameter COMMA TypeParameterListR
    (75) TypeParameterListR -> . TypeParameter
    (76) TypeParameterListR -> . empty
    (73) TypeParameter -> . ID
    (83) empty -> .

    ID              shift and go to state 21
    GT              reduce using rule 83 (empty -> .)

    TypeParameterListR             shift and go to state 43
    TypeParameter                  shift and go to state 23
    empty                          shift and go to state 24

state 32

    (49) PointerListR -> TIMES . PointerListR
    (49) PointerListR -> . TIMES PointerListR
    (50) PointerListR -> . empty
    (83) empty -> .

    TIMES           shift and go to state 32
    ID              reduce using rule 83 (empty -> .)

    PointerListR                   shift and go to state 44
    empty                          shift and go to state 33

state 33

    (50) PointerListR -> empty .

    ID              reduce using rule 50 (PointerListR -> empty .)


state 34

    (37) FunctionDefinition -> ID ID LPAREN ParameterListR RPAREN . Block
    (19) Block -> . LBRACE StatementListR RBRACE

    LBRACE          shift and go to state 46

    Block                          shift and go to state 45

state 35

    (46) ParameterListR -> Parameter COMMA . ParameterListR
    (46) ParameterListR -> . Parameter COMMA ParameterListR
    (47) ParameterListR -> . Parameter
    (48) ParameterListR -> . empty
    (45) Parameter -> . Type ID
    (83) empty -> .
    (71) Type -> . ID PointerListR
    (72) Type -> . ID LT TypeParameterListR GT PointerListR

    RPAREN          reduce using rule 83 (empty -> .)
    ID              shift and go to state 16

    Parameter                      shift and go to state 18
    ParameterListR                 shift and go to state 47
    empty                          shift and go to state 19
    Type                           shift and go to state 20

state 36

    (45) Parameter -> Type ID .

    COMMA           reduce using rule 45 (Parameter -> Type ID .)
    RPAREN          reduce using rule 45 (Parameter -> Type ID .)


state 37

    (38) FunctionDefinition -> ID ID LT TypeParameterListR GT . LPAREN ParameterListR RPAREN Block

    LPAREN          shift and go to state 48


state 38

    (74) TypeParameterListR -> TypeParameter COMMA . TypeParameterListR
    (74) TypeParameterListR -> . TypeParameter COMMA TypeParameterListR
    (75) TypeParameterListR -> . TypeParameter
    (76) TypeParameterListR -> . empty
    (73) TypeParameter -> . ID
    (83) empty -> .

    ID              shift and go to state 21
    GT              reduce using rule 83 (empty -> .)

    TypeParameter                  shift and go to state 23
    TypeParameterListR             shift and go to state 49
    empty                          shift and go to state 24

state 39

    (67) StructDefinition -> STRUCT ID LT TypeParameterListR GT . LBRACE StructMemberDeclarationListR RBRACE

    LBRACE          shift and go to state 50


state 40

    (68) StructDefinition -> STRUCT ID LBRACE StructMemberDeclarationListR RBRACE .

    ID              reduce using rule 68 (StructDefinition -> STRUCT ID LBRACE StructMemberDeclarationListR RBRACE .)
    STRUCT          reduce using rule 68 (StructDefinition -> STRUCT ID LBRACE StructMemberDeclarationListR RBRACE .)
    $end            reduce using rule 68 (StructDefinition -> STRUCT ID LBRACE StructMemberDeclarationListR RBRACE .)


state 41

    (69) StructMemberDeclarationListR -> DeclarationStatement StructMemberDeclarationListR .

    RBRACE          reduce using rule 69 (StructMemberDeclarationListR -> DeclarationStatement StructMemberDeclarationListR .)


state 42

    (28) DeclarationStatement -> Type ID . SEMICOLON

    SEMICOLON       shift and go to state 51


state 43

    (72) Type -> ID LT TypeParameterListR . GT PointerListR

    GT              shift and go to state 52


state 44

    (49) PointerListR -> TIMES PointerListR .

    ID              reduce using rule 49 (PointerListR -> TIMES PointerListR .)


state 45

    (37) FunctionDefinition -> ID ID LPAREN ParameterListR RPAREN Block .

    ID              reduce using rule 37 (FunctionDefinition -> ID ID LPAREN ParameterListR RPAREN Block .)
    STRUCT          reduce using rule 37 (FunctionDefinition -> ID ID LPAREN ParameterListR RPAREN Block .)
    $end            reduce using rule 37 (FunctionDefinition -> ID ID LPAREN ParameterListR RPAREN Block .)


state 46

    (19) Block -> LBRACE . StatementListR RBRACE
    (65) StatementListR -> . Statement StatementListR
    (66) StatementListR -> . empty
    (53) Statement -> . AssignmentStatement
    (54) Statement -> . DeclarationAssignmentStatement
    (55) Statement -> . DeclarationFunctionCallStatement
    (56) Statement -> . DeclarationStatement
    (57) Statement -> . Expression SEMICOLON
    (58) Statement -> . IfElseStatement
    (59) Statement -> . ForStatement
    (60) Statement -> . WhileStatement
    (61) Statement -> . BreakStatement
    (62) Statement -> . ReturnStatement
    (63) Statement -> . BlockStatement
    (64) Statement -> . BlankStatement
    (83) empty -> .
    (5) AssignmentStatement -> . IdListR ASSIGNMENT Expression SEMICOLON
    (6) AssignmentStatement -> . IdListR ASSIGNMENT Expression
    (26) DeclarationAssignmentStatement -> . Type ID ASSIGNMENT Expression SEMICOLON
    (27) DeclarationFunctionCallStatement -> . Type FunctionCall SEMICOLON
    (28) DeclarationStatement -> . Type ID SEMICOLON
    (32) Expression -> . BinaryExpression
    (33) Expression -> . UnaryExpression
    (41) IfElseStatement -> . IF LPAREN Expression RPAREN Block ELSE Block
    (34) ForStatement -> . FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block
    (82) WhileStatement -> . WHILE LPAREN Expression RPAREN Block
    (23) BreakStatement -> . BREAK INTL SEMICOLON
    (24) BreakStatement -> . BREAK SEMICOLON
    (51) ReturnStatement -> . RETURN Expression SEMICOLON
    (52) ReturnStatement -> . RETURN SEMICOLON
    (20) BlockStatement -> . Block
    (18) BlankStatement -> . ;
    (39) IdListR -> . ID DOT IdListR
    (40) IdListR -> . ID
    (71) Type -> . ID PointerListR
    (72) Type -> . ID LT TypeParameterListR GT PointerListR
    (7) BinaryExpression -> . Expression PLUS Expression
    (8) BinaryExpression -> . Expression MINUS Expression
    (9) BinaryExpression -> . Expression TIMES Expression
    (10) BinaryExpression -> . Expression DIVIDE Expression
    (11) BinaryExpression -> . Expression MOD Expression
    (12) BinaryExpression -> . Expression LEQ Expression
    (13) BinaryExpression -> . Expression GEQ Expression
    (14) BinaryExpression -> . Expression LT Expression
    (15) BinaryExpression -> . Expression GT Expression
    (16) BinaryExpression -> . Expression EQ Expression
    (17) BinaryExpression -> . Expression NE Expression
    (77) UnaryExpression -> . IdListR
    (78) UnaryExpression -> . Literal
    (79) UnaryExpression -> . FunctionCall
    (80) UnaryExpression -> . BracketCall
    (81) UnaryExpression -> . LPAREN Expression RPAREN
    (19) Block -> . LBRACE StatementListR RBRACE
    (43) Literal -> . IntLiteral
    (44) Literal -> . BoolLiteral
    (35) FunctionCall -> . ID LPAREN ArgumentListR RPAREN
    (36) FunctionCall -> . ID LT TypeParameterListR GT LPAREN ArgumentListR RPAREN
    (22) BracketCall -> . IdListR LBRACKET Expression RBRACKET
    (42) IntLiteral -> . INTL
    (21) BoolLiteral -> . BOOLL

    RBRACE          reduce using rule 83 (empty -> .)
    IF              shift and go to state 74
    FOR             shift and go to state 77
    WHILE           shift and go to state 78
    BREAK           shift and go to state 79
    RETURN          shift and go to state 81
    ;               shift and go to state 82
    ID              shift and go to state 70
    LPAREN          shift and go to state 75
    LBRACE          shift and go to state 46
    INTL            shift and go to state 80
    BOOLL           shift and go to state 87

    StatementListR                 shift and go to state 53
    Statement                      shift and go to state 54
    empty                          shift and go to state 55
    AssignmentStatement            shift and go to state 56
    DeclarationAssignmentStatement shift and go to state 57
    DeclarationFunctionCallStatement shift and go to state 58
    DeclarationStatement           shift and go to state 59
    Expression                     shift and go to state 60
    IfElseStatement                shift and go to state 61
    ForStatement                   shift and go to state 62
    WhileStatement                 shift and go to state 63
    BreakStatement                 shift and go to state 64
    ReturnStatement                shift and go to state 65
    BlockStatement                 shift and go to state 66
    BlankStatement                 shift and go to state 67
    IdListR                        shift and go to state 68
    Type                           shift and go to state 69
    FunctionCall                   shift and go to state 71
    BinaryExpression               shift and go to state 72
    UnaryExpression                shift and go to state 73
    Block                          shift and go to state 76
    Literal                        shift and go to state 83
    BracketCall                    shift and go to state 84
    IntLiteral                     shift and go to state 85
    BoolLiteral                    shift and go to state 86

state 47

    (46) ParameterListR -> Parameter COMMA ParameterListR .

    RPAREN          reduce using rule 46 (ParameterListR -> Parameter COMMA ParameterListR .)


state 48

    (38) FunctionDefinition -> ID ID LT TypeParameterListR GT LPAREN . ParameterListR RPAREN Block
    (46) ParameterListR -> . Parameter COMMA ParameterListR
    (47) ParameterListR -> . Parameter
    (48) ParameterListR -> . empty
    (45) Parameter -> . Type ID
    (83) empty -> .
    (71) Type -> . ID PointerListR
    (72) Type -> . ID LT TypeParameterListR GT PointerListR

    RPAREN          reduce using rule 83 (empty -> .)
    ID              shift and go to state 16

    ParameterListR                 shift and go to state 88
    Parameter                      shift and go to state 18
    empty                          shift and go to state 19
    Type                           shift and go to state 20

state 49

    (74) TypeParameterListR -> TypeParameter COMMA TypeParameterListR .

    GT              reduce using rule 74 (TypeParameterListR -> TypeParameter COMMA TypeParameterListR .)


state 50

    (67) StructDefinition -> STRUCT ID LT TypeParameterListR GT LBRACE . StructMemberDeclarationListR RBRACE
    (69) StructMemberDeclarationListR -> . DeclarationStatement StructMemberDeclarationListR
    (70) StructMemberDeclarationListR -> . empty
    (28) DeclarationStatement -> . Type ID SEMICOLON
    (83) empty -> .
    (71) Type -> . ID PointerListR
    (72) Type -> . ID LT TypeParameterListR GT PointerListR

    RBRACE          reduce using rule 83 (empty -> .)
    ID              shift and go to state 16

    StructMemberDeclarationListR   shift and go to state 89
    DeclarationStatement           shift and go to state 27
    empty                          shift and go to state 28
    Type                           shift and go to state 29

state 51

    (28) DeclarationStatement -> Type ID SEMICOLON .

    ID              reduce using rule 28 (DeclarationStatement -> Type ID SEMICOLON .)
    RBRACE          reduce using rule 28 (DeclarationStatement -> Type ID SEMICOLON .)
    IF              reduce using rule 28 (DeclarationStatement -> Type ID SEMICOLON .)
    FOR             reduce using rule 28 (DeclarationStatement -> Type ID SEMICOLON .)
    WHILE           reduce using rule 28 (DeclarationStatement -> Type ID SEMICOLON .)
    BREAK           reduce using rule 28 (DeclarationStatement -> Type ID SEMICOLON .)
    RETURN          reduce using rule 28 (DeclarationStatement -> Type ID SEMICOLON .)
    ;               reduce using rule 28 (DeclarationStatement -> Type ID SEMICOLON .)
    LPAREN          reduce using rule 28 (DeclarationStatement -> Type ID SEMICOLON .)
    LBRACE          reduce using rule 28 (DeclarationStatement -> Type ID SEMICOLON .)
    INTL            reduce using rule 28 (DeclarationStatement -> Type ID SEMICOLON .)
    BOOLL           reduce using rule 28 (DeclarationStatement -> Type ID SEMICOLON .)
    RPAREN          reduce using rule 28 (DeclarationStatement -> Type ID SEMICOLON .)


state 52

    (72) Type -> ID LT TypeParameterListR GT . PointerListR
    (49) PointerListR -> . TIMES PointerListR
    (50) PointerListR -> . empty
    (83) empty -> .

    TIMES           shift and go to state 32
    ID              reduce using rule 83 (empty -> .)

    PointerListR                   shift and go to state 90
    empty                          shift and go to state 33

state 53

    (19) Block -> LBRACE StatementListR . RBRACE

    RBRACE          shift and go to state 91


state 54

    (65) StatementListR -> Statement . StatementListR
    (65) StatementListR -> . Statement StatementListR
    (66) StatementListR -> . empty
    (53) Statement -> . AssignmentStatement
    (54) Statement -> . DeclarationAssignmentStatement
    (55) Statement -> . DeclarationFunctionCallStatement
    (56) Statement -> . DeclarationStatement
    (57) Statement -> . Expression SEMICOLON
    (58) Statement -> . IfElseStatement
    (59) Statement -> . ForStatement
    (60) Statement -> . WhileStatement
    (61) Statement -> . BreakStatement
    (62) Statement -> . ReturnStatement
    (63) Statement -> . BlockStatement
    (64) Statement -> . BlankStatement
    (83) empty -> .
    (5) AssignmentStatement -> . IdListR ASSIGNMENT Expression SEMICOLON
    (6) AssignmentStatement -> . IdListR ASSIGNMENT Expression
    (26) DeclarationAssignmentStatement -> . Type ID ASSIGNMENT Expression SEMICOLON
    (27) DeclarationFunctionCallStatement -> . Type FunctionCall SEMICOLON
    (28) DeclarationStatement -> . Type ID SEMICOLON
    (32) Expression -> . BinaryExpression
    (33) Expression -> . UnaryExpression
    (41) IfElseStatement -> . IF LPAREN Expression RPAREN Block ELSE Block
    (34) ForStatement -> . FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block
    (82) WhileStatement -> . WHILE LPAREN Expression RPAREN Block
    (23) BreakStatement -> . BREAK INTL SEMICOLON
    (24) BreakStatement -> . BREAK SEMICOLON
    (51) ReturnStatement -> . RETURN Expression SEMICOLON
    (52) ReturnStatement -> . RETURN SEMICOLON
    (20) BlockStatement -> . Block
    (18) BlankStatement -> . ;
    (39) IdListR -> . ID DOT IdListR
    (40) IdListR -> . ID
    (71) Type -> . ID PointerListR
    (72) Type -> . ID LT TypeParameterListR GT PointerListR
    (7) BinaryExpression -> . Expression PLUS Expression
    (8) BinaryExpression -> . Expression MINUS Expression
    (9) BinaryExpression -> . Expression TIMES Expression
    (10) BinaryExpression -> . Expression DIVIDE Expression
    (11) BinaryExpression -> . Expression MOD Expression
    (12) BinaryExpression -> . Expression LEQ Expression
    (13) BinaryExpression -> . Expression GEQ Expression
    (14) BinaryExpression -> . Expression LT Expression
    (15) BinaryExpression -> . Expression GT Expression
    (16) BinaryExpression -> . Expression EQ Expression
    (17) BinaryExpression -> . Expression NE Expression
    (77) UnaryExpression -> . IdListR
    (78) UnaryExpression -> . Literal
    (79) UnaryExpression -> . FunctionCall
    (80) UnaryExpression -> . BracketCall
    (81) UnaryExpression -> . LPAREN Expression RPAREN
    (19) Block -> . LBRACE StatementListR RBRACE
    (43) Literal -> . IntLiteral
    (44) Literal -> . BoolLiteral
    (35) FunctionCall -> . ID LPAREN ArgumentListR RPAREN
    (36) FunctionCall -> . ID LT TypeParameterListR GT LPAREN ArgumentListR RPAREN
    (22) BracketCall -> . IdListR LBRACKET Expression RBRACKET
    (42) IntLiteral -> . INTL
    (21) BoolLiteral -> . BOOLL

    RBRACE          reduce using rule 83 (empty -> .)
    IF              shift and go to state 74
    FOR             shift and go to state 77
    WHILE           shift and go to state 78
    BREAK           shift and go to state 79
    RETURN          shift and go to state 81
    ;               shift and go to state 82
    ID              shift and go to state 70
    LPAREN          shift and go to state 75
    LBRACE          shift and go to state 46
    INTL            shift and go to state 80
    BOOLL           shift and go to state 87

    Statement                      shift and go to state 54
    StatementListR                 shift and go to state 92
    empty                          shift and go to state 55
    AssignmentStatement            shift and go to state 56
    DeclarationAssignmentStatement shift and go to state 57
    DeclarationFunctionCallStatement shift and go to state 58
    DeclarationStatement           shift and go to state 59
    Expression                     shift and go to state 60
    IfElseStatement                shift and go to state 61
    ForStatement                   shift and go to state 62
    WhileStatement                 shift and go to state 63
    BreakStatement                 shift and go to state 64
    ReturnStatement                shift and go to state 65
    BlockStatement                 shift and go to state 66
    BlankStatement                 shift and go to state 67
    IdListR                        shift and go to state 68
    Type                           shift and go to state 69
    FunctionCall                   shift and go to state 71
    BinaryExpression               shift and go to state 72
    UnaryExpression                shift and go to state 73
    Block                          shift and go to state 76
    Literal                        shift and go to state 83
    BracketCall                    shift and go to state 84
    IntLiteral                     shift and go to state 85
    BoolLiteral                    shift and go to state 86

state 55

    (66) StatementListR -> empty .

    RBRACE          reduce using rule 66 (StatementListR -> empty .)


state 56

    (53) Statement -> AssignmentStatement .

    IF              reduce using rule 53 (Statement -> AssignmentStatement .)
    FOR             reduce using rule 53 (Statement -> AssignmentStatement .)
    WHILE           reduce using rule 53 (Statement -> AssignmentStatement .)
    BREAK           reduce using rule 53 (Statement -> AssignmentStatement .)
    RETURN          reduce using rule 53 (Statement -> AssignmentStatement .)
    ;               reduce using rule 53 (Statement -> AssignmentStatement .)
    ID              reduce using rule 53 (Statement -> AssignmentStatement .)
    LPAREN          reduce using rule 53 (Statement -> AssignmentStatement .)
    LBRACE          reduce using rule 53 (Statement -> AssignmentStatement .)
    INTL            reduce using rule 53 (Statement -> AssignmentStatement .)
    BOOLL           reduce using rule 53 (Statement -> AssignmentStatement .)
    RBRACE          reduce using rule 53 (Statement -> AssignmentStatement .)
    RPAREN          reduce using rule 53 (Statement -> AssignmentStatement .)


state 57

    (54) Statement -> DeclarationAssignmentStatement .

    IF              reduce using rule 54 (Statement -> DeclarationAssignmentStatement .)
    FOR             reduce using rule 54 (Statement -> DeclarationAssignmentStatement .)
    WHILE           reduce using rule 54 (Statement -> DeclarationAssignmentStatement .)
    BREAK           reduce using rule 54 (Statement -> DeclarationAssignmentStatement .)
    RETURN          reduce using rule 54 (Statement -> DeclarationAssignmentStatement .)
    ;               reduce using rule 54 (Statement -> DeclarationAssignmentStatement .)
    ID              reduce using rule 54 (Statement -> DeclarationAssignmentStatement .)
    LPAREN          reduce using rule 54 (Statement -> DeclarationAssignmentStatement .)
    LBRACE          reduce using rule 54 (Statement -> DeclarationAssignmentStatement .)
    INTL            reduce using rule 54 (Statement -> DeclarationAssignmentStatement .)
    BOOLL           reduce using rule 54 (Statement -> DeclarationAssignmentStatement .)
    RBRACE          reduce using rule 54 (Statement -> DeclarationAssignmentStatement .)
    RPAREN          reduce using rule 54 (Statement -> DeclarationAssignmentStatement .)


state 58

    (55) Statement -> DeclarationFunctionCallStatement .

    IF              reduce using rule 55 (Statement -> DeclarationFunctionCallStatement .)
    FOR             reduce using rule 55 (Statement -> DeclarationFunctionCallStatement .)
    WHILE           reduce using rule 55 (Statement -> DeclarationFunctionCallStatement .)
    BREAK           reduce using rule 55 (Statement -> DeclarationFunctionCallStatement .)
    RETURN          reduce using rule 55 (Statement -> DeclarationFunctionCallStatement .)
    ;               reduce using rule 55 (Statement -> DeclarationFunctionCallStatement .)
    ID              reduce using rule 55 (Statement -> DeclarationFunctionCallStatement .)
    LPAREN          reduce using rule 55 (Statement -> DeclarationFunctionCallStatement .)
    LBRACE          reduce using rule 55 (Statement -> DeclarationFunctionCallStatement .)
    INTL            reduce using rule 55 (Statement -> DeclarationFunctionCallStatement .)
    BOOLL           reduce using rule 55 (Statement -> DeclarationFunctionCallStatement .)
    RBRACE          reduce using rule 55 (Statement -> DeclarationFunctionCallStatement .)
    RPAREN          reduce using rule 55 (Statement -> DeclarationFunctionCallStatement .)


state 59

    (56) Statement -> DeclarationStatement .

    IF              reduce using rule 56 (Statement -> DeclarationStatement .)
    FOR             reduce using rule 56 (Statement -> DeclarationStatement .)
    WHILE           reduce using rule 56 (Statement -> DeclarationStatement .)
    BREAK           reduce using rule 56 (Statement -> DeclarationStatement .)
    RETURN          reduce using rule 56 (Statement -> DeclarationStatement .)
    ;               reduce using rule 56 (Statement -> DeclarationStatement .)
    ID              reduce using rule 56 (Statement -> DeclarationStatement .)
    LPAREN          reduce using rule 56 (Statement -> DeclarationStatement .)
    LBRACE          reduce using rule 56 (Statement -> DeclarationStatement .)
    INTL            reduce using rule 56 (Statement -> DeclarationStatement .)
    BOOLL           reduce using rule 56 (Statement -> DeclarationStatement .)
    RBRACE          reduce using rule 56 (Statement -> DeclarationStatement .)
    RPAREN          reduce using rule 56 (Statement -> DeclarationStatement .)


state 60

    (57) Statement -> Expression . SEMICOLON
    (7) BinaryExpression -> Expression . PLUS Expression
    (8) BinaryExpression -> Expression . MINUS Expression
    (9) BinaryExpression -> Expression . TIMES Expression
    (10) BinaryExpression -> Expression . DIVIDE Expression
    (11) BinaryExpression -> Expression . MOD Expression
    (12) BinaryExpression -> Expression . LEQ Expression
    (13) BinaryExpression -> Expression . GEQ Expression
    (14) BinaryExpression -> Expression . LT Expression
    (15) BinaryExpression -> Expression . GT Expression
    (16) BinaryExpression -> Expression . EQ Expression
    (17) BinaryExpression -> Expression . NE Expression

    SEMICOLON       shift and go to state 93
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    TIMES           shift and go to state 96
    DIVIDE          shift and go to state 97
    MOD             shift and go to state 98
    LEQ             shift and go to state 99
    GEQ             shift and go to state 100
    LT              shift and go to state 101
    GT              shift and go to state 102
    EQ              shift and go to state 103
    NE              shift and go to state 104


state 61

    (58) Statement -> IfElseStatement .

    IF              reduce using rule 58 (Statement -> IfElseStatement .)
    FOR             reduce using rule 58 (Statement -> IfElseStatement .)
    WHILE           reduce using rule 58 (Statement -> IfElseStatement .)
    BREAK           reduce using rule 58 (Statement -> IfElseStatement .)
    RETURN          reduce using rule 58 (Statement -> IfElseStatement .)
    ;               reduce using rule 58 (Statement -> IfElseStatement .)
    ID              reduce using rule 58 (Statement -> IfElseStatement .)
    LPAREN          reduce using rule 58 (Statement -> IfElseStatement .)
    LBRACE          reduce using rule 58 (Statement -> IfElseStatement .)
    INTL            reduce using rule 58 (Statement -> IfElseStatement .)
    BOOLL           reduce using rule 58 (Statement -> IfElseStatement .)
    RBRACE          reduce using rule 58 (Statement -> IfElseStatement .)
    RPAREN          reduce using rule 58 (Statement -> IfElseStatement .)


state 62

    (59) Statement -> ForStatement .

    IF              reduce using rule 59 (Statement -> ForStatement .)
    FOR             reduce using rule 59 (Statement -> ForStatement .)
    WHILE           reduce using rule 59 (Statement -> ForStatement .)
    BREAK           reduce using rule 59 (Statement -> ForStatement .)
    RETURN          reduce using rule 59 (Statement -> ForStatement .)
    ;               reduce using rule 59 (Statement -> ForStatement .)
    ID              reduce using rule 59 (Statement -> ForStatement .)
    LPAREN          reduce using rule 59 (Statement -> ForStatement .)
    LBRACE          reduce using rule 59 (Statement -> ForStatement .)
    INTL            reduce using rule 59 (Statement -> ForStatement .)
    BOOLL           reduce using rule 59 (Statement -> ForStatement .)
    RBRACE          reduce using rule 59 (Statement -> ForStatement .)
    RPAREN          reduce using rule 59 (Statement -> ForStatement .)


state 63

    (60) Statement -> WhileStatement .

    IF              reduce using rule 60 (Statement -> WhileStatement .)
    FOR             reduce using rule 60 (Statement -> WhileStatement .)
    WHILE           reduce using rule 60 (Statement -> WhileStatement .)
    BREAK           reduce using rule 60 (Statement -> WhileStatement .)
    RETURN          reduce using rule 60 (Statement -> WhileStatement .)
    ;               reduce using rule 60 (Statement -> WhileStatement .)
    ID              reduce using rule 60 (Statement -> WhileStatement .)
    LPAREN          reduce using rule 60 (Statement -> WhileStatement .)
    LBRACE          reduce using rule 60 (Statement -> WhileStatement .)
    INTL            reduce using rule 60 (Statement -> WhileStatement .)
    BOOLL           reduce using rule 60 (Statement -> WhileStatement .)
    RBRACE          reduce using rule 60 (Statement -> WhileStatement .)
    RPAREN          reduce using rule 60 (Statement -> WhileStatement .)


state 64

    (61) Statement -> BreakStatement .

    IF              reduce using rule 61 (Statement -> BreakStatement .)
    FOR             reduce using rule 61 (Statement -> BreakStatement .)
    WHILE           reduce using rule 61 (Statement -> BreakStatement .)
    BREAK           reduce using rule 61 (Statement -> BreakStatement .)
    RETURN          reduce using rule 61 (Statement -> BreakStatement .)
    ;               reduce using rule 61 (Statement -> BreakStatement .)
    ID              reduce using rule 61 (Statement -> BreakStatement .)
    LPAREN          reduce using rule 61 (Statement -> BreakStatement .)
    LBRACE          reduce using rule 61 (Statement -> BreakStatement .)
    INTL            reduce using rule 61 (Statement -> BreakStatement .)
    BOOLL           reduce using rule 61 (Statement -> BreakStatement .)
    RBRACE          reduce using rule 61 (Statement -> BreakStatement .)
    RPAREN          reduce using rule 61 (Statement -> BreakStatement .)


state 65

    (62) Statement -> ReturnStatement .

    IF              reduce using rule 62 (Statement -> ReturnStatement .)
    FOR             reduce using rule 62 (Statement -> ReturnStatement .)
    WHILE           reduce using rule 62 (Statement -> ReturnStatement .)
    BREAK           reduce using rule 62 (Statement -> ReturnStatement .)
    RETURN          reduce using rule 62 (Statement -> ReturnStatement .)
    ;               reduce using rule 62 (Statement -> ReturnStatement .)
    ID              reduce using rule 62 (Statement -> ReturnStatement .)
    LPAREN          reduce using rule 62 (Statement -> ReturnStatement .)
    LBRACE          reduce using rule 62 (Statement -> ReturnStatement .)
    INTL            reduce using rule 62 (Statement -> ReturnStatement .)
    BOOLL           reduce using rule 62 (Statement -> ReturnStatement .)
    RBRACE          reduce using rule 62 (Statement -> ReturnStatement .)
    RPAREN          reduce using rule 62 (Statement -> ReturnStatement .)


state 66

    (63) Statement -> BlockStatement .

    IF              reduce using rule 63 (Statement -> BlockStatement .)
    FOR             reduce using rule 63 (Statement -> BlockStatement .)
    WHILE           reduce using rule 63 (Statement -> BlockStatement .)
    BREAK           reduce using rule 63 (Statement -> BlockStatement .)
    RETURN          reduce using rule 63 (Statement -> BlockStatement .)
    ;               reduce using rule 63 (Statement -> BlockStatement .)
    ID              reduce using rule 63 (Statement -> BlockStatement .)
    LPAREN          reduce using rule 63 (Statement -> BlockStatement .)
    LBRACE          reduce using rule 63 (Statement -> BlockStatement .)
    INTL            reduce using rule 63 (Statement -> BlockStatement .)
    BOOLL           reduce using rule 63 (Statement -> BlockStatement .)
    RBRACE          reduce using rule 63 (Statement -> BlockStatement .)
    RPAREN          reduce using rule 63 (Statement -> BlockStatement .)


state 67

    (64) Statement -> BlankStatement .

    IF              reduce using rule 64 (Statement -> BlankStatement .)
    FOR             reduce using rule 64 (Statement -> BlankStatement .)
    WHILE           reduce using rule 64 (Statement -> BlankStatement .)
    BREAK           reduce using rule 64 (Statement -> BlankStatement .)
    RETURN          reduce using rule 64 (Statement -> BlankStatement .)
    ;               reduce using rule 64 (Statement -> BlankStatement .)
    ID              reduce using rule 64 (Statement -> BlankStatement .)
    LPAREN          reduce using rule 64 (Statement -> BlankStatement .)
    LBRACE          reduce using rule 64 (Statement -> BlankStatement .)
    INTL            reduce using rule 64 (Statement -> BlankStatement .)
    BOOLL           reduce using rule 64 (Statement -> BlankStatement .)
    RBRACE          reduce using rule 64 (Statement -> BlankStatement .)
    RPAREN          reduce using rule 64 (Statement -> BlankStatement .)


state 68

    (5) AssignmentStatement -> IdListR . ASSIGNMENT Expression SEMICOLON
    (6) AssignmentStatement -> IdListR . ASSIGNMENT Expression
    (77) UnaryExpression -> IdListR .
    (22) BracketCall -> IdListR . LBRACKET Expression RBRACKET

    ASSIGNMENT      shift and go to state 105
    SEMICOLON       reduce using rule 77 (UnaryExpression -> IdListR .)
    PLUS            reduce using rule 77 (UnaryExpression -> IdListR .)
    MINUS           reduce using rule 77 (UnaryExpression -> IdListR .)
    TIMES           reduce using rule 77 (UnaryExpression -> IdListR .)
    DIVIDE          reduce using rule 77 (UnaryExpression -> IdListR .)
    MOD             reduce using rule 77 (UnaryExpression -> IdListR .)
    LEQ             reduce using rule 77 (UnaryExpression -> IdListR .)
    GEQ             reduce using rule 77 (UnaryExpression -> IdListR .)
    LT              reduce using rule 77 (UnaryExpression -> IdListR .)
    GT              reduce using rule 77 (UnaryExpression -> IdListR .)
    EQ              reduce using rule 77 (UnaryExpression -> IdListR .)
    NE              reduce using rule 77 (UnaryExpression -> IdListR .)
    LBRACKET        shift and go to state 106


state 69

    (26) DeclarationAssignmentStatement -> Type . ID ASSIGNMENT Expression SEMICOLON
    (27) DeclarationFunctionCallStatement -> Type . FunctionCall SEMICOLON
    (28) DeclarationStatement -> Type . ID SEMICOLON
    (35) FunctionCall -> . ID LPAREN ArgumentListR RPAREN
    (36) FunctionCall -> . ID LT TypeParameterListR GT LPAREN ArgumentListR RPAREN

    ID              shift and go to state 107

    FunctionCall                   shift and go to state 108

state 70

    (39) IdListR -> ID . DOT IdListR
    (40) IdListR -> ID .
    (71) Type -> ID . PointerListR
    (72) Type -> ID . LT TypeParameterListR GT PointerListR
    (35) FunctionCall -> ID . LPAREN ArgumentListR RPAREN
    (36) FunctionCall -> ID . LT TypeParameterListR GT LPAREN ArgumentListR RPAREN
    (49) PointerListR -> . TIMES PointerListR
    (50) PointerListR -> . empty
    (83) empty -> .

  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
    DOT             shift and go to state 109
    ASSIGNMENT      reduce using rule 40 (IdListR -> ID .)
    LBRACKET        reduce using rule 40 (IdListR -> ID .)
    SEMICOLON       reduce using rule 40 (IdListR -> ID .)
    PLUS            reduce using rule 40 (IdListR -> ID .)
    MINUS           reduce using rule 40 (IdListR -> ID .)
    DIVIDE          reduce using rule 40 (IdListR -> ID .)
    MOD             reduce using rule 40 (IdListR -> ID .)
    LEQ             reduce using rule 40 (IdListR -> ID .)
    GEQ             reduce using rule 40 (IdListR -> ID .)
    GT              reduce using rule 40 (IdListR -> ID .)
    EQ              reduce using rule 40 (IdListR -> ID .)
    NE              reduce using rule 40 (IdListR -> ID .)
    LT              shift and go to state 110
    LPAREN          shift and go to state 111
    TIMES           shift and go to state 32
    ID              reduce using rule 83 (empty -> .)

  ! TIMES           [ reduce using rule 40 (IdListR -> ID .) ]
  ! LT              [ reduce using rule 40 (IdListR -> ID .) ]

    PointerListR                   shift and go to state 30
    empty                          shift and go to state 33

state 71

    (79) UnaryExpression -> FunctionCall .

    SEMICOLON       reduce using rule 79 (UnaryExpression -> FunctionCall .)
    PLUS            reduce using rule 79 (UnaryExpression -> FunctionCall .)
    MINUS           reduce using rule 79 (UnaryExpression -> FunctionCall .)
    TIMES           reduce using rule 79 (UnaryExpression -> FunctionCall .)
    DIVIDE          reduce using rule 79 (UnaryExpression -> FunctionCall .)
    MOD             reduce using rule 79 (UnaryExpression -> FunctionCall .)
    LEQ             reduce using rule 79 (UnaryExpression -> FunctionCall .)
    GEQ             reduce using rule 79 (UnaryExpression -> FunctionCall .)
    LT              reduce using rule 79 (UnaryExpression -> FunctionCall .)
    GT              reduce using rule 79 (UnaryExpression -> FunctionCall .)
    EQ              reduce using rule 79 (UnaryExpression -> FunctionCall .)
    NE              reduce using rule 79 (UnaryExpression -> FunctionCall .)
    RPAREN          reduce using rule 79 (UnaryExpression -> FunctionCall .)
    IF              reduce using rule 79 (UnaryExpression -> FunctionCall .)
    FOR             reduce using rule 79 (UnaryExpression -> FunctionCall .)
    WHILE           reduce using rule 79 (UnaryExpression -> FunctionCall .)
    BREAK           reduce using rule 79 (UnaryExpression -> FunctionCall .)
    RETURN          reduce using rule 79 (UnaryExpression -> FunctionCall .)
    ;               reduce using rule 79 (UnaryExpression -> FunctionCall .)
    ID              reduce using rule 79 (UnaryExpression -> FunctionCall .)
    LPAREN          reduce using rule 79 (UnaryExpression -> FunctionCall .)
    LBRACE          reduce using rule 79 (UnaryExpression -> FunctionCall .)
    INTL            reduce using rule 79 (UnaryExpression -> FunctionCall .)
    BOOLL           reduce using rule 79 (UnaryExpression -> FunctionCall .)
    RBRACE          reduce using rule 79 (UnaryExpression -> FunctionCall .)
    RBRACKET        reduce using rule 79 (UnaryExpression -> FunctionCall .)
    COMMA           reduce using rule 79 (UnaryExpression -> FunctionCall .)


state 72

    (32) Expression -> BinaryExpression .

    SEMICOLON       reduce using rule 32 (Expression -> BinaryExpression .)
    PLUS            reduce using rule 32 (Expression -> BinaryExpression .)
    MINUS           reduce using rule 32 (Expression -> BinaryExpression .)
    TIMES           reduce using rule 32 (Expression -> BinaryExpression .)
    DIVIDE          reduce using rule 32 (Expression -> BinaryExpression .)
    MOD             reduce using rule 32 (Expression -> BinaryExpression .)
    LEQ             reduce using rule 32 (Expression -> BinaryExpression .)
    GEQ             reduce using rule 32 (Expression -> BinaryExpression .)
    LT              reduce using rule 32 (Expression -> BinaryExpression .)
    GT              reduce using rule 32 (Expression -> BinaryExpression .)
    EQ              reduce using rule 32 (Expression -> BinaryExpression .)
    NE              reduce using rule 32 (Expression -> BinaryExpression .)
    RPAREN          reduce using rule 32 (Expression -> BinaryExpression .)
    IF              reduce using rule 32 (Expression -> BinaryExpression .)
    FOR             reduce using rule 32 (Expression -> BinaryExpression .)
    WHILE           reduce using rule 32 (Expression -> BinaryExpression .)
    BREAK           reduce using rule 32 (Expression -> BinaryExpression .)
    RETURN          reduce using rule 32 (Expression -> BinaryExpression .)
    ;               reduce using rule 32 (Expression -> BinaryExpression .)
    ID              reduce using rule 32 (Expression -> BinaryExpression .)
    LPAREN          reduce using rule 32 (Expression -> BinaryExpression .)
    LBRACE          reduce using rule 32 (Expression -> BinaryExpression .)
    INTL            reduce using rule 32 (Expression -> BinaryExpression .)
    BOOLL           reduce using rule 32 (Expression -> BinaryExpression .)
    RBRACE          reduce using rule 32 (Expression -> BinaryExpression .)
    RBRACKET        reduce using rule 32 (Expression -> BinaryExpression .)
    COMMA           reduce using rule 32 (Expression -> BinaryExpression .)


state 73

    (33) Expression -> UnaryExpression .

    SEMICOLON       reduce using rule 33 (Expression -> UnaryExpression .)
    PLUS            reduce using rule 33 (Expression -> UnaryExpression .)
    MINUS           reduce using rule 33 (Expression -> UnaryExpression .)
    TIMES           reduce using rule 33 (Expression -> UnaryExpression .)
    DIVIDE          reduce using rule 33 (Expression -> UnaryExpression .)
    MOD             reduce using rule 33 (Expression -> UnaryExpression .)
    LEQ             reduce using rule 33 (Expression -> UnaryExpression .)
    GEQ             reduce using rule 33 (Expression -> UnaryExpression .)
    LT              reduce using rule 33 (Expression -> UnaryExpression .)
    GT              reduce using rule 33 (Expression -> UnaryExpression .)
    EQ              reduce using rule 33 (Expression -> UnaryExpression .)
    NE              reduce using rule 33 (Expression -> UnaryExpression .)
    RPAREN          reduce using rule 33 (Expression -> UnaryExpression .)
    IF              reduce using rule 33 (Expression -> UnaryExpression .)
    FOR             reduce using rule 33 (Expression -> UnaryExpression .)
    WHILE           reduce using rule 33 (Expression -> UnaryExpression .)
    BREAK           reduce using rule 33 (Expression -> UnaryExpression .)
    RETURN          reduce using rule 33 (Expression -> UnaryExpression .)
    ;               reduce using rule 33 (Expression -> UnaryExpression .)
    ID              reduce using rule 33 (Expression -> UnaryExpression .)
    LPAREN          reduce using rule 33 (Expression -> UnaryExpression .)
    LBRACE          reduce using rule 33 (Expression -> UnaryExpression .)
    INTL            reduce using rule 33 (Expression -> UnaryExpression .)
    BOOLL           reduce using rule 33 (Expression -> UnaryExpression .)
    RBRACE          reduce using rule 33 (Expression -> UnaryExpression .)
    RBRACKET        reduce using rule 33 (Expression -> UnaryExpression .)
    COMMA           reduce using rule 33 (Expression -> UnaryExpression .)


state 74

    (41) IfElseStatement -> IF . LPAREN Expression RPAREN Block ELSE Block

    LPAREN          shift and go to state 112


state 75

    (81) UnaryExpression -> LPAREN . Expression RPAREN
    (32) Expression -> . BinaryExpression
    (33) Expression -> . UnaryExpression
    (7) BinaryExpression -> . Expression PLUS Expression
    (8) BinaryExpression -> . Expression MINUS Expression
    (9) BinaryExpression -> . Expression TIMES Expression
    (10) BinaryExpression -> . Expression DIVIDE Expression
    (11) BinaryExpression -> . Expression MOD Expression
    (12) BinaryExpression -> . Expression LEQ Expression
    (13) BinaryExpression -> . Expression GEQ Expression
    (14) BinaryExpression -> . Expression LT Expression
    (15) BinaryExpression -> . Expression GT Expression
    (16) BinaryExpression -> . Expression EQ Expression
    (17) BinaryExpression -> . Expression NE Expression
    (77) UnaryExpression -> . IdListR
    (78) UnaryExpression -> . Literal
    (79) UnaryExpression -> . FunctionCall
    (80) UnaryExpression -> . BracketCall
    (81) UnaryExpression -> . LPAREN Expression RPAREN
    (39) IdListR -> . ID DOT IdListR
    (40) IdListR -> . ID
    (43) Literal -> . IntLiteral
    (44) Literal -> . BoolLiteral
    (35) FunctionCall -> . ID LPAREN ArgumentListR RPAREN
    (36) FunctionCall -> . ID LT TypeParameterListR GT LPAREN ArgumentListR RPAREN
    (22) BracketCall -> . IdListR LBRACKET Expression RBRACKET
    (42) IntLiteral -> . INTL
    (21) BoolLiteral -> . BOOLL

    LPAREN          shift and go to state 75
    ID              shift and go to state 115
    INTL            shift and go to state 80
    BOOLL           shift and go to state 87

    Expression                     shift and go to state 113
    BinaryExpression               shift and go to state 72
    UnaryExpression                shift and go to state 73
    IdListR                        shift and go to state 114
    Literal                        shift and go to state 83
    FunctionCall                   shift and go to state 71
    BracketCall                    shift and go to state 84
    IntLiteral                     shift and go to state 85
    BoolLiteral                    shift and go to state 86

state 76

    (20) BlockStatement -> Block .

    IF              reduce using rule 20 (BlockStatement -> Block .)
    FOR             reduce using rule 20 (BlockStatement -> Block .)
    WHILE           reduce using rule 20 (BlockStatement -> Block .)
    BREAK           reduce using rule 20 (BlockStatement -> Block .)
    RETURN          reduce using rule 20 (BlockStatement -> Block .)
    ;               reduce using rule 20 (BlockStatement -> Block .)
    ID              reduce using rule 20 (BlockStatement -> Block .)
    LPAREN          reduce using rule 20 (BlockStatement -> Block .)
    LBRACE          reduce using rule 20 (BlockStatement -> Block .)
    INTL            reduce using rule 20 (BlockStatement -> Block .)
    BOOLL           reduce using rule 20 (BlockStatement -> Block .)
    RBRACE          reduce using rule 20 (BlockStatement -> Block .)
    RPAREN          reduce using rule 20 (BlockStatement -> Block .)


state 77

    (34) ForStatement -> FOR . LPAREN Statement Expression SEMICOLON Statement RPAREN Block

    LPAREN          shift and go to state 116


state 78

    (82) WhileStatement -> WHILE . LPAREN Expression RPAREN Block

    LPAREN          shift and go to state 117


state 79

    (23) BreakStatement -> BREAK . INTL SEMICOLON
    (24) BreakStatement -> BREAK . SEMICOLON

    INTL            shift and go to state 118
    SEMICOLON       shift and go to state 119


state 80

    (42) IntLiteral -> INTL .

    SEMICOLON       reduce using rule 42 (IntLiteral -> INTL .)
    PLUS            reduce using rule 42 (IntLiteral -> INTL .)
    MINUS           reduce using rule 42 (IntLiteral -> INTL .)
    TIMES           reduce using rule 42 (IntLiteral -> INTL .)
    DIVIDE          reduce using rule 42 (IntLiteral -> INTL .)
    MOD             reduce using rule 42 (IntLiteral -> INTL .)
    LEQ             reduce using rule 42 (IntLiteral -> INTL .)
    GEQ             reduce using rule 42 (IntLiteral -> INTL .)
    LT              reduce using rule 42 (IntLiteral -> INTL .)
    GT              reduce using rule 42 (IntLiteral -> INTL .)
    EQ              reduce using rule 42 (IntLiteral -> INTL .)
    NE              reduce using rule 42 (IntLiteral -> INTL .)
    RPAREN          reduce using rule 42 (IntLiteral -> INTL .)
    IF              reduce using rule 42 (IntLiteral -> INTL .)
    FOR             reduce using rule 42 (IntLiteral -> INTL .)
    WHILE           reduce using rule 42 (IntLiteral -> INTL .)
    BREAK           reduce using rule 42 (IntLiteral -> INTL .)
    RETURN          reduce using rule 42 (IntLiteral -> INTL .)
    ;               reduce using rule 42 (IntLiteral -> INTL .)
    ID              reduce using rule 42 (IntLiteral -> INTL .)
    LPAREN          reduce using rule 42 (IntLiteral -> INTL .)
    LBRACE          reduce using rule 42 (IntLiteral -> INTL .)
    INTL            reduce using rule 42 (IntLiteral -> INTL .)
    BOOLL           reduce using rule 42 (IntLiteral -> INTL .)
    RBRACE          reduce using rule 42 (IntLiteral -> INTL .)
    RBRACKET        reduce using rule 42 (IntLiteral -> INTL .)
    COMMA           reduce using rule 42 (IntLiteral -> INTL .)


state 81

    (51) ReturnStatement -> RETURN . Expression SEMICOLON
    (52) ReturnStatement -> RETURN . SEMICOLON
    (32) Expression -> . BinaryExpression
    (33) Expression -> . UnaryExpression
    (7) BinaryExpression -> . Expression PLUS Expression
    (8) BinaryExpression -> . Expression MINUS Expression
    (9) BinaryExpression -> . Expression TIMES Expression
    (10) BinaryExpression -> . Expression DIVIDE Expression
    (11) BinaryExpression -> . Expression MOD Expression
    (12) BinaryExpression -> . Expression LEQ Expression
    (13) BinaryExpression -> . Expression GEQ Expression
    (14) BinaryExpression -> . Expression LT Expression
    (15) BinaryExpression -> . Expression GT Expression
    (16) BinaryExpression -> . Expression EQ Expression
    (17) BinaryExpression -> . Expression NE Expression
    (77) UnaryExpression -> . IdListR
    (78) UnaryExpression -> . Literal
    (79) UnaryExpression -> . FunctionCall
    (80) UnaryExpression -> . BracketCall
    (81) UnaryExpression -> . LPAREN Expression RPAREN
    (39) IdListR -> . ID DOT IdListR
    (40) IdListR -> . ID
    (43) Literal -> . IntLiteral
    (44) Literal -> . BoolLiteral
    (35) FunctionCall -> . ID LPAREN ArgumentListR RPAREN
    (36) FunctionCall -> . ID LT TypeParameterListR GT LPAREN ArgumentListR RPAREN
    (22) BracketCall -> . IdListR LBRACKET Expression RBRACKET
    (42) IntLiteral -> . INTL
    (21) BoolLiteral -> . BOOLL

    SEMICOLON       shift and go to state 121
    LPAREN          shift and go to state 75
    ID              shift and go to state 115
    INTL            shift and go to state 80
    BOOLL           shift and go to state 87

    Expression                     shift and go to state 120
    BinaryExpression               shift and go to state 72
    UnaryExpression                shift and go to state 73
    IdListR                        shift and go to state 114
    Literal                        shift and go to state 83
    FunctionCall                   shift and go to state 71
    BracketCall                    shift and go to state 84
    IntLiteral                     shift and go to state 85
    BoolLiteral                    shift and go to state 86

state 82

    (18) BlankStatement -> ; .

    IF              reduce using rule 18 (BlankStatement -> ; .)
    FOR             reduce using rule 18 (BlankStatement -> ; .)
    WHILE           reduce using rule 18 (BlankStatement -> ; .)
    BREAK           reduce using rule 18 (BlankStatement -> ; .)
    RETURN          reduce using rule 18 (BlankStatement -> ; .)
    ;               reduce using rule 18 (BlankStatement -> ; .)
    ID              reduce using rule 18 (BlankStatement -> ; .)
    LPAREN          reduce using rule 18 (BlankStatement -> ; .)
    LBRACE          reduce using rule 18 (BlankStatement -> ; .)
    INTL            reduce using rule 18 (BlankStatement -> ; .)
    BOOLL           reduce using rule 18 (BlankStatement -> ; .)
    RBRACE          reduce using rule 18 (BlankStatement -> ; .)
    RPAREN          reduce using rule 18 (BlankStatement -> ; .)


state 83

    (78) UnaryExpression -> Literal .

    SEMICOLON       reduce using rule 78 (UnaryExpression -> Literal .)
    PLUS            reduce using rule 78 (UnaryExpression -> Literal .)
    MINUS           reduce using rule 78 (UnaryExpression -> Literal .)
    TIMES           reduce using rule 78 (UnaryExpression -> Literal .)
    DIVIDE          reduce using rule 78 (UnaryExpression -> Literal .)
    MOD             reduce using rule 78 (UnaryExpression -> Literal .)
    LEQ             reduce using rule 78 (UnaryExpression -> Literal .)
    GEQ             reduce using rule 78 (UnaryExpression -> Literal .)
    LT              reduce using rule 78 (UnaryExpression -> Literal .)
    GT              reduce using rule 78 (UnaryExpression -> Literal .)
    EQ              reduce using rule 78 (UnaryExpression -> Literal .)
    NE              reduce using rule 78 (UnaryExpression -> Literal .)
    RPAREN          reduce using rule 78 (UnaryExpression -> Literal .)
    IF              reduce using rule 78 (UnaryExpression -> Literal .)
    FOR             reduce using rule 78 (UnaryExpression -> Literal .)
    WHILE           reduce using rule 78 (UnaryExpression -> Literal .)
    BREAK           reduce using rule 78 (UnaryExpression -> Literal .)
    RETURN          reduce using rule 78 (UnaryExpression -> Literal .)
    ;               reduce using rule 78 (UnaryExpression -> Literal .)
    ID              reduce using rule 78 (UnaryExpression -> Literal .)
    LPAREN          reduce using rule 78 (UnaryExpression -> Literal .)
    LBRACE          reduce using rule 78 (UnaryExpression -> Literal .)
    INTL            reduce using rule 78 (UnaryExpression -> Literal .)
    BOOLL           reduce using rule 78 (UnaryExpression -> Literal .)
    RBRACE          reduce using rule 78 (UnaryExpression -> Literal .)
    RBRACKET        reduce using rule 78 (UnaryExpression -> Literal .)
    COMMA           reduce using rule 78 (UnaryExpression -> Literal .)


state 84

    (80) UnaryExpression -> BracketCall .

    SEMICOLON       reduce using rule 80 (UnaryExpression -> BracketCall .)
    PLUS            reduce using rule 80 (UnaryExpression -> BracketCall .)
    MINUS           reduce using rule 80 (UnaryExpression -> BracketCall .)
    TIMES           reduce using rule 80 (UnaryExpression -> BracketCall .)
    DIVIDE          reduce using rule 80 (UnaryExpression -> BracketCall .)
    MOD             reduce using rule 80 (UnaryExpression -> BracketCall .)
    LEQ             reduce using rule 80 (UnaryExpression -> BracketCall .)
    GEQ             reduce using rule 80 (UnaryExpression -> BracketCall .)
    LT              reduce using rule 80 (UnaryExpression -> BracketCall .)
    GT              reduce using rule 80 (UnaryExpression -> BracketCall .)
    EQ              reduce using rule 80 (UnaryExpression -> BracketCall .)
    NE              reduce using rule 80 (UnaryExpression -> BracketCall .)
    RPAREN          reduce using rule 80 (UnaryExpression -> BracketCall .)
    IF              reduce using rule 80 (UnaryExpression -> BracketCall .)
    FOR             reduce using rule 80 (UnaryExpression -> BracketCall .)
    WHILE           reduce using rule 80 (UnaryExpression -> BracketCall .)
    BREAK           reduce using rule 80 (UnaryExpression -> BracketCall .)
    RETURN          reduce using rule 80 (UnaryExpression -> BracketCall .)
    ;               reduce using rule 80 (UnaryExpression -> BracketCall .)
    ID              reduce using rule 80 (UnaryExpression -> BracketCall .)
    LPAREN          reduce using rule 80 (UnaryExpression -> BracketCall .)
    LBRACE          reduce using rule 80 (UnaryExpression -> BracketCall .)
    INTL            reduce using rule 80 (UnaryExpression -> BracketCall .)
    BOOLL           reduce using rule 80 (UnaryExpression -> BracketCall .)
    RBRACE          reduce using rule 80 (UnaryExpression -> BracketCall .)
    RBRACKET        reduce using rule 80 (UnaryExpression -> BracketCall .)
    COMMA           reduce using rule 80 (UnaryExpression -> BracketCall .)


state 85

    (43) Literal -> IntLiteral .

    SEMICOLON       reduce using rule 43 (Literal -> IntLiteral .)
    PLUS            reduce using rule 43 (Literal -> IntLiteral .)
    MINUS           reduce using rule 43 (Literal -> IntLiteral .)
    TIMES           reduce using rule 43 (Literal -> IntLiteral .)
    DIVIDE          reduce using rule 43 (Literal -> IntLiteral .)
    MOD             reduce using rule 43 (Literal -> IntLiteral .)
    LEQ             reduce using rule 43 (Literal -> IntLiteral .)
    GEQ             reduce using rule 43 (Literal -> IntLiteral .)
    LT              reduce using rule 43 (Literal -> IntLiteral .)
    GT              reduce using rule 43 (Literal -> IntLiteral .)
    EQ              reduce using rule 43 (Literal -> IntLiteral .)
    NE              reduce using rule 43 (Literal -> IntLiteral .)
    RPAREN          reduce using rule 43 (Literal -> IntLiteral .)
    IF              reduce using rule 43 (Literal -> IntLiteral .)
    FOR             reduce using rule 43 (Literal -> IntLiteral .)
    WHILE           reduce using rule 43 (Literal -> IntLiteral .)
    BREAK           reduce using rule 43 (Literal -> IntLiteral .)
    RETURN          reduce using rule 43 (Literal -> IntLiteral .)
    ;               reduce using rule 43 (Literal -> IntLiteral .)
    ID              reduce using rule 43 (Literal -> IntLiteral .)
    LPAREN          reduce using rule 43 (Literal -> IntLiteral .)
    LBRACE          reduce using rule 43 (Literal -> IntLiteral .)
    INTL            reduce using rule 43 (Literal -> IntLiteral .)
    BOOLL           reduce using rule 43 (Literal -> IntLiteral .)
    RBRACE          reduce using rule 43 (Literal -> IntLiteral .)
    RBRACKET        reduce using rule 43 (Literal -> IntLiteral .)
    COMMA           reduce using rule 43 (Literal -> IntLiteral .)


state 86

    (44) Literal -> BoolLiteral .

    SEMICOLON       reduce using rule 44 (Literal -> BoolLiteral .)
    PLUS            reduce using rule 44 (Literal -> BoolLiteral .)
    MINUS           reduce using rule 44 (Literal -> BoolLiteral .)
    TIMES           reduce using rule 44 (Literal -> BoolLiteral .)
    DIVIDE          reduce using rule 44 (Literal -> BoolLiteral .)
    MOD             reduce using rule 44 (Literal -> BoolLiteral .)
    LEQ             reduce using rule 44 (Literal -> BoolLiteral .)
    GEQ             reduce using rule 44 (Literal -> BoolLiteral .)
    LT              reduce using rule 44 (Literal -> BoolLiteral .)
    GT              reduce using rule 44 (Literal -> BoolLiteral .)
    EQ              reduce using rule 44 (Literal -> BoolLiteral .)
    NE              reduce using rule 44 (Literal -> BoolLiteral .)
    RPAREN          reduce using rule 44 (Literal -> BoolLiteral .)
    IF              reduce using rule 44 (Literal -> BoolLiteral .)
    FOR             reduce using rule 44 (Literal -> BoolLiteral .)
    WHILE           reduce using rule 44 (Literal -> BoolLiteral .)
    BREAK           reduce using rule 44 (Literal -> BoolLiteral .)
    RETURN          reduce using rule 44 (Literal -> BoolLiteral .)
    ;               reduce using rule 44 (Literal -> BoolLiteral .)
    ID              reduce using rule 44 (Literal -> BoolLiteral .)
    LPAREN          reduce using rule 44 (Literal -> BoolLiteral .)
    LBRACE          reduce using rule 44 (Literal -> BoolLiteral .)
    INTL            reduce using rule 44 (Literal -> BoolLiteral .)
    BOOLL           reduce using rule 44 (Literal -> BoolLiteral .)
    RBRACE          reduce using rule 44 (Literal -> BoolLiteral .)
    RBRACKET        reduce using rule 44 (Literal -> BoolLiteral .)
    COMMA           reduce using rule 44 (Literal -> BoolLiteral .)


state 87

    (21) BoolLiteral -> BOOLL .

    SEMICOLON       reduce using rule 21 (BoolLiteral -> BOOLL .)
    PLUS            reduce using rule 21 (BoolLiteral -> BOOLL .)
    MINUS           reduce using rule 21 (BoolLiteral -> BOOLL .)
    TIMES           reduce using rule 21 (BoolLiteral -> BOOLL .)
    DIVIDE          reduce using rule 21 (BoolLiteral -> BOOLL .)
    MOD             reduce using rule 21 (BoolLiteral -> BOOLL .)
    LEQ             reduce using rule 21 (BoolLiteral -> BOOLL .)
    GEQ             reduce using rule 21 (BoolLiteral -> BOOLL .)
    LT              reduce using rule 21 (BoolLiteral -> BOOLL .)
    GT              reduce using rule 21 (BoolLiteral -> BOOLL .)
    EQ              reduce using rule 21 (BoolLiteral -> BOOLL .)
    NE              reduce using rule 21 (BoolLiteral -> BOOLL .)
    RPAREN          reduce using rule 21 (BoolLiteral -> BOOLL .)
    IF              reduce using rule 21 (BoolLiteral -> BOOLL .)
    FOR             reduce using rule 21 (BoolLiteral -> BOOLL .)
    WHILE           reduce using rule 21 (BoolLiteral -> BOOLL .)
    BREAK           reduce using rule 21 (BoolLiteral -> BOOLL .)
    RETURN          reduce using rule 21 (BoolLiteral -> BOOLL .)
    ;               reduce using rule 21 (BoolLiteral -> BOOLL .)
    ID              reduce using rule 21 (BoolLiteral -> BOOLL .)
    LPAREN          reduce using rule 21 (BoolLiteral -> BOOLL .)
    LBRACE          reduce using rule 21 (BoolLiteral -> BOOLL .)
    INTL            reduce using rule 21 (BoolLiteral -> BOOLL .)
    BOOLL           reduce using rule 21 (BoolLiteral -> BOOLL .)
    RBRACE          reduce using rule 21 (BoolLiteral -> BOOLL .)
    RBRACKET        reduce using rule 21 (BoolLiteral -> BOOLL .)
    COMMA           reduce using rule 21 (BoolLiteral -> BOOLL .)


state 88

    (38) FunctionDefinition -> ID ID LT TypeParameterListR GT LPAREN ParameterListR . RPAREN Block

    RPAREN          shift and go to state 122


state 89

    (67) StructDefinition -> STRUCT ID LT TypeParameterListR GT LBRACE StructMemberDeclarationListR . RBRACE

    RBRACE          shift and go to state 123


state 90

    (72) Type -> ID LT TypeParameterListR GT PointerListR .

    ID              reduce using rule 72 (Type -> ID LT TypeParameterListR GT PointerListR .)


state 91

    (19) Block -> LBRACE StatementListR RBRACE .

    ID              reduce using rule 19 (Block -> LBRACE StatementListR RBRACE .)
    STRUCT          reduce using rule 19 (Block -> LBRACE StatementListR RBRACE .)
    $end            reduce using rule 19 (Block -> LBRACE StatementListR RBRACE .)
    IF              reduce using rule 19 (Block -> LBRACE StatementListR RBRACE .)
    FOR             reduce using rule 19 (Block -> LBRACE StatementListR RBRACE .)
    WHILE           reduce using rule 19 (Block -> LBRACE StatementListR RBRACE .)
    BREAK           reduce using rule 19 (Block -> LBRACE StatementListR RBRACE .)
    RETURN          reduce using rule 19 (Block -> LBRACE StatementListR RBRACE .)
    ;               reduce using rule 19 (Block -> LBRACE StatementListR RBRACE .)
    LPAREN          reduce using rule 19 (Block -> LBRACE StatementListR RBRACE .)
    LBRACE          reduce using rule 19 (Block -> LBRACE StatementListR RBRACE .)
    INTL            reduce using rule 19 (Block -> LBRACE StatementListR RBRACE .)
    BOOLL           reduce using rule 19 (Block -> LBRACE StatementListR RBRACE .)
    RBRACE          reduce using rule 19 (Block -> LBRACE StatementListR RBRACE .)
    ELSE            reduce using rule 19 (Block -> LBRACE StatementListR RBRACE .)
    RPAREN          reduce using rule 19 (Block -> LBRACE StatementListR RBRACE .)


state 92

    (65) StatementListR -> Statement StatementListR .

    RBRACE          reduce using rule 65 (StatementListR -> Statement StatementListR .)


state 93

    (57) Statement -> Expression SEMICOLON .

    IF              reduce using rule 57 (Statement -> Expression SEMICOLON .)
    FOR             reduce using rule 57 (Statement -> Expression SEMICOLON .)
    WHILE           reduce using rule 57 (Statement -> Expression SEMICOLON .)
    BREAK           reduce using rule 57 (Statement -> Expression SEMICOLON .)
    RETURN          reduce using rule 57 (Statement -> Expression SEMICOLON .)
    ;               reduce using rule 57 (Statement -> Expression SEMICOLON .)
    ID              reduce using rule 57 (Statement -> Expression SEMICOLON .)
    LPAREN          reduce using rule 57 (Statement -> Expression SEMICOLON .)
    LBRACE          reduce using rule 57 (Statement -> Expression SEMICOLON .)
    INTL            reduce using rule 57 (Statement -> Expression SEMICOLON .)
    BOOLL           reduce using rule 57 (Statement -> Expression SEMICOLON .)
    RBRACE          reduce using rule 57 (Statement -> Expression SEMICOLON .)
    RPAREN          reduce using rule 57 (Statement -> Expression SEMICOLON .)


state 94

    (7) BinaryExpression -> Expression PLUS . Expression
    (32) Expression -> . BinaryExpression
    (33) Expression -> . UnaryExpression
    (7) BinaryExpression -> . Expression PLUS Expression
    (8) BinaryExpression -> . Expression MINUS Expression
    (9) BinaryExpression -> . Expression TIMES Expression
    (10) BinaryExpression -> . Expression DIVIDE Expression
    (11) BinaryExpression -> . Expression MOD Expression
    (12) BinaryExpression -> . Expression LEQ Expression
    (13) BinaryExpression -> . Expression GEQ Expression
    (14) BinaryExpression -> . Expression LT Expression
    (15) BinaryExpression -> . Expression GT Expression
    (16) BinaryExpression -> . Expression EQ Expression
    (17) BinaryExpression -> . Expression NE Expression
    (77) UnaryExpression -> . IdListR
    (78) UnaryExpression -> . Literal
    (79) UnaryExpression -> . FunctionCall
    (80) UnaryExpression -> . BracketCall
    (81) UnaryExpression -> . LPAREN Expression RPAREN
    (39) IdListR -> . ID DOT IdListR
    (40) IdListR -> . ID
    (43) Literal -> . IntLiteral
    (44) Literal -> . BoolLiteral
    (35) FunctionCall -> . ID LPAREN ArgumentListR RPAREN
    (36) FunctionCall -> . ID LT TypeParameterListR GT LPAREN ArgumentListR RPAREN
    (22) BracketCall -> . IdListR LBRACKET Expression RBRACKET
    (42) IntLiteral -> . INTL
    (21) BoolLiteral -> . BOOLL

    LPAREN          shift and go to state 75
    ID              shift and go to state 115
    INTL            shift and go to state 80
    BOOLL           shift and go to state 87

    Expression                     shift and go to state 124
    BinaryExpression               shift and go to state 72
    UnaryExpression                shift and go to state 73
    IdListR                        shift and go to state 114
    Literal                        shift and go to state 83
    FunctionCall                   shift and go to state 71
    BracketCall                    shift and go to state 84
    IntLiteral                     shift and go to state 85
    BoolLiteral                    shift and go to state 86

state 95

    (8) BinaryExpression -> Expression MINUS . Expression
    (32) Expression -> . BinaryExpression
    (33) Expression -> . UnaryExpression
    (7) BinaryExpression -> . Expression PLUS Expression
    (8) BinaryExpression -> . Expression MINUS Expression
    (9) BinaryExpression -> . Expression TIMES Expression
    (10) BinaryExpression -> . Expression DIVIDE Expression
    (11) BinaryExpression -> . Expression MOD Expression
    (12) BinaryExpression -> . Expression LEQ Expression
    (13) BinaryExpression -> . Expression GEQ Expression
    (14) BinaryExpression -> . Expression LT Expression
    (15) BinaryExpression -> . Expression GT Expression
    (16) BinaryExpression -> . Expression EQ Expression
    (17) BinaryExpression -> . Expression NE Expression
    (77) UnaryExpression -> . IdListR
    (78) UnaryExpression -> . Literal
    (79) UnaryExpression -> . FunctionCall
    (80) UnaryExpression -> . BracketCall
    (81) UnaryExpression -> . LPAREN Expression RPAREN
    (39) IdListR -> . ID DOT IdListR
    (40) IdListR -> . ID
    (43) Literal -> . IntLiteral
    (44) Literal -> . BoolLiteral
    (35) FunctionCall -> . ID LPAREN ArgumentListR RPAREN
    (36) FunctionCall -> . ID LT TypeParameterListR GT LPAREN ArgumentListR RPAREN
    (22) BracketCall -> . IdListR LBRACKET Expression RBRACKET
    (42) IntLiteral -> . INTL
    (21) BoolLiteral -> . BOOLL

    LPAREN          shift and go to state 75
    ID              shift and go to state 115
    INTL            shift and go to state 80
    BOOLL           shift and go to state 87

    Expression                     shift and go to state 125
    BinaryExpression               shift and go to state 72
    UnaryExpression                shift and go to state 73
    IdListR                        shift and go to state 114
    Literal                        shift and go to state 83
    FunctionCall                   shift and go to state 71
    BracketCall                    shift and go to state 84
    IntLiteral                     shift and go to state 85
    BoolLiteral                    shift and go to state 86

state 96

    (9) BinaryExpression -> Expression TIMES . Expression
    (32) Expression -> . BinaryExpression
    (33) Expression -> . UnaryExpression
    (7) BinaryExpression -> . Expression PLUS Expression
    (8) BinaryExpression -> . Expression MINUS Expression
    (9) BinaryExpression -> . Expression TIMES Expression
    (10) BinaryExpression -> . Expression DIVIDE Expression
    (11) BinaryExpression -> . Expression MOD Expression
    (12) BinaryExpression -> . Expression LEQ Expression
    (13) BinaryExpression -> . Expression GEQ Expression
    (14) BinaryExpression -> . Expression LT Expression
    (15) BinaryExpression -> . Expression GT Expression
    (16) BinaryExpression -> . Expression EQ Expression
    (17) BinaryExpression -> . Expression NE Expression
    (77) UnaryExpression -> . IdListR
    (78) UnaryExpression -> . Literal
    (79) UnaryExpression -> . FunctionCall
    (80) UnaryExpression -> . BracketCall
    (81) UnaryExpression -> . LPAREN Expression RPAREN
    (39) IdListR -> . ID DOT IdListR
    (40) IdListR -> . ID
    (43) Literal -> . IntLiteral
    (44) Literal -> . BoolLiteral
    (35) FunctionCall -> . ID LPAREN ArgumentListR RPAREN
    (36) FunctionCall -> . ID LT TypeParameterListR GT LPAREN ArgumentListR RPAREN
    (22) BracketCall -> . IdListR LBRACKET Expression RBRACKET
    (42) IntLiteral -> . INTL
    (21) BoolLiteral -> . BOOLL

    LPAREN          shift and go to state 75
    ID              shift and go to state 115
    INTL            shift and go to state 80
    BOOLL           shift and go to state 87

    Expression                     shift and go to state 126
    BinaryExpression               shift and go to state 72
    UnaryExpression                shift and go to state 73
    IdListR                        shift and go to state 114
    Literal                        shift and go to state 83
    FunctionCall                   shift and go to state 71
    BracketCall                    shift and go to state 84
    IntLiteral                     shift and go to state 85
    BoolLiteral                    shift and go to state 86

state 97

    (10) BinaryExpression -> Expression DIVIDE . Expression
    (32) Expression -> . BinaryExpression
    (33) Expression -> . UnaryExpression
    (7) BinaryExpression -> . Expression PLUS Expression
    (8) BinaryExpression -> . Expression MINUS Expression
    (9) BinaryExpression -> . Expression TIMES Expression
    (10) BinaryExpression -> . Expression DIVIDE Expression
    (11) BinaryExpression -> . Expression MOD Expression
    (12) BinaryExpression -> . Expression LEQ Expression
    (13) BinaryExpression -> . Expression GEQ Expression
    (14) BinaryExpression -> . Expression LT Expression
    (15) BinaryExpression -> . Expression GT Expression
    (16) BinaryExpression -> . Expression EQ Expression
    (17) BinaryExpression -> . Expression NE Expression
    (77) UnaryExpression -> . IdListR
    (78) UnaryExpression -> . Literal
    (79) UnaryExpression -> . FunctionCall
    (80) UnaryExpression -> . BracketCall
    (81) UnaryExpression -> . LPAREN Expression RPAREN
    (39) IdListR -> . ID DOT IdListR
    (40) IdListR -> . ID
    (43) Literal -> . IntLiteral
    (44) Literal -> . BoolLiteral
    (35) FunctionCall -> . ID LPAREN ArgumentListR RPAREN
    (36) FunctionCall -> . ID LT TypeParameterListR GT LPAREN ArgumentListR RPAREN
    (22) BracketCall -> . IdListR LBRACKET Expression RBRACKET
    (42) IntLiteral -> . INTL
    (21) BoolLiteral -> . BOOLL

    LPAREN          shift and go to state 75
    ID              shift and go to state 115
    INTL            shift and go to state 80
    BOOLL           shift and go to state 87

    Expression                     shift and go to state 127
    BinaryExpression               shift and go to state 72
    UnaryExpression                shift and go to state 73
    IdListR                        shift and go to state 114
    Literal                        shift and go to state 83
    FunctionCall                   shift and go to state 71
    BracketCall                    shift and go to state 84
    IntLiteral                     shift and go to state 85
    BoolLiteral                    shift and go to state 86

state 98

    (11) BinaryExpression -> Expression MOD . Expression
    (32) Expression -> . BinaryExpression
    (33) Expression -> . UnaryExpression
    (7) BinaryExpression -> . Expression PLUS Expression
    (8) BinaryExpression -> . Expression MINUS Expression
    (9) BinaryExpression -> . Expression TIMES Expression
    (10) BinaryExpression -> . Expression DIVIDE Expression
    (11) BinaryExpression -> . Expression MOD Expression
    (12) BinaryExpression -> . Expression LEQ Expression
    (13) BinaryExpression -> . Expression GEQ Expression
    (14) BinaryExpression -> . Expression LT Expression
    (15) BinaryExpression -> . Expression GT Expression
    (16) BinaryExpression -> . Expression EQ Expression
    (17) BinaryExpression -> . Expression NE Expression
    (77) UnaryExpression -> . IdListR
    (78) UnaryExpression -> . Literal
    (79) UnaryExpression -> . FunctionCall
    (80) UnaryExpression -> . BracketCall
    (81) UnaryExpression -> . LPAREN Expression RPAREN
    (39) IdListR -> . ID DOT IdListR
    (40) IdListR -> . ID
    (43) Literal -> . IntLiteral
    (44) Literal -> . BoolLiteral
    (35) FunctionCall -> . ID LPAREN ArgumentListR RPAREN
    (36) FunctionCall -> . ID LT TypeParameterListR GT LPAREN ArgumentListR RPAREN
    (22) BracketCall -> . IdListR LBRACKET Expression RBRACKET
    (42) IntLiteral -> . INTL
    (21) BoolLiteral -> . BOOLL

    LPAREN          shift and go to state 75
    ID              shift and go to state 115
    INTL            shift and go to state 80
    BOOLL           shift and go to state 87

    Expression                     shift and go to state 128
    BinaryExpression               shift and go to state 72
    UnaryExpression                shift and go to state 73
    IdListR                        shift and go to state 114
    Literal                        shift and go to state 83
    FunctionCall                   shift and go to state 71
    BracketCall                    shift and go to state 84
    IntLiteral                     shift and go to state 85
    BoolLiteral                    shift and go to state 86

state 99

    (12) BinaryExpression -> Expression LEQ . Expression
    (32) Expression -> . BinaryExpression
    (33) Expression -> . UnaryExpression
    (7) BinaryExpression -> . Expression PLUS Expression
    (8) BinaryExpression -> . Expression MINUS Expression
    (9) BinaryExpression -> . Expression TIMES Expression
    (10) BinaryExpression -> . Expression DIVIDE Expression
    (11) BinaryExpression -> . Expression MOD Expression
    (12) BinaryExpression -> . Expression LEQ Expression
    (13) BinaryExpression -> . Expression GEQ Expression
    (14) BinaryExpression -> . Expression LT Expression
    (15) BinaryExpression -> . Expression GT Expression
    (16) BinaryExpression -> . Expression EQ Expression
    (17) BinaryExpression -> . Expression NE Expression
    (77) UnaryExpression -> . IdListR
    (78) UnaryExpression -> . Literal
    (79) UnaryExpression -> . FunctionCall
    (80) UnaryExpression -> . BracketCall
    (81) UnaryExpression -> . LPAREN Expression RPAREN
    (39) IdListR -> . ID DOT IdListR
    (40) IdListR -> . ID
    (43) Literal -> . IntLiteral
    (44) Literal -> . BoolLiteral
    (35) FunctionCall -> . ID LPAREN ArgumentListR RPAREN
    (36) FunctionCall -> . ID LT TypeParameterListR GT LPAREN ArgumentListR RPAREN
    (22) BracketCall -> . IdListR LBRACKET Expression RBRACKET
    (42) IntLiteral -> . INTL
    (21) BoolLiteral -> . BOOLL

    LPAREN          shift and go to state 75
    ID              shift and go to state 115
    INTL            shift and go to state 80
    BOOLL           shift and go to state 87

    Expression                     shift and go to state 129
    BinaryExpression               shift and go to state 72
    UnaryExpression                shift and go to state 73
    IdListR                        shift and go to state 114
    Literal                        shift and go to state 83
    FunctionCall                   shift and go to state 71
    BracketCall                    shift and go to state 84
    IntLiteral                     shift and go to state 85
    BoolLiteral                    shift and go to state 86

state 100

    (13) BinaryExpression -> Expression GEQ . Expression
    (32) Expression -> . BinaryExpression
    (33) Expression -> . UnaryExpression
    (7) BinaryExpression -> . Expression PLUS Expression
    (8) BinaryExpression -> . Expression MINUS Expression
    (9) BinaryExpression -> . Expression TIMES Expression
    (10) BinaryExpression -> . Expression DIVIDE Expression
    (11) BinaryExpression -> . Expression MOD Expression
    (12) BinaryExpression -> . Expression LEQ Expression
    (13) BinaryExpression -> . Expression GEQ Expression
    (14) BinaryExpression -> . Expression LT Expression
    (15) BinaryExpression -> . Expression GT Expression
    (16) BinaryExpression -> . Expression EQ Expression
    (17) BinaryExpression -> . Expression NE Expression
    (77) UnaryExpression -> . IdListR
    (78) UnaryExpression -> . Literal
    (79) UnaryExpression -> . FunctionCall
    (80) UnaryExpression -> . BracketCall
    (81) UnaryExpression -> . LPAREN Expression RPAREN
    (39) IdListR -> . ID DOT IdListR
    (40) IdListR -> . ID
    (43) Literal -> . IntLiteral
    (44) Literal -> . BoolLiteral
    (35) FunctionCall -> . ID LPAREN ArgumentListR RPAREN
    (36) FunctionCall -> . ID LT TypeParameterListR GT LPAREN ArgumentListR RPAREN
    (22) BracketCall -> . IdListR LBRACKET Expression RBRACKET
    (42) IntLiteral -> . INTL
    (21) BoolLiteral -> . BOOLL

    LPAREN          shift and go to state 75
    ID              shift and go to state 115
    INTL            shift and go to state 80
    BOOLL           shift and go to state 87

    Expression                     shift and go to state 130
    BinaryExpression               shift and go to state 72
    UnaryExpression                shift and go to state 73
    IdListR                        shift and go to state 114
    Literal                        shift and go to state 83
    FunctionCall                   shift and go to state 71
    BracketCall                    shift and go to state 84
    IntLiteral                     shift and go to state 85
    BoolLiteral                    shift and go to state 86

state 101

    (14) BinaryExpression -> Expression LT . Expression
    (32) Expression -> . BinaryExpression
    (33) Expression -> . UnaryExpression
    (7) BinaryExpression -> . Expression PLUS Expression
    (8) BinaryExpression -> . Expression MINUS Expression
    (9) BinaryExpression -> . Expression TIMES Expression
    (10) BinaryExpression -> . Expression DIVIDE Expression
    (11) BinaryExpression -> . Expression MOD Expression
    (12) BinaryExpression -> . Expression LEQ Expression
    (13) BinaryExpression -> . Expression GEQ Expression
    (14) BinaryExpression -> . Expression LT Expression
    (15) BinaryExpression -> . Expression GT Expression
    (16) BinaryExpression -> . Expression EQ Expression
    (17) BinaryExpression -> . Expression NE Expression
    (77) UnaryExpression -> . IdListR
    (78) UnaryExpression -> . Literal
    (79) UnaryExpression -> . FunctionCall
    (80) UnaryExpression -> . BracketCall
    (81) UnaryExpression -> . LPAREN Expression RPAREN
    (39) IdListR -> . ID DOT IdListR
    (40) IdListR -> . ID
    (43) Literal -> . IntLiteral
    (44) Literal -> . BoolLiteral
    (35) FunctionCall -> . ID LPAREN ArgumentListR RPAREN
    (36) FunctionCall -> . ID LT TypeParameterListR GT LPAREN ArgumentListR RPAREN
    (22) BracketCall -> . IdListR LBRACKET Expression RBRACKET
    (42) IntLiteral -> . INTL
    (21) BoolLiteral -> . BOOLL

    LPAREN          shift and go to state 75
    ID              shift and go to state 115
    INTL            shift and go to state 80
    BOOLL           shift and go to state 87

    Expression                     shift and go to state 131
    BinaryExpression               shift and go to state 72
    UnaryExpression                shift and go to state 73
    IdListR                        shift and go to state 114
    Literal                        shift and go to state 83
    FunctionCall                   shift and go to state 71
    BracketCall                    shift and go to state 84
    IntLiteral                     shift and go to state 85
    BoolLiteral                    shift and go to state 86

state 102

    (15) BinaryExpression -> Expression GT . Expression
    (32) Expression -> . BinaryExpression
    (33) Expression -> . UnaryExpression
    (7) BinaryExpression -> . Expression PLUS Expression
    (8) BinaryExpression -> . Expression MINUS Expression
    (9) BinaryExpression -> . Expression TIMES Expression
    (10) BinaryExpression -> . Expression DIVIDE Expression
    (11) BinaryExpression -> . Expression MOD Expression
    (12) BinaryExpression -> . Expression LEQ Expression
    (13) BinaryExpression -> . Expression GEQ Expression
    (14) BinaryExpression -> . Expression LT Expression
    (15) BinaryExpression -> . Expression GT Expression
    (16) BinaryExpression -> . Expression EQ Expression
    (17) BinaryExpression -> . Expression NE Expression
    (77) UnaryExpression -> . IdListR
    (78) UnaryExpression -> . Literal
    (79) UnaryExpression -> . FunctionCall
    (80) UnaryExpression -> . BracketCall
    (81) UnaryExpression -> . LPAREN Expression RPAREN
    (39) IdListR -> . ID DOT IdListR
    (40) IdListR -> . ID
    (43) Literal -> . IntLiteral
    (44) Literal -> . BoolLiteral
    (35) FunctionCall -> . ID LPAREN ArgumentListR RPAREN
    (36) FunctionCall -> . ID LT TypeParameterListR GT LPAREN ArgumentListR RPAREN
    (22) BracketCall -> . IdListR LBRACKET Expression RBRACKET
    (42) IntLiteral -> . INTL
    (21) BoolLiteral -> . BOOLL

    LPAREN          shift and go to state 75
    ID              shift and go to state 115
    INTL            shift and go to state 80
    BOOLL           shift and go to state 87

    Expression                     shift and go to state 132
    BinaryExpression               shift and go to state 72
    UnaryExpression                shift and go to state 73
    IdListR                        shift and go to state 114
    Literal                        shift and go to state 83
    FunctionCall                   shift and go to state 71
    BracketCall                    shift and go to state 84
    IntLiteral                     shift and go to state 85
    BoolLiteral                    shift and go to state 86

state 103

    (16) BinaryExpression -> Expression EQ . Expression
    (32) Expression -> . BinaryExpression
    (33) Expression -> . UnaryExpression
    (7) BinaryExpression -> . Expression PLUS Expression
    (8) BinaryExpression -> . Expression MINUS Expression
    (9) BinaryExpression -> . Expression TIMES Expression
    (10) BinaryExpression -> . Expression DIVIDE Expression
    (11) BinaryExpression -> . Expression MOD Expression
    (12) BinaryExpression -> . Expression LEQ Expression
    (13) BinaryExpression -> . Expression GEQ Expression
    (14) BinaryExpression -> . Expression LT Expression
    (15) BinaryExpression -> . Expression GT Expression
    (16) BinaryExpression -> . Expression EQ Expression
    (17) BinaryExpression -> . Expression NE Expression
    (77) UnaryExpression -> . IdListR
    (78) UnaryExpression -> . Literal
    (79) UnaryExpression -> . FunctionCall
    (80) UnaryExpression -> . BracketCall
    (81) UnaryExpression -> . LPAREN Expression RPAREN
    (39) IdListR -> . ID DOT IdListR
    (40) IdListR -> . ID
    (43) Literal -> . IntLiteral
    (44) Literal -> . BoolLiteral
    (35) FunctionCall -> . ID LPAREN ArgumentListR RPAREN
    (36) FunctionCall -> . ID LT TypeParameterListR GT LPAREN ArgumentListR RPAREN
    (22) BracketCall -> . IdListR LBRACKET Expression RBRACKET
    (42) IntLiteral -> . INTL
    (21) BoolLiteral -> . BOOLL

    LPAREN          shift and go to state 75
    ID              shift and go to state 115
    INTL            shift and go to state 80
    BOOLL           shift and go to state 87

    Expression                     shift and go to state 133
    BinaryExpression               shift and go to state 72
    UnaryExpression                shift and go to state 73
    IdListR                        shift and go to state 114
    Literal                        shift and go to state 83
    FunctionCall                   shift and go to state 71
    BracketCall                    shift and go to state 84
    IntLiteral                     shift and go to state 85
    BoolLiteral                    shift and go to state 86

state 104

    (17) BinaryExpression -> Expression NE . Expression
    (32) Expression -> . BinaryExpression
    (33) Expression -> . UnaryExpression
    (7) BinaryExpression -> . Expression PLUS Expression
    (8) BinaryExpression -> . Expression MINUS Expression
    (9) BinaryExpression -> . Expression TIMES Expression
    (10) BinaryExpression -> . Expression DIVIDE Expression
    (11) BinaryExpression -> . Expression MOD Expression
    (12) BinaryExpression -> . Expression LEQ Expression
    (13) BinaryExpression -> . Expression GEQ Expression
    (14) BinaryExpression -> . Expression LT Expression
    (15) BinaryExpression -> . Expression GT Expression
    (16) BinaryExpression -> . Expression EQ Expression
    (17) BinaryExpression -> . Expression NE Expression
    (77) UnaryExpression -> . IdListR
    (78) UnaryExpression -> . Literal
    (79) UnaryExpression -> . FunctionCall
    (80) UnaryExpression -> . BracketCall
    (81) UnaryExpression -> . LPAREN Expression RPAREN
    (39) IdListR -> . ID DOT IdListR
    (40) IdListR -> . ID
    (43) Literal -> . IntLiteral
    (44) Literal -> . BoolLiteral
    (35) FunctionCall -> . ID LPAREN ArgumentListR RPAREN
    (36) FunctionCall -> . ID LT TypeParameterListR GT LPAREN ArgumentListR RPAREN
    (22) BracketCall -> . IdListR LBRACKET Expression RBRACKET
    (42) IntLiteral -> . INTL
    (21) BoolLiteral -> . BOOLL

    LPAREN          shift and go to state 75
    ID              shift and go to state 115
    INTL            shift and go to state 80
    BOOLL           shift and go to state 87

    Expression                     shift and go to state 134
    BinaryExpression               shift and go to state 72
    UnaryExpression                shift and go to state 73
    IdListR                        shift and go to state 114
    Literal                        shift and go to state 83
    FunctionCall                   shift and go to state 71
    BracketCall                    shift and go to state 84
    IntLiteral                     shift and go to state 85
    BoolLiteral                    shift and go to state 86

state 105

    (5) AssignmentStatement -> IdListR ASSIGNMENT . Expression SEMICOLON
    (6) AssignmentStatement -> IdListR ASSIGNMENT . Expression
    (32) Expression -> . BinaryExpression
    (33) Expression -> . UnaryExpression
    (7) BinaryExpression -> . Expression PLUS Expression
    (8) BinaryExpression -> . Expression MINUS Expression
    (9) BinaryExpression -> . Expression TIMES Expression
    (10) BinaryExpression -> . Expression DIVIDE Expression
    (11) BinaryExpression -> . Expression MOD Expression
    (12) BinaryExpression -> . Expression LEQ Expression
    (13) BinaryExpression -> . Expression GEQ Expression
    (14) BinaryExpression -> . Expression LT Expression
    (15) BinaryExpression -> . Expression GT Expression
    (16) BinaryExpression -> . Expression EQ Expression
    (17) BinaryExpression -> . Expression NE Expression
    (77) UnaryExpression -> . IdListR
    (78) UnaryExpression -> . Literal
    (79) UnaryExpression -> . FunctionCall
    (80) UnaryExpression -> . BracketCall
    (81) UnaryExpression -> . LPAREN Expression RPAREN
    (39) IdListR -> . ID DOT IdListR
    (40) IdListR -> . ID
    (43) Literal -> . IntLiteral
    (44) Literal -> . BoolLiteral
    (35) FunctionCall -> . ID LPAREN ArgumentListR RPAREN
    (36) FunctionCall -> . ID LT TypeParameterListR GT LPAREN ArgumentListR RPAREN
    (22) BracketCall -> . IdListR LBRACKET Expression RBRACKET
    (42) IntLiteral -> . INTL
    (21) BoolLiteral -> . BOOLL

    LPAREN          shift and go to state 75
    ID              shift and go to state 115
    INTL            shift and go to state 80
    BOOLL           shift and go to state 87

    IdListR                        shift and go to state 114
    Expression                     shift and go to state 135
    BinaryExpression               shift and go to state 72
    UnaryExpression                shift and go to state 73
    Literal                        shift and go to state 83
    FunctionCall                   shift and go to state 71
    BracketCall                    shift and go to state 84
    IntLiteral                     shift and go to state 85
    BoolLiteral                    shift and go to state 86

state 106

    (22) BracketCall -> IdListR LBRACKET . Expression RBRACKET
    (32) Expression -> . BinaryExpression
    (33) Expression -> . UnaryExpression
    (7) BinaryExpression -> . Expression PLUS Expression
    (8) BinaryExpression -> . Expression MINUS Expression
    (9) BinaryExpression -> . Expression TIMES Expression
    (10) BinaryExpression -> . Expression DIVIDE Expression
    (11) BinaryExpression -> . Expression MOD Expression
    (12) BinaryExpression -> . Expression LEQ Expression
    (13) BinaryExpression -> . Expression GEQ Expression
    (14) BinaryExpression -> . Expression LT Expression
    (15) BinaryExpression -> . Expression GT Expression
    (16) BinaryExpression -> . Expression EQ Expression
    (17) BinaryExpression -> . Expression NE Expression
    (77) UnaryExpression -> . IdListR
    (78) UnaryExpression -> . Literal
    (79) UnaryExpression -> . FunctionCall
    (80) UnaryExpression -> . BracketCall
    (81) UnaryExpression -> . LPAREN Expression RPAREN
    (39) IdListR -> . ID DOT IdListR
    (40) IdListR -> . ID
    (43) Literal -> . IntLiteral
    (44) Literal -> . BoolLiteral
    (35) FunctionCall -> . ID LPAREN ArgumentListR RPAREN
    (36) FunctionCall -> . ID LT TypeParameterListR GT LPAREN ArgumentListR RPAREN
    (22) BracketCall -> . IdListR LBRACKET Expression RBRACKET
    (42) IntLiteral -> . INTL
    (21) BoolLiteral -> . BOOLL

    LPAREN          shift and go to state 75
    ID              shift and go to state 115
    INTL            shift and go to state 80
    BOOLL           shift and go to state 87

    IdListR                        shift and go to state 114
    Expression                     shift and go to state 136
    BinaryExpression               shift and go to state 72
    UnaryExpression                shift and go to state 73
    Literal                        shift and go to state 83
    FunctionCall                   shift and go to state 71
    BracketCall                    shift and go to state 84
    IntLiteral                     shift and go to state 85
    BoolLiteral                    shift and go to state 86

state 107

    (26) DeclarationAssignmentStatement -> Type ID . ASSIGNMENT Expression SEMICOLON
    (28) DeclarationStatement -> Type ID . SEMICOLON
    (35) FunctionCall -> ID . LPAREN ArgumentListR RPAREN
    (36) FunctionCall -> ID . LT TypeParameterListR GT LPAREN ArgumentListR RPAREN

    ASSIGNMENT      shift and go to state 137
    SEMICOLON       shift and go to state 51
    LPAREN          shift and go to state 111
    LT              shift and go to state 138


state 108

    (27) DeclarationFunctionCallStatement -> Type FunctionCall . SEMICOLON

    SEMICOLON       shift and go to state 139


state 109

    (39) IdListR -> ID DOT . IdListR
    (39) IdListR -> . ID DOT IdListR
    (40) IdListR -> . ID

    ID              shift and go to state 140

    IdListR                        shift and go to state 141

state 110

    (72) Type -> ID LT . TypeParameterListR GT PointerListR
    (36) FunctionCall -> ID LT . TypeParameterListR GT LPAREN ArgumentListR RPAREN
    (74) TypeParameterListR -> . TypeParameter COMMA TypeParameterListR
    (75) TypeParameterListR -> . TypeParameter
    (76) TypeParameterListR -> . empty
    (73) TypeParameter -> . ID
    (83) empty -> .

    ID              shift and go to state 21
    GT              reduce using rule 83 (empty -> .)

    TypeParameterListR             shift and go to state 142
    TypeParameter                  shift and go to state 23
    empty                          shift and go to state 24

state 111

    (35) FunctionCall -> ID LPAREN . ArgumentListR RPAREN
    (2) ArgumentListR -> . Argument COMMA ArgumentListR
    (3) ArgumentListR -> . Argument
    (4) ArgumentListR -> . empty
    (1) Argument -> . Expression
    (83) empty -> .
    (32) Expression -> . BinaryExpression
    (33) Expression -> . UnaryExpression
    (7) BinaryExpression -> . Expression PLUS Expression
    (8) BinaryExpression -> . Expression MINUS Expression
    (9) BinaryExpression -> . Expression TIMES Expression
    (10) BinaryExpression -> . Expression DIVIDE Expression
    (11) BinaryExpression -> . Expression MOD Expression
    (12) BinaryExpression -> . Expression LEQ Expression
    (13) BinaryExpression -> . Expression GEQ Expression
    (14) BinaryExpression -> . Expression LT Expression
    (15) BinaryExpression -> . Expression GT Expression
    (16) BinaryExpression -> . Expression EQ Expression
    (17) BinaryExpression -> . Expression NE Expression
    (77) UnaryExpression -> . IdListR
    (78) UnaryExpression -> . Literal
    (79) UnaryExpression -> . FunctionCall
    (80) UnaryExpression -> . BracketCall
    (81) UnaryExpression -> . LPAREN Expression RPAREN
    (39) IdListR -> . ID DOT IdListR
    (40) IdListR -> . ID
    (43) Literal -> . IntLiteral
    (44) Literal -> . BoolLiteral
    (35) FunctionCall -> . ID LPAREN ArgumentListR RPAREN
    (36) FunctionCall -> . ID LT TypeParameterListR GT LPAREN ArgumentListR RPAREN
    (22) BracketCall -> . IdListR LBRACKET Expression RBRACKET
    (42) IntLiteral -> . INTL
    (21) BoolLiteral -> . BOOLL

    RPAREN          reduce using rule 83 (empty -> .)
    LPAREN          shift and go to state 75
    ID              shift and go to state 115
    INTL            shift and go to state 80
    BOOLL           shift and go to state 87

    ArgumentListR                  shift and go to state 143
    Argument                       shift and go to state 144
    empty                          shift and go to state 145
    Expression                     shift and go to state 146
    BinaryExpression               shift and go to state 72
    UnaryExpression                shift and go to state 73
    IdListR                        shift and go to state 114
    Literal                        shift and go to state 83
    FunctionCall                   shift and go to state 71
    BracketCall                    shift and go to state 84
    IntLiteral                     shift and go to state 85
    BoolLiteral                    shift and go to state 86

state 112

    (41) IfElseStatement -> IF LPAREN . Expression RPAREN Block ELSE Block
    (32) Expression -> . BinaryExpression
    (33) Expression -> . UnaryExpression
    (7) BinaryExpression -> . Expression PLUS Expression
    (8) BinaryExpression -> . Expression MINUS Expression
    (9) BinaryExpression -> . Expression TIMES Expression
    (10) BinaryExpression -> . Expression DIVIDE Expression
    (11) BinaryExpression -> . Expression MOD Expression
    (12) BinaryExpression -> . Expression LEQ Expression
    (13) BinaryExpression -> . Expression GEQ Expression
    (14) BinaryExpression -> . Expression LT Expression
    (15) BinaryExpression -> . Expression GT Expression
    (16) BinaryExpression -> . Expression EQ Expression
    (17) BinaryExpression -> . Expression NE Expression
    (77) UnaryExpression -> . IdListR
    (78) UnaryExpression -> . Literal
    (79) UnaryExpression -> . FunctionCall
    (80) UnaryExpression -> . BracketCall
    (81) UnaryExpression -> . LPAREN Expression RPAREN
    (39) IdListR -> . ID DOT IdListR
    (40) IdListR -> . ID
    (43) Literal -> . IntLiteral
    (44) Literal -> . BoolLiteral
    (35) FunctionCall -> . ID LPAREN ArgumentListR RPAREN
    (36) FunctionCall -> . ID LT TypeParameterListR GT LPAREN ArgumentListR RPAREN
    (22) BracketCall -> . IdListR LBRACKET Expression RBRACKET
    (42) IntLiteral -> . INTL
    (21) BoolLiteral -> . BOOLL

    LPAREN          shift and go to state 75
    ID              shift and go to state 115
    INTL            shift and go to state 80
    BOOLL           shift and go to state 87

    Expression                     shift and go to state 147
    BinaryExpression               shift and go to state 72
    UnaryExpression                shift and go to state 73
    IdListR                        shift and go to state 114
    Literal                        shift and go to state 83
    FunctionCall                   shift and go to state 71
    BracketCall                    shift and go to state 84
    IntLiteral                     shift and go to state 85
    BoolLiteral                    shift and go to state 86

state 113

    (81) UnaryExpression -> LPAREN Expression . RPAREN
    (7) BinaryExpression -> Expression . PLUS Expression
    (8) BinaryExpression -> Expression . MINUS Expression
    (9) BinaryExpression -> Expression . TIMES Expression
    (10) BinaryExpression -> Expression . DIVIDE Expression
    (11) BinaryExpression -> Expression . MOD Expression
    (12) BinaryExpression -> Expression . LEQ Expression
    (13) BinaryExpression -> Expression . GEQ Expression
    (14) BinaryExpression -> Expression . LT Expression
    (15) BinaryExpression -> Expression . GT Expression
    (16) BinaryExpression -> Expression . EQ Expression
    (17) BinaryExpression -> Expression . NE Expression

    RPAREN          shift and go to state 148
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    TIMES           shift and go to state 96
    DIVIDE          shift and go to state 97
    MOD             shift and go to state 98
    LEQ             shift and go to state 99
    GEQ             shift and go to state 100
    LT              shift and go to state 101
    GT              shift and go to state 102
    EQ              shift and go to state 103
    NE              shift and go to state 104


state 114

    (77) UnaryExpression -> IdListR .
    (22) BracketCall -> IdListR . LBRACKET Expression RBRACKET

    RPAREN          reduce using rule 77 (UnaryExpression -> IdListR .)
    PLUS            reduce using rule 77 (UnaryExpression -> IdListR .)
    MINUS           reduce using rule 77 (UnaryExpression -> IdListR .)
    TIMES           reduce using rule 77 (UnaryExpression -> IdListR .)
    DIVIDE          reduce using rule 77 (UnaryExpression -> IdListR .)
    MOD             reduce using rule 77 (UnaryExpression -> IdListR .)
    LEQ             reduce using rule 77 (UnaryExpression -> IdListR .)
    GEQ             reduce using rule 77 (UnaryExpression -> IdListR .)
    LT              reduce using rule 77 (UnaryExpression -> IdListR .)
    GT              reduce using rule 77 (UnaryExpression -> IdListR .)
    EQ              reduce using rule 77 (UnaryExpression -> IdListR .)
    NE              reduce using rule 77 (UnaryExpression -> IdListR .)
    SEMICOLON       reduce using rule 77 (UnaryExpression -> IdListR .)
    IF              reduce using rule 77 (UnaryExpression -> IdListR .)
    FOR             reduce using rule 77 (UnaryExpression -> IdListR .)
    WHILE           reduce using rule 77 (UnaryExpression -> IdListR .)
    BREAK           reduce using rule 77 (UnaryExpression -> IdListR .)
    RETURN          reduce using rule 77 (UnaryExpression -> IdListR .)
    ;               reduce using rule 77 (UnaryExpression -> IdListR .)
    ID              reduce using rule 77 (UnaryExpression -> IdListR .)
    LPAREN          reduce using rule 77 (UnaryExpression -> IdListR .)
    LBRACE          reduce using rule 77 (UnaryExpression -> IdListR .)
    INTL            reduce using rule 77 (UnaryExpression -> IdListR .)
    BOOLL           reduce using rule 77 (UnaryExpression -> IdListR .)
    RBRACE          reduce using rule 77 (UnaryExpression -> IdListR .)
    RBRACKET        reduce using rule 77 (UnaryExpression -> IdListR .)
    COMMA           reduce using rule 77 (UnaryExpression -> IdListR .)
    LBRACKET        shift and go to state 106


state 115

    (39) IdListR -> ID . DOT IdListR
    (40) IdListR -> ID .
    (35) FunctionCall -> ID . LPAREN ArgumentListR RPAREN
    (36) FunctionCall -> ID . LT TypeParameterListR GT LPAREN ArgumentListR RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LT resolved as shift
    DOT             shift and go to state 109
    LBRACKET        reduce using rule 40 (IdListR -> ID .)
    RPAREN          reduce using rule 40 (IdListR -> ID .)
    PLUS            reduce using rule 40 (IdListR -> ID .)
    MINUS           reduce using rule 40 (IdListR -> ID .)
    TIMES           reduce using rule 40 (IdListR -> ID .)
    DIVIDE          reduce using rule 40 (IdListR -> ID .)
    MOD             reduce using rule 40 (IdListR -> ID .)
    LEQ             reduce using rule 40 (IdListR -> ID .)
    GEQ             reduce using rule 40 (IdListR -> ID .)
    GT              reduce using rule 40 (IdListR -> ID .)
    EQ              reduce using rule 40 (IdListR -> ID .)
    NE              reduce using rule 40 (IdListR -> ID .)
    SEMICOLON       reduce using rule 40 (IdListR -> ID .)
    IF              reduce using rule 40 (IdListR -> ID .)
    FOR             reduce using rule 40 (IdListR -> ID .)
    WHILE           reduce using rule 40 (IdListR -> ID .)
    BREAK           reduce using rule 40 (IdListR -> ID .)
    RETURN          reduce using rule 40 (IdListR -> ID .)
    ;               reduce using rule 40 (IdListR -> ID .)
    ID              reduce using rule 40 (IdListR -> ID .)
    LBRACE          reduce using rule 40 (IdListR -> ID .)
    INTL            reduce using rule 40 (IdListR -> ID .)
    BOOLL           reduce using rule 40 (IdListR -> ID .)
    RBRACE          reduce using rule 40 (IdListR -> ID .)
    RBRACKET        reduce using rule 40 (IdListR -> ID .)
    COMMA           reduce using rule 40 (IdListR -> ID .)
    LPAREN          shift and go to state 111
    LT              shift and go to state 138

  ! LT              [ reduce using rule 40 (IdListR -> ID .) ]
  ! LPAREN          [ reduce using rule 40 (IdListR -> ID .) ]


state 116

    (34) ForStatement -> FOR LPAREN . Statement Expression SEMICOLON Statement RPAREN Block
    (53) Statement -> . AssignmentStatement
    (54) Statement -> . DeclarationAssignmentStatement
    (55) Statement -> . DeclarationFunctionCallStatement
    (56) Statement -> . DeclarationStatement
    (57) Statement -> . Expression SEMICOLON
    (58) Statement -> . IfElseStatement
    (59) Statement -> . ForStatement
    (60) Statement -> . WhileStatement
    (61) Statement -> . BreakStatement
    (62) Statement -> . ReturnStatement
    (63) Statement -> . BlockStatement
    (64) Statement -> . BlankStatement
    (5) AssignmentStatement -> . IdListR ASSIGNMENT Expression SEMICOLON
    (6) AssignmentStatement -> . IdListR ASSIGNMENT Expression
    (26) DeclarationAssignmentStatement -> . Type ID ASSIGNMENT Expression SEMICOLON
    (27) DeclarationFunctionCallStatement -> . Type FunctionCall SEMICOLON
    (28) DeclarationStatement -> . Type ID SEMICOLON
    (32) Expression -> . BinaryExpression
    (33) Expression -> . UnaryExpression
    (41) IfElseStatement -> . IF LPAREN Expression RPAREN Block ELSE Block
    (34) ForStatement -> . FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block
    (82) WhileStatement -> . WHILE LPAREN Expression RPAREN Block
    (23) BreakStatement -> . BREAK INTL SEMICOLON
    (24) BreakStatement -> . BREAK SEMICOLON
    (51) ReturnStatement -> . RETURN Expression SEMICOLON
    (52) ReturnStatement -> . RETURN SEMICOLON
    (20) BlockStatement -> . Block
    (18) BlankStatement -> . ;
    (39) IdListR -> . ID DOT IdListR
    (40) IdListR -> . ID
    (71) Type -> . ID PointerListR
    (72) Type -> . ID LT TypeParameterListR GT PointerListR
    (7) BinaryExpression -> . Expression PLUS Expression
    (8) BinaryExpression -> . Expression MINUS Expression
    (9) BinaryExpression -> . Expression TIMES Expression
    (10) BinaryExpression -> . Expression DIVIDE Expression
    (11) BinaryExpression -> . Expression MOD Expression
    (12) BinaryExpression -> . Expression LEQ Expression
    (13) BinaryExpression -> . Expression GEQ Expression
    (14) BinaryExpression -> . Expression LT Expression
    (15) BinaryExpression -> . Expression GT Expression
    (16) BinaryExpression -> . Expression EQ Expression
    (17) BinaryExpression -> . Expression NE Expression
    (77) UnaryExpression -> . IdListR
    (78) UnaryExpression -> . Literal
    (79) UnaryExpression -> . FunctionCall
    (80) UnaryExpression -> . BracketCall
    (81) UnaryExpression -> . LPAREN Expression RPAREN
    (19) Block -> . LBRACE StatementListR RBRACE
    (43) Literal -> . IntLiteral
    (44) Literal -> . BoolLiteral
    (35) FunctionCall -> . ID LPAREN ArgumentListR RPAREN
    (36) FunctionCall -> . ID LT TypeParameterListR GT LPAREN ArgumentListR RPAREN
    (22) BracketCall -> . IdListR LBRACKET Expression RBRACKET
    (42) IntLiteral -> . INTL
    (21) BoolLiteral -> . BOOLL

    IF              shift and go to state 74
    FOR             shift and go to state 77
    WHILE           shift and go to state 78
    BREAK           shift and go to state 79
    RETURN          shift and go to state 81
    ;               shift and go to state 82
    ID              shift and go to state 70
    LPAREN          shift and go to state 75
    LBRACE          shift and go to state 46
    INTL            shift and go to state 80
    BOOLL           shift and go to state 87

    Statement                      shift and go to state 149
    Expression                     shift and go to state 60
    Block                          shift and go to state 76
    AssignmentStatement            shift and go to state 56
    DeclarationAssignmentStatement shift and go to state 57
    DeclarationFunctionCallStatement shift and go to state 58
    DeclarationStatement           shift and go to state 59
    IfElseStatement                shift and go to state 61
    ForStatement                   shift and go to state 62
    WhileStatement                 shift and go to state 63
    BreakStatement                 shift and go to state 64
    ReturnStatement                shift and go to state 65
    BlockStatement                 shift and go to state 66
    BlankStatement                 shift and go to state 67
    IdListR                        shift and go to state 68
    Type                           shift and go to state 69
    FunctionCall                   shift and go to state 71
    BinaryExpression               shift and go to state 72
    UnaryExpression                shift and go to state 73
    Literal                        shift and go to state 83
    BracketCall                    shift and go to state 84
    IntLiteral                     shift and go to state 85
    BoolLiteral                    shift and go to state 86

state 117

    (82) WhileStatement -> WHILE LPAREN . Expression RPAREN Block
    (32) Expression -> . BinaryExpression
    (33) Expression -> . UnaryExpression
    (7) BinaryExpression -> . Expression PLUS Expression
    (8) BinaryExpression -> . Expression MINUS Expression
    (9) BinaryExpression -> . Expression TIMES Expression
    (10) BinaryExpression -> . Expression DIVIDE Expression
    (11) BinaryExpression -> . Expression MOD Expression
    (12) BinaryExpression -> . Expression LEQ Expression
    (13) BinaryExpression -> . Expression GEQ Expression
    (14) BinaryExpression -> . Expression LT Expression
    (15) BinaryExpression -> . Expression GT Expression
    (16) BinaryExpression -> . Expression EQ Expression
    (17) BinaryExpression -> . Expression NE Expression
    (77) UnaryExpression -> . IdListR
    (78) UnaryExpression -> . Literal
    (79) UnaryExpression -> . FunctionCall
    (80) UnaryExpression -> . BracketCall
    (81) UnaryExpression -> . LPAREN Expression RPAREN
    (39) IdListR -> . ID DOT IdListR
    (40) IdListR -> . ID
    (43) Literal -> . IntLiteral
    (44) Literal -> . BoolLiteral
    (35) FunctionCall -> . ID LPAREN ArgumentListR RPAREN
    (36) FunctionCall -> . ID LT TypeParameterListR GT LPAREN ArgumentListR RPAREN
    (22) BracketCall -> . IdListR LBRACKET Expression RBRACKET
    (42) IntLiteral -> . INTL
    (21) BoolLiteral -> . BOOLL

    LPAREN          shift and go to state 75
    ID              shift and go to state 115
    INTL            shift and go to state 80
    BOOLL           shift and go to state 87

    Expression                     shift and go to state 150
    BinaryExpression               shift and go to state 72
    UnaryExpression                shift and go to state 73
    IdListR                        shift and go to state 114
    Literal                        shift and go to state 83
    FunctionCall                   shift and go to state 71
    BracketCall                    shift and go to state 84
    IntLiteral                     shift and go to state 85
    BoolLiteral                    shift and go to state 86

state 118

    (23) BreakStatement -> BREAK INTL . SEMICOLON

    SEMICOLON       shift and go to state 151


state 119

    (24) BreakStatement -> BREAK SEMICOLON .

    IF              reduce using rule 24 (BreakStatement -> BREAK SEMICOLON .)
    FOR             reduce using rule 24 (BreakStatement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 24 (BreakStatement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 24 (BreakStatement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 24 (BreakStatement -> BREAK SEMICOLON .)
    ;               reduce using rule 24 (BreakStatement -> BREAK SEMICOLON .)
    ID              reduce using rule 24 (BreakStatement -> BREAK SEMICOLON .)
    LPAREN          reduce using rule 24 (BreakStatement -> BREAK SEMICOLON .)
    LBRACE          reduce using rule 24 (BreakStatement -> BREAK SEMICOLON .)
    INTL            reduce using rule 24 (BreakStatement -> BREAK SEMICOLON .)
    BOOLL           reduce using rule 24 (BreakStatement -> BREAK SEMICOLON .)
    RBRACE          reduce using rule 24 (BreakStatement -> BREAK SEMICOLON .)
    RPAREN          reduce using rule 24 (BreakStatement -> BREAK SEMICOLON .)


state 120

    (51) ReturnStatement -> RETURN Expression . SEMICOLON
    (7) BinaryExpression -> Expression . PLUS Expression
    (8) BinaryExpression -> Expression . MINUS Expression
    (9) BinaryExpression -> Expression . TIMES Expression
    (10) BinaryExpression -> Expression . DIVIDE Expression
    (11) BinaryExpression -> Expression . MOD Expression
    (12) BinaryExpression -> Expression . LEQ Expression
    (13) BinaryExpression -> Expression . GEQ Expression
    (14) BinaryExpression -> Expression . LT Expression
    (15) BinaryExpression -> Expression . GT Expression
    (16) BinaryExpression -> Expression . EQ Expression
    (17) BinaryExpression -> Expression . NE Expression

    SEMICOLON       shift and go to state 152
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    TIMES           shift and go to state 96
    DIVIDE          shift and go to state 97
    MOD             shift and go to state 98
    LEQ             shift and go to state 99
    GEQ             shift and go to state 100
    LT              shift and go to state 101
    GT              shift and go to state 102
    EQ              shift and go to state 103
    NE              shift and go to state 104


state 121

    (52) ReturnStatement -> RETURN SEMICOLON .

    IF              reduce using rule 52 (ReturnStatement -> RETURN SEMICOLON .)
    FOR             reduce using rule 52 (ReturnStatement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 52 (ReturnStatement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 52 (ReturnStatement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 52 (ReturnStatement -> RETURN SEMICOLON .)
    ;               reduce using rule 52 (ReturnStatement -> RETURN SEMICOLON .)
    ID              reduce using rule 52 (ReturnStatement -> RETURN SEMICOLON .)
    LPAREN          reduce using rule 52 (ReturnStatement -> RETURN SEMICOLON .)
    LBRACE          reduce using rule 52 (ReturnStatement -> RETURN SEMICOLON .)
    INTL            reduce using rule 52 (ReturnStatement -> RETURN SEMICOLON .)
    BOOLL           reduce using rule 52 (ReturnStatement -> RETURN SEMICOLON .)
    RBRACE          reduce using rule 52 (ReturnStatement -> RETURN SEMICOLON .)
    RPAREN          reduce using rule 52 (ReturnStatement -> RETURN SEMICOLON .)


state 122

    (38) FunctionDefinition -> ID ID LT TypeParameterListR GT LPAREN ParameterListR RPAREN . Block
    (19) Block -> . LBRACE StatementListR RBRACE

    LBRACE          shift and go to state 46

    Block                          shift and go to state 153

state 123

    (67) StructDefinition -> STRUCT ID LT TypeParameterListR GT LBRACE StructMemberDeclarationListR RBRACE .

    ID              reduce using rule 67 (StructDefinition -> STRUCT ID LT TypeParameterListR GT LBRACE StructMemberDeclarationListR RBRACE .)
    STRUCT          reduce using rule 67 (StructDefinition -> STRUCT ID LT TypeParameterListR GT LBRACE StructMemberDeclarationListR RBRACE .)
    $end            reduce using rule 67 (StructDefinition -> STRUCT ID LT TypeParameterListR GT LBRACE StructMemberDeclarationListR RBRACE .)


state 124

    (7) BinaryExpression -> Expression PLUS Expression .
    (7) BinaryExpression -> Expression . PLUS Expression
    (8) BinaryExpression -> Expression . MINUS Expression
    (9) BinaryExpression -> Expression . TIMES Expression
    (10) BinaryExpression -> Expression . DIVIDE Expression
    (11) BinaryExpression -> Expression . MOD Expression
    (12) BinaryExpression -> Expression . LEQ Expression
    (13) BinaryExpression -> Expression . GEQ Expression
    (14) BinaryExpression -> Expression . LT Expression
    (15) BinaryExpression -> Expression . GT Expression
    (16) BinaryExpression -> Expression . EQ Expression
    (17) BinaryExpression -> Expression . NE Expression

    SEMICOLON       reduce using rule 7 (BinaryExpression -> Expression PLUS Expression .)
    PLUS            reduce using rule 7 (BinaryExpression -> Expression PLUS Expression .)
    MINUS           reduce using rule 7 (BinaryExpression -> Expression PLUS Expression .)
    RPAREN          reduce using rule 7 (BinaryExpression -> Expression PLUS Expression .)
    IF              reduce using rule 7 (BinaryExpression -> Expression PLUS Expression .)
    FOR             reduce using rule 7 (BinaryExpression -> Expression PLUS Expression .)
    WHILE           reduce using rule 7 (BinaryExpression -> Expression PLUS Expression .)
    BREAK           reduce using rule 7 (BinaryExpression -> Expression PLUS Expression .)
    RETURN          reduce using rule 7 (BinaryExpression -> Expression PLUS Expression .)
    ;               reduce using rule 7 (BinaryExpression -> Expression PLUS Expression .)
    ID              reduce using rule 7 (BinaryExpression -> Expression PLUS Expression .)
    LPAREN          reduce using rule 7 (BinaryExpression -> Expression PLUS Expression .)
    LBRACE          reduce using rule 7 (BinaryExpression -> Expression PLUS Expression .)
    INTL            reduce using rule 7 (BinaryExpression -> Expression PLUS Expression .)
    BOOLL           reduce using rule 7 (BinaryExpression -> Expression PLUS Expression .)
    RBRACE          reduce using rule 7 (BinaryExpression -> Expression PLUS Expression .)
    RBRACKET        reduce using rule 7 (BinaryExpression -> Expression PLUS Expression .)
    COMMA           reduce using rule 7 (BinaryExpression -> Expression PLUS Expression .)
    TIMES           shift and go to state 96
    DIVIDE          shift and go to state 97
    MOD             shift and go to state 98
    LEQ             shift and go to state 99
    GEQ             shift and go to state 100
    LT              shift and go to state 101
    GT              shift and go to state 102
    EQ              shift and go to state 103
    NE              shift and go to state 104

  ! TIMES           [ reduce using rule 7 (BinaryExpression -> Expression PLUS Expression .) ]
  ! DIVIDE          [ reduce using rule 7 (BinaryExpression -> Expression PLUS Expression .) ]
  ! MOD             [ reduce using rule 7 (BinaryExpression -> Expression PLUS Expression .) ]
  ! LEQ             [ reduce using rule 7 (BinaryExpression -> Expression PLUS Expression .) ]
  ! GEQ             [ reduce using rule 7 (BinaryExpression -> Expression PLUS Expression .) ]
  ! LT              [ reduce using rule 7 (BinaryExpression -> Expression PLUS Expression .) ]
  ! GT              [ reduce using rule 7 (BinaryExpression -> Expression PLUS Expression .) ]
  ! EQ              [ reduce using rule 7 (BinaryExpression -> Expression PLUS Expression .) ]
  ! NE              [ reduce using rule 7 (BinaryExpression -> Expression PLUS Expression .) ]
  ! PLUS            [ shift and go to state 94 ]
  ! MINUS           [ shift and go to state 95 ]


state 125

    (8) BinaryExpression -> Expression MINUS Expression .
    (7) BinaryExpression -> Expression . PLUS Expression
    (8) BinaryExpression -> Expression . MINUS Expression
    (9) BinaryExpression -> Expression . TIMES Expression
    (10) BinaryExpression -> Expression . DIVIDE Expression
    (11) BinaryExpression -> Expression . MOD Expression
    (12) BinaryExpression -> Expression . LEQ Expression
    (13) BinaryExpression -> Expression . GEQ Expression
    (14) BinaryExpression -> Expression . LT Expression
    (15) BinaryExpression -> Expression . GT Expression
    (16) BinaryExpression -> Expression . EQ Expression
    (17) BinaryExpression -> Expression . NE Expression

    SEMICOLON       reduce using rule 8 (BinaryExpression -> Expression MINUS Expression .)
    PLUS            reduce using rule 8 (BinaryExpression -> Expression MINUS Expression .)
    MINUS           reduce using rule 8 (BinaryExpression -> Expression MINUS Expression .)
    RPAREN          reduce using rule 8 (BinaryExpression -> Expression MINUS Expression .)
    IF              reduce using rule 8 (BinaryExpression -> Expression MINUS Expression .)
    FOR             reduce using rule 8 (BinaryExpression -> Expression MINUS Expression .)
    WHILE           reduce using rule 8 (BinaryExpression -> Expression MINUS Expression .)
    BREAK           reduce using rule 8 (BinaryExpression -> Expression MINUS Expression .)
    RETURN          reduce using rule 8 (BinaryExpression -> Expression MINUS Expression .)
    ;               reduce using rule 8 (BinaryExpression -> Expression MINUS Expression .)
    ID              reduce using rule 8 (BinaryExpression -> Expression MINUS Expression .)
    LPAREN          reduce using rule 8 (BinaryExpression -> Expression MINUS Expression .)
    LBRACE          reduce using rule 8 (BinaryExpression -> Expression MINUS Expression .)
    INTL            reduce using rule 8 (BinaryExpression -> Expression MINUS Expression .)
    BOOLL           reduce using rule 8 (BinaryExpression -> Expression MINUS Expression .)
    RBRACE          reduce using rule 8 (BinaryExpression -> Expression MINUS Expression .)
    RBRACKET        reduce using rule 8 (BinaryExpression -> Expression MINUS Expression .)
    COMMA           reduce using rule 8 (BinaryExpression -> Expression MINUS Expression .)
    TIMES           shift and go to state 96
    DIVIDE          shift and go to state 97
    MOD             shift and go to state 98
    LEQ             shift and go to state 99
    GEQ             shift and go to state 100
    LT              shift and go to state 101
    GT              shift and go to state 102
    EQ              shift and go to state 103
    NE              shift and go to state 104

  ! TIMES           [ reduce using rule 8 (BinaryExpression -> Expression MINUS Expression .) ]
  ! DIVIDE          [ reduce using rule 8 (BinaryExpression -> Expression MINUS Expression .) ]
  ! MOD             [ reduce using rule 8 (BinaryExpression -> Expression MINUS Expression .) ]
  ! LEQ             [ reduce using rule 8 (BinaryExpression -> Expression MINUS Expression .) ]
  ! GEQ             [ reduce using rule 8 (BinaryExpression -> Expression MINUS Expression .) ]
  ! LT              [ reduce using rule 8 (BinaryExpression -> Expression MINUS Expression .) ]
  ! GT              [ reduce using rule 8 (BinaryExpression -> Expression MINUS Expression .) ]
  ! EQ              [ reduce using rule 8 (BinaryExpression -> Expression MINUS Expression .) ]
  ! NE              [ reduce using rule 8 (BinaryExpression -> Expression MINUS Expression .) ]
  ! PLUS            [ shift and go to state 94 ]
  ! MINUS           [ shift and go to state 95 ]


state 126

    (9) BinaryExpression -> Expression TIMES Expression .
    (7) BinaryExpression -> Expression . PLUS Expression
    (8) BinaryExpression -> Expression . MINUS Expression
    (9) BinaryExpression -> Expression . TIMES Expression
    (10) BinaryExpression -> Expression . DIVIDE Expression
    (11) BinaryExpression -> Expression . MOD Expression
    (12) BinaryExpression -> Expression . LEQ Expression
    (13) BinaryExpression -> Expression . GEQ Expression
    (14) BinaryExpression -> Expression . LT Expression
    (15) BinaryExpression -> Expression . GT Expression
    (16) BinaryExpression -> Expression . EQ Expression
    (17) BinaryExpression -> Expression . NE Expression

    SEMICOLON       reduce using rule 9 (BinaryExpression -> Expression TIMES Expression .)
    PLUS            reduce using rule 9 (BinaryExpression -> Expression TIMES Expression .)
    MINUS           reduce using rule 9 (BinaryExpression -> Expression TIMES Expression .)
    TIMES           reduce using rule 9 (BinaryExpression -> Expression TIMES Expression .)
    DIVIDE          reduce using rule 9 (BinaryExpression -> Expression TIMES Expression .)
    MOD             reduce using rule 9 (BinaryExpression -> Expression TIMES Expression .)
    RPAREN          reduce using rule 9 (BinaryExpression -> Expression TIMES Expression .)
    IF              reduce using rule 9 (BinaryExpression -> Expression TIMES Expression .)
    FOR             reduce using rule 9 (BinaryExpression -> Expression TIMES Expression .)
    WHILE           reduce using rule 9 (BinaryExpression -> Expression TIMES Expression .)
    BREAK           reduce using rule 9 (BinaryExpression -> Expression TIMES Expression .)
    RETURN          reduce using rule 9 (BinaryExpression -> Expression TIMES Expression .)
    ;               reduce using rule 9 (BinaryExpression -> Expression TIMES Expression .)
    ID              reduce using rule 9 (BinaryExpression -> Expression TIMES Expression .)
    LPAREN          reduce using rule 9 (BinaryExpression -> Expression TIMES Expression .)
    LBRACE          reduce using rule 9 (BinaryExpression -> Expression TIMES Expression .)
    INTL            reduce using rule 9 (BinaryExpression -> Expression TIMES Expression .)
    BOOLL           reduce using rule 9 (BinaryExpression -> Expression TIMES Expression .)
    RBRACE          reduce using rule 9 (BinaryExpression -> Expression TIMES Expression .)
    RBRACKET        reduce using rule 9 (BinaryExpression -> Expression TIMES Expression .)
    COMMA           reduce using rule 9 (BinaryExpression -> Expression TIMES Expression .)
    LEQ             shift and go to state 99
    GEQ             shift and go to state 100
    LT              shift and go to state 101
    GT              shift and go to state 102
    EQ              shift and go to state 103
    NE              shift and go to state 104

  ! LEQ             [ reduce using rule 9 (BinaryExpression -> Expression TIMES Expression .) ]
  ! GEQ             [ reduce using rule 9 (BinaryExpression -> Expression TIMES Expression .) ]
  ! LT              [ reduce using rule 9 (BinaryExpression -> Expression TIMES Expression .) ]
  ! GT              [ reduce using rule 9 (BinaryExpression -> Expression TIMES Expression .) ]
  ! EQ              [ reduce using rule 9 (BinaryExpression -> Expression TIMES Expression .) ]
  ! NE              [ reduce using rule 9 (BinaryExpression -> Expression TIMES Expression .) ]
  ! PLUS            [ shift and go to state 94 ]
  ! MINUS           [ shift and go to state 95 ]
  ! TIMES           [ shift and go to state 96 ]
  ! DIVIDE          [ shift and go to state 97 ]
  ! MOD             [ shift and go to state 98 ]


state 127

    (10) BinaryExpression -> Expression DIVIDE Expression .
    (7) BinaryExpression -> Expression . PLUS Expression
    (8) BinaryExpression -> Expression . MINUS Expression
    (9) BinaryExpression -> Expression . TIMES Expression
    (10) BinaryExpression -> Expression . DIVIDE Expression
    (11) BinaryExpression -> Expression . MOD Expression
    (12) BinaryExpression -> Expression . LEQ Expression
    (13) BinaryExpression -> Expression . GEQ Expression
    (14) BinaryExpression -> Expression . LT Expression
    (15) BinaryExpression -> Expression . GT Expression
    (16) BinaryExpression -> Expression . EQ Expression
    (17) BinaryExpression -> Expression . NE Expression

    SEMICOLON       reduce using rule 10 (BinaryExpression -> Expression DIVIDE Expression .)
    PLUS            reduce using rule 10 (BinaryExpression -> Expression DIVIDE Expression .)
    MINUS           reduce using rule 10 (BinaryExpression -> Expression DIVIDE Expression .)
    TIMES           reduce using rule 10 (BinaryExpression -> Expression DIVIDE Expression .)
    DIVIDE          reduce using rule 10 (BinaryExpression -> Expression DIVIDE Expression .)
    MOD             reduce using rule 10 (BinaryExpression -> Expression DIVIDE Expression .)
    RPAREN          reduce using rule 10 (BinaryExpression -> Expression DIVIDE Expression .)
    IF              reduce using rule 10 (BinaryExpression -> Expression DIVIDE Expression .)
    FOR             reduce using rule 10 (BinaryExpression -> Expression DIVIDE Expression .)
    WHILE           reduce using rule 10 (BinaryExpression -> Expression DIVIDE Expression .)
    BREAK           reduce using rule 10 (BinaryExpression -> Expression DIVIDE Expression .)
    RETURN          reduce using rule 10 (BinaryExpression -> Expression DIVIDE Expression .)
    ;               reduce using rule 10 (BinaryExpression -> Expression DIVIDE Expression .)
    ID              reduce using rule 10 (BinaryExpression -> Expression DIVIDE Expression .)
    LPAREN          reduce using rule 10 (BinaryExpression -> Expression DIVIDE Expression .)
    LBRACE          reduce using rule 10 (BinaryExpression -> Expression DIVIDE Expression .)
    INTL            reduce using rule 10 (BinaryExpression -> Expression DIVIDE Expression .)
    BOOLL           reduce using rule 10 (BinaryExpression -> Expression DIVIDE Expression .)
    RBRACE          reduce using rule 10 (BinaryExpression -> Expression DIVIDE Expression .)
    RBRACKET        reduce using rule 10 (BinaryExpression -> Expression DIVIDE Expression .)
    COMMA           reduce using rule 10 (BinaryExpression -> Expression DIVIDE Expression .)
    LEQ             shift and go to state 99
    GEQ             shift and go to state 100
    LT              shift and go to state 101
    GT              shift and go to state 102
    EQ              shift and go to state 103
    NE              shift and go to state 104

  ! LEQ             [ reduce using rule 10 (BinaryExpression -> Expression DIVIDE Expression .) ]
  ! GEQ             [ reduce using rule 10 (BinaryExpression -> Expression DIVIDE Expression .) ]
  ! LT              [ reduce using rule 10 (BinaryExpression -> Expression DIVIDE Expression .) ]
  ! GT              [ reduce using rule 10 (BinaryExpression -> Expression DIVIDE Expression .) ]
  ! EQ              [ reduce using rule 10 (BinaryExpression -> Expression DIVIDE Expression .) ]
  ! NE              [ reduce using rule 10 (BinaryExpression -> Expression DIVIDE Expression .) ]
  ! PLUS            [ shift and go to state 94 ]
  ! MINUS           [ shift and go to state 95 ]
  ! TIMES           [ shift and go to state 96 ]
  ! DIVIDE          [ shift and go to state 97 ]
  ! MOD             [ shift and go to state 98 ]


state 128

    (11) BinaryExpression -> Expression MOD Expression .
    (7) BinaryExpression -> Expression . PLUS Expression
    (8) BinaryExpression -> Expression . MINUS Expression
    (9) BinaryExpression -> Expression . TIMES Expression
    (10) BinaryExpression -> Expression . DIVIDE Expression
    (11) BinaryExpression -> Expression . MOD Expression
    (12) BinaryExpression -> Expression . LEQ Expression
    (13) BinaryExpression -> Expression . GEQ Expression
    (14) BinaryExpression -> Expression . LT Expression
    (15) BinaryExpression -> Expression . GT Expression
    (16) BinaryExpression -> Expression . EQ Expression
    (17) BinaryExpression -> Expression . NE Expression

    SEMICOLON       reduce using rule 11 (BinaryExpression -> Expression MOD Expression .)
    PLUS            reduce using rule 11 (BinaryExpression -> Expression MOD Expression .)
    MINUS           reduce using rule 11 (BinaryExpression -> Expression MOD Expression .)
    TIMES           reduce using rule 11 (BinaryExpression -> Expression MOD Expression .)
    DIVIDE          reduce using rule 11 (BinaryExpression -> Expression MOD Expression .)
    MOD             reduce using rule 11 (BinaryExpression -> Expression MOD Expression .)
    RPAREN          reduce using rule 11 (BinaryExpression -> Expression MOD Expression .)
    IF              reduce using rule 11 (BinaryExpression -> Expression MOD Expression .)
    FOR             reduce using rule 11 (BinaryExpression -> Expression MOD Expression .)
    WHILE           reduce using rule 11 (BinaryExpression -> Expression MOD Expression .)
    BREAK           reduce using rule 11 (BinaryExpression -> Expression MOD Expression .)
    RETURN          reduce using rule 11 (BinaryExpression -> Expression MOD Expression .)
    ;               reduce using rule 11 (BinaryExpression -> Expression MOD Expression .)
    ID              reduce using rule 11 (BinaryExpression -> Expression MOD Expression .)
    LPAREN          reduce using rule 11 (BinaryExpression -> Expression MOD Expression .)
    LBRACE          reduce using rule 11 (BinaryExpression -> Expression MOD Expression .)
    INTL            reduce using rule 11 (BinaryExpression -> Expression MOD Expression .)
    BOOLL           reduce using rule 11 (BinaryExpression -> Expression MOD Expression .)
    RBRACE          reduce using rule 11 (BinaryExpression -> Expression MOD Expression .)
    RBRACKET        reduce using rule 11 (BinaryExpression -> Expression MOD Expression .)
    COMMA           reduce using rule 11 (BinaryExpression -> Expression MOD Expression .)
    LEQ             shift and go to state 99
    GEQ             shift and go to state 100
    LT              shift and go to state 101
    GT              shift and go to state 102
    EQ              shift and go to state 103
    NE              shift and go to state 104

  ! LEQ             [ reduce using rule 11 (BinaryExpression -> Expression MOD Expression .) ]
  ! GEQ             [ reduce using rule 11 (BinaryExpression -> Expression MOD Expression .) ]
  ! LT              [ reduce using rule 11 (BinaryExpression -> Expression MOD Expression .) ]
  ! GT              [ reduce using rule 11 (BinaryExpression -> Expression MOD Expression .) ]
  ! EQ              [ reduce using rule 11 (BinaryExpression -> Expression MOD Expression .) ]
  ! NE              [ reduce using rule 11 (BinaryExpression -> Expression MOD Expression .) ]
  ! PLUS            [ shift and go to state 94 ]
  ! MINUS           [ shift and go to state 95 ]
  ! TIMES           [ shift and go to state 96 ]
  ! DIVIDE          [ shift and go to state 97 ]
  ! MOD             [ shift and go to state 98 ]


state 129

    (12) BinaryExpression -> Expression LEQ Expression .
    (7) BinaryExpression -> Expression . PLUS Expression
    (8) BinaryExpression -> Expression . MINUS Expression
    (9) BinaryExpression -> Expression . TIMES Expression
    (10) BinaryExpression -> Expression . DIVIDE Expression
    (11) BinaryExpression -> Expression . MOD Expression
    (12) BinaryExpression -> Expression . LEQ Expression
    (13) BinaryExpression -> Expression . GEQ Expression
    (14) BinaryExpression -> Expression . LT Expression
    (15) BinaryExpression -> Expression . GT Expression
    (16) BinaryExpression -> Expression . EQ Expression
    (17) BinaryExpression -> Expression . NE Expression

    SEMICOLON       reduce using rule 12 (BinaryExpression -> Expression LEQ Expression .)
    PLUS            reduce using rule 12 (BinaryExpression -> Expression LEQ Expression .)
    MINUS           reduce using rule 12 (BinaryExpression -> Expression LEQ Expression .)
    TIMES           reduce using rule 12 (BinaryExpression -> Expression LEQ Expression .)
    DIVIDE          reduce using rule 12 (BinaryExpression -> Expression LEQ Expression .)
    MOD             reduce using rule 12 (BinaryExpression -> Expression LEQ Expression .)
    LEQ             reduce using rule 12 (BinaryExpression -> Expression LEQ Expression .)
    GEQ             reduce using rule 12 (BinaryExpression -> Expression LEQ Expression .)
    LT              reduce using rule 12 (BinaryExpression -> Expression LEQ Expression .)
    GT              reduce using rule 12 (BinaryExpression -> Expression LEQ Expression .)
    EQ              reduce using rule 12 (BinaryExpression -> Expression LEQ Expression .)
    NE              reduce using rule 12 (BinaryExpression -> Expression LEQ Expression .)
    RPAREN          reduce using rule 12 (BinaryExpression -> Expression LEQ Expression .)
    IF              reduce using rule 12 (BinaryExpression -> Expression LEQ Expression .)
    FOR             reduce using rule 12 (BinaryExpression -> Expression LEQ Expression .)
    WHILE           reduce using rule 12 (BinaryExpression -> Expression LEQ Expression .)
    BREAK           reduce using rule 12 (BinaryExpression -> Expression LEQ Expression .)
    RETURN          reduce using rule 12 (BinaryExpression -> Expression LEQ Expression .)
    ;               reduce using rule 12 (BinaryExpression -> Expression LEQ Expression .)
    ID              reduce using rule 12 (BinaryExpression -> Expression LEQ Expression .)
    LPAREN          reduce using rule 12 (BinaryExpression -> Expression LEQ Expression .)
    LBRACE          reduce using rule 12 (BinaryExpression -> Expression LEQ Expression .)
    INTL            reduce using rule 12 (BinaryExpression -> Expression LEQ Expression .)
    BOOLL           reduce using rule 12 (BinaryExpression -> Expression LEQ Expression .)
    RBRACE          reduce using rule 12 (BinaryExpression -> Expression LEQ Expression .)
    RBRACKET        reduce using rule 12 (BinaryExpression -> Expression LEQ Expression .)
    COMMA           reduce using rule 12 (BinaryExpression -> Expression LEQ Expression .)

  ! PLUS            [ shift and go to state 94 ]
  ! MINUS           [ shift and go to state 95 ]
  ! TIMES           [ shift and go to state 96 ]
  ! DIVIDE          [ shift and go to state 97 ]
  ! MOD             [ shift and go to state 98 ]
  ! LEQ             [ shift and go to state 99 ]
  ! GEQ             [ shift and go to state 100 ]
  ! LT              [ shift and go to state 101 ]
  ! GT              [ shift and go to state 102 ]
  ! EQ              [ shift and go to state 103 ]
  ! NE              [ shift and go to state 104 ]


state 130

    (13) BinaryExpression -> Expression GEQ Expression .
    (7) BinaryExpression -> Expression . PLUS Expression
    (8) BinaryExpression -> Expression . MINUS Expression
    (9) BinaryExpression -> Expression . TIMES Expression
    (10) BinaryExpression -> Expression . DIVIDE Expression
    (11) BinaryExpression -> Expression . MOD Expression
    (12) BinaryExpression -> Expression . LEQ Expression
    (13) BinaryExpression -> Expression . GEQ Expression
    (14) BinaryExpression -> Expression . LT Expression
    (15) BinaryExpression -> Expression . GT Expression
    (16) BinaryExpression -> Expression . EQ Expression
    (17) BinaryExpression -> Expression . NE Expression

    SEMICOLON       reduce using rule 13 (BinaryExpression -> Expression GEQ Expression .)
    PLUS            reduce using rule 13 (BinaryExpression -> Expression GEQ Expression .)
    MINUS           reduce using rule 13 (BinaryExpression -> Expression GEQ Expression .)
    TIMES           reduce using rule 13 (BinaryExpression -> Expression GEQ Expression .)
    DIVIDE          reduce using rule 13 (BinaryExpression -> Expression GEQ Expression .)
    MOD             reduce using rule 13 (BinaryExpression -> Expression GEQ Expression .)
    LEQ             reduce using rule 13 (BinaryExpression -> Expression GEQ Expression .)
    GEQ             reduce using rule 13 (BinaryExpression -> Expression GEQ Expression .)
    LT              reduce using rule 13 (BinaryExpression -> Expression GEQ Expression .)
    GT              reduce using rule 13 (BinaryExpression -> Expression GEQ Expression .)
    EQ              reduce using rule 13 (BinaryExpression -> Expression GEQ Expression .)
    NE              reduce using rule 13 (BinaryExpression -> Expression GEQ Expression .)
    RPAREN          reduce using rule 13 (BinaryExpression -> Expression GEQ Expression .)
    IF              reduce using rule 13 (BinaryExpression -> Expression GEQ Expression .)
    FOR             reduce using rule 13 (BinaryExpression -> Expression GEQ Expression .)
    WHILE           reduce using rule 13 (BinaryExpression -> Expression GEQ Expression .)
    BREAK           reduce using rule 13 (BinaryExpression -> Expression GEQ Expression .)
    RETURN          reduce using rule 13 (BinaryExpression -> Expression GEQ Expression .)
    ;               reduce using rule 13 (BinaryExpression -> Expression GEQ Expression .)
    ID              reduce using rule 13 (BinaryExpression -> Expression GEQ Expression .)
    LPAREN          reduce using rule 13 (BinaryExpression -> Expression GEQ Expression .)
    LBRACE          reduce using rule 13 (BinaryExpression -> Expression GEQ Expression .)
    INTL            reduce using rule 13 (BinaryExpression -> Expression GEQ Expression .)
    BOOLL           reduce using rule 13 (BinaryExpression -> Expression GEQ Expression .)
    RBRACE          reduce using rule 13 (BinaryExpression -> Expression GEQ Expression .)
    RBRACKET        reduce using rule 13 (BinaryExpression -> Expression GEQ Expression .)
    COMMA           reduce using rule 13 (BinaryExpression -> Expression GEQ Expression .)

  ! PLUS            [ shift and go to state 94 ]
  ! MINUS           [ shift and go to state 95 ]
  ! TIMES           [ shift and go to state 96 ]
  ! DIVIDE          [ shift and go to state 97 ]
  ! MOD             [ shift and go to state 98 ]
  ! LEQ             [ shift and go to state 99 ]
  ! GEQ             [ shift and go to state 100 ]
  ! LT              [ shift and go to state 101 ]
  ! GT              [ shift and go to state 102 ]
  ! EQ              [ shift and go to state 103 ]
  ! NE              [ shift and go to state 104 ]


state 131

    (14) BinaryExpression -> Expression LT Expression .
    (7) BinaryExpression -> Expression . PLUS Expression
    (8) BinaryExpression -> Expression . MINUS Expression
    (9) BinaryExpression -> Expression . TIMES Expression
    (10) BinaryExpression -> Expression . DIVIDE Expression
    (11) BinaryExpression -> Expression . MOD Expression
    (12) BinaryExpression -> Expression . LEQ Expression
    (13) BinaryExpression -> Expression . GEQ Expression
    (14) BinaryExpression -> Expression . LT Expression
    (15) BinaryExpression -> Expression . GT Expression
    (16) BinaryExpression -> Expression . EQ Expression
    (17) BinaryExpression -> Expression . NE Expression

    SEMICOLON       reduce using rule 14 (BinaryExpression -> Expression LT Expression .)
    PLUS            reduce using rule 14 (BinaryExpression -> Expression LT Expression .)
    MINUS           reduce using rule 14 (BinaryExpression -> Expression LT Expression .)
    TIMES           reduce using rule 14 (BinaryExpression -> Expression LT Expression .)
    DIVIDE          reduce using rule 14 (BinaryExpression -> Expression LT Expression .)
    MOD             reduce using rule 14 (BinaryExpression -> Expression LT Expression .)
    LEQ             reduce using rule 14 (BinaryExpression -> Expression LT Expression .)
    GEQ             reduce using rule 14 (BinaryExpression -> Expression LT Expression .)
    LT              reduce using rule 14 (BinaryExpression -> Expression LT Expression .)
    GT              reduce using rule 14 (BinaryExpression -> Expression LT Expression .)
    EQ              reduce using rule 14 (BinaryExpression -> Expression LT Expression .)
    NE              reduce using rule 14 (BinaryExpression -> Expression LT Expression .)
    RPAREN          reduce using rule 14 (BinaryExpression -> Expression LT Expression .)
    IF              reduce using rule 14 (BinaryExpression -> Expression LT Expression .)
    FOR             reduce using rule 14 (BinaryExpression -> Expression LT Expression .)
    WHILE           reduce using rule 14 (BinaryExpression -> Expression LT Expression .)
    BREAK           reduce using rule 14 (BinaryExpression -> Expression LT Expression .)
    RETURN          reduce using rule 14 (BinaryExpression -> Expression LT Expression .)
    ;               reduce using rule 14 (BinaryExpression -> Expression LT Expression .)
    ID              reduce using rule 14 (BinaryExpression -> Expression LT Expression .)
    LPAREN          reduce using rule 14 (BinaryExpression -> Expression LT Expression .)
    LBRACE          reduce using rule 14 (BinaryExpression -> Expression LT Expression .)
    INTL            reduce using rule 14 (BinaryExpression -> Expression LT Expression .)
    BOOLL           reduce using rule 14 (BinaryExpression -> Expression LT Expression .)
    RBRACE          reduce using rule 14 (BinaryExpression -> Expression LT Expression .)
    RBRACKET        reduce using rule 14 (BinaryExpression -> Expression LT Expression .)
    COMMA           reduce using rule 14 (BinaryExpression -> Expression LT Expression .)

  ! PLUS            [ shift and go to state 94 ]
  ! MINUS           [ shift and go to state 95 ]
  ! TIMES           [ shift and go to state 96 ]
  ! DIVIDE          [ shift and go to state 97 ]
  ! MOD             [ shift and go to state 98 ]
  ! LEQ             [ shift and go to state 99 ]
  ! GEQ             [ shift and go to state 100 ]
  ! LT              [ shift and go to state 101 ]
  ! GT              [ shift and go to state 102 ]
  ! EQ              [ shift and go to state 103 ]
  ! NE              [ shift and go to state 104 ]


state 132

    (15) BinaryExpression -> Expression GT Expression .
    (7) BinaryExpression -> Expression . PLUS Expression
    (8) BinaryExpression -> Expression . MINUS Expression
    (9) BinaryExpression -> Expression . TIMES Expression
    (10) BinaryExpression -> Expression . DIVIDE Expression
    (11) BinaryExpression -> Expression . MOD Expression
    (12) BinaryExpression -> Expression . LEQ Expression
    (13) BinaryExpression -> Expression . GEQ Expression
    (14) BinaryExpression -> Expression . LT Expression
    (15) BinaryExpression -> Expression . GT Expression
    (16) BinaryExpression -> Expression . EQ Expression
    (17) BinaryExpression -> Expression . NE Expression

    SEMICOLON       reduce using rule 15 (BinaryExpression -> Expression GT Expression .)
    PLUS            reduce using rule 15 (BinaryExpression -> Expression GT Expression .)
    MINUS           reduce using rule 15 (BinaryExpression -> Expression GT Expression .)
    TIMES           reduce using rule 15 (BinaryExpression -> Expression GT Expression .)
    DIVIDE          reduce using rule 15 (BinaryExpression -> Expression GT Expression .)
    MOD             reduce using rule 15 (BinaryExpression -> Expression GT Expression .)
    LEQ             reduce using rule 15 (BinaryExpression -> Expression GT Expression .)
    GEQ             reduce using rule 15 (BinaryExpression -> Expression GT Expression .)
    LT              reduce using rule 15 (BinaryExpression -> Expression GT Expression .)
    GT              reduce using rule 15 (BinaryExpression -> Expression GT Expression .)
    EQ              reduce using rule 15 (BinaryExpression -> Expression GT Expression .)
    NE              reduce using rule 15 (BinaryExpression -> Expression GT Expression .)
    RPAREN          reduce using rule 15 (BinaryExpression -> Expression GT Expression .)
    IF              reduce using rule 15 (BinaryExpression -> Expression GT Expression .)
    FOR             reduce using rule 15 (BinaryExpression -> Expression GT Expression .)
    WHILE           reduce using rule 15 (BinaryExpression -> Expression GT Expression .)
    BREAK           reduce using rule 15 (BinaryExpression -> Expression GT Expression .)
    RETURN          reduce using rule 15 (BinaryExpression -> Expression GT Expression .)
    ;               reduce using rule 15 (BinaryExpression -> Expression GT Expression .)
    ID              reduce using rule 15 (BinaryExpression -> Expression GT Expression .)
    LPAREN          reduce using rule 15 (BinaryExpression -> Expression GT Expression .)
    LBRACE          reduce using rule 15 (BinaryExpression -> Expression GT Expression .)
    INTL            reduce using rule 15 (BinaryExpression -> Expression GT Expression .)
    BOOLL           reduce using rule 15 (BinaryExpression -> Expression GT Expression .)
    RBRACE          reduce using rule 15 (BinaryExpression -> Expression GT Expression .)
    RBRACKET        reduce using rule 15 (BinaryExpression -> Expression GT Expression .)
    COMMA           reduce using rule 15 (BinaryExpression -> Expression GT Expression .)

  ! PLUS            [ shift and go to state 94 ]
  ! MINUS           [ shift and go to state 95 ]
  ! TIMES           [ shift and go to state 96 ]
  ! DIVIDE          [ shift and go to state 97 ]
  ! MOD             [ shift and go to state 98 ]
  ! LEQ             [ shift and go to state 99 ]
  ! GEQ             [ shift and go to state 100 ]
  ! LT              [ shift and go to state 101 ]
  ! GT              [ shift and go to state 102 ]
  ! EQ              [ shift and go to state 103 ]
  ! NE              [ shift and go to state 104 ]


state 133

    (16) BinaryExpression -> Expression EQ Expression .
    (7) BinaryExpression -> Expression . PLUS Expression
    (8) BinaryExpression -> Expression . MINUS Expression
    (9) BinaryExpression -> Expression . TIMES Expression
    (10) BinaryExpression -> Expression . DIVIDE Expression
    (11) BinaryExpression -> Expression . MOD Expression
    (12) BinaryExpression -> Expression . LEQ Expression
    (13) BinaryExpression -> Expression . GEQ Expression
    (14) BinaryExpression -> Expression . LT Expression
    (15) BinaryExpression -> Expression . GT Expression
    (16) BinaryExpression -> Expression . EQ Expression
    (17) BinaryExpression -> Expression . NE Expression

    SEMICOLON       reduce using rule 16 (BinaryExpression -> Expression EQ Expression .)
    PLUS            reduce using rule 16 (BinaryExpression -> Expression EQ Expression .)
    MINUS           reduce using rule 16 (BinaryExpression -> Expression EQ Expression .)
    TIMES           reduce using rule 16 (BinaryExpression -> Expression EQ Expression .)
    DIVIDE          reduce using rule 16 (BinaryExpression -> Expression EQ Expression .)
    MOD             reduce using rule 16 (BinaryExpression -> Expression EQ Expression .)
    LEQ             reduce using rule 16 (BinaryExpression -> Expression EQ Expression .)
    GEQ             reduce using rule 16 (BinaryExpression -> Expression EQ Expression .)
    LT              reduce using rule 16 (BinaryExpression -> Expression EQ Expression .)
    GT              reduce using rule 16 (BinaryExpression -> Expression EQ Expression .)
    EQ              reduce using rule 16 (BinaryExpression -> Expression EQ Expression .)
    NE              reduce using rule 16 (BinaryExpression -> Expression EQ Expression .)
    RPAREN          reduce using rule 16 (BinaryExpression -> Expression EQ Expression .)
    IF              reduce using rule 16 (BinaryExpression -> Expression EQ Expression .)
    FOR             reduce using rule 16 (BinaryExpression -> Expression EQ Expression .)
    WHILE           reduce using rule 16 (BinaryExpression -> Expression EQ Expression .)
    BREAK           reduce using rule 16 (BinaryExpression -> Expression EQ Expression .)
    RETURN          reduce using rule 16 (BinaryExpression -> Expression EQ Expression .)
    ;               reduce using rule 16 (BinaryExpression -> Expression EQ Expression .)
    ID              reduce using rule 16 (BinaryExpression -> Expression EQ Expression .)
    LPAREN          reduce using rule 16 (BinaryExpression -> Expression EQ Expression .)
    LBRACE          reduce using rule 16 (BinaryExpression -> Expression EQ Expression .)
    INTL            reduce using rule 16 (BinaryExpression -> Expression EQ Expression .)
    BOOLL           reduce using rule 16 (BinaryExpression -> Expression EQ Expression .)
    RBRACE          reduce using rule 16 (BinaryExpression -> Expression EQ Expression .)
    RBRACKET        reduce using rule 16 (BinaryExpression -> Expression EQ Expression .)
    COMMA           reduce using rule 16 (BinaryExpression -> Expression EQ Expression .)

  ! PLUS            [ shift and go to state 94 ]
  ! MINUS           [ shift and go to state 95 ]
  ! TIMES           [ shift and go to state 96 ]
  ! DIVIDE          [ shift and go to state 97 ]
  ! MOD             [ shift and go to state 98 ]
  ! LEQ             [ shift and go to state 99 ]
  ! GEQ             [ shift and go to state 100 ]
  ! LT              [ shift and go to state 101 ]
  ! GT              [ shift and go to state 102 ]
  ! EQ              [ shift and go to state 103 ]
  ! NE              [ shift and go to state 104 ]


state 134

    (17) BinaryExpression -> Expression NE Expression .
    (7) BinaryExpression -> Expression . PLUS Expression
    (8) BinaryExpression -> Expression . MINUS Expression
    (9) BinaryExpression -> Expression . TIMES Expression
    (10) BinaryExpression -> Expression . DIVIDE Expression
    (11) BinaryExpression -> Expression . MOD Expression
    (12) BinaryExpression -> Expression . LEQ Expression
    (13) BinaryExpression -> Expression . GEQ Expression
    (14) BinaryExpression -> Expression . LT Expression
    (15) BinaryExpression -> Expression . GT Expression
    (16) BinaryExpression -> Expression . EQ Expression
    (17) BinaryExpression -> Expression . NE Expression

    SEMICOLON       reduce using rule 17 (BinaryExpression -> Expression NE Expression .)
    PLUS            reduce using rule 17 (BinaryExpression -> Expression NE Expression .)
    MINUS           reduce using rule 17 (BinaryExpression -> Expression NE Expression .)
    TIMES           reduce using rule 17 (BinaryExpression -> Expression NE Expression .)
    DIVIDE          reduce using rule 17 (BinaryExpression -> Expression NE Expression .)
    MOD             reduce using rule 17 (BinaryExpression -> Expression NE Expression .)
    LEQ             reduce using rule 17 (BinaryExpression -> Expression NE Expression .)
    GEQ             reduce using rule 17 (BinaryExpression -> Expression NE Expression .)
    LT              reduce using rule 17 (BinaryExpression -> Expression NE Expression .)
    GT              reduce using rule 17 (BinaryExpression -> Expression NE Expression .)
    EQ              reduce using rule 17 (BinaryExpression -> Expression NE Expression .)
    NE              reduce using rule 17 (BinaryExpression -> Expression NE Expression .)
    RPAREN          reduce using rule 17 (BinaryExpression -> Expression NE Expression .)
    IF              reduce using rule 17 (BinaryExpression -> Expression NE Expression .)
    FOR             reduce using rule 17 (BinaryExpression -> Expression NE Expression .)
    WHILE           reduce using rule 17 (BinaryExpression -> Expression NE Expression .)
    BREAK           reduce using rule 17 (BinaryExpression -> Expression NE Expression .)
    RETURN          reduce using rule 17 (BinaryExpression -> Expression NE Expression .)
    ;               reduce using rule 17 (BinaryExpression -> Expression NE Expression .)
    ID              reduce using rule 17 (BinaryExpression -> Expression NE Expression .)
    LPAREN          reduce using rule 17 (BinaryExpression -> Expression NE Expression .)
    LBRACE          reduce using rule 17 (BinaryExpression -> Expression NE Expression .)
    INTL            reduce using rule 17 (BinaryExpression -> Expression NE Expression .)
    BOOLL           reduce using rule 17 (BinaryExpression -> Expression NE Expression .)
    RBRACE          reduce using rule 17 (BinaryExpression -> Expression NE Expression .)
    RBRACKET        reduce using rule 17 (BinaryExpression -> Expression NE Expression .)
    COMMA           reduce using rule 17 (BinaryExpression -> Expression NE Expression .)

  ! PLUS            [ shift and go to state 94 ]
  ! MINUS           [ shift and go to state 95 ]
  ! TIMES           [ shift and go to state 96 ]
  ! DIVIDE          [ shift and go to state 97 ]
  ! MOD             [ shift and go to state 98 ]
  ! LEQ             [ shift and go to state 99 ]
  ! GEQ             [ shift and go to state 100 ]
  ! LT              [ shift and go to state 101 ]
  ! GT              [ shift and go to state 102 ]
  ! EQ              [ shift and go to state 103 ]
  ! NE              [ shift and go to state 104 ]


state 135

    (5) AssignmentStatement -> IdListR ASSIGNMENT Expression . SEMICOLON
    (6) AssignmentStatement -> IdListR ASSIGNMENT Expression .
    (7) BinaryExpression -> Expression . PLUS Expression
    (8) BinaryExpression -> Expression . MINUS Expression
    (9) BinaryExpression -> Expression . TIMES Expression
    (10) BinaryExpression -> Expression . DIVIDE Expression
    (11) BinaryExpression -> Expression . MOD Expression
    (12) BinaryExpression -> Expression . LEQ Expression
    (13) BinaryExpression -> Expression . GEQ Expression
    (14) BinaryExpression -> Expression . LT Expression
    (15) BinaryExpression -> Expression . GT Expression
    (16) BinaryExpression -> Expression . EQ Expression
    (17) BinaryExpression -> Expression . NE Expression

    SEMICOLON       shift and go to state 154
    IF              reduce using rule 6 (AssignmentStatement -> IdListR ASSIGNMENT Expression .)
    FOR             reduce using rule 6 (AssignmentStatement -> IdListR ASSIGNMENT Expression .)
    WHILE           reduce using rule 6 (AssignmentStatement -> IdListR ASSIGNMENT Expression .)
    BREAK           reduce using rule 6 (AssignmentStatement -> IdListR ASSIGNMENT Expression .)
    RETURN          reduce using rule 6 (AssignmentStatement -> IdListR ASSIGNMENT Expression .)
    ;               reduce using rule 6 (AssignmentStatement -> IdListR ASSIGNMENT Expression .)
    ID              reduce using rule 6 (AssignmentStatement -> IdListR ASSIGNMENT Expression .)
    LPAREN          reduce using rule 6 (AssignmentStatement -> IdListR ASSIGNMENT Expression .)
    LBRACE          reduce using rule 6 (AssignmentStatement -> IdListR ASSIGNMENT Expression .)
    INTL            reduce using rule 6 (AssignmentStatement -> IdListR ASSIGNMENT Expression .)
    BOOLL           reduce using rule 6 (AssignmentStatement -> IdListR ASSIGNMENT Expression .)
    RBRACE          reduce using rule 6 (AssignmentStatement -> IdListR ASSIGNMENT Expression .)
    RPAREN          reduce using rule 6 (AssignmentStatement -> IdListR ASSIGNMENT Expression .)
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    TIMES           shift and go to state 96
    DIVIDE          shift and go to state 97
    MOD             shift and go to state 98
    LEQ             shift and go to state 99
    GEQ             shift and go to state 100
    LT              shift and go to state 101
    GT              shift and go to state 102
    EQ              shift and go to state 103
    NE              shift and go to state 104


state 136

    (22) BracketCall -> IdListR LBRACKET Expression . RBRACKET
    (7) BinaryExpression -> Expression . PLUS Expression
    (8) BinaryExpression -> Expression . MINUS Expression
    (9) BinaryExpression -> Expression . TIMES Expression
    (10) BinaryExpression -> Expression . DIVIDE Expression
    (11) BinaryExpression -> Expression . MOD Expression
    (12) BinaryExpression -> Expression . LEQ Expression
    (13) BinaryExpression -> Expression . GEQ Expression
    (14) BinaryExpression -> Expression . LT Expression
    (15) BinaryExpression -> Expression . GT Expression
    (16) BinaryExpression -> Expression . EQ Expression
    (17) BinaryExpression -> Expression . NE Expression

    RBRACKET        shift and go to state 155
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    TIMES           shift and go to state 96
    DIVIDE          shift and go to state 97
    MOD             shift and go to state 98
    LEQ             shift and go to state 99
    GEQ             shift and go to state 100
    LT              shift and go to state 101
    GT              shift and go to state 102
    EQ              shift and go to state 103
    NE              shift and go to state 104


state 137

    (26) DeclarationAssignmentStatement -> Type ID ASSIGNMENT . Expression SEMICOLON
    (32) Expression -> . BinaryExpression
    (33) Expression -> . UnaryExpression
    (7) BinaryExpression -> . Expression PLUS Expression
    (8) BinaryExpression -> . Expression MINUS Expression
    (9) BinaryExpression -> . Expression TIMES Expression
    (10) BinaryExpression -> . Expression DIVIDE Expression
    (11) BinaryExpression -> . Expression MOD Expression
    (12) BinaryExpression -> . Expression LEQ Expression
    (13) BinaryExpression -> . Expression GEQ Expression
    (14) BinaryExpression -> . Expression LT Expression
    (15) BinaryExpression -> . Expression GT Expression
    (16) BinaryExpression -> . Expression EQ Expression
    (17) BinaryExpression -> . Expression NE Expression
    (77) UnaryExpression -> . IdListR
    (78) UnaryExpression -> . Literal
    (79) UnaryExpression -> . FunctionCall
    (80) UnaryExpression -> . BracketCall
    (81) UnaryExpression -> . LPAREN Expression RPAREN
    (39) IdListR -> . ID DOT IdListR
    (40) IdListR -> . ID
    (43) Literal -> . IntLiteral
    (44) Literal -> . BoolLiteral
    (35) FunctionCall -> . ID LPAREN ArgumentListR RPAREN
    (36) FunctionCall -> . ID LT TypeParameterListR GT LPAREN ArgumentListR RPAREN
    (22) BracketCall -> . IdListR LBRACKET Expression RBRACKET
    (42) IntLiteral -> . INTL
    (21) BoolLiteral -> . BOOLL

    LPAREN          shift and go to state 75
    ID              shift and go to state 115
    INTL            shift and go to state 80
    BOOLL           shift and go to state 87

    Expression                     shift and go to state 156
    BinaryExpression               shift and go to state 72
    UnaryExpression                shift and go to state 73
    IdListR                        shift and go to state 114
    Literal                        shift and go to state 83
    FunctionCall                   shift and go to state 71
    BracketCall                    shift and go to state 84
    IntLiteral                     shift and go to state 85
    BoolLiteral                    shift and go to state 86

state 138

    (36) FunctionCall -> ID LT . TypeParameterListR GT LPAREN ArgumentListR RPAREN
    (74) TypeParameterListR -> . TypeParameter COMMA TypeParameterListR
    (75) TypeParameterListR -> . TypeParameter
    (76) TypeParameterListR -> . empty
    (73) TypeParameter -> . ID
    (83) empty -> .

    ID              shift and go to state 21
    GT              reduce using rule 83 (empty -> .)

    TypeParameterListR             shift and go to state 157
    TypeParameter                  shift and go to state 23
    empty                          shift and go to state 24

state 139

    (27) DeclarationFunctionCallStatement -> Type FunctionCall SEMICOLON .

    IF              reduce using rule 27 (DeclarationFunctionCallStatement -> Type FunctionCall SEMICOLON .)
    FOR             reduce using rule 27 (DeclarationFunctionCallStatement -> Type FunctionCall SEMICOLON .)
    WHILE           reduce using rule 27 (DeclarationFunctionCallStatement -> Type FunctionCall SEMICOLON .)
    BREAK           reduce using rule 27 (DeclarationFunctionCallStatement -> Type FunctionCall SEMICOLON .)
    RETURN          reduce using rule 27 (DeclarationFunctionCallStatement -> Type FunctionCall SEMICOLON .)
    ;               reduce using rule 27 (DeclarationFunctionCallStatement -> Type FunctionCall SEMICOLON .)
    ID              reduce using rule 27 (DeclarationFunctionCallStatement -> Type FunctionCall SEMICOLON .)
    LPAREN          reduce using rule 27 (DeclarationFunctionCallStatement -> Type FunctionCall SEMICOLON .)
    LBRACE          reduce using rule 27 (DeclarationFunctionCallStatement -> Type FunctionCall SEMICOLON .)
    INTL            reduce using rule 27 (DeclarationFunctionCallStatement -> Type FunctionCall SEMICOLON .)
    BOOLL           reduce using rule 27 (DeclarationFunctionCallStatement -> Type FunctionCall SEMICOLON .)
    RBRACE          reduce using rule 27 (DeclarationFunctionCallStatement -> Type FunctionCall SEMICOLON .)
    RPAREN          reduce using rule 27 (DeclarationFunctionCallStatement -> Type FunctionCall SEMICOLON .)


state 140

    (39) IdListR -> ID . DOT IdListR
    (40) IdListR -> ID .

    DOT             shift and go to state 109
    ASSIGNMENT      reduce using rule 40 (IdListR -> ID .)
    LBRACKET        reduce using rule 40 (IdListR -> ID .)
    SEMICOLON       reduce using rule 40 (IdListR -> ID .)
    PLUS            reduce using rule 40 (IdListR -> ID .)
    MINUS           reduce using rule 40 (IdListR -> ID .)
    TIMES           reduce using rule 40 (IdListR -> ID .)
    DIVIDE          reduce using rule 40 (IdListR -> ID .)
    MOD             reduce using rule 40 (IdListR -> ID .)
    LEQ             reduce using rule 40 (IdListR -> ID .)
    GEQ             reduce using rule 40 (IdListR -> ID .)
    LT              reduce using rule 40 (IdListR -> ID .)
    GT              reduce using rule 40 (IdListR -> ID .)
    EQ              reduce using rule 40 (IdListR -> ID .)
    NE              reduce using rule 40 (IdListR -> ID .)
    RPAREN          reduce using rule 40 (IdListR -> ID .)
    IF              reduce using rule 40 (IdListR -> ID .)
    FOR             reduce using rule 40 (IdListR -> ID .)
    WHILE           reduce using rule 40 (IdListR -> ID .)
    BREAK           reduce using rule 40 (IdListR -> ID .)
    RETURN          reduce using rule 40 (IdListR -> ID .)
    ;               reduce using rule 40 (IdListR -> ID .)
    ID              reduce using rule 40 (IdListR -> ID .)
    LPAREN          reduce using rule 40 (IdListR -> ID .)
    LBRACE          reduce using rule 40 (IdListR -> ID .)
    INTL            reduce using rule 40 (IdListR -> ID .)
    BOOLL           reduce using rule 40 (IdListR -> ID .)
    RBRACE          reduce using rule 40 (IdListR -> ID .)
    RBRACKET        reduce using rule 40 (IdListR -> ID .)
    COMMA           reduce using rule 40 (IdListR -> ID .)


state 141

    (39) IdListR -> ID DOT IdListR .

    ASSIGNMENT      reduce using rule 39 (IdListR -> ID DOT IdListR .)
    LBRACKET        reduce using rule 39 (IdListR -> ID DOT IdListR .)
    SEMICOLON       reduce using rule 39 (IdListR -> ID DOT IdListR .)
    PLUS            reduce using rule 39 (IdListR -> ID DOT IdListR .)
    MINUS           reduce using rule 39 (IdListR -> ID DOT IdListR .)
    TIMES           reduce using rule 39 (IdListR -> ID DOT IdListR .)
    DIVIDE          reduce using rule 39 (IdListR -> ID DOT IdListR .)
    MOD             reduce using rule 39 (IdListR -> ID DOT IdListR .)
    LEQ             reduce using rule 39 (IdListR -> ID DOT IdListR .)
    GEQ             reduce using rule 39 (IdListR -> ID DOT IdListR .)
    LT              reduce using rule 39 (IdListR -> ID DOT IdListR .)
    GT              reduce using rule 39 (IdListR -> ID DOT IdListR .)
    EQ              reduce using rule 39 (IdListR -> ID DOT IdListR .)
    NE              reduce using rule 39 (IdListR -> ID DOT IdListR .)
    RPAREN          reduce using rule 39 (IdListR -> ID DOT IdListR .)
    IF              reduce using rule 39 (IdListR -> ID DOT IdListR .)
    FOR             reduce using rule 39 (IdListR -> ID DOT IdListR .)
    WHILE           reduce using rule 39 (IdListR -> ID DOT IdListR .)
    BREAK           reduce using rule 39 (IdListR -> ID DOT IdListR .)
    RETURN          reduce using rule 39 (IdListR -> ID DOT IdListR .)
    ;               reduce using rule 39 (IdListR -> ID DOT IdListR .)
    ID              reduce using rule 39 (IdListR -> ID DOT IdListR .)
    LPAREN          reduce using rule 39 (IdListR -> ID DOT IdListR .)
    LBRACE          reduce using rule 39 (IdListR -> ID DOT IdListR .)
    INTL            reduce using rule 39 (IdListR -> ID DOT IdListR .)
    BOOLL           reduce using rule 39 (IdListR -> ID DOT IdListR .)
    RBRACE          reduce using rule 39 (IdListR -> ID DOT IdListR .)
    RBRACKET        reduce using rule 39 (IdListR -> ID DOT IdListR .)
    COMMA           reduce using rule 39 (IdListR -> ID DOT IdListR .)


state 142

    (72) Type -> ID LT TypeParameterListR . GT PointerListR
    (36) FunctionCall -> ID LT TypeParameterListR . GT LPAREN ArgumentListR RPAREN

    GT              shift and go to state 158


state 143

    (35) FunctionCall -> ID LPAREN ArgumentListR . RPAREN

    RPAREN          shift and go to state 159


state 144

    (2) ArgumentListR -> Argument . COMMA ArgumentListR
    (3) ArgumentListR -> Argument .

    COMMA           shift and go to state 160
    RPAREN          reduce using rule 3 (ArgumentListR -> Argument .)


state 145

    (4) ArgumentListR -> empty .

    RPAREN          reduce using rule 4 (ArgumentListR -> empty .)


state 146

    (1) Argument -> Expression .
    (7) BinaryExpression -> Expression . PLUS Expression
    (8) BinaryExpression -> Expression . MINUS Expression
    (9) BinaryExpression -> Expression . TIMES Expression
    (10) BinaryExpression -> Expression . DIVIDE Expression
    (11) BinaryExpression -> Expression . MOD Expression
    (12) BinaryExpression -> Expression . LEQ Expression
    (13) BinaryExpression -> Expression . GEQ Expression
    (14) BinaryExpression -> Expression . LT Expression
    (15) BinaryExpression -> Expression . GT Expression
    (16) BinaryExpression -> Expression . EQ Expression
    (17) BinaryExpression -> Expression . NE Expression

    COMMA           reduce using rule 1 (Argument -> Expression .)
    RPAREN          reduce using rule 1 (Argument -> Expression .)
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    TIMES           shift and go to state 96
    DIVIDE          shift and go to state 97
    MOD             shift and go to state 98
    LEQ             shift and go to state 99
    GEQ             shift and go to state 100
    LT              shift and go to state 101
    GT              shift and go to state 102
    EQ              shift and go to state 103
    NE              shift and go to state 104


state 147

    (41) IfElseStatement -> IF LPAREN Expression . RPAREN Block ELSE Block
    (7) BinaryExpression -> Expression . PLUS Expression
    (8) BinaryExpression -> Expression . MINUS Expression
    (9) BinaryExpression -> Expression . TIMES Expression
    (10) BinaryExpression -> Expression . DIVIDE Expression
    (11) BinaryExpression -> Expression . MOD Expression
    (12) BinaryExpression -> Expression . LEQ Expression
    (13) BinaryExpression -> Expression . GEQ Expression
    (14) BinaryExpression -> Expression . LT Expression
    (15) BinaryExpression -> Expression . GT Expression
    (16) BinaryExpression -> Expression . EQ Expression
    (17) BinaryExpression -> Expression . NE Expression

    RPAREN          shift and go to state 161
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    TIMES           shift and go to state 96
    DIVIDE          shift and go to state 97
    MOD             shift and go to state 98
    LEQ             shift and go to state 99
    GEQ             shift and go to state 100
    LT              shift and go to state 101
    GT              shift and go to state 102
    EQ              shift and go to state 103
    NE              shift and go to state 104


state 148

    (81) UnaryExpression -> LPAREN Expression RPAREN .

    SEMICOLON       reduce using rule 81 (UnaryExpression -> LPAREN Expression RPAREN .)
    PLUS            reduce using rule 81 (UnaryExpression -> LPAREN Expression RPAREN .)
    MINUS           reduce using rule 81 (UnaryExpression -> LPAREN Expression RPAREN .)
    TIMES           reduce using rule 81 (UnaryExpression -> LPAREN Expression RPAREN .)
    DIVIDE          reduce using rule 81 (UnaryExpression -> LPAREN Expression RPAREN .)
    MOD             reduce using rule 81 (UnaryExpression -> LPAREN Expression RPAREN .)
    LEQ             reduce using rule 81 (UnaryExpression -> LPAREN Expression RPAREN .)
    GEQ             reduce using rule 81 (UnaryExpression -> LPAREN Expression RPAREN .)
    LT              reduce using rule 81 (UnaryExpression -> LPAREN Expression RPAREN .)
    GT              reduce using rule 81 (UnaryExpression -> LPAREN Expression RPAREN .)
    EQ              reduce using rule 81 (UnaryExpression -> LPAREN Expression RPAREN .)
    NE              reduce using rule 81 (UnaryExpression -> LPAREN Expression RPAREN .)
    RPAREN          reduce using rule 81 (UnaryExpression -> LPAREN Expression RPAREN .)
    IF              reduce using rule 81 (UnaryExpression -> LPAREN Expression RPAREN .)
    FOR             reduce using rule 81 (UnaryExpression -> LPAREN Expression RPAREN .)
    WHILE           reduce using rule 81 (UnaryExpression -> LPAREN Expression RPAREN .)
    BREAK           reduce using rule 81 (UnaryExpression -> LPAREN Expression RPAREN .)
    RETURN          reduce using rule 81 (UnaryExpression -> LPAREN Expression RPAREN .)
    ;               reduce using rule 81 (UnaryExpression -> LPAREN Expression RPAREN .)
    ID              reduce using rule 81 (UnaryExpression -> LPAREN Expression RPAREN .)
    LPAREN          reduce using rule 81 (UnaryExpression -> LPAREN Expression RPAREN .)
    LBRACE          reduce using rule 81 (UnaryExpression -> LPAREN Expression RPAREN .)
    INTL            reduce using rule 81 (UnaryExpression -> LPAREN Expression RPAREN .)
    BOOLL           reduce using rule 81 (UnaryExpression -> LPAREN Expression RPAREN .)
    RBRACE          reduce using rule 81 (UnaryExpression -> LPAREN Expression RPAREN .)
    RBRACKET        reduce using rule 81 (UnaryExpression -> LPAREN Expression RPAREN .)
    COMMA           reduce using rule 81 (UnaryExpression -> LPAREN Expression RPAREN .)


state 149

    (34) ForStatement -> FOR LPAREN Statement . Expression SEMICOLON Statement RPAREN Block
    (32) Expression -> . BinaryExpression
    (33) Expression -> . UnaryExpression
    (7) BinaryExpression -> . Expression PLUS Expression
    (8) BinaryExpression -> . Expression MINUS Expression
    (9) BinaryExpression -> . Expression TIMES Expression
    (10) BinaryExpression -> . Expression DIVIDE Expression
    (11) BinaryExpression -> . Expression MOD Expression
    (12) BinaryExpression -> . Expression LEQ Expression
    (13) BinaryExpression -> . Expression GEQ Expression
    (14) BinaryExpression -> . Expression LT Expression
    (15) BinaryExpression -> . Expression GT Expression
    (16) BinaryExpression -> . Expression EQ Expression
    (17) BinaryExpression -> . Expression NE Expression
    (77) UnaryExpression -> . IdListR
    (78) UnaryExpression -> . Literal
    (79) UnaryExpression -> . FunctionCall
    (80) UnaryExpression -> . BracketCall
    (81) UnaryExpression -> . LPAREN Expression RPAREN
    (39) IdListR -> . ID DOT IdListR
    (40) IdListR -> . ID
    (43) Literal -> . IntLiteral
    (44) Literal -> . BoolLiteral
    (35) FunctionCall -> . ID LPAREN ArgumentListR RPAREN
    (36) FunctionCall -> . ID LT TypeParameterListR GT LPAREN ArgumentListR RPAREN
    (22) BracketCall -> . IdListR LBRACKET Expression RBRACKET
    (42) IntLiteral -> . INTL
    (21) BoolLiteral -> . BOOLL

    LPAREN          shift and go to state 75
    ID              shift and go to state 115
    INTL            shift and go to state 80
    BOOLL           shift and go to state 87

    Expression                     shift and go to state 162
    BinaryExpression               shift and go to state 72
    UnaryExpression                shift and go to state 73
    IdListR                        shift and go to state 114
    Literal                        shift and go to state 83
    FunctionCall                   shift and go to state 71
    BracketCall                    shift and go to state 84
    IntLiteral                     shift and go to state 85
    BoolLiteral                    shift and go to state 86

state 150

    (82) WhileStatement -> WHILE LPAREN Expression . RPAREN Block
    (7) BinaryExpression -> Expression . PLUS Expression
    (8) BinaryExpression -> Expression . MINUS Expression
    (9) BinaryExpression -> Expression . TIMES Expression
    (10) BinaryExpression -> Expression . DIVIDE Expression
    (11) BinaryExpression -> Expression . MOD Expression
    (12) BinaryExpression -> Expression . LEQ Expression
    (13) BinaryExpression -> Expression . GEQ Expression
    (14) BinaryExpression -> Expression . LT Expression
    (15) BinaryExpression -> Expression . GT Expression
    (16) BinaryExpression -> Expression . EQ Expression
    (17) BinaryExpression -> Expression . NE Expression

    RPAREN          shift and go to state 163
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    TIMES           shift and go to state 96
    DIVIDE          shift and go to state 97
    MOD             shift and go to state 98
    LEQ             shift and go to state 99
    GEQ             shift and go to state 100
    LT              shift and go to state 101
    GT              shift and go to state 102
    EQ              shift and go to state 103
    NE              shift and go to state 104


state 151

    (23) BreakStatement -> BREAK INTL SEMICOLON .

    IF              reduce using rule 23 (BreakStatement -> BREAK INTL SEMICOLON .)
    FOR             reduce using rule 23 (BreakStatement -> BREAK INTL SEMICOLON .)
    WHILE           reduce using rule 23 (BreakStatement -> BREAK INTL SEMICOLON .)
    BREAK           reduce using rule 23 (BreakStatement -> BREAK INTL SEMICOLON .)
    RETURN          reduce using rule 23 (BreakStatement -> BREAK INTL SEMICOLON .)
    ;               reduce using rule 23 (BreakStatement -> BREAK INTL SEMICOLON .)
    ID              reduce using rule 23 (BreakStatement -> BREAK INTL SEMICOLON .)
    LPAREN          reduce using rule 23 (BreakStatement -> BREAK INTL SEMICOLON .)
    LBRACE          reduce using rule 23 (BreakStatement -> BREAK INTL SEMICOLON .)
    INTL            reduce using rule 23 (BreakStatement -> BREAK INTL SEMICOLON .)
    BOOLL           reduce using rule 23 (BreakStatement -> BREAK INTL SEMICOLON .)
    RBRACE          reduce using rule 23 (BreakStatement -> BREAK INTL SEMICOLON .)
    RPAREN          reduce using rule 23 (BreakStatement -> BREAK INTL SEMICOLON .)


state 152

    (51) ReturnStatement -> RETURN Expression SEMICOLON .

    IF              reduce using rule 51 (ReturnStatement -> RETURN Expression SEMICOLON .)
    FOR             reduce using rule 51 (ReturnStatement -> RETURN Expression SEMICOLON .)
    WHILE           reduce using rule 51 (ReturnStatement -> RETURN Expression SEMICOLON .)
    BREAK           reduce using rule 51 (ReturnStatement -> RETURN Expression SEMICOLON .)
    RETURN          reduce using rule 51 (ReturnStatement -> RETURN Expression SEMICOLON .)
    ;               reduce using rule 51 (ReturnStatement -> RETURN Expression SEMICOLON .)
    ID              reduce using rule 51 (ReturnStatement -> RETURN Expression SEMICOLON .)
    LPAREN          reduce using rule 51 (ReturnStatement -> RETURN Expression SEMICOLON .)
    LBRACE          reduce using rule 51 (ReturnStatement -> RETURN Expression SEMICOLON .)
    INTL            reduce using rule 51 (ReturnStatement -> RETURN Expression SEMICOLON .)
    BOOLL           reduce using rule 51 (ReturnStatement -> RETURN Expression SEMICOLON .)
    RBRACE          reduce using rule 51 (ReturnStatement -> RETURN Expression SEMICOLON .)
    RPAREN          reduce using rule 51 (ReturnStatement -> RETURN Expression SEMICOLON .)


state 153

    (38) FunctionDefinition -> ID ID LT TypeParameterListR GT LPAREN ParameterListR RPAREN Block .

    ID              reduce using rule 38 (FunctionDefinition -> ID ID LT TypeParameterListR GT LPAREN ParameterListR RPAREN Block .)
    STRUCT          reduce using rule 38 (FunctionDefinition -> ID ID LT TypeParameterListR GT LPAREN ParameterListR RPAREN Block .)
    $end            reduce using rule 38 (FunctionDefinition -> ID ID LT TypeParameterListR GT LPAREN ParameterListR RPAREN Block .)


state 154

    (5) AssignmentStatement -> IdListR ASSIGNMENT Expression SEMICOLON .

    IF              reduce using rule 5 (AssignmentStatement -> IdListR ASSIGNMENT Expression SEMICOLON .)
    FOR             reduce using rule 5 (AssignmentStatement -> IdListR ASSIGNMENT Expression SEMICOLON .)
    WHILE           reduce using rule 5 (AssignmentStatement -> IdListR ASSIGNMENT Expression SEMICOLON .)
    BREAK           reduce using rule 5 (AssignmentStatement -> IdListR ASSIGNMENT Expression SEMICOLON .)
    RETURN          reduce using rule 5 (AssignmentStatement -> IdListR ASSIGNMENT Expression SEMICOLON .)
    ;               reduce using rule 5 (AssignmentStatement -> IdListR ASSIGNMENT Expression SEMICOLON .)
    ID              reduce using rule 5 (AssignmentStatement -> IdListR ASSIGNMENT Expression SEMICOLON .)
    LPAREN          reduce using rule 5 (AssignmentStatement -> IdListR ASSIGNMENT Expression SEMICOLON .)
    LBRACE          reduce using rule 5 (AssignmentStatement -> IdListR ASSIGNMENT Expression SEMICOLON .)
    INTL            reduce using rule 5 (AssignmentStatement -> IdListR ASSIGNMENT Expression SEMICOLON .)
    BOOLL           reduce using rule 5 (AssignmentStatement -> IdListR ASSIGNMENT Expression SEMICOLON .)
    RBRACE          reduce using rule 5 (AssignmentStatement -> IdListR ASSIGNMENT Expression SEMICOLON .)
    RPAREN          reduce using rule 5 (AssignmentStatement -> IdListR ASSIGNMENT Expression SEMICOLON .)


state 155

    (22) BracketCall -> IdListR LBRACKET Expression RBRACKET .

    SEMICOLON       reduce using rule 22 (BracketCall -> IdListR LBRACKET Expression RBRACKET .)
    PLUS            reduce using rule 22 (BracketCall -> IdListR LBRACKET Expression RBRACKET .)
    MINUS           reduce using rule 22 (BracketCall -> IdListR LBRACKET Expression RBRACKET .)
    TIMES           reduce using rule 22 (BracketCall -> IdListR LBRACKET Expression RBRACKET .)
    DIVIDE          reduce using rule 22 (BracketCall -> IdListR LBRACKET Expression RBRACKET .)
    MOD             reduce using rule 22 (BracketCall -> IdListR LBRACKET Expression RBRACKET .)
    LEQ             reduce using rule 22 (BracketCall -> IdListR LBRACKET Expression RBRACKET .)
    GEQ             reduce using rule 22 (BracketCall -> IdListR LBRACKET Expression RBRACKET .)
    LT              reduce using rule 22 (BracketCall -> IdListR LBRACKET Expression RBRACKET .)
    GT              reduce using rule 22 (BracketCall -> IdListR LBRACKET Expression RBRACKET .)
    EQ              reduce using rule 22 (BracketCall -> IdListR LBRACKET Expression RBRACKET .)
    NE              reduce using rule 22 (BracketCall -> IdListR LBRACKET Expression RBRACKET .)
    RPAREN          reduce using rule 22 (BracketCall -> IdListR LBRACKET Expression RBRACKET .)
    IF              reduce using rule 22 (BracketCall -> IdListR LBRACKET Expression RBRACKET .)
    FOR             reduce using rule 22 (BracketCall -> IdListR LBRACKET Expression RBRACKET .)
    WHILE           reduce using rule 22 (BracketCall -> IdListR LBRACKET Expression RBRACKET .)
    BREAK           reduce using rule 22 (BracketCall -> IdListR LBRACKET Expression RBRACKET .)
    RETURN          reduce using rule 22 (BracketCall -> IdListR LBRACKET Expression RBRACKET .)
    ;               reduce using rule 22 (BracketCall -> IdListR LBRACKET Expression RBRACKET .)
    ID              reduce using rule 22 (BracketCall -> IdListR LBRACKET Expression RBRACKET .)
    LPAREN          reduce using rule 22 (BracketCall -> IdListR LBRACKET Expression RBRACKET .)
    LBRACE          reduce using rule 22 (BracketCall -> IdListR LBRACKET Expression RBRACKET .)
    INTL            reduce using rule 22 (BracketCall -> IdListR LBRACKET Expression RBRACKET .)
    BOOLL           reduce using rule 22 (BracketCall -> IdListR LBRACKET Expression RBRACKET .)
    RBRACE          reduce using rule 22 (BracketCall -> IdListR LBRACKET Expression RBRACKET .)
    RBRACKET        reduce using rule 22 (BracketCall -> IdListR LBRACKET Expression RBRACKET .)
    COMMA           reduce using rule 22 (BracketCall -> IdListR LBRACKET Expression RBRACKET .)


state 156

    (26) DeclarationAssignmentStatement -> Type ID ASSIGNMENT Expression . SEMICOLON
    (7) BinaryExpression -> Expression . PLUS Expression
    (8) BinaryExpression -> Expression . MINUS Expression
    (9) BinaryExpression -> Expression . TIMES Expression
    (10) BinaryExpression -> Expression . DIVIDE Expression
    (11) BinaryExpression -> Expression . MOD Expression
    (12) BinaryExpression -> Expression . LEQ Expression
    (13) BinaryExpression -> Expression . GEQ Expression
    (14) BinaryExpression -> Expression . LT Expression
    (15) BinaryExpression -> Expression . GT Expression
    (16) BinaryExpression -> Expression . EQ Expression
    (17) BinaryExpression -> Expression . NE Expression

    SEMICOLON       shift and go to state 164
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    TIMES           shift and go to state 96
    DIVIDE          shift and go to state 97
    MOD             shift and go to state 98
    LEQ             shift and go to state 99
    GEQ             shift and go to state 100
    LT              shift and go to state 101
    GT              shift and go to state 102
    EQ              shift and go to state 103
    NE              shift and go to state 104


state 157

    (36) FunctionCall -> ID LT TypeParameterListR . GT LPAREN ArgumentListR RPAREN

    GT              shift and go to state 165


state 158

    (72) Type -> ID LT TypeParameterListR GT . PointerListR
    (36) FunctionCall -> ID LT TypeParameterListR GT . LPAREN ArgumentListR RPAREN
    (49) PointerListR -> . TIMES PointerListR
    (50) PointerListR -> . empty
    (83) empty -> .

    LPAREN          shift and go to state 166
    TIMES           shift and go to state 32
    ID              reduce using rule 83 (empty -> .)

    PointerListR                   shift and go to state 90
    empty                          shift and go to state 33

state 159

    (35) FunctionCall -> ID LPAREN ArgumentListR RPAREN .

    SEMICOLON       reduce using rule 35 (FunctionCall -> ID LPAREN ArgumentListR RPAREN .)
    PLUS            reduce using rule 35 (FunctionCall -> ID LPAREN ArgumentListR RPAREN .)
    MINUS           reduce using rule 35 (FunctionCall -> ID LPAREN ArgumentListR RPAREN .)
    TIMES           reduce using rule 35 (FunctionCall -> ID LPAREN ArgumentListR RPAREN .)
    DIVIDE          reduce using rule 35 (FunctionCall -> ID LPAREN ArgumentListR RPAREN .)
    MOD             reduce using rule 35 (FunctionCall -> ID LPAREN ArgumentListR RPAREN .)
    LEQ             reduce using rule 35 (FunctionCall -> ID LPAREN ArgumentListR RPAREN .)
    GEQ             reduce using rule 35 (FunctionCall -> ID LPAREN ArgumentListR RPAREN .)
    LT              reduce using rule 35 (FunctionCall -> ID LPAREN ArgumentListR RPAREN .)
    GT              reduce using rule 35 (FunctionCall -> ID LPAREN ArgumentListR RPAREN .)
    EQ              reduce using rule 35 (FunctionCall -> ID LPAREN ArgumentListR RPAREN .)
    NE              reduce using rule 35 (FunctionCall -> ID LPAREN ArgumentListR RPAREN .)
    RPAREN          reduce using rule 35 (FunctionCall -> ID LPAREN ArgumentListR RPAREN .)
    IF              reduce using rule 35 (FunctionCall -> ID LPAREN ArgumentListR RPAREN .)
    FOR             reduce using rule 35 (FunctionCall -> ID LPAREN ArgumentListR RPAREN .)
    WHILE           reduce using rule 35 (FunctionCall -> ID LPAREN ArgumentListR RPAREN .)
    BREAK           reduce using rule 35 (FunctionCall -> ID LPAREN ArgumentListR RPAREN .)
    RETURN          reduce using rule 35 (FunctionCall -> ID LPAREN ArgumentListR RPAREN .)
    ;               reduce using rule 35 (FunctionCall -> ID LPAREN ArgumentListR RPAREN .)
    ID              reduce using rule 35 (FunctionCall -> ID LPAREN ArgumentListR RPAREN .)
    LPAREN          reduce using rule 35 (FunctionCall -> ID LPAREN ArgumentListR RPAREN .)
    LBRACE          reduce using rule 35 (FunctionCall -> ID LPAREN ArgumentListR RPAREN .)
    INTL            reduce using rule 35 (FunctionCall -> ID LPAREN ArgumentListR RPAREN .)
    BOOLL           reduce using rule 35 (FunctionCall -> ID LPAREN ArgumentListR RPAREN .)
    RBRACE          reduce using rule 35 (FunctionCall -> ID LPAREN ArgumentListR RPAREN .)
    RBRACKET        reduce using rule 35 (FunctionCall -> ID LPAREN ArgumentListR RPAREN .)
    COMMA           reduce using rule 35 (FunctionCall -> ID LPAREN ArgumentListR RPAREN .)


state 160

    (2) ArgumentListR -> Argument COMMA . ArgumentListR
    (2) ArgumentListR -> . Argument COMMA ArgumentListR
    (3) ArgumentListR -> . Argument
    (4) ArgumentListR -> . empty
    (1) Argument -> . Expression
    (83) empty -> .
    (32) Expression -> . BinaryExpression
    (33) Expression -> . UnaryExpression
    (7) BinaryExpression -> . Expression PLUS Expression
    (8) BinaryExpression -> . Expression MINUS Expression
    (9) BinaryExpression -> . Expression TIMES Expression
    (10) BinaryExpression -> . Expression DIVIDE Expression
    (11) BinaryExpression -> . Expression MOD Expression
    (12) BinaryExpression -> . Expression LEQ Expression
    (13) BinaryExpression -> . Expression GEQ Expression
    (14) BinaryExpression -> . Expression LT Expression
    (15) BinaryExpression -> . Expression GT Expression
    (16) BinaryExpression -> . Expression EQ Expression
    (17) BinaryExpression -> . Expression NE Expression
    (77) UnaryExpression -> . IdListR
    (78) UnaryExpression -> . Literal
    (79) UnaryExpression -> . FunctionCall
    (80) UnaryExpression -> . BracketCall
    (81) UnaryExpression -> . LPAREN Expression RPAREN
    (39) IdListR -> . ID DOT IdListR
    (40) IdListR -> . ID
    (43) Literal -> . IntLiteral
    (44) Literal -> . BoolLiteral
    (35) FunctionCall -> . ID LPAREN ArgumentListR RPAREN
    (36) FunctionCall -> . ID LT TypeParameterListR GT LPAREN ArgumentListR RPAREN
    (22) BracketCall -> . IdListR LBRACKET Expression RBRACKET
    (42) IntLiteral -> . INTL
    (21) BoolLiteral -> . BOOLL

    RPAREN          reduce using rule 83 (empty -> .)
    LPAREN          shift and go to state 75
    ID              shift and go to state 115
    INTL            shift and go to state 80
    BOOLL           shift and go to state 87

    Argument                       shift and go to state 144
    ArgumentListR                  shift and go to state 167
    empty                          shift and go to state 145
    Expression                     shift and go to state 146
    BinaryExpression               shift and go to state 72
    UnaryExpression                shift and go to state 73
    IdListR                        shift and go to state 114
    Literal                        shift and go to state 83
    FunctionCall                   shift and go to state 71
    BracketCall                    shift and go to state 84
    IntLiteral                     shift and go to state 85
    BoolLiteral                    shift and go to state 86

state 161

    (41) IfElseStatement -> IF LPAREN Expression RPAREN . Block ELSE Block
    (19) Block -> . LBRACE StatementListR RBRACE

    LBRACE          shift and go to state 46

    Block                          shift and go to state 168

state 162

    (34) ForStatement -> FOR LPAREN Statement Expression . SEMICOLON Statement RPAREN Block
    (7) BinaryExpression -> Expression . PLUS Expression
    (8) BinaryExpression -> Expression . MINUS Expression
    (9) BinaryExpression -> Expression . TIMES Expression
    (10) BinaryExpression -> Expression . DIVIDE Expression
    (11) BinaryExpression -> Expression . MOD Expression
    (12) BinaryExpression -> Expression . LEQ Expression
    (13) BinaryExpression -> Expression . GEQ Expression
    (14) BinaryExpression -> Expression . LT Expression
    (15) BinaryExpression -> Expression . GT Expression
    (16) BinaryExpression -> Expression . EQ Expression
    (17) BinaryExpression -> Expression . NE Expression

    SEMICOLON       shift and go to state 169
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    TIMES           shift and go to state 96
    DIVIDE          shift and go to state 97
    MOD             shift and go to state 98
    LEQ             shift and go to state 99
    GEQ             shift and go to state 100
    LT              shift and go to state 101
    GT              shift and go to state 102
    EQ              shift and go to state 103
    NE              shift and go to state 104


state 163

    (82) WhileStatement -> WHILE LPAREN Expression RPAREN . Block
    (19) Block -> . LBRACE StatementListR RBRACE

    LBRACE          shift and go to state 46

    Block                          shift and go to state 170

state 164

    (26) DeclarationAssignmentStatement -> Type ID ASSIGNMENT Expression SEMICOLON .

    IF              reduce using rule 26 (DeclarationAssignmentStatement -> Type ID ASSIGNMENT Expression SEMICOLON .)
    FOR             reduce using rule 26 (DeclarationAssignmentStatement -> Type ID ASSIGNMENT Expression SEMICOLON .)
    WHILE           reduce using rule 26 (DeclarationAssignmentStatement -> Type ID ASSIGNMENT Expression SEMICOLON .)
    BREAK           reduce using rule 26 (DeclarationAssignmentStatement -> Type ID ASSIGNMENT Expression SEMICOLON .)
    RETURN          reduce using rule 26 (DeclarationAssignmentStatement -> Type ID ASSIGNMENT Expression SEMICOLON .)
    ;               reduce using rule 26 (DeclarationAssignmentStatement -> Type ID ASSIGNMENT Expression SEMICOLON .)
    ID              reduce using rule 26 (DeclarationAssignmentStatement -> Type ID ASSIGNMENT Expression SEMICOLON .)
    LPAREN          reduce using rule 26 (DeclarationAssignmentStatement -> Type ID ASSIGNMENT Expression SEMICOLON .)
    LBRACE          reduce using rule 26 (DeclarationAssignmentStatement -> Type ID ASSIGNMENT Expression SEMICOLON .)
    INTL            reduce using rule 26 (DeclarationAssignmentStatement -> Type ID ASSIGNMENT Expression SEMICOLON .)
    BOOLL           reduce using rule 26 (DeclarationAssignmentStatement -> Type ID ASSIGNMENT Expression SEMICOLON .)
    RBRACE          reduce using rule 26 (DeclarationAssignmentStatement -> Type ID ASSIGNMENT Expression SEMICOLON .)
    RPAREN          reduce using rule 26 (DeclarationAssignmentStatement -> Type ID ASSIGNMENT Expression SEMICOLON .)


state 165

    (36) FunctionCall -> ID LT TypeParameterListR GT . LPAREN ArgumentListR RPAREN

    LPAREN          shift and go to state 166


state 166

    (36) FunctionCall -> ID LT TypeParameterListR GT LPAREN . ArgumentListR RPAREN
    (2) ArgumentListR -> . Argument COMMA ArgumentListR
    (3) ArgumentListR -> . Argument
    (4) ArgumentListR -> . empty
    (1) Argument -> . Expression
    (83) empty -> .
    (32) Expression -> . BinaryExpression
    (33) Expression -> . UnaryExpression
    (7) BinaryExpression -> . Expression PLUS Expression
    (8) BinaryExpression -> . Expression MINUS Expression
    (9) BinaryExpression -> . Expression TIMES Expression
    (10) BinaryExpression -> . Expression DIVIDE Expression
    (11) BinaryExpression -> . Expression MOD Expression
    (12) BinaryExpression -> . Expression LEQ Expression
    (13) BinaryExpression -> . Expression GEQ Expression
    (14) BinaryExpression -> . Expression LT Expression
    (15) BinaryExpression -> . Expression GT Expression
    (16) BinaryExpression -> . Expression EQ Expression
    (17) BinaryExpression -> . Expression NE Expression
    (77) UnaryExpression -> . IdListR
    (78) UnaryExpression -> . Literal
    (79) UnaryExpression -> . FunctionCall
    (80) UnaryExpression -> . BracketCall
    (81) UnaryExpression -> . LPAREN Expression RPAREN
    (39) IdListR -> . ID DOT IdListR
    (40) IdListR -> . ID
    (43) Literal -> . IntLiteral
    (44) Literal -> . BoolLiteral
    (35) FunctionCall -> . ID LPAREN ArgumentListR RPAREN
    (36) FunctionCall -> . ID LT TypeParameterListR GT LPAREN ArgumentListR RPAREN
    (22) BracketCall -> . IdListR LBRACKET Expression RBRACKET
    (42) IntLiteral -> . INTL
    (21) BoolLiteral -> . BOOLL

    RPAREN          reduce using rule 83 (empty -> .)
    LPAREN          shift and go to state 75
    ID              shift and go to state 115
    INTL            shift and go to state 80
    BOOLL           shift and go to state 87

    ArgumentListR                  shift and go to state 171
    Argument                       shift and go to state 144
    empty                          shift and go to state 145
    Expression                     shift and go to state 146
    BinaryExpression               shift and go to state 72
    UnaryExpression                shift and go to state 73
    IdListR                        shift and go to state 114
    Literal                        shift and go to state 83
    FunctionCall                   shift and go to state 71
    BracketCall                    shift and go to state 84
    IntLiteral                     shift and go to state 85
    BoolLiteral                    shift and go to state 86

state 167

    (2) ArgumentListR -> Argument COMMA ArgumentListR .

    RPAREN          reduce using rule 2 (ArgumentListR -> Argument COMMA ArgumentListR .)


state 168

    (41) IfElseStatement -> IF LPAREN Expression RPAREN Block . ELSE Block

    ELSE            shift and go to state 172


state 169

    (34) ForStatement -> FOR LPAREN Statement Expression SEMICOLON . Statement RPAREN Block
    (53) Statement -> . AssignmentStatement
    (54) Statement -> . DeclarationAssignmentStatement
    (55) Statement -> . DeclarationFunctionCallStatement
    (56) Statement -> . DeclarationStatement
    (57) Statement -> . Expression SEMICOLON
    (58) Statement -> . IfElseStatement
    (59) Statement -> . ForStatement
    (60) Statement -> . WhileStatement
    (61) Statement -> . BreakStatement
    (62) Statement -> . ReturnStatement
    (63) Statement -> . BlockStatement
    (64) Statement -> . BlankStatement
    (5) AssignmentStatement -> . IdListR ASSIGNMENT Expression SEMICOLON
    (6) AssignmentStatement -> . IdListR ASSIGNMENT Expression
    (26) DeclarationAssignmentStatement -> . Type ID ASSIGNMENT Expression SEMICOLON
    (27) DeclarationFunctionCallStatement -> . Type FunctionCall SEMICOLON
    (28) DeclarationStatement -> . Type ID SEMICOLON
    (32) Expression -> . BinaryExpression
    (33) Expression -> . UnaryExpression
    (41) IfElseStatement -> . IF LPAREN Expression RPAREN Block ELSE Block
    (34) ForStatement -> . FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block
    (82) WhileStatement -> . WHILE LPAREN Expression RPAREN Block
    (23) BreakStatement -> . BREAK INTL SEMICOLON
    (24) BreakStatement -> . BREAK SEMICOLON
    (51) ReturnStatement -> . RETURN Expression SEMICOLON
    (52) ReturnStatement -> . RETURN SEMICOLON
    (20) BlockStatement -> . Block
    (18) BlankStatement -> . ;
    (39) IdListR -> . ID DOT IdListR
    (40) IdListR -> . ID
    (71) Type -> . ID PointerListR
    (72) Type -> . ID LT TypeParameterListR GT PointerListR
    (7) BinaryExpression -> . Expression PLUS Expression
    (8) BinaryExpression -> . Expression MINUS Expression
    (9) BinaryExpression -> . Expression TIMES Expression
    (10) BinaryExpression -> . Expression DIVIDE Expression
    (11) BinaryExpression -> . Expression MOD Expression
    (12) BinaryExpression -> . Expression LEQ Expression
    (13) BinaryExpression -> . Expression GEQ Expression
    (14) BinaryExpression -> . Expression LT Expression
    (15) BinaryExpression -> . Expression GT Expression
    (16) BinaryExpression -> . Expression EQ Expression
    (17) BinaryExpression -> . Expression NE Expression
    (77) UnaryExpression -> . IdListR
    (78) UnaryExpression -> . Literal
    (79) UnaryExpression -> . FunctionCall
    (80) UnaryExpression -> . BracketCall
    (81) UnaryExpression -> . LPAREN Expression RPAREN
    (19) Block -> . LBRACE StatementListR RBRACE
    (43) Literal -> . IntLiteral
    (44) Literal -> . BoolLiteral
    (35) FunctionCall -> . ID LPAREN ArgumentListR RPAREN
    (36) FunctionCall -> . ID LT TypeParameterListR GT LPAREN ArgumentListR RPAREN
    (22) BracketCall -> . IdListR LBRACKET Expression RBRACKET
    (42) IntLiteral -> . INTL
    (21) BoolLiteral -> . BOOLL

    IF              shift and go to state 74
    FOR             shift and go to state 77
    WHILE           shift and go to state 78
    BREAK           shift and go to state 79
    RETURN          shift and go to state 81
    ;               shift and go to state 82
    ID              shift and go to state 70
    LPAREN          shift and go to state 75
    LBRACE          shift and go to state 46
    INTL            shift and go to state 80
    BOOLL           shift and go to state 87

    Statement                      shift and go to state 173
    Expression                     shift and go to state 60
    Block                          shift and go to state 76
    AssignmentStatement            shift and go to state 56
    DeclarationAssignmentStatement shift and go to state 57
    DeclarationFunctionCallStatement shift and go to state 58
    DeclarationStatement           shift and go to state 59
    IfElseStatement                shift and go to state 61
    ForStatement                   shift and go to state 62
    WhileStatement                 shift and go to state 63
    BreakStatement                 shift and go to state 64
    ReturnStatement                shift and go to state 65
    BlockStatement                 shift and go to state 66
    BlankStatement                 shift and go to state 67
    IdListR                        shift and go to state 68
    Type                           shift and go to state 69
    FunctionCall                   shift and go to state 71
    BinaryExpression               shift and go to state 72
    UnaryExpression                shift and go to state 73
    Literal                        shift and go to state 83
    BracketCall                    shift and go to state 84
    IntLiteral                     shift and go to state 85
    BoolLiteral                    shift and go to state 86

state 170

    (82) WhileStatement -> WHILE LPAREN Expression RPAREN Block .

    IF              reduce using rule 82 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    FOR             reduce using rule 82 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    WHILE           reduce using rule 82 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    BREAK           reduce using rule 82 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    RETURN          reduce using rule 82 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    ;               reduce using rule 82 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    ID              reduce using rule 82 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    LPAREN          reduce using rule 82 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    LBRACE          reduce using rule 82 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    INTL            reduce using rule 82 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    BOOLL           reduce using rule 82 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    RBRACE          reduce using rule 82 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    RPAREN          reduce using rule 82 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)


state 171

    (36) FunctionCall -> ID LT TypeParameterListR GT LPAREN ArgumentListR . RPAREN

    RPAREN          shift and go to state 174


state 172

    (41) IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE . Block
    (19) Block -> . LBRACE StatementListR RBRACE

    LBRACE          shift and go to state 46

    Block                          shift and go to state 175

state 173

    (34) ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement . RPAREN Block

    RPAREN          shift and go to state 176


state 174

    (36) FunctionCall -> ID LT TypeParameterListR GT LPAREN ArgumentListR RPAREN .

    SEMICOLON       reduce using rule 36 (FunctionCall -> ID LT TypeParameterListR GT LPAREN ArgumentListR RPAREN .)
    PLUS            reduce using rule 36 (FunctionCall -> ID LT TypeParameterListR GT LPAREN ArgumentListR RPAREN .)
    MINUS           reduce using rule 36 (FunctionCall -> ID LT TypeParameterListR GT LPAREN ArgumentListR RPAREN .)
    TIMES           reduce using rule 36 (FunctionCall -> ID LT TypeParameterListR GT LPAREN ArgumentListR RPAREN .)
    DIVIDE          reduce using rule 36 (FunctionCall -> ID LT TypeParameterListR GT LPAREN ArgumentListR RPAREN .)
    MOD             reduce using rule 36 (FunctionCall -> ID LT TypeParameterListR GT LPAREN ArgumentListR RPAREN .)
    LEQ             reduce using rule 36 (FunctionCall -> ID LT TypeParameterListR GT LPAREN ArgumentListR RPAREN .)
    GEQ             reduce using rule 36 (FunctionCall -> ID LT TypeParameterListR GT LPAREN ArgumentListR RPAREN .)
    LT              reduce using rule 36 (FunctionCall -> ID LT TypeParameterListR GT LPAREN ArgumentListR RPAREN .)
    GT              reduce using rule 36 (FunctionCall -> ID LT TypeParameterListR GT LPAREN ArgumentListR RPAREN .)
    EQ              reduce using rule 36 (FunctionCall -> ID LT TypeParameterListR GT LPAREN ArgumentListR RPAREN .)
    NE              reduce using rule 36 (FunctionCall -> ID LT TypeParameterListR GT LPAREN ArgumentListR RPAREN .)
    RPAREN          reduce using rule 36 (FunctionCall -> ID LT TypeParameterListR GT LPAREN ArgumentListR RPAREN .)
    IF              reduce using rule 36 (FunctionCall -> ID LT TypeParameterListR GT LPAREN ArgumentListR RPAREN .)
    FOR             reduce using rule 36 (FunctionCall -> ID LT TypeParameterListR GT LPAREN ArgumentListR RPAREN .)
    WHILE           reduce using rule 36 (FunctionCall -> ID LT TypeParameterListR GT LPAREN ArgumentListR RPAREN .)
    BREAK           reduce using rule 36 (FunctionCall -> ID LT TypeParameterListR GT LPAREN ArgumentListR RPAREN .)
    RETURN          reduce using rule 36 (FunctionCall -> ID LT TypeParameterListR GT LPAREN ArgumentListR RPAREN .)
    ;               reduce using rule 36 (FunctionCall -> ID LT TypeParameterListR GT LPAREN ArgumentListR RPAREN .)
    ID              reduce using rule 36 (FunctionCall -> ID LT TypeParameterListR GT LPAREN ArgumentListR RPAREN .)
    LPAREN          reduce using rule 36 (FunctionCall -> ID LT TypeParameterListR GT LPAREN ArgumentListR RPAREN .)
    LBRACE          reduce using rule 36 (FunctionCall -> ID LT TypeParameterListR GT LPAREN ArgumentListR RPAREN .)
    INTL            reduce using rule 36 (FunctionCall -> ID LT TypeParameterListR GT LPAREN ArgumentListR RPAREN .)
    BOOLL           reduce using rule 36 (FunctionCall -> ID LT TypeParameterListR GT LPAREN ArgumentListR RPAREN .)
    RBRACE          reduce using rule 36 (FunctionCall -> ID LT TypeParameterListR GT LPAREN ArgumentListR RPAREN .)
    RBRACKET        reduce using rule 36 (FunctionCall -> ID LT TypeParameterListR GT LPAREN ArgumentListR RPAREN .)
    COMMA           reduce using rule 36 (FunctionCall -> ID LT TypeParameterListR GT LPAREN ArgumentListR RPAREN .)


state 175

    (41) IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .

    IF              reduce using rule 41 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)
    FOR             reduce using rule 41 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)
    WHILE           reduce using rule 41 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)
    BREAK           reduce using rule 41 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)
    RETURN          reduce using rule 41 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)
    ;               reduce using rule 41 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)
    ID              reduce using rule 41 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)
    LPAREN          reduce using rule 41 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)
    LBRACE          reduce using rule 41 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)
    INTL            reduce using rule 41 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)
    BOOLL           reduce using rule 41 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)
    RBRACE          reduce using rule 41 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)
    RPAREN          reduce using rule 41 (IfElseStatement -> IF LPAREN Expression RPAREN Block ELSE Block .)


state 176

    (34) ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN . Block
    (19) Block -> . LBRACE StatementListR RBRACE

    LBRACE          shift and go to state 46

    Block                          shift and go to state 177

state 177

    (34) ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .

    IF              reduce using rule 34 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)
    FOR             reduce using rule 34 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)
    WHILE           reduce using rule 34 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)
    BREAK           reduce using rule 34 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)
    RETURN          reduce using rule 34 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)
    ;               reduce using rule 34 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)
    ID              reduce using rule 34 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)
    LPAREN          reduce using rule 34 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)
    LBRACE          reduce using rule 34 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)
    INTL            reduce using rule 34 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)
    BOOLL           reduce using rule 34 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)
    RBRACE          reduce using rule 34 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)
    RPAREN          reduce using rule 34 (ForStatement -> FOR LPAREN Statement Expression SEMICOLON Statement RPAREN Block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LT in state 70 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 70 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 115 resolved as shift
WARNING: shift/reduce conflict for LT in state 115 resolved as shift
