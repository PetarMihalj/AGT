Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> CompilationUnit
Rule 1     BinaryExpressionPrio3 -> UnaryExpression * BinaryExpressionPrio3
Rule 2     BinaryExpressionPrio3 -> UnaryExpression / BinaryExpressionPrio3
Rule 3     BinaryExpressionPrio3 -> UnaryExpression % BinaryExpressionPrio3
Rule 4     BinaryExpressionPrio3 -> UnaryExpression
Rule 5     BinaryExpressionPrio4 -> BinaryExpressionPrio3 + BinaryExpressionPrio4
Rule 6     BinaryExpressionPrio4 -> BinaryExpressionPrio3 - BinaryExpressionPrio4
Rule 7     BinaryExpressionPrio4 -> BinaryExpressionPrio3
Rule 8     BinaryExpressionPrio6 -> BinaryExpressionPrio4 LEQ BinaryExpressionPrio6
Rule 9     BinaryExpressionPrio6 -> BinaryExpressionPrio4 GEQ BinaryExpressionPrio6
Rule 10    BinaryExpressionPrio6 -> BinaryExpressionPrio4 LT BinaryExpressionPrio6
Rule 11    BinaryExpressionPrio6 -> BinaryExpressionPrio4 GT BinaryExpressionPrio6
Rule 12    BinaryExpressionPrio6 -> BinaryExpressionPrio4
Rule 13    BinaryExpressionPrio7 -> BinaryExpressionPrio6 NEQ BinaryExpressionPrio7
Rule 14    BinaryExpressionPrio7 -> BinaryExpressionPrio6 EQ BinaryExpressionPrio7
Rule 15    BinaryExpressionPrio7 -> BinaryExpressionPrio6
Rule 16    Expression -> BinaryExpressionPrio7
Rule 17    BoolLiteral -> BOOLL
Rule 18    CharLiteral -> CHARL
Rule 19    IntLiteral -> INTL
Rule 20    Literal -> IntLiteral
Rule 21    Literal -> BoolLiteral
Rule 22    Literal -> CharLiteral
Rule 23    AssignmentStatement -> ID = Expression ;
Rule 24    BreakStatement -> BREAK INTL ;
Rule 25    BreakStatement -> BREAK ;
Rule 26    DeclarationAssignmentStatement -> TypeName ID = Expression ;
Rule 27    DeclarationStatement -> TypeName ID ;
Rule 28    ForStatement -> FOR ( Statement ; Expression ; Statement ) Block
Rule 29    IfElseStatement -> IF ( Expression ) Block ELSE Block
Rule 30    ReturnStatement -> RETURN Expression ;
Rule 31    ReturnStatement -> RETURN ;
Rule 32    Statement -> AssignmentStatement
Rule 33    Statement -> DeclarationAssignmentStatement
Rule 34    Statement -> Expression ;
Rule 35    Statement -> DeclarationStatement
Rule 36    Statement -> IfElseStatement
Rule 37    Statement -> ForStatement
Rule 38    Statement -> WhileStatement
Rule 39    Statement -> BreakStatement
Rule 40    Statement -> ReturnStatement
Rule 41    StatementListR -> Statement StatementListR
Rule 42    StatementListR -> empty
Rule 43    WhileStatement -> WHILE ( Expression ) Block
Rule 44    Argument -> Expression
Rule 45    ArgumentListR -> Argument , ArgumentListR
Rule 46    ArgumentListR -> Argument
Rule 47    ArgumentListR -> empty
Rule 48    Block -> { StatementListR }
Rule 49    CompilationUnit -> DefinitionListR
Rule 50    DefinitionListR -> FunctionDefinition DefinitionListR
Rule 51    DefinitionListR -> empty
Rule 52    FunctionDefinition -> TypeName ID ( ParameterListR ) Block
Rule 53    Parameter -> TypeName ID
Rule 54    ParameterListR -> Parameter , ParameterListR
Rule 55    ParameterListR -> Parameter
Rule 56    ParameterListR -> empty
Rule 57    TypeName -> ID
Rule 58    VarName -> ID
Rule 59    DecrementAfter -> VarName DEC
Rule 60    DecrementBefore -> DEC VarName
Rule 61    FunctionCall -> VarName ( ArgumentListR )
Rule 62    IncrementAfter -> VarName INC
Rule 63    IncrementBefore -> INC VarName
Rule 64    Negate -> - VarName
Rule 65    UnaryExpression -> Negate
Rule 66    UnaryExpression -> IncrementAfter
Rule 67    UnaryExpression -> IncrementBefore
Rule 68    UnaryExpression -> DecrementAfter
Rule 69    UnaryExpression -> DecrementBefore
Rule 70    UnaryExpression -> FunctionCall
Rule 71    UnaryExpression -> VarName
Rule 72    UnaryExpression -> Literal
Rule 73    UnaryExpression -> ( Expression )
Rule 74    empty -> <empty>

Terminals, with rules where they appear

%                    : 3
(                    : 28 29 43 52 61 73
)                    : 28 29 43 52 61 73
*                    : 1
+                    : 5
,                    : 45 54
-                    : 6 64
/                    : 2
;                    : 23 24 25 26 27 28 28 30 31 34
=                    : 23 26
BOOLL                : 17
BREAK                : 24 25
CHARL                : 18
DEC                  : 59 60
ELSE                 : 29
EQ                   : 14
FOR                  : 28
GEQ                  : 9
GT                   : 11
ID                   : 23 26 27 52 53 57 58
IF                   : 29
INC                  : 62 63
INTL                 : 19 24
LEQ                  : 8
LT                   : 10
NEQ                  : 13
RETURN               : 30 31
WHILE                : 43
error                : 
{                    : 48
}                    : 48

Nonterminals, with rules where they appear

Argument             : 45 46
ArgumentListR        : 45 61
AssignmentStatement  : 32
BinaryExpressionPrio3 : 1 2 3 5 6 7
BinaryExpressionPrio4 : 5 6 8 9 10 11 12
BinaryExpressionPrio6 : 8 9 10 11 13 14 15
BinaryExpressionPrio7 : 13 14 16
Block                : 28 29 29 43 52
BoolLiteral          : 21
BreakStatement       : 39
CharLiteral          : 22
CompilationUnit      : 0
DeclarationAssignmentStatement : 33
DeclarationStatement : 35
DecrementAfter       : 68
DecrementBefore      : 69
DefinitionListR      : 49 50
Expression           : 23 26 28 29 30 34 43 44 73
ForStatement         : 37
FunctionCall         : 70
FunctionDefinition   : 50
IfElseStatement      : 36
IncrementAfter       : 66
IncrementBefore      : 67
IntLiteral           : 20
Literal              : 72
Negate               : 65
Parameter            : 54 55
ParameterListR       : 52 54
ReturnStatement      : 40
Statement            : 28 28 41
StatementListR       : 41 48
TypeName             : 26 27 52 53
UnaryExpression      : 1 2 3 4
VarName              : 59 60 61 62 63 64 71
WhileStatement       : 38
empty                : 42 47 51 56

Parsing method: LALR

state 0

    (0) S' -> . CompilationUnit
    (49) CompilationUnit -> . DefinitionListR
    (50) DefinitionListR -> . FunctionDefinition DefinitionListR
    (51) DefinitionListR -> . empty
    (52) FunctionDefinition -> . TypeName ID ( ParameterListR ) Block
    (74) empty -> .
    (57) TypeName -> . ID

    $end            reduce using rule 74 (empty -> .)
    ID              shift and go to state 6

    CompilationUnit                shift and go to state 1
    DefinitionListR                shift and go to state 2
    FunctionDefinition             shift and go to state 3
    empty                          shift and go to state 4
    TypeName                       shift and go to state 5

state 1

    (0) S' -> CompilationUnit .



state 2

    (49) CompilationUnit -> DefinitionListR .

    $end            reduce using rule 49 (CompilationUnit -> DefinitionListR .)


state 3

    (50) DefinitionListR -> FunctionDefinition . DefinitionListR
    (50) DefinitionListR -> . FunctionDefinition DefinitionListR
    (51) DefinitionListR -> . empty
    (52) FunctionDefinition -> . TypeName ID ( ParameterListR ) Block
    (74) empty -> .
    (57) TypeName -> . ID

    $end            reduce using rule 74 (empty -> .)
    ID              shift and go to state 6

    FunctionDefinition             shift and go to state 3
    DefinitionListR                shift and go to state 7
    empty                          shift and go to state 4
    TypeName                       shift and go to state 5

state 4

    (51) DefinitionListR -> empty .

    $end            reduce using rule 51 (DefinitionListR -> empty .)


state 5

    (52) FunctionDefinition -> TypeName . ID ( ParameterListR ) Block

    ID              shift and go to state 8


state 6

    (57) TypeName -> ID .

    ID              reduce using rule 57 (TypeName -> ID .)


state 7

    (50) DefinitionListR -> FunctionDefinition DefinitionListR .

    $end            reduce using rule 50 (DefinitionListR -> FunctionDefinition DefinitionListR .)


state 8

    (52) FunctionDefinition -> TypeName ID . ( ParameterListR ) Block

    (               shift and go to state 9


state 9

    (52) FunctionDefinition -> TypeName ID ( . ParameterListR ) Block
    (54) ParameterListR -> . Parameter , ParameterListR
    (55) ParameterListR -> . Parameter
    (56) ParameterListR -> . empty
    (53) Parameter -> . TypeName ID
    (74) empty -> .
    (57) TypeName -> . ID

    )               reduce using rule 74 (empty -> .)
    ID              shift and go to state 6

    TypeName                       shift and go to state 10
    ParameterListR                 shift and go to state 11
    Parameter                      shift and go to state 12
    empty                          shift and go to state 13

state 10

    (53) Parameter -> TypeName . ID

    ID              shift and go to state 14


state 11

    (52) FunctionDefinition -> TypeName ID ( ParameterListR . ) Block

    )               shift and go to state 15


state 12

    (54) ParameterListR -> Parameter . , ParameterListR
    (55) ParameterListR -> Parameter .

    ,               shift and go to state 16
    )               reduce using rule 55 (ParameterListR -> Parameter .)


state 13

    (56) ParameterListR -> empty .

    )               reduce using rule 56 (ParameterListR -> empty .)


state 14

    (53) Parameter -> TypeName ID .

    ,               reduce using rule 53 (Parameter -> TypeName ID .)
    )               reduce using rule 53 (Parameter -> TypeName ID .)


state 15

    (52) FunctionDefinition -> TypeName ID ( ParameterListR ) . Block
    (48) Block -> . { StatementListR }

    {               shift and go to state 18

    Block                          shift and go to state 17

state 16

    (54) ParameterListR -> Parameter , . ParameterListR
    (54) ParameterListR -> . Parameter , ParameterListR
    (55) ParameterListR -> . Parameter
    (56) ParameterListR -> . empty
    (53) Parameter -> . TypeName ID
    (74) empty -> .
    (57) TypeName -> . ID

    )               reduce using rule 74 (empty -> .)
    ID              shift and go to state 6

    Parameter                      shift and go to state 12
    ParameterListR                 shift and go to state 19
    empty                          shift and go to state 13
    TypeName                       shift and go to state 10

state 17

    (52) FunctionDefinition -> TypeName ID ( ParameterListR ) Block .

    ID              reduce using rule 52 (FunctionDefinition -> TypeName ID ( ParameterListR ) Block .)
    $end            reduce using rule 52 (FunctionDefinition -> TypeName ID ( ParameterListR ) Block .)


state 18

    (48) Block -> { . StatementListR }
    (41) StatementListR -> . Statement StatementListR
    (42) StatementListR -> . empty
    (32) Statement -> . AssignmentStatement
    (33) Statement -> . DeclarationAssignmentStatement
    (34) Statement -> . Expression ;
    (35) Statement -> . DeclarationStatement
    (36) Statement -> . IfElseStatement
    (37) Statement -> . ForStatement
    (38) Statement -> . WhileStatement
    (39) Statement -> . BreakStatement
    (40) Statement -> . ReturnStatement
    (74) empty -> .
    (23) AssignmentStatement -> . ID = Expression ;
    (26) DeclarationAssignmentStatement -> . TypeName ID = Expression ;
    (16) Expression -> . BinaryExpressionPrio7
    (27) DeclarationStatement -> . TypeName ID ;
    (29) IfElseStatement -> . IF ( Expression ) Block ELSE Block
    (28) ForStatement -> . FOR ( Statement ; Expression ; Statement ) Block
    (43) WhileStatement -> . WHILE ( Expression ) Block
    (24) BreakStatement -> . BREAK INTL ;
    (25) BreakStatement -> . BREAK ;
    (30) ReturnStatement -> . RETURN Expression ;
    (31) ReturnStatement -> . RETURN ;
    (57) TypeName -> . ID
    (13) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 NEQ BinaryExpressionPrio7
    (14) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 EQ BinaryExpressionPrio7
    (15) BinaryExpressionPrio7 -> . BinaryExpressionPrio6
    (8) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LEQ BinaryExpressionPrio6
    (9) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GEQ BinaryExpressionPrio6
    (10) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LT BinaryExpressionPrio6
    (11) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GT BinaryExpressionPrio6
    (12) BinaryExpressionPrio6 -> . BinaryExpressionPrio4
    (5) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 + BinaryExpressionPrio4
    (6) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 - BinaryExpressionPrio4
    (7) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (1) BinaryExpressionPrio3 -> . UnaryExpression * BinaryExpressionPrio3
    (2) BinaryExpressionPrio3 -> . UnaryExpression / BinaryExpressionPrio3
    (3) BinaryExpressionPrio3 -> . UnaryExpression % BinaryExpressionPrio3
    (4) BinaryExpressionPrio3 -> . UnaryExpression
    (65) UnaryExpression -> . Negate
    (66) UnaryExpression -> . IncrementAfter
    (67) UnaryExpression -> . IncrementBefore
    (68) UnaryExpression -> . DecrementAfter
    (69) UnaryExpression -> . DecrementBefore
    (70) UnaryExpression -> . FunctionCall
    (71) UnaryExpression -> . VarName
    (72) UnaryExpression -> . Literal
    (73) UnaryExpression -> . ( Expression )
    (64) Negate -> . - VarName
    (62) IncrementAfter -> . VarName INC
    (63) IncrementBefore -> . INC VarName
    (59) DecrementAfter -> . VarName DEC
    (60) DecrementBefore -> . DEC VarName
    (61) FunctionCall -> . VarName ( ArgumentListR )
    (58) VarName -> . ID
    (20) Literal -> . IntLiteral
    (21) Literal -> . BoolLiteral
    (22) Literal -> . CharLiteral
    (19) IntLiteral -> . INTL
    (17) BoolLiteral -> . BOOLL
    (18) CharLiteral -> . CHARL

    }               reduce using rule 74 (empty -> .)
    ID              shift and go to state 32
    IF              shift and go to state 35
    FOR             shift and go to state 37
    WHILE           shift and go to state 38
    BREAK           shift and go to state 39
    RETURN          shift and go to state 41
    (               shift and go to state 36
    -               shift and go to state 45
    INC             shift and go to state 55
    DEC             shift and go to state 56
    INTL            shift and go to state 40
    BOOLL           shift and go to state 60
    CHARL           shift and go to state 61

    StatementListR                 shift and go to state 20
    Statement                      shift and go to state 21
    empty                          shift and go to state 22
    AssignmentStatement            shift and go to state 23
    DeclarationAssignmentStatement shift and go to state 24
    Expression                     shift and go to state 25
    DeclarationStatement           shift and go to state 26
    IfElseStatement                shift and go to state 27
    ForStatement                   shift and go to state 28
    WhileStatement                 shift and go to state 29
    BreakStatement                 shift and go to state 30
    ReturnStatement                shift and go to state 31
    TypeName                       shift and go to state 33
    BinaryExpressionPrio7          shift and go to state 34
    BinaryExpressionPrio6          shift and go to state 42
    BinaryExpressionPrio4          shift and go to state 43
    BinaryExpressionPrio3          shift and go to state 44
    UnaryExpression                shift and go to state 46
    Negate                         shift and go to state 47
    IncrementAfter                 shift and go to state 48
    IncrementBefore                shift and go to state 49
    DecrementAfter                 shift and go to state 50
    DecrementBefore                shift and go to state 51
    FunctionCall                   shift and go to state 52
    VarName                        shift and go to state 53
    Literal                        shift and go to state 54
    IntLiteral                     shift and go to state 57
    BoolLiteral                    shift and go to state 58
    CharLiteral                    shift and go to state 59

state 19

    (54) ParameterListR -> Parameter , ParameterListR .

    )               reduce using rule 54 (ParameterListR -> Parameter , ParameterListR .)


state 20

    (48) Block -> { StatementListR . }

    }               shift and go to state 62


state 21

    (41) StatementListR -> Statement . StatementListR
    (41) StatementListR -> . Statement StatementListR
    (42) StatementListR -> . empty
    (32) Statement -> . AssignmentStatement
    (33) Statement -> . DeclarationAssignmentStatement
    (34) Statement -> . Expression ;
    (35) Statement -> . DeclarationStatement
    (36) Statement -> . IfElseStatement
    (37) Statement -> . ForStatement
    (38) Statement -> . WhileStatement
    (39) Statement -> . BreakStatement
    (40) Statement -> . ReturnStatement
    (74) empty -> .
    (23) AssignmentStatement -> . ID = Expression ;
    (26) DeclarationAssignmentStatement -> . TypeName ID = Expression ;
    (16) Expression -> . BinaryExpressionPrio7
    (27) DeclarationStatement -> . TypeName ID ;
    (29) IfElseStatement -> . IF ( Expression ) Block ELSE Block
    (28) ForStatement -> . FOR ( Statement ; Expression ; Statement ) Block
    (43) WhileStatement -> . WHILE ( Expression ) Block
    (24) BreakStatement -> . BREAK INTL ;
    (25) BreakStatement -> . BREAK ;
    (30) ReturnStatement -> . RETURN Expression ;
    (31) ReturnStatement -> . RETURN ;
    (57) TypeName -> . ID
    (13) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 NEQ BinaryExpressionPrio7
    (14) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 EQ BinaryExpressionPrio7
    (15) BinaryExpressionPrio7 -> . BinaryExpressionPrio6
    (8) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LEQ BinaryExpressionPrio6
    (9) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GEQ BinaryExpressionPrio6
    (10) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LT BinaryExpressionPrio6
    (11) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GT BinaryExpressionPrio6
    (12) BinaryExpressionPrio6 -> . BinaryExpressionPrio4
    (5) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 + BinaryExpressionPrio4
    (6) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 - BinaryExpressionPrio4
    (7) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (1) BinaryExpressionPrio3 -> . UnaryExpression * BinaryExpressionPrio3
    (2) BinaryExpressionPrio3 -> . UnaryExpression / BinaryExpressionPrio3
    (3) BinaryExpressionPrio3 -> . UnaryExpression % BinaryExpressionPrio3
    (4) BinaryExpressionPrio3 -> . UnaryExpression
    (65) UnaryExpression -> . Negate
    (66) UnaryExpression -> . IncrementAfter
    (67) UnaryExpression -> . IncrementBefore
    (68) UnaryExpression -> . DecrementAfter
    (69) UnaryExpression -> . DecrementBefore
    (70) UnaryExpression -> . FunctionCall
    (71) UnaryExpression -> . VarName
    (72) UnaryExpression -> . Literal
    (73) UnaryExpression -> . ( Expression )
    (64) Negate -> . - VarName
    (62) IncrementAfter -> . VarName INC
    (63) IncrementBefore -> . INC VarName
    (59) DecrementAfter -> . VarName DEC
    (60) DecrementBefore -> . DEC VarName
    (61) FunctionCall -> . VarName ( ArgumentListR )
    (58) VarName -> . ID
    (20) Literal -> . IntLiteral
    (21) Literal -> . BoolLiteral
    (22) Literal -> . CharLiteral
    (19) IntLiteral -> . INTL
    (17) BoolLiteral -> . BOOLL
    (18) CharLiteral -> . CHARL

    }               reduce using rule 74 (empty -> .)
    ID              shift and go to state 32
    IF              shift and go to state 35
    FOR             shift and go to state 37
    WHILE           shift and go to state 38
    BREAK           shift and go to state 39
    RETURN          shift and go to state 41
    (               shift and go to state 36
    -               shift and go to state 45
    INC             shift and go to state 55
    DEC             shift and go to state 56
    INTL            shift and go to state 40
    BOOLL           shift and go to state 60
    CHARL           shift and go to state 61

    Statement                      shift and go to state 21
    StatementListR                 shift and go to state 63
    empty                          shift and go to state 22
    AssignmentStatement            shift and go to state 23
    DeclarationAssignmentStatement shift and go to state 24
    Expression                     shift and go to state 25
    DeclarationStatement           shift and go to state 26
    IfElseStatement                shift and go to state 27
    ForStatement                   shift and go to state 28
    WhileStatement                 shift and go to state 29
    BreakStatement                 shift and go to state 30
    ReturnStatement                shift and go to state 31
    TypeName                       shift and go to state 33
    BinaryExpressionPrio7          shift and go to state 34
    BinaryExpressionPrio6          shift and go to state 42
    BinaryExpressionPrio4          shift and go to state 43
    BinaryExpressionPrio3          shift and go to state 44
    UnaryExpression                shift and go to state 46
    Negate                         shift and go to state 47
    IncrementAfter                 shift and go to state 48
    IncrementBefore                shift and go to state 49
    DecrementAfter                 shift and go to state 50
    DecrementBefore                shift and go to state 51
    FunctionCall                   shift and go to state 52
    VarName                        shift and go to state 53
    Literal                        shift and go to state 54
    IntLiteral                     shift and go to state 57
    BoolLiteral                    shift and go to state 58
    CharLiteral                    shift and go to state 59

state 22

    (42) StatementListR -> empty .

    }               reduce using rule 42 (StatementListR -> empty .)


state 23

    (32) Statement -> AssignmentStatement .

    ID              reduce using rule 32 (Statement -> AssignmentStatement .)
    IF              reduce using rule 32 (Statement -> AssignmentStatement .)
    FOR             reduce using rule 32 (Statement -> AssignmentStatement .)
    WHILE           reduce using rule 32 (Statement -> AssignmentStatement .)
    BREAK           reduce using rule 32 (Statement -> AssignmentStatement .)
    RETURN          reduce using rule 32 (Statement -> AssignmentStatement .)
    (               reduce using rule 32 (Statement -> AssignmentStatement .)
    -               reduce using rule 32 (Statement -> AssignmentStatement .)
    INC             reduce using rule 32 (Statement -> AssignmentStatement .)
    DEC             reduce using rule 32 (Statement -> AssignmentStatement .)
    INTL            reduce using rule 32 (Statement -> AssignmentStatement .)
    BOOLL           reduce using rule 32 (Statement -> AssignmentStatement .)
    CHARL           reduce using rule 32 (Statement -> AssignmentStatement .)
    }               reduce using rule 32 (Statement -> AssignmentStatement .)
    ;               reduce using rule 32 (Statement -> AssignmentStatement .)
    )               reduce using rule 32 (Statement -> AssignmentStatement .)


state 24

    (33) Statement -> DeclarationAssignmentStatement .

    ID              reduce using rule 33 (Statement -> DeclarationAssignmentStatement .)
    IF              reduce using rule 33 (Statement -> DeclarationAssignmentStatement .)
    FOR             reduce using rule 33 (Statement -> DeclarationAssignmentStatement .)
    WHILE           reduce using rule 33 (Statement -> DeclarationAssignmentStatement .)
    BREAK           reduce using rule 33 (Statement -> DeclarationAssignmentStatement .)
    RETURN          reduce using rule 33 (Statement -> DeclarationAssignmentStatement .)
    (               reduce using rule 33 (Statement -> DeclarationAssignmentStatement .)
    -               reduce using rule 33 (Statement -> DeclarationAssignmentStatement .)
    INC             reduce using rule 33 (Statement -> DeclarationAssignmentStatement .)
    DEC             reduce using rule 33 (Statement -> DeclarationAssignmentStatement .)
    INTL            reduce using rule 33 (Statement -> DeclarationAssignmentStatement .)
    BOOLL           reduce using rule 33 (Statement -> DeclarationAssignmentStatement .)
    CHARL           reduce using rule 33 (Statement -> DeclarationAssignmentStatement .)
    }               reduce using rule 33 (Statement -> DeclarationAssignmentStatement .)
    ;               reduce using rule 33 (Statement -> DeclarationAssignmentStatement .)
    )               reduce using rule 33 (Statement -> DeclarationAssignmentStatement .)


state 25

    (34) Statement -> Expression . ;

    ;               shift and go to state 64


state 26

    (35) Statement -> DeclarationStatement .

    ID              reduce using rule 35 (Statement -> DeclarationStatement .)
    IF              reduce using rule 35 (Statement -> DeclarationStatement .)
    FOR             reduce using rule 35 (Statement -> DeclarationStatement .)
    WHILE           reduce using rule 35 (Statement -> DeclarationStatement .)
    BREAK           reduce using rule 35 (Statement -> DeclarationStatement .)
    RETURN          reduce using rule 35 (Statement -> DeclarationStatement .)
    (               reduce using rule 35 (Statement -> DeclarationStatement .)
    -               reduce using rule 35 (Statement -> DeclarationStatement .)
    INC             reduce using rule 35 (Statement -> DeclarationStatement .)
    DEC             reduce using rule 35 (Statement -> DeclarationStatement .)
    INTL            reduce using rule 35 (Statement -> DeclarationStatement .)
    BOOLL           reduce using rule 35 (Statement -> DeclarationStatement .)
    CHARL           reduce using rule 35 (Statement -> DeclarationStatement .)
    }               reduce using rule 35 (Statement -> DeclarationStatement .)
    ;               reduce using rule 35 (Statement -> DeclarationStatement .)
    )               reduce using rule 35 (Statement -> DeclarationStatement .)


state 27

    (36) Statement -> IfElseStatement .

    ID              reduce using rule 36 (Statement -> IfElseStatement .)
    IF              reduce using rule 36 (Statement -> IfElseStatement .)
    FOR             reduce using rule 36 (Statement -> IfElseStatement .)
    WHILE           reduce using rule 36 (Statement -> IfElseStatement .)
    BREAK           reduce using rule 36 (Statement -> IfElseStatement .)
    RETURN          reduce using rule 36 (Statement -> IfElseStatement .)
    (               reduce using rule 36 (Statement -> IfElseStatement .)
    -               reduce using rule 36 (Statement -> IfElseStatement .)
    INC             reduce using rule 36 (Statement -> IfElseStatement .)
    DEC             reduce using rule 36 (Statement -> IfElseStatement .)
    INTL            reduce using rule 36 (Statement -> IfElseStatement .)
    BOOLL           reduce using rule 36 (Statement -> IfElseStatement .)
    CHARL           reduce using rule 36 (Statement -> IfElseStatement .)
    }               reduce using rule 36 (Statement -> IfElseStatement .)
    ;               reduce using rule 36 (Statement -> IfElseStatement .)
    )               reduce using rule 36 (Statement -> IfElseStatement .)


state 28

    (37) Statement -> ForStatement .

    ID              reduce using rule 37 (Statement -> ForStatement .)
    IF              reduce using rule 37 (Statement -> ForStatement .)
    FOR             reduce using rule 37 (Statement -> ForStatement .)
    WHILE           reduce using rule 37 (Statement -> ForStatement .)
    BREAK           reduce using rule 37 (Statement -> ForStatement .)
    RETURN          reduce using rule 37 (Statement -> ForStatement .)
    (               reduce using rule 37 (Statement -> ForStatement .)
    -               reduce using rule 37 (Statement -> ForStatement .)
    INC             reduce using rule 37 (Statement -> ForStatement .)
    DEC             reduce using rule 37 (Statement -> ForStatement .)
    INTL            reduce using rule 37 (Statement -> ForStatement .)
    BOOLL           reduce using rule 37 (Statement -> ForStatement .)
    CHARL           reduce using rule 37 (Statement -> ForStatement .)
    }               reduce using rule 37 (Statement -> ForStatement .)
    ;               reduce using rule 37 (Statement -> ForStatement .)
    )               reduce using rule 37 (Statement -> ForStatement .)


state 29

    (38) Statement -> WhileStatement .

    ID              reduce using rule 38 (Statement -> WhileStatement .)
    IF              reduce using rule 38 (Statement -> WhileStatement .)
    FOR             reduce using rule 38 (Statement -> WhileStatement .)
    WHILE           reduce using rule 38 (Statement -> WhileStatement .)
    BREAK           reduce using rule 38 (Statement -> WhileStatement .)
    RETURN          reduce using rule 38 (Statement -> WhileStatement .)
    (               reduce using rule 38 (Statement -> WhileStatement .)
    -               reduce using rule 38 (Statement -> WhileStatement .)
    INC             reduce using rule 38 (Statement -> WhileStatement .)
    DEC             reduce using rule 38 (Statement -> WhileStatement .)
    INTL            reduce using rule 38 (Statement -> WhileStatement .)
    BOOLL           reduce using rule 38 (Statement -> WhileStatement .)
    CHARL           reduce using rule 38 (Statement -> WhileStatement .)
    }               reduce using rule 38 (Statement -> WhileStatement .)
    ;               reduce using rule 38 (Statement -> WhileStatement .)
    )               reduce using rule 38 (Statement -> WhileStatement .)


state 30

    (39) Statement -> BreakStatement .

    ID              reduce using rule 39 (Statement -> BreakStatement .)
    IF              reduce using rule 39 (Statement -> BreakStatement .)
    FOR             reduce using rule 39 (Statement -> BreakStatement .)
    WHILE           reduce using rule 39 (Statement -> BreakStatement .)
    BREAK           reduce using rule 39 (Statement -> BreakStatement .)
    RETURN          reduce using rule 39 (Statement -> BreakStatement .)
    (               reduce using rule 39 (Statement -> BreakStatement .)
    -               reduce using rule 39 (Statement -> BreakStatement .)
    INC             reduce using rule 39 (Statement -> BreakStatement .)
    DEC             reduce using rule 39 (Statement -> BreakStatement .)
    INTL            reduce using rule 39 (Statement -> BreakStatement .)
    BOOLL           reduce using rule 39 (Statement -> BreakStatement .)
    CHARL           reduce using rule 39 (Statement -> BreakStatement .)
    }               reduce using rule 39 (Statement -> BreakStatement .)
    ;               reduce using rule 39 (Statement -> BreakStatement .)
    )               reduce using rule 39 (Statement -> BreakStatement .)


state 31

    (40) Statement -> ReturnStatement .

    ID              reduce using rule 40 (Statement -> ReturnStatement .)
    IF              reduce using rule 40 (Statement -> ReturnStatement .)
    FOR             reduce using rule 40 (Statement -> ReturnStatement .)
    WHILE           reduce using rule 40 (Statement -> ReturnStatement .)
    BREAK           reduce using rule 40 (Statement -> ReturnStatement .)
    RETURN          reduce using rule 40 (Statement -> ReturnStatement .)
    (               reduce using rule 40 (Statement -> ReturnStatement .)
    -               reduce using rule 40 (Statement -> ReturnStatement .)
    INC             reduce using rule 40 (Statement -> ReturnStatement .)
    DEC             reduce using rule 40 (Statement -> ReturnStatement .)
    INTL            reduce using rule 40 (Statement -> ReturnStatement .)
    BOOLL           reduce using rule 40 (Statement -> ReturnStatement .)
    CHARL           reduce using rule 40 (Statement -> ReturnStatement .)
    }               reduce using rule 40 (Statement -> ReturnStatement .)
    ;               reduce using rule 40 (Statement -> ReturnStatement .)
    )               reduce using rule 40 (Statement -> ReturnStatement .)


state 32

    (23) AssignmentStatement -> ID . = Expression ;
    (57) TypeName -> ID .
    (58) VarName -> ID .

    =               shift and go to state 65
    ID              reduce using rule 57 (TypeName -> ID .)
    INC             reduce using rule 58 (VarName -> ID .)
    DEC             reduce using rule 58 (VarName -> ID .)
    (               reduce using rule 58 (VarName -> ID .)
    *               reduce using rule 58 (VarName -> ID .)
    /               reduce using rule 58 (VarName -> ID .)
    %               reduce using rule 58 (VarName -> ID .)
    +               reduce using rule 58 (VarName -> ID .)
    -               reduce using rule 58 (VarName -> ID .)
    LEQ             reduce using rule 58 (VarName -> ID .)
    GEQ             reduce using rule 58 (VarName -> ID .)
    LT              reduce using rule 58 (VarName -> ID .)
    GT              reduce using rule 58 (VarName -> ID .)
    NEQ             reduce using rule 58 (VarName -> ID .)
    EQ              reduce using rule 58 (VarName -> ID .)
    ;               reduce using rule 58 (VarName -> ID .)


state 33

    (26) DeclarationAssignmentStatement -> TypeName . ID = Expression ;
    (27) DeclarationStatement -> TypeName . ID ;

    ID              shift and go to state 66


state 34

    (16) Expression -> BinaryExpressionPrio7 .

    ;               reduce using rule 16 (Expression -> BinaryExpressionPrio7 .)
    )               reduce using rule 16 (Expression -> BinaryExpressionPrio7 .)
    ,               reduce using rule 16 (Expression -> BinaryExpressionPrio7 .)


state 35

    (29) IfElseStatement -> IF . ( Expression ) Block ELSE Block

    (               shift and go to state 67


state 36

    (73) UnaryExpression -> ( . Expression )
    (16) Expression -> . BinaryExpressionPrio7
    (13) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 NEQ BinaryExpressionPrio7
    (14) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 EQ BinaryExpressionPrio7
    (15) BinaryExpressionPrio7 -> . BinaryExpressionPrio6
    (8) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LEQ BinaryExpressionPrio6
    (9) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GEQ BinaryExpressionPrio6
    (10) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LT BinaryExpressionPrio6
    (11) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GT BinaryExpressionPrio6
    (12) BinaryExpressionPrio6 -> . BinaryExpressionPrio4
    (5) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 + BinaryExpressionPrio4
    (6) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 - BinaryExpressionPrio4
    (7) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (1) BinaryExpressionPrio3 -> . UnaryExpression * BinaryExpressionPrio3
    (2) BinaryExpressionPrio3 -> . UnaryExpression / BinaryExpressionPrio3
    (3) BinaryExpressionPrio3 -> . UnaryExpression % BinaryExpressionPrio3
    (4) BinaryExpressionPrio3 -> . UnaryExpression
    (65) UnaryExpression -> . Negate
    (66) UnaryExpression -> . IncrementAfter
    (67) UnaryExpression -> . IncrementBefore
    (68) UnaryExpression -> . DecrementAfter
    (69) UnaryExpression -> . DecrementBefore
    (70) UnaryExpression -> . FunctionCall
    (71) UnaryExpression -> . VarName
    (72) UnaryExpression -> . Literal
    (73) UnaryExpression -> . ( Expression )
    (64) Negate -> . - VarName
    (62) IncrementAfter -> . VarName INC
    (63) IncrementBefore -> . INC VarName
    (59) DecrementAfter -> . VarName DEC
    (60) DecrementBefore -> . DEC VarName
    (61) FunctionCall -> . VarName ( ArgumentListR )
    (58) VarName -> . ID
    (20) Literal -> . IntLiteral
    (21) Literal -> . BoolLiteral
    (22) Literal -> . CharLiteral
    (19) IntLiteral -> . INTL
    (17) BoolLiteral -> . BOOLL
    (18) CharLiteral -> . CHARL

    (               shift and go to state 36
    -               shift and go to state 45
    INC             shift and go to state 55
    DEC             shift and go to state 56
    ID              shift and go to state 69
    INTL            shift and go to state 40
    BOOLL           shift and go to state 60
    CHARL           shift and go to state 61

    Expression                     shift and go to state 68
    BinaryExpressionPrio7          shift and go to state 34
    BinaryExpressionPrio6          shift and go to state 42
    BinaryExpressionPrio4          shift and go to state 43
    BinaryExpressionPrio3          shift and go to state 44
    UnaryExpression                shift and go to state 46
    Negate                         shift and go to state 47
    IncrementAfter                 shift and go to state 48
    IncrementBefore                shift and go to state 49
    DecrementAfter                 shift and go to state 50
    DecrementBefore                shift and go to state 51
    FunctionCall                   shift and go to state 52
    VarName                        shift and go to state 53
    Literal                        shift and go to state 54
    IntLiteral                     shift and go to state 57
    BoolLiteral                    shift and go to state 58
    CharLiteral                    shift and go to state 59

state 37

    (28) ForStatement -> FOR . ( Statement ; Expression ; Statement ) Block

    (               shift and go to state 70


state 38

    (43) WhileStatement -> WHILE . ( Expression ) Block

    (               shift and go to state 71


state 39

    (24) BreakStatement -> BREAK . INTL ;
    (25) BreakStatement -> BREAK . ;

    INTL            shift and go to state 72
    ;               shift and go to state 73


state 40

    (19) IntLiteral -> INTL .

    *               reduce using rule 19 (IntLiteral -> INTL .)
    /               reduce using rule 19 (IntLiteral -> INTL .)
    %               reduce using rule 19 (IntLiteral -> INTL .)
    +               reduce using rule 19 (IntLiteral -> INTL .)
    -               reduce using rule 19 (IntLiteral -> INTL .)
    LEQ             reduce using rule 19 (IntLiteral -> INTL .)
    GEQ             reduce using rule 19 (IntLiteral -> INTL .)
    LT              reduce using rule 19 (IntLiteral -> INTL .)
    GT              reduce using rule 19 (IntLiteral -> INTL .)
    NEQ             reduce using rule 19 (IntLiteral -> INTL .)
    EQ              reduce using rule 19 (IntLiteral -> INTL .)
    ;               reduce using rule 19 (IntLiteral -> INTL .)
    )               reduce using rule 19 (IntLiteral -> INTL .)
    ,               reduce using rule 19 (IntLiteral -> INTL .)


state 41

    (30) ReturnStatement -> RETURN . Expression ;
    (31) ReturnStatement -> RETURN . ;
    (16) Expression -> . BinaryExpressionPrio7
    (13) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 NEQ BinaryExpressionPrio7
    (14) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 EQ BinaryExpressionPrio7
    (15) BinaryExpressionPrio7 -> . BinaryExpressionPrio6
    (8) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LEQ BinaryExpressionPrio6
    (9) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GEQ BinaryExpressionPrio6
    (10) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LT BinaryExpressionPrio6
    (11) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GT BinaryExpressionPrio6
    (12) BinaryExpressionPrio6 -> . BinaryExpressionPrio4
    (5) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 + BinaryExpressionPrio4
    (6) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 - BinaryExpressionPrio4
    (7) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (1) BinaryExpressionPrio3 -> . UnaryExpression * BinaryExpressionPrio3
    (2) BinaryExpressionPrio3 -> . UnaryExpression / BinaryExpressionPrio3
    (3) BinaryExpressionPrio3 -> . UnaryExpression % BinaryExpressionPrio3
    (4) BinaryExpressionPrio3 -> . UnaryExpression
    (65) UnaryExpression -> . Negate
    (66) UnaryExpression -> . IncrementAfter
    (67) UnaryExpression -> . IncrementBefore
    (68) UnaryExpression -> . DecrementAfter
    (69) UnaryExpression -> . DecrementBefore
    (70) UnaryExpression -> . FunctionCall
    (71) UnaryExpression -> . VarName
    (72) UnaryExpression -> . Literal
    (73) UnaryExpression -> . ( Expression )
    (64) Negate -> . - VarName
    (62) IncrementAfter -> . VarName INC
    (63) IncrementBefore -> . INC VarName
    (59) DecrementAfter -> . VarName DEC
    (60) DecrementBefore -> . DEC VarName
    (61) FunctionCall -> . VarName ( ArgumentListR )
    (58) VarName -> . ID
    (20) Literal -> . IntLiteral
    (21) Literal -> . BoolLiteral
    (22) Literal -> . CharLiteral
    (19) IntLiteral -> . INTL
    (17) BoolLiteral -> . BOOLL
    (18) CharLiteral -> . CHARL

    ;               shift and go to state 75
    (               shift and go to state 36
    -               shift and go to state 45
    INC             shift and go to state 55
    DEC             shift and go to state 56
    ID              shift and go to state 69
    INTL            shift and go to state 40
    BOOLL           shift and go to state 60
    CHARL           shift and go to state 61

    Expression                     shift and go to state 74
    BinaryExpressionPrio7          shift and go to state 34
    BinaryExpressionPrio6          shift and go to state 42
    BinaryExpressionPrio4          shift and go to state 43
    BinaryExpressionPrio3          shift and go to state 44
    UnaryExpression                shift and go to state 46
    Negate                         shift and go to state 47
    IncrementAfter                 shift and go to state 48
    IncrementBefore                shift and go to state 49
    DecrementAfter                 shift and go to state 50
    DecrementBefore                shift and go to state 51
    FunctionCall                   shift and go to state 52
    VarName                        shift and go to state 53
    Literal                        shift and go to state 54
    IntLiteral                     shift and go to state 57
    BoolLiteral                    shift and go to state 58
    CharLiteral                    shift and go to state 59

state 42

    (13) BinaryExpressionPrio7 -> BinaryExpressionPrio6 . NEQ BinaryExpressionPrio7
    (14) BinaryExpressionPrio7 -> BinaryExpressionPrio6 . EQ BinaryExpressionPrio7
    (15) BinaryExpressionPrio7 -> BinaryExpressionPrio6 .

    NEQ             shift and go to state 76
    EQ              shift and go to state 77
    ;               reduce using rule 15 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 .)
    )               reduce using rule 15 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 .)
    ,               reduce using rule 15 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 .)


state 43

    (8) BinaryExpressionPrio6 -> BinaryExpressionPrio4 . LEQ BinaryExpressionPrio6
    (9) BinaryExpressionPrio6 -> BinaryExpressionPrio4 . GEQ BinaryExpressionPrio6
    (10) BinaryExpressionPrio6 -> BinaryExpressionPrio4 . LT BinaryExpressionPrio6
    (11) BinaryExpressionPrio6 -> BinaryExpressionPrio4 . GT BinaryExpressionPrio6
    (12) BinaryExpressionPrio6 -> BinaryExpressionPrio4 .

    LEQ             shift and go to state 78
    GEQ             shift and go to state 79
    LT              shift and go to state 80
    GT              shift and go to state 81
    NEQ             reduce using rule 12 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 .)
    EQ              reduce using rule 12 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 .)
    ;               reduce using rule 12 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 .)
    )               reduce using rule 12 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 .)
    ,               reduce using rule 12 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 .)


state 44

    (5) BinaryExpressionPrio4 -> BinaryExpressionPrio3 . + BinaryExpressionPrio4
    (6) BinaryExpressionPrio4 -> BinaryExpressionPrio3 . - BinaryExpressionPrio4
    (7) BinaryExpressionPrio4 -> BinaryExpressionPrio3 .

    +               shift and go to state 82
    -               shift and go to state 83
    LEQ             reduce using rule 7 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 .)
    GEQ             reduce using rule 7 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 .)
    LT              reduce using rule 7 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 .)
    GT              reduce using rule 7 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 .)
    NEQ             reduce using rule 7 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 .)
    EQ              reduce using rule 7 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 .)
    ;               reduce using rule 7 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 .)
    )               reduce using rule 7 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 .)
    ,               reduce using rule 7 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 .)


state 45

    (64) Negate -> - . VarName
    (58) VarName -> . ID

    ID              shift and go to state 69

    VarName                        shift and go to state 84

state 46

    (1) BinaryExpressionPrio3 -> UnaryExpression . * BinaryExpressionPrio3
    (2) BinaryExpressionPrio3 -> UnaryExpression . / BinaryExpressionPrio3
    (3) BinaryExpressionPrio3 -> UnaryExpression . % BinaryExpressionPrio3
    (4) BinaryExpressionPrio3 -> UnaryExpression .

    *               shift and go to state 85
    /               shift and go to state 86
    %               shift and go to state 87
    +               reduce using rule 4 (BinaryExpressionPrio3 -> UnaryExpression .)
    -               reduce using rule 4 (BinaryExpressionPrio3 -> UnaryExpression .)
    LEQ             reduce using rule 4 (BinaryExpressionPrio3 -> UnaryExpression .)
    GEQ             reduce using rule 4 (BinaryExpressionPrio3 -> UnaryExpression .)
    LT              reduce using rule 4 (BinaryExpressionPrio3 -> UnaryExpression .)
    GT              reduce using rule 4 (BinaryExpressionPrio3 -> UnaryExpression .)
    NEQ             reduce using rule 4 (BinaryExpressionPrio3 -> UnaryExpression .)
    EQ              reduce using rule 4 (BinaryExpressionPrio3 -> UnaryExpression .)
    ;               reduce using rule 4 (BinaryExpressionPrio3 -> UnaryExpression .)
    )               reduce using rule 4 (BinaryExpressionPrio3 -> UnaryExpression .)
    ,               reduce using rule 4 (BinaryExpressionPrio3 -> UnaryExpression .)


state 47

    (65) UnaryExpression -> Negate .

    *               reduce using rule 65 (UnaryExpression -> Negate .)
    /               reduce using rule 65 (UnaryExpression -> Negate .)
    %               reduce using rule 65 (UnaryExpression -> Negate .)
    +               reduce using rule 65 (UnaryExpression -> Negate .)
    -               reduce using rule 65 (UnaryExpression -> Negate .)
    LEQ             reduce using rule 65 (UnaryExpression -> Negate .)
    GEQ             reduce using rule 65 (UnaryExpression -> Negate .)
    LT              reduce using rule 65 (UnaryExpression -> Negate .)
    GT              reduce using rule 65 (UnaryExpression -> Negate .)
    NEQ             reduce using rule 65 (UnaryExpression -> Negate .)
    EQ              reduce using rule 65 (UnaryExpression -> Negate .)
    ;               reduce using rule 65 (UnaryExpression -> Negate .)
    )               reduce using rule 65 (UnaryExpression -> Negate .)
    ,               reduce using rule 65 (UnaryExpression -> Negate .)


state 48

    (66) UnaryExpression -> IncrementAfter .

    *               reduce using rule 66 (UnaryExpression -> IncrementAfter .)
    /               reduce using rule 66 (UnaryExpression -> IncrementAfter .)
    %               reduce using rule 66 (UnaryExpression -> IncrementAfter .)
    +               reduce using rule 66 (UnaryExpression -> IncrementAfter .)
    -               reduce using rule 66 (UnaryExpression -> IncrementAfter .)
    LEQ             reduce using rule 66 (UnaryExpression -> IncrementAfter .)
    GEQ             reduce using rule 66 (UnaryExpression -> IncrementAfter .)
    LT              reduce using rule 66 (UnaryExpression -> IncrementAfter .)
    GT              reduce using rule 66 (UnaryExpression -> IncrementAfter .)
    NEQ             reduce using rule 66 (UnaryExpression -> IncrementAfter .)
    EQ              reduce using rule 66 (UnaryExpression -> IncrementAfter .)
    ;               reduce using rule 66 (UnaryExpression -> IncrementAfter .)
    )               reduce using rule 66 (UnaryExpression -> IncrementAfter .)
    ,               reduce using rule 66 (UnaryExpression -> IncrementAfter .)


state 49

    (67) UnaryExpression -> IncrementBefore .

    *               reduce using rule 67 (UnaryExpression -> IncrementBefore .)
    /               reduce using rule 67 (UnaryExpression -> IncrementBefore .)
    %               reduce using rule 67 (UnaryExpression -> IncrementBefore .)
    +               reduce using rule 67 (UnaryExpression -> IncrementBefore .)
    -               reduce using rule 67 (UnaryExpression -> IncrementBefore .)
    LEQ             reduce using rule 67 (UnaryExpression -> IncrementBefore .)
    GEQ             reduce using rule 67 (UnaryExpression -> IncrementBefore .)
    LT              reduce using rule 67 (UnaryExpression -> IncrementBefore .)
    GT              reduce using rule 67 (UnaryExpression -> IncrementBefore .)
    NEQ             reduce using rule 67 (UnaryExpression -> IncrementBefore .)
    EQ              reduce using rule 67 (UnaryExpression -> IncrementBefore .)
    ;               reduce using rule 67 (UnaryExpression -> IncrementBefore .)
    )               reduce using rule 67 (UnaryExpression -> IncrementBefore .)
    ,               reduce using rule 67 (UnaryExpression -> IncrementBefore .)


state 50

    (68) UnaryExpression -> DecrementAfter .

    *               reduce using rule 68 (UnaryExpression -> DecrementAfter .)
    /               reduce using rule 68 (UnaryExpression -> DecrementAfter .)
    %               reduce using rule 68 (UnaryExpression -> DecrementAfter .)
    +               reduce using rule 68 (UnaryExpression -> DecrementAfter .)
    -               reduce using rule 68 (UnaryExpression -> DecrementAfter .)
    LEQ             reduce using rule 68 (UnaryExpression -> DecrementAfter .)
    GEQ             reduce using rule 68 (UnaryExpression -> DecrementAfter .)
    LT              reduce using rule 68 (UnaryExpression -> DecrementAfter .)
    GT              reduce using rule 68 (UnaryExpression -> DecrementAfter .)
    NEQ             reduce using rule 68 (UnaryExpression -> DecrementAfter .)
    EQ              reduce using rule 68 (UnaryExpression -> DecrementAfter .)
    ;               reduce using rule 68 (UnaryExpression -> DecrementAfter .)
    )               reduce using rule 68 (UnaryExpression -> DecrementAfter .)
    ,               reduce using rule 68 (UnaryExpression -> DecrementAfter .)


state 51

    (69) UnaryExpression -> DecrementBefore .

    *               reduce using rule 69 (UnaryExpression -> DecrementBefore .)
    /               reduce using rule 69 (UnaryExpression -> DecrementBefore .)
    %               reduce using rule 69 (UnaryExpression -> DecrementBefore .)
    +               reduce using rule 69 (UnaryExpression -> DecrementBefore .)
    -               reduce using rule 69 (UnaryExpression -> DecrementBefore .)
    LEQ             reduce using rule 69 (UnaryExpression -> DecrementBefore .)
    GEQ             reduce using rule 69 (UnaryExpression -> DecrementBefore .)
    LT              reduce using rule 69 (UnaryExpression -> DecrementBefore .)
    GT              reduce using rule 69 (UnaryExpression -> DecrementBefore .)
    NEQ             reduce using rule 69 (UnaryExpression -> DecrementBefore .)
    EQ              reduce using rule 69 (UnaryExpression -> DecrementBefore .)
    ;               reduce using rule 69 (UnaryExpression -> DecrementBefore .)
    )               reduce using rule 69 (UnaryExpression -> DecrementBefore .)
    ,               reduce using rule 69 (UnaryExpression -> DecrementBefore .)


state 52

    (70) UnaryExpression -> FunctionCall .

    *               reduce using rule 70 (UnaryExpression -> FunctionCall .)
    /               reduce using rule 70 (UnaryExpression -> FunctionCall .)
    %               reduce using rule 70 (UnaryExpression -> FunctionCall .)
    +               reduce using rule 70 (UnaryExpression -> FunctionCall .)
    -               reduce using rule 70 (UnaryExpression -> FunctionCall .)
    LEQ             reduce using rule 70 (UnaryExpression -> FunctionCall .)
    GEQ             reduce using rule 70 (UnaryExpression -> FunctionCall .)
    LT              reduce using rule 70 (UnaryExpression -> FunctionCall .)
    GT              reduce using rule 70 (UnaryExpression -> FunctionCall .)
    NEQ             reduce using rule 70 (UnaryExpression -> FunctionCall .)
    EQ              reduce using rule 70 (UnaryExpression -> FunctionCall .)
    ;               reduce using rule 70 (UnaryExpression -> FunctionCall .)
    )               reduce using rule 70 (UnaryExpression -> FunctionCall .)
    ,               reduce using rule 70 (UnaryExpression -> FunctionCall .)


state 53

    (71) UnaryExpression -> VarName .
    (62) IncrementAfter -> VarName . INC
    (59) DecrementAfter -> VarName . DEC
    (61) FunctionCall -> VarName . ( ArgumentListR )

    *               reduce using rule 71 (UnaryExpression -> VarName .)
    /               reduce using rule 71 (UnaryExpression -> VarName .)
    %               reduce using rule 71 (UnaryExpression -> VarName .)
    +               reduce using rule 71 (UnaryExpression -> VarName .)
    -               reduce using rule 71 (UnaryExpression -> VarName .)
    LEQ             reduce using rule 71 (UnaryExpression -> VarName .)
    GEQ             reduce using rule 71 (UnaryExpression -> VarName .)
    LT              reduce using rule 71 (UnaryExpression -> VarName .)
    GT              reduce using rule 71 (UnaryExpression -> VarName .)
    NEQ             reduce using rule 71 (UnaryExpression -> VarName .)
    EQ              reduce using rule 71 (UnaryExpression -> VarName .)
    ;               reduce using rule 71 (UnaryExpression -> VarName .)
    )               reduce using rule 71 (UnaryExpression -> VarName .)
    ,               reduce using rule 71 (UnaryExpression -> VarName .)
    INC             shift and go to state 88
    DEC             shift and go to state 89
    (               shift and go to state 90


state 54

    (72) UnaryExpression -> Literal .

    *               reduce using rule 72 (UnaryExpression -> Literal .)
    /               reduce using rule 72 (UnaryExpression -> Literal .)
    %               reduce using rule 72 (UnaryExpression -> Literal .)
    +               reduce using rule 72 (UnaryExpression -> Literal .)
    -               reduce using rule 72 (UnaryExpression -> Literal .)
    LEQ             reduce using rule 72 (UnaryExpression -> Literal .)
    GEQ             reduce using rule 72 (UnaryExpression -> Literal .)
    LT              reduce using rule 72 (UnaryExpression -> Literal .)
    GT              reduce using rule 72 (UnaryExpression -> Literal .)
    NEQ             reduce using rule 72 (UnaryExpression -> Literal .)
    EQ              reduce using rule 72 (UnaryExpression -> Literal .)
    ;               reduce using rule 72 (UnaryExpression -> Literal .)
    )               reduce using rule 72 (UnaryExpression -> Literal .)
    ,               reduce using rule 72 (UnaryExpression -> Literal .)


state 55

    (63) IncrementBefore -> INC . VarName
    (58) VarName -> . ID

    ID              shift and go to state 69

    VarName                        shift and go to state 91

state 56

    (60) DecrementBefore -> DEC . VarName
    (58) VarName -> . ID

    ID              shift and go to state 69

    VarName                        shift and go to state 92

state 57

    (20) Literal -> IntLiteral .

    *               reduce using rule 20 (Literal -> IntLiteral .)
    /               reduce using rule 20 (Literal -> IntLiteral .)
    %               reduce using rule 20 (Literal -> IntLiteral .)
    +               reduce using rule 20 (Literal -> IntLiteral .)
    -               reduce using rule 20 (Literal -> IntLiteral .)
    LEQ             reduce using rule 20 (Literal -> IntLiteral .)
    GEQ             reduce using rule 20 (Literal -> IntLiteral .)
    LT              reduce using rule 20 (Literal -> IntLiteral .)
    GT              reduce using rule 20 (Literal -> IntLiteral .)
    NEQ             reduce using rule 20 (Literal -> IntLiteral .)
    EQ              reduce using rule 20 (Literal -> IntLiteral .)
    ;               reduce using rule 20 (Literal -> IntLiteral .)
    )               reduce using rule 20 (Literal -> IntLiteral .)
    ,               reduce using rule 20 (Literal -> IntLiteral .)


state 58

    (21) Literal -> BoolLiteral .

    *               reduce using rule 21 (Literal -> BoolLiteral .)
    /               reduce using rule 21 (Literal -> BoolLiteral .)
    %               reduce using rule 21 (Literal -> BoolLiteral .)
    +               reduce using rule 21 (Literal -> BoolLiteral .)
    -               reduce using rule 21 (Literal -> BoolLiteral .)
    LEQ             reduce using rule 21 (Literal -> BoolLiteral .)
    GEQ             reduce using rule 21 (Literal -> BoolLiteral .)
    LT              reduce using rule 21 (Literal -> BoolLiteral .)
    GT              reduce using rule 21 (Literal -> BoolLiteral .)
    NEQ             reduce using rule 21 (Literal -> BoolLiteral .)
    EQ              reduce using rule 21 (Literal -> BoolLiteral .)
    ;               reduce using rule 21 (Literal -> BoolLiteral .)
    )               reduce using rule 21 (Literal -> BoolLiteral .)
    ,               reduce using rule 21 (Literal -> BoolLiteral .)


state 59

    (22) Literal -> CharLiteral .

    *               reduce using rule 22 (Literal -> CharLiteral .)
    /               reduce using rule 22 (Literal -> CharLiteral .)
    %               reduce using rule 22 (Literal -> CharLiteral .)
    +               reduce using rule 22 (Literal -> CharLiteral .)
    -               reduce using rule 22 (Literal -> CharLiteral .)
    LEQ             reduce using rule 22 (Literal -> CharLiteral .)
    GEQ             reduce using rule 22 (Literal -> CharLiteral .)
    LT              reduce using rule 22 (Literal -> CharLiteral .)
    GT              reduce using rule 22 (Literal -> CharLiteral .)
    NEQ             reduce using rule 22 (Literal -> CharLiteral .)
    EQ              reduce using rule 22 (Literal -> CharLiteral .)
    ;               reduce using rule 22 (Literal -> CharLiteral .)
    )               reduce using rule 22 (Literal -> CharLiteral .)
    ,               reduce using rule 22 (Literal -> CharLiteral .)


state 60

    (17) BoolLiteral -> BOOLL .

    *               reduce using rule 17 (BoolLiteral -> BOOLL .)
    /               reduce using rule 17 (BoolLiteral -> BOOLL .)
    %               reduce using rule 17 (BoolLiteral -> BOOLL .)
    +               reduce using rule 17 (BoolLiteral -> BOOLL .)
    -               reduce using rule 17 (BoolLiteral -> BOOLL .)
    LEQ             reduce using rule 17 (BoolLiteral -> BOOLL .)
    GEQ             reduce using rule 17 (BoolLiteral -> BOOLL .)
    LT              reduce using rule 17 (BoolLiteral -> BOOLL .)
    GT              reduce using rule 17 (BoolLiteral -> BOOLL .)
    NEQ             reduce using rule 17 (BoolLiteral -> BOOLL .)
    EQ              reduce using rule 17 (BoolLiteral -> BOOLL .)
    ;               reduce using rule 17 (BoolLiteral -> BOOLL .)
    )               reduce using rule 17 (BoolLiteral -> BOOLL .)
    ,               reduce using rule 17 (BoolLiteral -> BOOLL .)


state 61

    (18) CharLiteral -> CHARL .

    *               reduce using rule 18 (CharLiteral -> CHARL .)
    /               reduce using rule 18 (CharLiteral -> CHARL .)
    %               reduce using rule 18 (CharLiteral -> CHARL .)
    +               reduce using rule 18 (CharLiteral -> CHARL .)
    -               reduce using rule 18 (CharLiteral -> CHARL .)
    LEQ             reduce using rule 18 (CharLiteral -> CHARL .)
    GEQ             reduce using rule 18 (CharLiteral -> CHARL .)
    LT              reduce using rule 18 (CharLiteral -> CHARL .)
    GT              reduce using rule 18 (CharLiteral -> CHARL .)
    NEQ             reduce using rule 18 (CharLiteral -> CHARL .)
    EQ              reduce using rule 18 (CharLiteral -> CHARL .)
    ;               reduce using rule 18 (CharLiteral -> CHARL .)
    )               reduce using rule 18 (CharLiteral -> CHARL .)
    ,               reduce using rule 18 (CharLiteral -> CHARL .)


state 62

    (48) Block -> { StatementListR } .

    ID              reduce using rule 48 (Block -> { StatementListR } .)
    $end            reduce using rule 48 (Block -> { StatementListR } .)
    ELSE            reduce using rule 48 (Block -> { StatementListR } .)
    IF              reduce using rule 48 (Block -> { StatementListR } .)
    FOR             reduce using rule 48 (Block -> { StatementListR } .)
    WHILE           reduce using rule 48 (Block -> { StatementListR } .)
    BREAK           reduce using rule 48 (Block -> { StatementListR } .)
    RETURN          reduce using rule 48 (Block -> { StatementListR } .)
    (               reduce using rule 48 (Block -> { StatementListR } .)
    -               reduce using rule 48 (Block -> { StatementListR } .)
    INC             reduce using rule 48 (Block -> { StatementListR } .)
    DEC             reduce using rule 48 (Block -> { StatementListR } .)
    INTL            reduce using rule 48 (Block -> { StatementListR } .)
    BOOLL           reduce using rule 48 (Block -> { StatementListR } .)
    CHARL           reduce using rule 48 (Block -> { StatementListR } .)
    }               reduce using rule 48 (Block -> { StatementListR } .)
    ;               reduce using rule 48 (Block -> { StatementListR } .)
    )               reduce using rule 48 (Block -> { StatementListR } .)


state 63

    (41) StatementListR -> Statement StatementListR .

    }               reduce using rule 41 (StatementListR -> Statement StatementListR .)


state 64

    (34) Statement -> Expression ; .

    ID              reduce using rule 34 (Statement -> Expression ; .)
    IF              reduce using rule 34 (Statement -> Expression ; .)
    FOR             reduce using rule 34 (Statement -> Expression ; .)
    WHILE           reduce using rule 34 (Statement -> Expression ; .)
    BREAK           reduce using rule 34 (Statement -> Expression ; .)
    RETURN          reduce using rule 34 (Statement -> Expression ; .)
    (               reduce using rule 34 (Statement -> Expression ; .)
    -               reduce using rule 34 (Statement -> Expression ; .)
    INC             reduce using rule 34 (Statement -> Expression ; .)
    DEC             reduce using rule 34 (Statement -> Expression ; .)
    INTL            reduce using rule 34 (Statement -> Expression ; .)
    BOOLL           reduce using rule 34 (Statement -> Expression ; .)
    CHARL           reduce using rule 34 (Statement -> Expression ; .)
    }               reduce using rule 34 (Statement -> Expression ; .)
    ;               reduce using rule 34 (Statement -> Expression ; .)
    )               reduce using rule 34 (Statement -> Expression ; .)


state 65

    (23) AssignmentStatement -> ID = . Expression ;
    (16) Expression -> . BinaryExpressionPrio7
    (13) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 NEQ BinaryExpressionPrio7
    (14) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 EQ BinaryExpressionPrio7
    (15) BinaryExpressionPrio7 -> . BinaryExpressionPrio6
    (8) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LEQ BinaryExpressionPrio6
    (9) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GEQ BinaryExpressionPrio6
    (10) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LT BinaryExpressionPrio6
    (11) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GT BinaryExpressionPrio6
    (12) BinaryExpressionPrio6 -> . BinaryExpressionPrio4
    (5) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 + BinaryExpressionPrio4
    (6) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 - BinaryExpressionPrio4
    (7) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (1) BinaryExpressionPrio3 -> . UnaryExpression * BinaryExpressionPrio3
    (2) BinaryExpressionPrio3 -> . UnaryExpression / BinaryExpressionPrio3
    (3) BinaryExpressionPrio3 -> . UnaryExpression % BinaryExpressionPrio3
    (4) BinaryExpressionPrio3 -> . UnaryExpression
    (65) UnaryExpression -> . Negate
    (66) UnaryExpression -> . IncrementAfter
    (67) UnaryExpression -> . IncrementBefore
    (68) UnaryExpression -> . DecrementAfter
    (69) UnaryExpression -> . DecrementBefore
    (70) UnaryExpression -> . FunctionCall
    (71) UnaryExpression -> . VarName
    (72) UnaryExpression -> . Literal
    (73) UnaryExpression -> . ( Expression )
    (64) Negate -> . - VarName
    (62) IncrementAfter -> . VarName INC
    (63) IncrementBefore -> . INC VarName
    (59) DecrementAfter -> . VarName DEC
    (60) DecrementBefore -> . DEC VarName
    (61) FunctionCall -> . VarName ( ArgumentListR )
    (58) VarName -> . ID
    (20) Literal -> . IntLiteral
    (21) Literal -> . BoolLiteral
    (22) Literal -> . CharLiteral
    (19) IntLiteral -> . INTL
    (17) BoolLiteral -> . BOOLL
    (18) CharLiteral -> . CHARL

    (               shift and go to state 36
    -               shift and go to state 45
    INC             shift and go to state 55
    DEC             shift and go to state 56
    ID              shift and go to state 69
    INTL            shift and go to state 40
    BOOLL           shift and go to state 60
    CHARL           shift and go to state 61

    Expression                     shift and go to state 93
    BinaryExpressionPrio7          shift and go to state 34
    BinaryExpressionPrio6          shift and go to state 42
    BinaryExpressionPrio4          shift and go to state 43
    BinaryExpressionPrio3          shift and go to state 44
    UnaryExpression                shift and go to state 46
    Negate                         shift and go to state 47
    IncrementAfter                 shift and go to state 48
    IncrementBefore                shift and go to state 49
    DecrementAfter                 shift and go to state 50
    DecrementBefore                shift and go to state 51
    FunctionCall                   shift and go to state 52
    VarName                        shift and go to state 53
    Literal                        shift and go to state 54
    IntLiteral                     shift and go to state 57
    BoolLiteral                    shift and go to state 58
    CharLiteral                    shift and go to state 59

state 66

    (26) DeclarationAssignmentStatement -> TypeName ID . = Expression ;
    (27) DeclarationStatement -> TypeName ID . ;

    =               shift and go to state 94
    ;               shift and go to state 95


state 67

    (29) IfElseStatement -> IF ( . Expression ) Block ELSE Block
    (16) Expression -> . BinaryExpressionPrio7
    (13) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 NEQ BinaryExpressionPrio7
    (14) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 EQ BinaryExpressionPrio7
    (15) BinaryExpressionPrio7 -> . BinaryExpressionPrio6
    (8) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LEQ BinaryExpressionPrio6
    (9) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GEQ BinaryExpressionPrio6
    (10) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LT BinaryExpressionPrio6
    (11) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GT BinaryExpressionPrio6
    (12) BinaryExpressionPrio6 -> . BinaryExpressionPrio4
    (5) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 + BinaryExpressionPrio4
    (6) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 - BinaryExpressionPrio4
    (7) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (1) BinaryExpressionPrio3 -> . UnaryExpression * BinaryExpressionPrio3
    (2) BinaryExpressionPrio3 -> . UnaryExpression / BinaryExpressionPrio3
    (3) BinaryExpressionPrio3 -> . UnaryExpression % BinaryExpressionPrio3
    (4) BinaryExpressionPrio3 -> . UnaryExpression
    (65) UnaryExpression -> . Negate
    (66) UnaryExpression -> . IncrementAfter
    (67) UnaryExpression -> . IncrementBefore
    (68) UnaryExpression -> . DecrementAfter
    (69) UnaryExpression -> . DecrementBefore
    (70) UnaryExpression -> . FunctionCall
    (71) UnaryExpression -> . VarName
    (72) UnaryExpression -> . Literal
    (73) UnaryExpression -> . ( Expression )
    (64) Negate -> . - VarName
    (62) IncrementAfter -> . VarName INC
    (63) IncrementBefore -> . INC VarName
    (59) DecrementAfter -> . VarName DEC
    (60) DecrementBefore -> . DEC VarName
    (61) FunctionCall -> . VarName ( ArgumentListR )
    (58) VarName -> . ID
    (20) Literal -> . IntLiteral
    (21) Literal -> . BoolLiteral
    (22) Literal -> . CharLiteral
    (19) IntLiteral -> . INTL
    (17) BoolLiteral -> . BOOLL
    (18) CharLiteral -> . CHARL

    (               shift and go to state 36
    -               shift and go to state 45
    INC             shift and go to state 55
    DEC             shift and go to state 56
    ID              shift and go to state 69
    INTL            shift and go to state 40
    BOOLL           shift and go to state 60
    CHARL           shift and go to state 61

    Expression                     shift and go to state 96
    BinaryExpressionPrio7          shift and go to state 34
    BinaryExpressionPrio6          shift and go to state 42
    BinaryExpressionPrio4          shift and go to state 43
    BinaryExpressionPrio3          shift and go to state 44
    UnaryExpression                shift and go to state 46
    Negate                         shift and go to state 47
    IncrementAfter                 shift and go to state 48
    IncrementBefore                shift and go to state 49
    DecrementAfter                 shift and go to state 50
    DecrementBefore                shift and go to state 51
    FunctionCall                   shift and go to state 52
    VarName                        shift and go to state 53
    Literal                        shift and go to state 54
    IntLiteral                     shift and go to state 57
    BoolLiteral                    shift and go to state 58
    CharLiteral                    shift and go to state 59

state 68

    (73) UnaryExpression -> ( Expression . )

    )               shift and go to state 97


state 69

    (58) VarName -> ID .

    INC             reduce using rule 58 (VarName -> ID .)
    DEC             reduce using rule 58 (VarName -> ID .)
    (               reduce using rule 58 (VarName -> ID .)
    *               reduce using rule 58 (VarName -> ID .)
    /               reduce using rule 58 (VarName -> ID .)
    %               reduce using rule 58 (VarName -> ID .)
    +               reduce using rule 58 (VarName -> ID .)
    -               reduce using rule 58 (VarName -> ID .)
    LEQ             reduce using rule 58 (VarName -> ID .)
    GEQ             reduce using rule 58 (VarName -> ID .)
    LT              reduce using rule 58 (VarName -> ID .)
    GT              reduce using rule 58 (VarName -> ID .)
    NEQ             reduce using rule 58 (VarName -> ID .)
    EQ              reduce using rule 58 (VarName -> ID .)
    )               reduce using rule 58 (VarName -> ID .)
    ;               reduce using rule 58 (VarName -> ID .)
    ,               reduce using rule 58 (VarName -> ID .)


state 70

    (28) ForStatement -> FOR ( . Statement ; Expression ; Statement ) Block
    (32) Statement -> . AssignmentStatement
    (33) Statement -> . DeclarationAssignmentStatement
    (34) Statement -> . Expression ;
    (35) Statement -> . DeclarationStatement
    (36) Statement -> . IfElseStatement
    (37) Statement -> . ForStatement
    (38) Statement -> . WhileStatement
    (39) Statement -> . BreakStatement
    (40) Statement -> . ReturnStatement
    (23) AssignmentStatement -> . ID = Expression ;
    (26) DeclarationAssignmentStatement -> . TypeName ID = Expression ;
    (16) Expression -> . BinaryExpressionPrio7
    (27) DeclarationStatement -> . TypeName ID ;
    (29) IfElseStatement -> . IF ( Expression ) Block ELSE Block
    (28) ForStatement -> . FOR ( Statement ; Expression ; Statement ) Block
    (43) WhileStatement -> . WHILE ( Expression ) Block
    (24) BreakStatement -> . BREAK INTL ;
    (25) BreakStatement -> . BREAK ;
    (30) ReturnStatement -> . RETURN Expression ;
    (31) ReturnStatement -> . RETURN ;
    (57) TypeName -> . ID
    (13) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 NEQ BinaryExpressionPrio7
    (14) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 EQ BinaryExpressionPrio7
    (15) BinaryExpressionPrio7 -> . BinaryExpressionPrio6
    (8) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LEQ BinaryExpressionPrio6
    (9) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GEQ BinaryExpressionPrio6
    (10) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LT BinaryExpressionPrio6
    (11) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GT BinaryExpressionPrio6
    (12) BinaryExpressionPrio6 -> . BinaryExpressionPrio4
    (5) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 + BinaryExpressionPrio4
    (6) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 - BinaryExpressionPrio4
    (7) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (1) BinaryExpressionPrio3 -> . UnaryExpression * BinaryExpressionPrio3
    (2) BinaryExpressionPrio3 -> . UnaryExpression / BinaryExpressionPrio3
    (3) BinaryExpressionPrio3 -> . UnaryExpression % BinaryExpressionPrio3
    (4) BinaryExpressionPrio3 -> . UnaryExpression
    (65) UnaryExpression -> . Negate
    (66) UnaryExpression -> . IncrementAfter
    (67) UnaryExpression -> . IncrementBefore
    (68) UnaryExpression -> . DecrementAfter
    (69) UnaryExpression -> . DecrementBefore
    (70) UnaryExpression -> . FunctionCall
    (71) UnaryExpression -> . VarName
    (72) UnaryExpression -> . Literal
    (73) UnaryExpression -> . ( Expression )
    (64) Negate -> . - VarName
    (62) IncrementAfter -> . VarName INC
    (63) IncrementBefore -> . INC VarName
    (59) DecrementAfter -> . VarName DEC
    (60) DecrementBefore -> . DEC VarName
    (61) FunctionCall -> . VarName ( ArgumentListR )
    (58) VarName -> . ID
    (20) Literal -> . IntLiteral
    (21) Literal -> . BoolLiteral
    (22) Literal -> . CharLiteral
    (19) IntLiteral -> . INTL
    (17) BoolLiteral -> . BOOLL
    (18) CharLiteral -> . CHARL

    ID              shift and go to state 32
    IF              shift and go to state 35
    FOR             shift and go to state 37
    WHILE           shift and go to state 38
    BREAK           shift and go to state 39
    RETURN          shift and go to state 41
    (               shift and go to state 36
    -               shift and go to state 45
    INC             shift and go to state 55
    DEC             shift and go to state 56
    INTL            shift and go to state 40
    BOOLL           shift and go to state 60
    CHARL           shift and go to state 61

    Statement                      shift and go to state 98
    Expression                     shift and go to state 25
    AssignmentStatement            shift and go to state 23
    DeclarationAssignmentStatement shift and go to state 24
    DeclarationStatement           shift and go to state 26
    IfElseStatement                shift and go to state 27
    ForStatement                   shift and go to state 28
    WhileStatement                 shift and go to state 29
    BreakStatement                 shift and go to state 30
    ReturnStatement                shift and go to state 31
    TypeName                       shift and go to state 33
    BinaryExpressionPrio7          shift and go to state 34
    BinaryExpressionPrio6          shift and go to state 42
    BinaryExpressionPrio4          shift and go to state 43
    BinaryExpressionPrio3          shift and go to state 44
    UnaryExpression                shift and go to state 46
    Negate                         shift and go to state 47
    IncrementAfter                 shift and go to state 48
    IncrementBefore                shift and go to state 49
    DecrementAfter                 shift and go to state 50
    DecrementBefore                shift and go to state 51
    FunctionCall                   shift and go to state 52
    VarName                        shift and go to state 53
    Literal                        shift and go to state 54
    IntLiteral                     shift and go to state 57
    BoolLiteral                    shift and go to state 58
    CharLiteral                    shift and go to state 59

state 71

    (43) WhileStatement -> WHILE ( . Expression ) Block
    (16) Expression -> . BinaryExpressionPrio7
    (13) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 NEQ BinaryExpressionPrio7
    (14) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 EQ BinaryExpressionPrio7
    (15) BinaryExpressionPrio7 -> . BinaryExpressionPrio6
    (8) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LEQ BinaryExpressionPrio6
    (9) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GEQ BinaryExpressionPrio6
    (10) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LT BinaryExpressionPrio6
    (11) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GT BinaryExpressionPrio6
    (12) BinaryExpressionPrio6 -> . BinaryExpressionPrio4
    (5) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 + BinaryExpressionPrio4
    (6) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 - BinaryExpressionPrio4
    (7) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (1) BinaryExpressionPrio3 -> . UnaryExpression * BinaryExpressionPrio3
    (2) BinaryExpressionPrio3 -> . UnaryExpression / BinaryExpressionPrio3
    (3) BinaryExpressionPrio3 -> . UnaryExpression % BinaryExpressionPrio3
    (4) BinaryExpressionPrio3 -> . UnaryExpression
    (65) UnaryExpression -> . Negate
    (66) UnaryExpression -> . IncrementAfter
    (67) UnaryExpression -> . IncrementBefore
    (68) UnaryExpression -> . DecrementAfter
    (69) UnaryExpression -> . DecrementBefore
    (70) UnaryExpression -> . FunctionCall
    (71) UnaryExpression -> . VarName
    (72) UnaryExpression -> . Literal
    (73) UnaryExpression -> . ( Expression )
    (64) Negate -> . - VarName
    (62) IncrementAfter -> . VarName INC
    (63) IncrementBefore -> . INC VarName
    (59) DecrementAfter -> . VarName DEC
    (60) DecrementBefore -> . DEC VarName
    (61) FunctionCall -> . VarName ( ArgumentListR )
    (58) VarName -> . ID
    (20) Literal -> . IntLiteral
    (21) Literal -> . BoolLiteral
    (22) Literal -> . CharLiteral
    (19) IntLiteral -> . INTL
    (17) BoolLiteral -> . BOOLL
    (18) CharLiteral -> . CHARL

    (               shift and go to state 36
    -               shift and go to state 45
    INC             shift and go to state 55
    DEC             shift and go to state 56
    ID              shift and go to state 69
    INTL            shift and go to state 40
    BOOLL           shift and go to state 60
    CHARL           shift and go to state 61

    Expression                     shift and go to state 99
    BinaryExpressionPrio7          shift and go to state 34
    BinaryExpressionPrio6          shift and go to state 42
    BinaryExpressionPrio4          shift and go to state 43
    BinaryExpressionPrio3          shift and go to state 44
    UnaryExpression                shift and go to state 46
    Negate                         shift and go to state 47
    IncrementAfter                 shift and go to state 48
    IncrementBefore                shift and go to state 49
    DecrementAfter                 shift and go to state 50
    DecrementBefore                shift and go to state 51
    FunctionCall                   shift and go to state 52
    VarName                        shift and go to state 53
    Literal                        shift and go to state 54
    IntLiteral                     shift and go to state 57
    BoolLiteral                    shift and go to state 58
    CharLiteral                    shift and go to state 59

state 72

    (24) BreakStatement -> BREAK INTL . ;

    ;               shift and go to state 100


state 73

    (25) BreakStatement -> BREAK ; .

    ID              reduce using rule 25 (BreakStatement -> BREAK ; .)
    IF              reduce using rule 25 (BreakStatement -> BREAK ; .)
    FOR             reduce using rule 25 (BreakStatement -> BREAK ; .)
    WHILE           reduce using rule 25 (BreakStatement -> BREAK ; .)
    BREAK           reduce using rule 25 (BreakStatement -> BREAK ; .)
    RETURN          reduce using rule 25 (BreakStatement -> BREAK ; .)
    (               reduce using rule 25 (BreakStatement -> BREAK ; .)
    -               reduce using rule 25 (BreakStatement -> BREAK ; .)
    INC             reduce using rule 25 (BreakStatement -> BREAK ; .)
    DEC             reduce using rule 25 (BreakStatement -> BREAK ; .)
    INTL            reduce using rule 25 (BreakStatement -> BREAK ; .)
    BOOLL           reduce using rule 25 (BreakStatement -> BREAK ; .)
    CHARL           reduce using rule 25 (BreakStatement -> BREAK ; .)
    }               reduce using rule 25 (BreakStatement -> BREAK ; .)
    ;               reduce using rule 25 (BreakStatement -> BREAK ; .)
    )               reduce using rule 25 (BreakStatement -> BREAK ; .)


state 74

    (30) ReturnStatement -> RETURN Expression . ;

    ;               shift and go to state 101


state 75

    (31) ReturnStatement -> RETURN ; .

    ID              reduce using rule 31 (ReturnStatement -> RETURN ; .)
    IF              reduce using rule 31 (ReturnStatement -> RETURN ; .)
    FOR             reduce using rule 31 (ReturnStatement -> RETURN ; .)
    WHILE           reduce using rule 31 (ReturnStatement -> RETURN ; .)
    BREAK           reduce using rule 31 (ReturnStatement -> RETURN ; .)
    RETURN          reduce using rule 31 (ReturnStatement -> RETURN ; .)
    (               reduce using rule 31 (ReturnStatement -> RETURN ; .)
    -               reduce using rule 31 (ReturnStatement -> RETURN ; .)
    INC             reduce using rule 31 (ReturnStatement -> RETURN ; .)
    DEC             reduce using rule 31 (ReturnStatement -> RETURN ; .)
    INTL            reduce using rule 31 (ReturnStatement -> RETURN ; .)
    BOOLL           reduce using rule 31 (ReturnStatement -> RETURN ; .)
    CHARL           reduce using rule 31 (ReturnStatement -> RETURN ; .)
    }               reduce using rule 31 (ReturnStatement -> RETURN ; .)
    ;               reduce using rule 31 (ReturnStatement -> RETURN ; .)
    )               reduce using rule 31 (ReturnStatement -> RETURN ; .)


state 76

    (13) BinaryExpressionPrio7 -> BinaryExpressionPrio6 NEQ . BinaryExpressionPrio7
    (13) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 NEQ BinaryExpressionPrio7
    (14) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 EQ BinaryExpressionPrio7
    (15) BinaryExpressionPrio7 -> . BinaryExpressionPrio6
    (8) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LEQ BinaryExpressionPrio6
    (9) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GEQ BinaryExpressionPrio6
    (10) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LT BinaryExpressionPrio6
    (11) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GT BinaryExpressionPrio6
    (12) BinaryExpressionPrio6 -> . BinaryExpressionPrio4
    (5) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 + BinaryExpressionPrio4
    (6) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 - BinaryExpressionPrio4
    (7) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (1) BinaryExpressionPrio3 -> . UnaryExpression * BinaryExpressionPrio3
    (2) BinaryExpressionPrio3 -> . UnaryExpression / BinaryExpressionPrio3
    (3) BinaryExpressionPrio3 -> . UnaryExpression % BinaryExpressionPrio3
    (4) BinaryExpressionPrio3 -> . UnaryExpression
    (65) UnaryExpression -> . Negate
    (66) UnaryExpression -> . IncrementAfter
    (67) UnaryExpression -> . IncrementBefore
    (68) UnaryExpression -> . DecrementAfter
    (69) UnaryExpression -> . DecrementBefore
    (70) UnaryExpression -> . FunctionCall
    (71) UnaryExpression -> . VarName
    (72) UnaryExpression -> . Literal
    (73) UnaryExpression -> . ( Expression )
    (64) Negate -> . - VarName
    (62) IncrementAfter -> . VarName INC
    (63) IncrementBefore -> . INC VarName
    (59) DecrementAfter -> . VarName DEC
    (60) DecrementBefore -> . DEC VarName
    (61) FunctionCall -> . VarName ( ArgumentListR )
    (58) VarName -> . ID
    (20) Literal -> . IntLiteral
    (21) Literal -> . BoolLiteral
    (22) Literal -> . CharLiteral
    (19) IntLiteral -> . INTL
    (17) BoolLiteral -> . BOOLL
    (18) CharLiteral -> . CHARL

    (               shift and go to state 36
    -               shift and go to state 45
    INC             shift and go to state 55
    DEC             shift and go to state 56
    ID              shift and go to state 69
    INTL            shift and go to state 40
    BOOLL           shift and go to state 60
    CHARL           shift and go to state 61

    BinaryExpressionPrio6          shift and go to state 42
    BinaryExpressionPrio7          shift and go to state 102
    BinaryExpressionPrio4          shift and go to state 43
    BinaryExpressionPrio3          shift and go to state 44
    UnaryExpression                shift and go to state 46
    Negate                         shift and go to state 47
    IncrementAfter                 shift and go to state 48
    IncrementBefore                shift and go to state 49
    DecrementAfter                 shift and go to state 50
    DecrementBefore                shift and go to state 51
    FunctionCall                   shift and go to state 52
    VarName                        shift and go to state 53
    Literal                        shift and go to state 54
    IntLiteral                     shift and go to state 57
    BoolLiteral                    shift and go to state 58
    CharLiteral                    shift and go to state 59

state 77

    (14) BinaryExpressionPrio7 -> BinaryExpressionPrio6 EQ . BinaryExpressionPrio7
    (13) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 NEQ BinaryExpressionPrio7
    (14) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 EQ BinaryExpressionPrio7
    (15) BinaryExpressionPrio7 -> . BinaryExpressionPrio6
    (8) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LEQ BinaryExpressionPrio6
    (9) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GEQ BinaryExpressionPrio6
    (10) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LT BinaryExpressionPrio6
    (11) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GT BinaryExpressionPrio6
    (12) BinaryExpressionPrio6 -> . BinaryExpressionPrio4
    (5) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 + BinaryExpressionPrio4
    (6) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 - BinaryExpressionPrio4
    (7) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (1) BinaryExpressionPrio3 -> . UnaryExpression * BinaryExpressionPrio3
    (2) BinaryExpressionPrio3 -> . UnaryExpression / BinaryExpressionPrio3
    (3) BinaryExpressionPrio3 -> . UnaryExpression % BinaryExpressionPrio3
    (4) BinaryExpressionPrio3 -> . UnaryExpression
    (65) UnaryExpression -> . Negate
    (66) UnaryExpression -> . IncrementAfter
    (67) UnaryExpression -> . IncrementBefore
    (68) UnaryExpression -> . DecrementAfter
    (69) UnaryExpression -> . DecrementBefore
    (70) UnaryExpression -> . FunctionCall
    (71) UnaryExpression -> . VarName
    (72) UnaryExpression -> . Literal
    (73) UnaryExpression -> . ( Expression )
    (64) Negate -> . - VarName
    (62) IncrementAfter -> . VarName INC
    (63) IncrementBefore -> . INC VarName
    (59) DecrementAfter -> . VarName DEC
    (60) DecrementBefore -> . DEC VarName
    (61) FunctionCall -> . VarName ( ArgumentListR )
    (58) VarName -> . ID
    (20) Literal -> . IntLiteral
    (21) Literal -> . BoolLiteral
    (22) Literal -> . CharLiteral
    (19) IntLiteral -> . INTL
    (17) BoolLiteral -> . BOOLL
    (18) CharLiteral -> . CHARL

    (               shift and go to state 36
    -               shift and go to state 45
    INC             shift and go to state 55
    DEC             shift and go to state 56
    ID              shift and go to state 69
    INTL            shift and go to state 40
    BOOLL           shift and go to state 60
    CHARL           shift and go to state 61

    BinaryExpressionPrio6          shift and go to state 42
    BinaryExpressionPrio7          shift and go to state 103
    BinaryExpressionPrio4          shift and go to state 43
    BinaryExpressionPrio3          shift and go to state 44
    UnaryExpression                shift and go to state 46
    Negate                         shift and go to state 47
    IncrementAfter                 shift and go to state 48
    IncrementBefore                shift and go to state 49
    DecrementAfter                 shift and go to state 50
    DecrementBefore                shift and go to state 51
    FunctionCall                   shift and go to state 52
    VarName                        shift and go to state 53
    Literal                        shift and go to state 54
    IntLiteral                     shift and go to state 57
    BoolLiteral                    shift and go to state 58
    CharLiteral                    shift and go to state 59

state 78

    (8) BinaryExpressionPrio6 -> BinaryExpressionPrio4 LEQ . BinaryExpressionPrio6
    (8) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LEQ BinaryExpressionPrio6
    (9) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GEQ BinaryExpressionPrio6
    (10) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LT BinaryExpressionPrio6
    (11) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GT BinaryExpressionPrio6
    (12) BinaryExpressionPrio6 -> . BinaryExpressionPrio4
    (5) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 + BinaryExpressionPrio4
    (6) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 - BinaryExpressionPrio4
    (7) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (1) BinaryExpressionPrio3 -> . UnaryExpression * BinaryExpressionPrio3
    (2) BinaryExpressionPrio3 -> . UnaryExpression / BinaryExpressionPrio3
    (3) BinaryExpressionPrio3 -> . UnaryExpression % BinaryExpressionPrio3
    (4) BinaryExpressionPrio3 -> . UnaryExpression
    (65) UnaryExpression -> . Negate
    (66) UnaryExpression -> . IncrementAfter
    (67) UnaryExpression -> . IncrementBefore
    (68) UnaryExpression -> . DecrementAfter
    (69) UnaryExpression -> . DecrementBefore
    (70) UnaryExpression -> . FunctionCall
    (71) UnaryExpression -> . VarName
    (72) UnaryExpression -> . Literal
    (73) UnaryExpression -> . ( Expression )
    (64) Negate -> . - VarName
    (62) IncrementAfter -> . VarName INC
    (63) IncrementBefore -> . INC VarName
    (59) DecrementAfter -> . VarName DEC
    (60) DecrementBefore -> . DEC VarName
    (61) FunctionCall -> . VarName ( ArgumentListR )
    (58) VarName -> . ID
    (20) Literal -> . IntLiteral
    (21) Literal -> . BoolLiteral
    (22) Literal -> . CharLiteral
    (19) IntLiteral -> . INTL
    (17) BoolLiteral -> . BOOLL
    (18) CharLiteral -> . CHARL

    (               shift and go to state 36
    -               shift and go to state 45
    INC             shift and go to state 55
    DEC             shift and go to state 56
    ID              shift and go to state 69
    INTL            shift and go to state 40
    BOOLL           shift and go to state 60
    CHARL           shift and go to state 61

    BinaryExpressionPrio4          shift and go to state 43
    BinaryExpressionPrio6          shift and go to state 104
    BinaryExpressionPrio3          shift and go to state 44
    UnaryExpression                shift and go to state 46
    Negate                         shift and go to state 47
    IncrementAfter                 shift and go to state 48
    IncrementBefore                shift and go to state 49
    DecrementAfter                 shift and go to state 50
    DecrementBefore                shift and go to state 51
    FunctionCall                   shift and go to state 52
    VarName                        shift and go to state 53
    Literal                        shift and go to state 54
    IntLiteral                     shift and go to state 57
    BoolLiteral                    shift and go to state 58
    CharLiteral                    shift and go to state 59

state 79

    (9) BinaryExpressionPrio6 -> BinaryExpressionPrio4 GEQ . BinaryExpressionPrio6
    (8) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LEQ BinaryExpressionPrio6
    (9) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GEQ BinaryExpressionPrio6
    (10) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LT BinaryExpressionPrio6
    (11) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GT BinaryExpressionPrio6
    (12) BinaryExpressionPrio6 -> . BinaryExpressionPrio4
    (5) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 + BinaryExpressionPrio4
    (6) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 - BinaryExpressionPrio4
    (7) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (1) BinaryExpressionPrio3 -> . UnaryExpression * BinaryExpressionPrio3
    (2) BinaryExpressionPrio3 -> . UnaryExpression / BinaryExpressionPrio3
    (3) BinaryExpressionPrio3 -> . UnaryExpression % BinaryExpressionPrio3
    (4) BinaryExpressionPrio3 -> . UnaryExpression
    (65) UnaryExpression -> . Negate
    (66) UnaryExpression -> . IncrementAfter
    (67) UnaryExpression -> . IncrementBefore
    (68) UnaryExpression -> . DecrementAfter
    (69) UnaryExpression -> . DecrementBefore
    (70) UnaryExpression -> . FunctionCall
    (71) UnaryExpression -> . VarName
    (72) UnaryExpression -> . Literal
    (73) UnaryExpression -> . ( Expression )
    (64) Negate -> . - VarName
    (62) IncrementAfter -> . VarName INC
    (63) IncrementBefore -> . INC VarName
    (59) DecrementAfter -> . VarName DEC
    (60) DecrementBefore -> . DEC VarName
    (61) FunctionCall -> . VarName ( ArgumentListR )
    (58) VarName -> . ID
    (20) Literal -> . IntLiteral
    (21) Literal -> . BoolLiteral
    (22) Literal -> . CharLiteral
    (19) IntLiteral -> . INTL
    (17) BoolLiteral -> . BOOLL
    (18) CharLiteral -> . CHARL

    (               shift and go to state 36
    -               shift and go to state 45
    INC             shift and go to state 55
    DEC             shift and go to state 56
    ID              shift and go to state 69
    INTL            shift and go to state 40
    BOOLL           shift and go to state 60
    CHARL           shift and go to state 61

    BinaryExpressionPrio4          shift and go to state 43
    BinaryExpressionPrio6          shift and go to state 105
    BinaryExpressionPrio3          shift and go to state 44
    UnaryExpression                shift and go to state 46
    Negate                         shift and go to state 47
    IncrementAfter                 shift and go to state 48
    IncrementBefore                shift and go to state 49
    DecrementAfter                 shift and go to state 50
    DecrementBefore                shift and go to state 51
    FunctionCall                   shift and go to state 52
    VarName                        shift and go to state 53
    Literal                        shift and go to state 54
    IntLiteral                     shift and go to state 57
    BoolLiteral                    shift and go to state 58
    CharLiteral                    shift and go to state 59

state 80

    (10) BinaryExpressionPrio6 -> BinaryExpressionPrio4 LT . BinaryExpressionPrio6
    (8) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LEQ BinaryExpressionPrio6
    (9) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GEQ BinaryExpressionPrio6
    (10) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LT BinaryExpressionPrio6
    (11) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GT BinaryExpressionPrio6
    (12) BinaryExpressionPrio6 -> . BinaryExpressionPrio4
    (5) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 + BinaryExpressionPrio4
    (6) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 - BinaryExpressionPrio4
    (7) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (1) BinaryExpressionPrio3 -> . UnaryExpression * BinaryExpressionPrio3
    (2) BinaryExpressionPrio3 -> . UnaryExpression / BinaryExpressionPrio3
    (3) BinaryExpressionPrio3 -> . UnaryExpression % BinaryExpressionPrio3
    (4) BinaryExpressionPrio3 -> . UnaryExpression
    (65) UnaryExpression -> . Negate
    (66) UnaryExpression -> . IncrementAfter
    (67) UnaryExpression -> . IncrementBefore
    (68) UnaryExpression -> . DecrementAfter
    (69) UnaryExpression -> . DecrementBefore
    (70) UnaryExpression -> . FunctionCall
    (71) UnaryExpression -> . VarName
    (72) UnaryExpression -> . Literal
    (73) UnaryExpression -> . ( Expression )
    (64) Negate -> . - VarName
    (62) IncrementAfter -> . VarName INC
    (63) IncrementBefore -> . INC VarName
    (59) DecrementAfter -> . VarName DEC
    (60) DecrementBefore -> . DEC VarName
    (61) FunctionCall -> . VarName ( ArgumentListR )
    (58) VarName -> . ID
    (20) Literal -> . IntLiteral
    (21) Literal -> . BoolLiteral
    (22) Literal -> . CharLiteral
    (19) IntLiteral -> . INTL
    (17) BoolLiteral -> . BOOLL
    (18) CharLiteral -> . CHARL

    (               shift and go to state 36
    -               shift and go to state 45
    INC             shift and go to state 55
    DEC             shift and go to state 56
    ID              shift and go to state 69
    INTL            shift and go to state 40
    BOOLL           shift and go to state 60
    CHARL           shift and go to state 61

    BinaryExpressionPrio4          shift and go to state 43
    BinaryExpressionPrio6          shift and go to state 106
    BinaryExpressionPrio3          shift and go to state 44
    UnaryExpression                shift and go to state 46
    Negate                         shift and go to state 47
    IncrementAfter                 shift and go to state 48
    IncrementBefore                shift and go to state 49
    DecrementAfter                 shift and go to state 50
    DecrementBefore                shift and go to state 51
    FunctionCall                   shift and go to state 52
    VarName                        shift and go to state 53
    Literal                        shift and go to state 54
    IntLiteral                     shift and go to state 57
    BoolLiteral                    shift and go to state 58
    CharLiteral                    shift and go to state 59

state 81

    (11) BinaryExpressionPrio6 -> BinaryExpressionPrio4 GT . BinaryExpressionPrio6
    (8) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LEQ BinaryExpressionPrio6
    (9) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GEQ BinaryExpressionPrio6
    (10) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LT BinaryExpressionPrio6
    (11) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GT BinaryExpressionPrio6
    (12) BinaryExpressionPrio6 -> . BinaryExpressionPrio4
    (5) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 + BinaryExpressionPrio4
    (6) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 - BinaryExpressionPrio4
    (7) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (1) BinaryExpressionPrio3 -> . UnaryExpression * BinaryExpressionPrio3
    (2) BinaryExpressionPrio3 -> . UnaryExpression / BinaryExpressionPrio3
    (3) BinaryExpressionPrio3 -> . UnaryExpression % BinaryExpressionPrio3
    (4) BinaryExpressionPrio3 -> . UnaryExpression
    (65) UnaryExpression -> . Negate
    (66) UnaryExpression -> . IncrementAfter
    (67) UnaryExpression -> . IncrementBefore
    (68) UnaryExpression -> . DecrementAfter
    (69) UnaryExpression -> . DecrementBefore
    (70) UnaryExpression -> . FunctionCall
    (71) UnaryExpression -> . VarName
    (72) UnaryExpression -> . Literal
    (73) UnaryExpression -> . ( Expression )
    (64) Negate -> . - VarName
    (62) IncrementAfter -> . VarName INC
    (63) IncrementBefore -> . INC VarName
    (59) DecrementAfter -> . VarName DEC
    (60) DecrementBefore -> . DEC VarName
    (61) FunctionCall -> . VarName ( ArgumentListR )
    (58) VarName -> . ID
    (20) Literal -> . IntLiteral
    (21) Literal -> . BoolLiteral
    (22) Literal -> . CharLiteral
    (19) IntLiteral -> . INTL
    (17) BoolLiteral -> . BOOLL
    (18) CharLiteral -> . CHARL

    (               shift and go to state 36
    -               shift and go to state 45
    INC             shift and go to state 55
    DEC             shift and go to state 56
    ID              shift and go to state 69
    INTL            shift and go to state 40
    BOOLL           shift and go to state 60
    CHARL           shift and go to state 61

    BinaryExpressionPrio4          shift and go to state 43
    BinaryExpressionPrio6          shift and go to state 107
    BinaryExpressionPrio3          shift and go to state 44
    UnaryExpression                shift and go to state 46
    Negate                         shift and go to state 47
    IncrementAfter                 shift and go to state 48
    IncrementBefore                shift and go to state 49
    DecrementAfter                 shift and go to state 50
    DecrementBefore                shift and go to state 51
    FunctionCall                   shift and go to state 52
    VarName                        shift and go to state 53
    Literal                        shift and go to state 54
    IntLiteral                     shift and go to state 57
    BoolLiteral                    shift and go to state 58
    CharLiteral                    shift and go to state 59

state 82

    (5) BinaryExpressionPrio4 -> BinaryExpressionPrio3 + . BinaryExpressionPrio4
    (5) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 + BinaryExpressionPrio4
    (6) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 - BinaryExpressionPrio4
    (7) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (1) BinaryExpressionPrio3 -> . UnaryExpression * BinaryExpressionPrio3
    (2) BinaryExpressionPrio3 -> . UnaryExpression / BinaryExpressionPrio3
    (3) BinaryExpressionPrio3 -> . UnaryExpression % BinaryExpressionPrio3
    (4) BinaryExpressionPrio3 -> . UnaryExpression
    (65) UnaryExpression -> . Negate
    (66) UnaryExpression -> . IncrementAfter
    (67) UnaryExpression -> . IncrementBefore
    (68) UnaryExpression -> . DecrementAfter
    (69) UnaryExpression -> . DecrementBefore
    (70) UnaryExpression -> . FunctionCall
    (71) UnaryExpression -> . VarName
    (72) UnaryExpression -> . Literal
    (73) UnaryExpression -> . ( Expression )
    (64) Negate -> . - VarName
    (62) IncrementAfter -> . VarName INC
    (63) IncrementBefore -> . INC VarName
    (59) DecrementAfter -> . VarName DEC
    (60) DecrementBefore -> . DEC VarName
    (61) FunctionCall -> . VarName ( ArgumentListR )
    (58) VarName -> . ID
    (20) Literal -> . IntLiteral
    (21) Literal -> . BoolLiteral
    (22) Literal -> . CharLiteral
    (19) IntLiteral -> . INTL
    (17) BoolLiteral -> . BOOLL
    (18) CharLiteral -> . CHARL

    (               shift and go to state 36
    -               shift and go to state 45
    INC             shift and go to state 55
    DEC             shift and go to state 56
    ID              shift and go to state 69
    INTL            shift and go to state 40
    BOOLL           shift and go to state 60
    CHARL           shift and go to state 61

    BinaryExpressionPrio3          shift and go to state 44
    BinaryExpressionPrio4          shift and go to state 108
    UnaryExpression                shift and go to state 46
    Negate                         shift and go to state 47
    IncrementAfter                 shift and go to state 48
    IncrementBefore                shift and go to state 49
    DecrementAfter                 shift and go to state 50
    DecrementBefore                shift and go to state 51
    FunctionCall                   shift and go to state 52
    VarName                        shift and go to state 53
    Literal                        shift and go to state 54
    IntLiteral                     shift and go to state 57
    BoolLiteral                    shift and go to state 58
    CharLiteral                    shift and go to state 59

state 83

    (6) BinaryExpressionPrio4 -> BinaryExpressionPrio3 - . BinaryExpressionPrio4
    (5) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 + BinaryExpressionPrio4
    (6) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 - BinaryExpressionPrio4
    (7) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (1) BinaryExpressionPrio3 -> . UnaryExpression * BinaryExpressionPrio3
    (2) BinaryExpressionPrio3 -> . UnaryExpression / BinaryExpressionPrio3
    (3) BinaryExpressionPrio3 -> . UnaryExpression % BinaryExpressionPrio3
    (4) BinaryExpressionPrio3 -> . UnaryExpression
    (65) UnaryExpression -> . Negate
    (66) UnaryExpression -> . IncrementAfter
    (67) UnaryExpression -> . IncrementBefore
    (68) UnaryExpression -> . DecrementAfter
    (69) UnaryExpression -> . DecrementBefore
    (70) UnaryExpression -> . FunctionCall
    (71) UnaryExpression -> . VarName
    (72) UnaryExpression -> . Literal
    (73) UnaryExpression -> . ( Expression )
    (64) Negate -> . - VarName
    (62) IncrementAfter -> . VarName INC
    (63) IncrementBefore -> . INC VarName
    (59) DecrementAfter -> . VarName DEC
    (60) DecrementBefore -> . DEC VarName
    (61) FunctionCall -> . VarName ( ArgumentListR )
    (58) VarName -> . ID
    (20) Literal -> . IntLiteral
    (21) Literal -> . BoolLiteral
    (22) Literal -> . CharLiteral
    (19) IntLiteral -> . INTL
    (17) BoolLiteral -> . BOOLL
    (18) CharLiteral -> . CHARL

    (               shift and go to state 36
    -               shift and go to state 45
    INC             shift and go to state 55
    DEC             shift and go to state 56
    ID              shift and go to state 69
    INTL            shift and go to state 40
    BOOLL           shift and go to state 60
    CHARL           shift and go to state 61

    BinaryExpressionPrio3          shift and go to state 44
    BinaryExpressionPrio4          shift and go to state 109
    UnaryExpression                shift and go to state 46
    Negate                         shift and go to state 47
    IncrementAfter                 shift and go to state 48
    IncrementBefore                shift and go to state 49
    DecrementAfter                 shift and go to state 50
    DecrementBefore                shift and go to state 51
    FunctionCall                   shift and go to state 52
    VarName                        shift and go to state 53
    Literal                        shift and go to state 54
    IntLiteral                     shift and go to state 57
    BoolLiteral                    shift and go to state 58
    CharLiteral                    shift and go to state 59

state 84

    (64) Negate -> - VarName .

    *               reduce using rule 64 (Negate -> - VarName .)
    /               reduce using rule 64 (Negate -> - VarName .)
    %               reduce using rule 64 (Negate -> - VarName .)
    +               reduce using rule 64 (Negate -> - VarName .)
    -               reduce using rule 64 (Negate -> - VarName .)
    LEQ             reduce using rule 64 (Negate -> - VarName .)
    GEQ             reduce using rule 64 (Negate -> - VarName .)
    LT              reduce using rule 64 (Negate -> - VarName .)
    GT              reduce using rule 64 (Negate -> - VarName .)
    NEQ             reduce using rule 64 (Negate -> - VarName .)
    EQ              reduce using rule 64 (Negate -> - VarName .)
    ;               reduce using rule 64 (Negate -> - VarName .)
    )               reduce using rule 64 (Negate -> - VarName .)
    ,               reduce using rule 64 (Negate -> - VarName .)


state 85

    (1) BinaryExpressionPrio3 -> UnaryExpression * . BinaryExpressionPrio3
    (1) BinaryExpressionPrio3 -> . UnaryExpression * BinaryExpressionPrio3
    (2) BinaryExpressionPrio3 -> . UnaryExpression / BinaryExpressionPrio3
    (3) BinaryExpressionPrio3 -> . UnaryExpression % BinaryExpressionPrio3
    (4) BinaryExpressionPrio3 -> . UnaryExpression
    (65) UnaryExpression -> . Negate
    (66) UnaryExpression -> . IncrementAfter
    (67) UnaryExpression -> . IncrementBefore
    (68) UnaryExpression -> . DecrementAfter
    (69) UnaryExpression -> . DecrementBefore
    (70) UnaryExpression -> . FunctionCall
    (71) UnaryExpression -> . VarName
    (72) UnaryExpression -> . Literal
    (73) UnaryExpression -> . ( Expression )
    (64) Negate -> . - VarName
    (62) IncrementAfter -> . VarName INC
    (63) IncrementBefore -> . INC VarName
    (59) DecrementAfter -> . VarName DEC
    (60) DecrementBefore -> . DEC VarName
    (61) FunctionCall -> . VarName ( ArgumentListR )
    (58) VarName -> . ID
    (20) Literal -> . IntLiteral
    (21) Literal -> . BoolLiteral
    (22) Literal -> . CharLiteral
    (19) IntLiteral -> . INTL
    (17) BoolLiteral -> . BOOLL
    (18) CharLiteral -> . CHARL

    (               shift and go to state 36
    -               shift and go to state 45
    INC             shift and go to state 55
    DEC             shift and go to state 56
    ID              shift and go to state 69
    INTL            shift and go to state 40
    BOOLL           shift and go to state 60
    CHARL           shift and go to state 61

    UnaryExpression                shift and go to state 46
    BinaryExpressionPrio3          shift and go to state 110
    Negate                         shift and go to state 47
    IncrementAfter                 shift and go to state 48
    IncrementBefore                shift and go to state 49
    DecrementAfter                 shift and go to state 50
    DecrementBefore                shift and go to state 51
    FunctionCall                   shift and go to state 52
    VarName                        shift and go to state 53
    Literal                        shift and go to state 54
    IntLiteral                     shift and go to state 57
    BoolLiteral                    shift and go to state 58
    CharLiteral                    shift and go to state 59

state 86

    (2) BinaryExpressionPrio3 -> UnaryExpression / . BinaryExpressionPrio3
    (1) BinaryExpressionPrio3 -> . UnaryExpression * BinaryExpressionPrio3
    (2) BinaryExpressionPrio3 -> . UnaryExpression / BinaryExpressionPrio3
    (3) BinaryExpressionPrio3 -> . UnaryExpression % BinaryExpressionPrio3
    (4) BinaryExpressionPrio3 -> . UnaryExpression
    (65) UnaryExpression -> . Negate
    (66) UnaryExpression -> . IncrementAfter
    (67) UnaryExpression -> . IncrementBefore
    (68) UnaryExpression -> . DecrementAfter
    (69) UnaryExpression -> . DecrementBefore
    (70) UnaryExpression -> . FunctionCall
    (71) UnaryExpression -> . VarName
    (72) UnaryExpression -> . Literal
    (73) UnaryExpression -> . ( Expression )
    (64) Negate -> . - VarName
    (62) IncrementAfter -> . VarName INC
    (63) IncrementBefore -> . INC VarName
    (59) DecrementAfter -> . VarName DEC
    (60) DecrementBefore -> . DEC VarName
    (61) FunctionCall -> . VarName ( ArgumentListR )
    (58) VarName -> . ID
    (20) Literal -> . IntLiteral
    (21) Literal -> . BoolLiteral
    (22) Literal -> . CharLiteral
    (19) IntLiteral -> . INTL
    (17) BoolLiteral -> . BOOLL
    (18) CharLiteral -> . CHARL

    (               shift and go to state 36
    -               shift and go to state 45
    INC             shift and go to state 55
    DEC             shift and go to state 56
    ID              shift and go to state 69
    INTL            shift and go to state 40
    BOOLL           shift and go to state 60
    CHARL           shift and go to state 61

    UnaryExpression                shift and go to state 46
    BinaryExpressionPrio3          shift and go to state 111
    Negate                         shift and go to state 47
    IncrementAfter                 shift and go to state 48
    IncrementBefore                shift and go to state 49
    DecrementAfter                 shift and go to state 50
    DecrementBefore                shift and go to state 51
    FunctionCall                   shift and go to state 52
    VarName                        shift and go to state 53
    Literal                        shift and go to state 54
    IntLiteral                     shift and go to state 57
    BoolLiteral                    shift and go to state 58
    CharLiteral                    shift and go to state 59

state 87

    (3) BinaryExpressionPrio3 -> UnaryExpression % . BinaryExpressionPrio3
    (1) BinaryExpressionPrio3 -> . UnaryExpression * BinaryExpressionPrio3
    (2) BinaryExpressionPrio3 -> . UnaryExpression / BinaryExpressionPrio3
    (3) BinaryExpressionPrio3 -> . UnaryExpression % BinaryExpressionPrio3
    (4) BinaryExpressionPrio3 -> . UnaryExpression
    (65) UnaryExpression -> . Negate
    (66) UnaryExpression -> . IncrementAfter
    (67) UnaryExpression -> . IncrementBefore
    (68) UnaryExpression -> . DecrementAfter
    (69) UnaryExpression -> . DecrementBefore
    (70) UnaryExpression -> . FunctionCall
    (71) UnaryExpression -> . VarName
    (72) UnaryExpression -> . Literal
    (73) UnaryExpression -> . ( Expression )
    (64) Negate -> . - VarName
    (62) IncrementAfter -> . VarName INC
    (63) IncrementBefore -> . INC VarName
    (59) DecrementAfter -> . VarName DEC
    (60) DecrementBefore -> . DEC VarName
    (61) FunctionCall -> . VarName ( ArgumentListR )
    (58) VarName -> . ID
    (20) Literal -> . IntLiteral
    (21) Literal -> . BoolLiteral
    (22) Literal -> . CharLiteral
    (19) IntLiteral -> . INTL
    (17) BoolLiteral -> . BOOLL
    (18) CharLiteral -> . CHARL

    (               shift and go to state 36
    -               shift and go to state 45
    INC             shift and go to state 55
    DEC             shift and go to state 56
    ID              shift and go to state 69
    INTL            shift and go to state 40
    BOOLL           shift and go to state 60
    CHARL           shift and go to state 61

    UnaryExpression                shift and go to state 46
    BinaryExpressionPrio3          shift and go to state 112
    Negate                         shift and go to state 47
    IncrementAfter                 shift and go to state 48
    IncrementBefore                shift and go to state 49
    DecrementAfter                 shift and go to state 50
    DecrementBefore                shift and go to state 51
    FunctionCall                   shift and go to state 52
    VarName                        shift and go to state 53
    Literal                        shift and go to state 54
    IntLiteral                     shift and go to state 57
    BoolLiteral                    shift and go to state 58
    CharLiteral                    shift and go to state 59

state 88

    (62) IncrementAfter -> VarName INC .

    *               reduce using rule 62 (IncrementAfter -> VarName INC .)
    /               reduce using rule 62 (IncrementAfter -> VarName INC .)
    %               reduce using rule 62 (IncrementAfter -> VarName INC .)
    +               reduce using rule 62 (IncrementAfter -> VarName INC .)
    -               reduce using rule 62 (IncrementAfter -> VarName INC .)
    LEQ             reduce using rule 62 (IncrementAfter -> VarName INC .)
    GEQ             reduce using rule 62 (IncrementAfter -> VarName INC .)
    LT              reduce using rule 62 (IncrementAfter -> VarName INC .)
    GT              reduce using rule 62 (IncrementAfter -> VarName INC .)
    NEQ             reduce using rule 62 (IncrementAfter -> VarName INC .)
    EQ              reduce using rule 62 (IncrementAfter -> VarName INC .)
    ;               reduce using rule 62 (IncrementAfter -> VarName INC .)
    )               reduce using rule 62 (IncrementAfter -> VarName INC .)
    ,               reduce using rule 62 (IncrementAfter -> VarName INC .)


state 89

    (59) DecrementAfter -> VarName DEC .

    *               reduce using rule 59 (DecrementAfter -> VarName DEC .)
    /               reduce using rule 59 (DecrementAfter -> VarName DEC .)
    %               reduce using rule 59 (DecrementAfter -> VarName DEC .)
    +               reduce using rule 59 (DecrementAfter -> VarName DEC .)
    -               reduce using rule 59 (DecrementAfter -> VarName DEC .)
    LEQ             reduce using rule 59 (DecrementAfter -> VarName DEC .)
    GEQ             reduce using rule 59 (DecrementAfter -> VarName DEC .)
    LT              reduce using rule 59 (DecrementAfter -> VarName DEC .)
    GT              reduce using rule 59 (DecrementAfter -> VarName DEC .)
    NEQ             reduce using rule 59 (DecrementAfter -> VarName DEC .)
    EQ              reduce using rule 59 (DecrementAfter -> VarName DEC .)
    ;               reduce using rule 59 (DecrementAfter -> VarName DEC .)
    )               reduce using rule 59 (DecrementAfter -> VarName DEC .)
    ,               reduce using rule 59 (DecrementAfter -> VarName DEC .)


state 90

    (61) FunctionCall -> VarName ( . ArgumentListR )
    (45) ArgumentListR -> . Argument , ArgumentListR
    (46) ArgumentListR -> . Argument
    (47) ArgumentListR -> . empty
    (44) Argument -> . Expression
    (74) empty -> .
    (16) Expression -> . BinaryExpressionPrio7
    (13) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 NEQ BinaryExpressionPrio7
    (14) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 EQ BinaryExpressionPrio7
    (15) BinaryExpressionPrio7 -> . BinaryExpressionPrio6
    (8) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LEQ BinaryExpressionPrio6
    (9) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GEQ BinaryExpressionPrio6
    (10) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LT BinaryExpressionPrio6
    (11) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GT BinaryExpressionPrio6
    (12) BinaryExpressionPrio6 -> . BinaryExpressionPrio4
    (5) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 + BinaryExpressionPrio4
    (6) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 - BinaryExpressionPrio4
    (7) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (1) BinaryExpressionPrio3 -> . UnaryExpression * BinaryExpressionPrio3
    (2) BinaryExpressionPrio3 -> . UnaryExpression / BinaryExpressionPrio3
    (3) BinaryExpressionPrio3 -> . UnaryExpression % BinaryExpressionPrio3
    (4) BinaryExpressionPrio3 -> . UnaryExpression
    (65) UnaryExpression -> . Negate
    (66) UnaryExpression -> . IncrementAfter
    (67) UnaryExpression -> . IncrementBefore
    (68) UnaryExpression -> . DecrementAfter
    (69) UnaryExpression -> . DecrementBefore
    (70) UnaryExpression -> . FunctionCall
    (71) UnaryExpression -> . VarName
    (72) UnaryExpression -> . Literal
    (73) UnaryExpression -> . ( Expression )
    (64) Negate -> . - VarName
    (62) IncrementAfter -> . VarName INC
    (63) IncrementBefore -> . INC VarName
    (59) DecrementAfter -> . VarName DEC
    (60) DecrementBefore -> . DEC VarName
    (61) FunctionCall -> . VarName ( ArgumentListR )
    (58) VarName -> . ID
    (20) Literal -> . IntLiteral
    (21) Literal -> . BoolLiteral
    (22) Literal -> . CharLiteral
    (19) IntLiteral -> . INTL
    (17) BoolLiteral -> . BOOLL
    (18) CharLiteral -> . CHARL

    )               reduce using rule 74 (empty -> .)
    (               shift and go to state 36
    -               shift and go to state 45
    INC             shift and go to state 55
    DEC             shift and go to state 56
    ID              shift and go to state 69
    INTL            shift and go to state 40
    BOOLL           shift and go to state 60
    CHARL           shift and go to state 61

    VarName                        shift and go to state 53
    ArgumentListR                  shift and go to state 113
    Argument                       shift and go to state 114
    empty                          shift and go to state 115
    Expression                     shift and go to state 116
    BinaryExpressionPrio7          shift and go to state 34
    BinaryExpressionPrio6          shift and go to state 42
    BinaryExpressionPrio4          shift and go to state 43
    BinaryExpressionPrio3          shift and go to state 44
    UnaryExpression                shift and go to state 46
    Negate                         shift and go to state 47
    IncrementAfter                 shift and go to state 48
    IncrementBefore                shift and go to state 49
    DecrementAfter                 shift and go to state 50
    DecrementBefore                shift and go to state 51
    FunctionCall                   shift and go to state 52
    Literal                        shift and go to state 54
    IntLiteral                     shift and go to state 57
    BoolLiteral                    shift and go to state 58
    CharLiteral                    shift and go to state 59

state 91

    (63) IncrementBefore -> INC VarName .

    *               reduce using rule 63 (IncrementBefore -> INC VarName .)
    /               reduce using rule 63 (IncrementBefore -> INC VarName .)
    %               reduce using rule 63 (IncrementBefore -> INC VarName .)
    +               reduce using rule 63 (IncrementBefore -> INC VarName .)
    -               reduce using rule 63 (IncrementBefore -> INC VarName .)
    LEQ             reduce using rule 63 (IncrementBefore -> INC VarName .)
    GEQ             reduce using rule 63 (IncrementBefore -> INC VarName .)
    LT              reduce using rule 63 (IncrementBefore -> INC VarName .)
    GT              reduce using rule 63 (IncrementBefore -> INC VarName .)
    NEQ             reduce using rule 63 (IncrementBefore -> INC VarName .)
    EQ              reduce using rule 63 (IncrementBefore -> INC VarName .)
    ;               reduce using rule 63 (IncrementBefore -> INC VarName .)
    )               reduce using rule 63 (IncrementBefore -> INC VarName .)
    ,               reduce using rule 63 (IncrementBefore -> INC VarName .)


state 92

    (60) DecrementBefore -> DEC VarName .

    *               reduce using rule 60 (DecrementBefore -> DEC VarName .)
    /               reduce using rule 60 (DecrementBefore -> DEC VarName .)
    %               reduce using rule 60 (DecrementBefore -> DEC VarName .)
    +               reduce using rule 60 (DecrementBefore -> DEC VarName .)
    -               reduce using rule 60 (DecrementBefore -> DEC VarName .)
    LEQ             reduce using rule 60 (DecrementBefore -> DEC VarName .)
    GEQ             reduce using rule 60 (DecrementBefore -> DEC VarName .)
    LT              reduce using rule 60 (DecrementBefore -> DEC VarName .)
    GT              reduce using rule 60 (DecrementBefore -> DEC VarName .)
    NEQ             reduce using rule 60 (DecrementBefore -> DEC VarName .)
    EQ              reduce using rule 60 (DecrementBefore -> DEC VarName .)
    ;               reduce using rule 60 (DecrementBefore -> DEC VarName .)
    )               reduce using rule 60 (DecrementBefore -> DEC VarName .)
    ,               reduce using rule 60 (DecrementBefore -> DEC VarName .)


state 93

    (23) AssignmentStatement -> ID = Expression . ;

    ;               shift and go to state 117


state 94

    (26) DeclarationAssignmentStatement -> TypeName ID = . Expression ;
    (16) Expression -> . BinaryExpressionPrio7
    (13) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 NEQ BinaryExpressionPrio7
    (14) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 EQ BinaryExpressionPrio7
    (15) BinaryExpressionPrio7 -> . BinaryExpressionPrio6
    (8) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LEQ BinaryExpressionPrio6
    (9) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GEQ BinaryExpressionPrio6
    (10) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LT BinaryExpressionPrio6
    (11) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GT BinaryExpressionPrio6
    (12) BinaryExpressionPrio6 -> . BinaryExpressionPrio4
    (5) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 + BinaryExpressionPrio4
    (6) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 - BinaryExpressionPrio4
    (7) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (1) BinaryExpressionPrio3 -> . UnaryExpression * BinaryExpressionPrio3
    (2) BinaryExpressionPrio3 -> . UnaryExpression / BinaryExpressionPrio3
    (3) BinaryExpressionPrio3 -> . UnaryExpression % BinaryExpressionPrio3
    (4) BinaryExpressionPrio3 -> . UnaryExpression
    (65) UnaryExpression -> . Negate
    (66) UnaryExpression -> . IncrementAfter
    (67) UnaryExpression -> . IncrementBefore
    (68) UnaryExpression -> . DecrementAfter
    (69) UnaryExpression -> . DecrementBefore
    (70) UnaryExpression -> . FunctionCall
    (71) UnaryExpression -> . VarName
    (72) UnaryExpression -> . Literal
    (73) UnaryExpression -> . ( Expression )
    (64) Negate -> . - VarName
    (62) IncrementAfter -> . VarName INC
    (63) IncrementBefore -> . INC VarName
    (59) DecrementAfter -> . VarName DEC
    (60) DecrementBefore -> . DEC VarName
    (61) FunctionCall -> . VarName ( ArgumentListR )
    (58) VarName -> . ID
    (20) Literal -> . IntLiteral
    (21) Literal -> . BoolLiteral
    (22) Literal -> . CharLiteral
    (19) IntLiteral -> . INTL
    (17) BoolLiteral -> . BOOLL
    (18) CharLiteral -> . CHARL

    (               shift and go to state 36
    -               shift and go to state 45
    INC             shift and go to state 55
    DEC             shift and go to state 56
    ID              shift and go to state 69
    INTL            shift and go to state 40
    BOOLL           shift and go to state 60
    CHARL           shift and go to state 61

    Expression                     shift and go to state 118
    BinaryExpressionPrio7          shift and go to state 34
    BinaryExpressionPrio6          shift and go to state 42
    BinaryExpressionPrio4          shift and go to state 43
    BinaryExpressionPrio3          shift and go to state 44
    UnaryExpression                shift and go to state 46
    Negate                         shift and go to state 47
    IncrementAfter                 shift and go to state 48
    IncrementBefore                shift and go to state 49
    DecrementAfter                 shift and go to state 50
    DecrementBefore                shift and go to state 51
    FunctionCall                   shift and go to state 52
    VarName                        shift and go to state 53
    Literal                        shift and go to state 54
    IntLiteral                     shift and go to state 57
    BoolLiteral                    shift and go to state 58
    CharLiteral                    shift and go to state 59

state 95

    (27) DeclarationStatement -> TypeName ID ; .

    ID              reduce using rule 27 (DeclarationStatement -> TypeName ID ; .)
    IF              reduce using rule 27 (DeclarationStatement -> TypeName ID ; .)
    FOR             reduce using rule 27 (DeclarationStatement -> TypeName ID ; .)
    WHILE           reduce using rule 27 (DeclarationStatement -> TypeName ID ; .)
    BREAK           reduce using rule 27 (DeclarationStatement -> TypeName ID ; .)
    RETURN          reduce using rule 27 (DeclarationStatement -> TypeName ID ; .)
    (               reduce using rule 27 (DeclarationStatement -> TypeName ID ; .)
    -               reduce using rule 27 (DeclarationStatement -> TypeName ID ; .)
    INC             reduce using rule 27 (DeclarationStatement -> TypeName ID ; .)
    DEC             reduce using rule 27 (DeclarationStatement -> TypeName ID ; .)
    INTL            reduce using rule 27 (DeclarationStatement -> TypeName ID ; .)
    BOOLL           reduce using rule 27 (DeclarationStatement -> TypeName ID ; .)
    CHARL           reduce using rule 27 (DeclarationStatement -> TypeName ID ; .)
    }               reduce using rule 27 (DeclarationStatement -> TypeName ID ; .)
    ;               reduce using rule 27 (DeclarationStatement -> TypeName ID ; .)
    )               reduce using rule 27 (DeclarationStatement -> TypeName ID ; .)


state 96

    (29) IfElseStatement -> IF ( Expression . ) Block ELSE Block

    )               shift and go to state 119


state 97

    (73) UnaryExpression -> ( Expression ) .

    *               reduce using rule 73 (UnaryExpression -> ( Expression ) .)
    /               reduce using rule 73 (UnaryExpression -> ( Expression ) .)
    %               reduce using rule 73 (UnaryExpression -> ( Expression ) .)
    +               reduce using rule 73 (UnaryExpression -> ( Expression ) .)
    -               reduce using rule 73 (UnaryExpression -> ( Expression ) .)
    LEQ             reduce using rule 73 (UnaryExpression -> ( Expression ) .)
    GEQ             reduce using rule 73 (UnaryExpression -> ( Expression ) .)
    LT              reduce using rule 73 (UnaryExpression -> ( Expression ) .)
    GT              reduce using rule 73 (UnaryExpression -> ( Expression ) .)
    NEQ             reduce using rule 73 (UnaryExpression -> ( Expression ) .)
    EQ              reduce using rule 73 (UnaryExpression -> ( Expression ) .)
    ;               reduce using rule 73 (UnaryExpression -> ( Expression ) .)
    )               reduce using rule 73 (UnaryExpression -> ( Expression ) .)
    ,               reduce using rule 73 (UnaryExpression -> ( Expression ) .)


state 98

    (28) ForStatement -> FOR ( Statement . ; Expression ; Statement ) Block

    ;               shift and go to state 120


state 99

    (43) WhileStatement -> WHILE ( Expression . ) Block

    )               shift and go to state 121


state 100

    (24) BreakStatement -> BREAK INTL ; .

    ID              reduce using rule 24 (BreakStatement -> BREAK INTL ; .)
    IF              reduce using rule 24 (BreakStatement -> BREAK INTL ; .)
    FOR             reduce using rule 24 (BreakStatement -> BREAK INTL ; .)
    WHILE           reduce using rule 24 (BreakStatement -> BREAK INTL ; .)
    BREAK           reduce using rule 24 (BreakStatement -> BREAK INTL ; .)
    RETURN          reduce using rule 24 (BreakStatement -> BREAK INTL ; .)
    (               reduce using rule 24 (BreakStatement -> BREAK INTL ; .)
    -               reduce using rule 24 (BreakStatement -> BREAK INTL ; .)
    INC             reduce using rule 24 (BreakStatement -> BREAK INTL ; .)
    DEC             reduce using rule 24 (BreakStatement -> BREAK INTL ; .)
    INTL            reduce using rule 24 (BreakStatement -> BREAK INTL ; .)
    BOOLL           reduce using rule 24 (BreakStatement -> BREAK INTL ; .)
    CHARL           reduce using rule 24 (BreakStatement -> BREAK INTL ; .)
    }               reduce using rule 24 (BreakStatement -> BREAK INTL ; .)
    ;               reduce using rule 24 (BreakStatement -> BREAK INTL ; .)
    )               reduce using rule 24 (BreakStatement -> BREAK INTL ; .)


state 101

    (30) ReturnStatement -> RETURN Expression ; .

    ID              reduce using rule 30 (ReturnStatement -> RETURN Expression ; .)
    IF              reduce using rule 30 (ReturnStatement -> RETURN Expression ; .)
    FOR             reduce using rule 30 (ReturnStatement -> RETURN Expression ; .)
    WHILE           reduce using rule 30 (ReturnStatement -> RETURN Expression ; .)
    BREAK           reduce using rule 30 (ReturnStatement -> RETURN Expression ; .)
    RETURN          reduce using rule 30 (ReturnStatement -> RETURN Expression ; .)
    (               reduce using rule 30 (ReturnStatement -> RETURN Expression ; .)
    -               reduce using rule 30 (ReturnStatement -> RETURN Expression ; .)
    INC             reduce using rule 30 (ReturnStatement -> RETURN Expression ; .)
    DEC             reduce using rule 30 (ReturnStatement -> RETURN Expression ; .)
    INTL            reduce using rule 30 (ReturnStatement -> RETURN Expression ; .)
    BOOLL           reduce using rule 30 (ReturnStatement -> RETURN Expression ; .)
    CHARL           reduce using rule 30 (ReturnStatement -> RETURN Expression ; .)
    }               reduce using rule 30 (ReturnStatement -> RETURN Expression ; .)
    ;               reduce using rule 30 (ReturnStatement -> RETURN Expression ; .)
    )               reduce using rule 30 (ReturnStatement -> RETURN Expression ; .)


state 102

    (13) BinaryExpressionPrio7 -> BinaryExpressionPrio6 NEQ BinaryExpressionPrio7 .

    ;               reduce using rule 13 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 NEQ BinaryExpressionPrio7 .)
    )               reduce using rule 13 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 NEQ BinaryExpressionPrio7 .)
    ,               reduce using rule 13 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 NEQ BinaryExpressionPrio7 .)


state 103

    (14) BinaryExpressionPrio7 -> BinaryExpressionPrio6 EQ BinaryExpressionPrio7 .

    ;               reduce using rule 14 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 EQ BinaryExpressionPrio7 .)
    )               reduce using rule 14 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 EQ BinaryExpressionPrio7 .)
    ,               reduce using rule 14 (BinaryExpressionPrio7 -> BinaryExpressionPrio6 EQ BinaryExpressionPrio7 .)


state 104

    (8) BinaryExpressionPrio6 -> BinaryExpressionPrio4 LEQ BinaryExpressionPrio6 .

    NEQ             reduce using rule 8 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 LEQ BinaryExpressionPrio6 .)
    EQ              reduce using rule 8 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 LEQ BinaryExpressionPrio6 .)
    ;               reduce using rule 8 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 LEQ BinaryExpressionPrio6 .)
    )               reduce using rule 8 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 LEQ BinaryExpressionPrio6 .)
    ,               reduce using rule 8 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 LEQ BinaryExpressionPrio6 .)


state 105

    (9) BinaryExpressionPrio6 -> BinaryExpressionPrio4 GEQ BinaryExpressionPrio6 .

    NEQ             reduce using rule 9 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 GEQ BinaryExpressionPrio6 .)
    EQ              reduce using rule 9 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 GEQ BinaryExpressionPrio6 .)
    ;               reduce using rule 9 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 GEQ BinaryExpressionPrio6 .)
    )               reduce using rule 9 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 GEQ BinaryExpressionPrio6 .)
    ,               reduce using rule 9 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 GEQ BinaryExpressionPrio6 .)


state 106

    (10) BinaryExpressionPrio6 -> BinaryExpressionPrio4 LT BinaryExpressionPrio6 .

    NEQ             reduce using rule 10 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 LT BinaryExpressionPrio6 .)
    EQ              reduce using rule 10 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 LT BinaryExpressionPrio6 .)
    ;               reduce using rule 10 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 LT BinaryExpressionPrio6 .)
    )               reduce using rule 10 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 LT BinaryExpressionPrio6 .)
    ,               reduce using rule 10 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 LT BinaryExpressionPrio6 .)


state 107

    (11) BinaryExpressionPrio6 -> BinaryExpressionPrio4 GT BinaryExpressionPrio6 .

    NEQ             reduce using rule 11 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 GT BinaryExpressionPrio6 .)
    EQ              reduce using rule 11 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 GT BinaryExpressionPrio6 .)
    ;               reduce using rule 11 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 GT BinaryExpressionPrio6 .)
    )               reduce using rule 11 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 GT BinaryExpressionPrio6 .)
    ,               reduce using rule 11 (BinaryExpressionPrio6 -> BinaryExpressionPrio4 GT BinaryExpressionPrio6 .)


state 108

    (5) BinaryExpressionPrio4 -> BinaryExpressionPrio3 + BinaryExpressionPrio4 .

    LEQ             reduce using rule 5 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 + BinaryExpressionPrio4 .)
    GEQ             reduce using rule 5 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 + BinaryExpressionPrio4 .)
    LT              reduce using rule 5 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 + BinaryExpressionPrio4 .)
    GT              reduce using rule 5 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 + BinaryExpressionPrio4 .)
    NEQ             reduce using rule 5 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 + BinaryExpressionPrio4 .)
    EQ              reduce using rule 5 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 + BinaryExpressionPrio4 .)
    ;               reduce using rule 5 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 + BinaryExpressionPrio4 .)
    )               reduce using rule 5 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 + BinaryExpressionPrio4 .)
    ,               reduce using rule 5 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 + BinaryExpressionPrio4 .)


state 109

    (6) BinaryExpressionPrio4 -> BinaryExpressionPrio3 - BinaryExpressionPrio4 .

    LEQ             reduce using rule 6 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 - BinaryExpressionPrio4 .)
    GEQ             reduce using rule 6 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 - BinaryExpressionPrio4 .)
    LT              reduce using rule 6 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 - BinaryExpressionPrio4 .)
    GT              reduce using rule 6 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 - BinaryExpressionPrio4 .)
    NEQ             reduce using rule 6 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 - BinaryExpressionPrio4 .)
    EQ              reduce using rule 6 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 - BinaryExpressionPrio4 .)
    ;               reduce using rule 6 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 - BinaryExpressionPrio4 .)
    )               reduce using rule 6 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 - BinaryExpressionPrio4 .)
    ,               reduce using rule 6 (BinaryExpressionPrio4 -> BinaryExpressionPrio3 - BinaryExpressionPrio4 .)


state 110

    (1) BinaryExpressionPrio3 -> UnaryExpression * BinaryExpressionPrio3 .

    +               reduce using rule 1 (BinaryExpressionPrio3 -> UnaryExpression * BinaryExpressionPrio3 .)
    -               reduce using rule 1 (BinaryExpressionPrio3 -> UnaryExpression * BinaryExpressionPrio3 .)
    LEQ             reduce using rule 1 (BinaryExpressionPrio3 -> UnaryExpression * BinaryExpressionPrio3 .)
    GEQ             reduce using rule 1 (BinaryExpressionPrio3 -> UnaryExpression * BinaryExpressionPrio3 .)
    LT              reduce using rule 1 (BinaryExpressionPrio3 -> UnaryExpression * BinaryExpressionPrio3 .)
    GT              reduce using rule 1 (BinaryExpressionPrio3 -> UnaryExpression * BinaryExpressionPrio3 .)
    NEQ             reduce using rule 1 (BinaryExpressionPrio3 -> UnaryExpression * BinaryExpressionPrio3 .)
    EQ              reduce using rule 1 (BinaryExpressionPrio3 -> UnaryExpression * BinaryExpressionPrio3 .)
    ;               reduce using rule 1 (BinaryExpressionPrio3 -> UnaryExpression * BinaryExpressionPrio3 .)
    )               reduce using rule 1 (BinaryExpressionPrio3 -> UnaryExpression * BinaryExpressionPrio3 .)
    ,               reduce using rule 1 (BinaryExpressionPrio3 -> UnaryExpression * BinaryExpressionPrio3 .)


state 111

    (2) BinaryExpressionPrio3 -> UnaryExpression / BinaryExpressionPrio3 .

    +               reduce using rule 2 (BinaryExpressionPrio3 -> UnaryExpression / BinaryExpressionPrio3 .)
    -               reduce using rule 2 (BinaryExpressionPrio3 -> UnaryExpression / BinaryExpressionPrio3 .)
    LEQ             reduce using rule 2 (BinaryExpressionPrio3 -> UnaryExpression / BinaryExpressionPrio3 .)
    GEQ             reduce using rule 2 (BinaryExpressionPrio3 -> UnaryExpression / BinaryExpressionPrio3 .)
    LT              reduce using rule 2 (BinaryExpressionPrio3 -> UnaryExpression / BinaryExpressionPrio3 .)
    GT              reduce using rule 2 (BinaryExpressionPrio3 -> UnaryExpression / BinaryExpressionPrio3 .)
    NEQ             reduce using rule 2 (BinaryExpressionPrio3 -> UnaryExpression / BinaryExpressionPrio3 .)
    EQ              reduce using rule 2 (BinaryExpressionPrio3 -> UnaryExpression / BinaryExpressionPrio3 .)
    ;               reduce using rule 2 (BinaryExpressionPrio3 -> UnaryExpression / BinaryExpressionPrio3 .)
    )               reduce using rule 2 (BinaryExpressionPrio3 -> UnaryExpression / BinaryExpressionPrio3 .)
    ,               reduce using rule 2 (BinaryExpressionPrio3 -> UnaryExpression / BinaryExpressionPrio3 .)


state 112

    (3) BinaryExpressionPrio3 -> UnaryExpression % BinaryExpressionPrio3 .

    +               reduce using rule 3 (BinaryExpressionPrio3 -> UnaryExpression % BinaryExpressionPrio3 .)
    -               reduce using rule 3 (BinaryExpressionPrio3 -> UnaryExpression % BinaryExpressionPrio3 .)
    LEQ             reduce using rule 3 (BinaryExpressionPrio3 -> UnaryExpression % BinaryExpressionPrio3 .)
    GEQ             reduce using rule 3 (BinaryExpressionPrio3 -> UnaryExpression % BinaryExpressionPrio3 .)
    LT              reduce using rule 3 (BinaryExpressionPrio3 -> UnaryExpression % BinaryExpressionPrio3 .)
    GT              reduce using rule 3 (BinaryExpressionPrio3 -> UnaryExpression % BinaryExpressionPrio3 .)
    NEQ             reduce using rule 3 (BinaryExpressionPrio3 -> UnaryExpression % BinaryExpressionPrio3 .)
    EQ              reduce using rule 3 (BinaryExpressionPrio3 -> UnaryExpression % BinaryExpressionPrio3 .)
    ;               reduce using rule 3 (BinaryExpressionPrio3 -> UnaryExpression % BinaryExpressionPrio3 .)
    )               reduce using rule 3 (BinaryExpressionPrio3 -> UnaryExpression % BinaryExpressionPrio3 .)
    ,               reduce using rule 3 (BinaryExpressionPrio3 -> UnaryExpression % BinaryExpressionPrio3 .)


state 113

    (61) FunctionCall -> VarName ( ArgumentListR . )

    )               shift and go to state 122


state 114

    (45) ArgumentListR -> Argument . , ArgumentListR
    (46) ArgumentListR -> Argument .

    ,               shift and go to state 123
    )               reduce using rule 46 (ArgumentListR -> Argument .)


state 115

    (47) ArgumentListR -> empty .

    )               reduce using rule 47 (ArgumentListR -> empty .)


state 116

    (44) Argument -> Expression .

    ,               reduce using rule 44 (Argument -> Expression .)
    )               reduce using rule 44 (Argument -> Expression .)


state 117

    (23) AssignmentStatement -> ID = Expression ; .

    ID              reduce using rule 23 (AssignmentStatement -> ID = Expression ; .)
    IF              reduce using rule 23 (AssignmentStatement -> ID = Expression ; .)
    FOR             reduce using rule 23 (AssignmentStatement -> ID = Expression ; .)
    WHILE           reduce using rule 23 (AssignmentStatement -> ID = Expression ; .)
    BREAK           reduce using rule 23 (AssignmentStatement -> ID = Expression ; .)
    RETURN          reduce using rule 23 (AssignmentStatement -> ID = Expression ; .)
    (               reduce using rule 23 (AssignmentStatement -> ID = Expression ; .)
    -               reduce using rule 23 (AssignmentStatement -> ID = Expression ; .)
    INC             reduce using rule 23 (AssignmentStatement -> ID = Expression ; .)
    DEC             reduce using rule 23 (AssignmentStatement -> ID = Expression ; .)
    INTL            reduce using rule 23 (AssignmentStatement -> ID = Expression ; .)
    BOOLL           reduce using rule 23 (AssignmentStatement -> ID = Expression ; .)
    CHARL           reduce using rule 23 (AssignmentStatement -> ID = Expression ; .)
    }               reduce using rule 23 (AssignmentStatement -> ID = Expression ; .)
    ;               reduce using rule 23 (AssignmentStatement -> ID = Expression ; .)
    )               reduce using rule 23 (AssignmentStatement -> ID = Expression ; .)


state 118

    (26) DeclarationAssignmentStatement -> TypeName ID = Expression . ;

    ;               shift and go to state 124


state 119

    (29) IfElseStatement -> IF ( Expression ) . Block ELSE Block
    (48) Block -> . { StatementListR }

    {               shift and go to state 18

    Block                          shift and go to state 125

state 120

    (28) ForStatement -> FOR ( Statement ; . Expression ; Statement ) Block
    (16) Expression -> . BinaryExpressionPrio7
    (13) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 NEQ BinaryExpressionPrio7
    (14) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 EQ BinaryExpressionPrio7
    (15) BinaryExpressionPrio7 -> . BinaryExpressionPrio6
    (8) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LEQ BinaryExpressionPrio6
    (9) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GEQ BinaryExpressionPrio6
    (10) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LT BinaryExpressionPrio6
    (11) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GT BinaryExpressionPrio6
    (12) BinaryExpressionPrio6 -> . BinaryExpressionPrio4
    (5) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 + BinaryExpressionPrio4
    (6) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 - BinaryExpressionPrio4
    (7) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (1) BinaryExpressionPrio3 -> . UnaryExpression * BinaryExpressionPrio3
    (2) BinaryExpressionPrio3 -> . UnaryExpression / BinaryExpressionPrio3
    (3) BinaryExpressionPrio3 -> . UnaryExpression % BinaryExpressionPrio3
    (4) BinaryExpressionPrio3 -> . UnaryExpression
    (65) UnaryExpression -> . Negate
    (66) UnaryExpression -> . IncrementAfter
    (67) UnaryExpression -> . IncrementBefore
    (68) UnaryExpression -> . DecrementAfter
    (69) UnaryExpression -> . DecrementBefore
    (70) UnaryExpression -> . FunctionCall
    (71) UnaryExpression -> . VarName
    (72) UnaryExpression -> . Literal
    (73) UnaryExpression -> . ( Expression )
    (64) Negate -> . - VarName
    (62) IncrementAfter -> . VarName INC
    (63) IncrementBefore -> . INC VarName
    (59) DecrementAfter -> . VarName DEC
    (60) DecrementBefore -> . DEC VarName
    (61) FunctionCall -> . VarName ( ArgumentListR )
    (58) VarName -> . ID
    (20) Literal -> . IntLiteral
    (21) Literal -> . BoolLiteral
    (22) Literal -> . CharLiteral
    (19) IntLiteral -> . INTL
    (17) BoolLiteral -> . BOOLL
    (18) CharLiteral -> . CHARL

    (               shift and go to state 36
    -               shift and go to state 45
    INC             shift and go to state 55
    DEC             shift and go to state 56
    ID              shift and go to state 69
    INTL            shift and go to state 40
    BOOLL           shift and go to state 60
    CHARL           shift and go to state 61

    Expression                     shift and go to state 126
    BinaryExpressionPrio7          shift and go to state 34
    BinaryExpressionPrio6          shift and go to state 42
    BinaryExpressionPrio4          shift and go to state 43
    BinaryExpressionPrio3          shift and go to state 44
    UnaryExpression                shift and go to state 46
    Negate                         shift and go to state 47
    IncrementAfter                 shift and go to state 48
    IncrementBefore                shift and go to state 49
    DecrementAfter                 shift and go to state 50
    DecrementBefore                shift and go to state 51
    FunctionCall                   shift and go to state 52
    VarName                        shift and go to state 53
    Literal                        shift and go to state 54
    IntLiteral                     shift and go to state 57
    BoolLiteral                    shift and go to state 58
    CharLiteral                    shift and go to state 59

state 121

    (43) WhileStatement -> WHILE ( Expression ) . Block
    (48) Block -> . { StatementListR }

    {               shift and go to state 18

    Block                          shift and go to state 127

state 122

    (61) FunctionCall -> VarName ( ArgumentListR ) .

    *               reduce using rule 61 (FunctionCall -> VarName ( ArgumentListR ) .)
    /               reduce using rule 61 (FunctionCall -> VarName ( ArgumentListR ) .)
    %               reduce using rule 61 (FunctionCall -> VarName ( ArgumentListR ) .)
    +               reduce using rule 61 (FunctionCall -> VarName ( ArgumentListR ) .)
    -               reduce using rule 61 (FunctionCall -> VarName ( ArgumentListR ) .)
    LEQ             reduce using rule 61 (FunctionCall -> VarName ( ArgumentListR ) .)
    GEQ             reduce using rule 61 (FunctionCall -> VarName ( ArgumentListR ) .)
    LT              reduce using rule 61 (FunctionCall -> VarName ( ArgumentListR ) .)
    GT              reduce using rule 61 (FunctionCall -> VarName ( ArgumentListR ) .)
    NEQ             reduce using rule 61 (FunctionCall -> VarName ( ArgumentListR ) .)
    EQ              reduce using rule 61 (FunctionCall -> VarName ( ArgumentListR ) .)
    ;               reduce using rule 61 (FunctionCall -> VarName ( ArgumentListR ) .)
    )               reduce using rule 61 (FunctionCall -> VarName ( ArgumentListR ) .)
    ,               reduce using rule 61 (FunctionCall -> VarName ( ArgumentListR ) .)


state 123

    (45) ArgumentListR -> Argument , . ArgumentListR
    (45) ArgumentListR -> . Argument , ArgumentListR
    (46) ArgumentListR -> . Argument
    (47) ArgumentListR -> . empty
    (44) Argument -> . Expression
    (74) empty -> .
    (16) Expression -> . BinaryExpressionPrio7
    (13) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 NEQ BinaryExpressionPrio7
    (14) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 EQ BinaryExpressionPrio7
    (15) BinaryExpressionPrio7 -> . BinaryExpressionPrio6
    (8) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LEQ BinaryExpressionPrio6
    (9) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GEQ BinaryExpressionPrio6
    (10) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LT BinaryExpressionPrio6
    (11) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GT BinaryExpressionPrio6
    (12) BinaryExpressionPrio6 -> . BinaryExpressionPrio4
    (5) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 + BinaryExpressionPrio4
    (6) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 - BinaryExpressionPrio4
    (7) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (1) BinaryExpressionPrio3 -> . UnaryExpression * BinaryExpressionPrio3
    (2) BinaryExpressionPrio3 -> . UnaryExpression / BinaryExpressionPrio3
    (3) BinaryExpressionPrio3 -> . UnaryExpression % BinaryExpressionPrio3
    (4) BinaryExpressionPrio3 -> . UnaryExpression
    (65) UnaryExpression -> . Negate
    (66) UnaryExpression -> . IncrementAfter
    (67) UnaryExpression -> . IncrementBefore
    (68) UnaryExpression -> . DecrementAfter
    (69) UnaryExpression -> . DecrementBefore
    (70) UnaryExpression -> . FunctionCall
    (71) UnaryExpression -> . VarName
    (72) UnaryExpression -> . Literal
    (73) UnaryExpression -> . ( Expression )
    (64) Negate -> . - VarName
    (62) IncrementAfter -> . VarName INC
    (63) IncrementBefore -> . INC VarName
    (59) DecrementAfter -> . VarName DEC
    (60) DecrementBefore -> . DEC VarName
    (61) FunctionCall -> . VarName ( ArgumentListR )
    (58) VarName -> . ID
    (20) Literal -> . IntLiteral
    (21) Literal -> . BoolLiteral
    (22) Literal -> . CharLiteral
    (19) IntLiteral -> . INTL
    (17) BoolLiteral -> . BOOLL
    (18) CharLiteral -> . CHARL

    )               reduce using rule 74 (empty -> .)
    (               shift and go to state 36
    -               shift and go to state 45
    INC             shift and go to state 55
    DEC             shift and go to state 56
    ID              shift and go to state 69
    INTL            shift and go to state 40
    BOOLL           shift and go to state 60
    CHARL           shift and go to state 61

    Argument                       shift and go to state 114
    ArgumentListR                  shift and go to state 128
    empty                          shift and go to state 115
    Expression                     shift and go to state 116
    BinaryExpressionPrio7          shift and go to state 34
    BinaryExpressionPrio6          shift and go to state 42
    BinaryExpressionPrio4          shift and go to state 43
    BinaryExpressionPrio3          shift and go to state 44
    UnaryExpression                shift and go to state 46
    Negate                         shift and go to state 47
    IncrementAfter                 shift and go to state 48
    IncrementBefore                shift and go to state 49
    DecrementAfter                 shift and go to state 50
    DecrementBefore                shift and go to state 51
    FunctionCall                   shift and go to state 52
    VarName                        shift and go to state 53
    Literal                        shift and go to state 54
    IntLiteral                     shift and go to state 57
    BoolLiteral                    shift and go to state 58
    CharLiteral                    shift and go to state 59

state 124

    (26) DeclarationAssignmentStatement -> TypeName ID = Expression ; .

    ID              reduce using rule 26 (DeclarationAssignmentStatement -> TypeName ID = Expression ; .)
    IF              reduce using rule 26 (DeclarationAssignmentStatement -> TypeName ID = Expression ; .)
    FOR             reduce using rule 26 (DeclarationAssignmentStatement -> TypeName ID = Expression ; .)
    WHILE           reduce using rule 26 (DeclarationAssignmentStatement -> TypeName ID = Expression ; .)
    BREAK           reduce using rule 26 (DeclarationAssignmentStatement -> TypeName ID = Expression ; .)
    RETURN          reduce using rule 26 (DeclarationAssignmentStatement -> TypeName ID = Expression ; .)
    (               reduce using rule 26 (DeclarationAssignmentStatement -> TypeName ID = Expression ; .)
    -               reduce using rule 26 (DeclarationAssignmentStatement -> TypeName ID = Expression ; .)
    INC             reduce using rule 26 (DeclarationAssignmentStatement -> TypeName ID = Expression ; .)
    DEC             reduce using rule 26 (DeclarationAssignmentStatement -> TypeName ID = Expression ; .)
    INTL            reduce using rule 26 (DeclarationAssignmentStatement -> TypeName ID = Expression ; .)
    BOOLL           reduce using rule 26 (DeclarationAssignmentStatement -> TypeName ID = Expression ; .)
    CHARL           reduce using rule 26 (DeclarationAssignmentStatement -> TypeName ID = Expression ; .)
    }               reduce using rule 26 (DeclarationAssignmentStatement -> TypeName ID = Expression ; .)
    ;               reduce using rule 26 (DeclarationAssignmentStatement -> TypeName ID = Expression ; .)
    )               reduce using rule 26 (DeclarationAssignmentStatement -> TypeName ID = Expression ; .)


state 125

    (29) IfElseStatement -> IF ( Expression ) Block . ELSE Block

    ELSE            shift and go to state 129


state 126

    (28) ForStatement -> FOR ( Statement ; Expression . ; Statement ) Block

    ;               shift and go to state 130


state 127

    (43) WhileStatement -> WHILE ( Expression ) Block .

    ID              reduce using rule 43 (WhileStatement -> WHILE ( Expression ) Block .)
    IF              reduce using rule 43 (WhileStatement -> WHILE ( Expression ) Block .)
    FOR             reduce using rule 43 (WhileStatement -> WHILE ( Expression ) Block .)
    WHILE           reduce using rule 43 (WhileStatement -> WHILE ( Expression ) Block .)
    BREAK           reduce using rule 43 (WhileStatement -> WHILE ( Expression ) Block .)
    RETURN          reduce using rule 43 (WhileStatement -> WHILE ( Expression ) Block .)
    (               reduce using rule 43 (WhileStatement -> WHILE ( Expression ) Block .)
    -               reduce using rule 43 (WhileStatement -> WHILE ( Expression ) Block .)
    INC             reduce using rule 43 (WhileStatement -> WHILE ( Expression ) Block .)
    DEC             reduce using rule 43 (WhileStatement -> WHILE ( Expression ) Block .)
    INTL            reduce using rule 43 (WhileStatement -> WHILE ( Expression ) Block .)
    BOOLL           reduce using rule 43 (WhileStatement -> WHILE ( Expression ) Block .)
    CHARL           reduce using rule 43 (WhileStatement -> WHILE ( Expression ) Block .)
    }               reduce using rule 43 (WhileStatement -> WHILE ( Expression ) Block .)
    ;               reduce using rule 43 (WhileStatement -> WHILE ( Expression ) Block .)
    )               reduce using rule 43 (WhileStatement -> WHILE ( Expression ) Block .)


state 128

    (45) ArgumentListR -> Argument , ArgumentListR .

    )               reduce using rule 45 (ArgumentListR -> Argument , ArgumentListR .)


state 129

    (29) IfElseStatement -> IF ( Expression ) Block ELSE . Block
    (48) Block -> . { StatementListR }

    {               shift and go to state 18

    Block                          shift and go to state 131

state 130

    (28) ForStatement -> FOR ( Statement ; Expression ; . Statement ) Block
    (32) Statement -> . AssignmentStatement
    (33) Statement -> . DeclarationAssignmentStatement
    (34) Statement -> . Expression ;
    (35) Statement -> . DeclarationStatement
    (36) Statement -> . IfElseStatement
    (37) Statement -> . ForStatement
    (38) Statement -> . WhileStatement
    (39) Statement -> . BreakStatement
    (40) Statement -> . ReturnStatement
    (23) AssignmentStatement -> . ID = Expression ;
    (26) DeclarationAssignmentStatement -> . TypeName ID = Expression ;
    (16) Expression -> . BinaryExpressionPrio7
    (27) DeclarationStatement -> . TypeName ID ;
    (29) IfElseStatement -> . IF ( Expression ) Block ELSE Block
    (28) ForStatement -> . FOR ( Statement ; Expression ; Statement ) Block
    (43) WhileStatement -> . WHILE ( Expression ) Block
    (24) BreakStatement -> . BREAK INTL ;
    (25) BreakStatement -> . BREAK ;
    (30) ReturnStatement -> . RETURN Expression ;
    (31) ReturnStatement -> . RETURN ;
    (57) TypeName -> . ID
    (13) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 NEQ BinaryExpressionPrio7
    (14) BinaryExpressionPrio7 -> . BinaryExpressionPrio6 EQ BinaryExpressionPrio7
    (15) BinaryExpressionPrio7 -> . BinaryExpressionPrio6
    (8) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LEQ BinaryExpressionPrio6
    (9) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GEQ BinaryExpressionPrio6
    (10) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 LT BinaryExpressionPrio6
    (11) BinaryExpressionPrio6 -> . BinaryExpressionPrio4 GT BinaryExpressionPrio6
    (12) BinaryExpressionPrio6 -> . BinaryExpressionPrio4
    (5) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 + BinaryExpressionPrio4
    (6) BinaryExpressionPrio4 -> . BinaryExpressionPrio3 - BinaryExpressionPrio4
    (7) BinaryExpressionPrio4 -> . BinaryExpressionPrio3
    (1) BinaryExpressionPrio3 -> . UnaryExpression * BinaryExpressionPrio3
    (2) BinaryExpressionPrio3 -> . UnaryExpression / BinaryExpressionPrio3
    (3) BinaryExpressionPrio3 -> . UnaryExpression % BinaryExpressionPrio3
    (4) BinaryExpressionPrio3 -> . UnaryExpression
    (65) UnaryExpression -> . Negate
    (66) UnaryExpression -> . IncrementAfter
    (67) UnaryExpression -> . IncrementBefore
    (68) UnaryExpression -> . DecrementAfter
    (69) UnaryExpression -> . DecrementBefore
    (70) UnaryExpression -> . FunctionCall
    (71) UnaryExpression -> . VarName
    (72) UnaryExpression -> . Literal
    (73) UnaryExpression -> . ( Expression )
    (64) Negate -> . - VarName
    (62) IncrementAfter -> . VarName INC
    (63) IncrementBefore -> . INC VarName
    (59) DecrementAfter -> . VarName DEC
    (60) DecrementBefore -> . DEC VarName
    (61) FunctionCall -> . VarName ( ArgumentListR )
    (58) VarName -> . ID
    (20) Literal -> . IntLiteral
    (21) Literal -> . BoolLiteral
    (22) Literal -> . CharLiteral
    (19) IntLiteral -> . INTL
    (17) BoolLiteral -> . BOOLL
    (18) CharLiteral -> . CHARL

    ID              shift and go to state 32
    IF              shift and go to state 35
    FOR             shift and go to state 37
    WHILE           shift and go to state 38
    BREAK           shift and go to state 39
    RETURN          shift and go to state 41
    (               shift and go to state 36
    -               shift and go to state 45
    INC             shift and go to state 55
    DEC             shift and go to state 56
    INTL            shift and go to state 40
    BOOLL           shift and go to state 60
    CHARL           shift and go to state 61

    Statement                      shift and go to state 132
    Expression                     shift and go to state 25
    AssignmentStatement            shift and go to state 23
    DeclarationAssignmentStatement shift and go to state 24
    DeclarationStatement           shift and go to state 26
    IfElseStatement                shift and go to state 27
    ForStatement                   shift and go to state 28
    WhileStatement                 shift and go to state 29
    BreakStatement                 shift and go to state 30
    ReturnStatement                shift and go to state 31
    TypeName                       shift and go to state 33
    BinaryExpressionPrio7          shift and go to state 34
    BinaryExpressionPrio6          shift and go to state 42
    BinaryExpressionPrio4          shift and go to state 43
    BinaryExpressionPrio3          shift and go to state 44
    UnaryExpression                shift and go to state 46
    Negate                         shift and go to state 47
    IncrementAfter                 shift and go to state 48
    IncrementBefore                shift and go to state 49
    DecrementAfter                 shift and go to state 50
    DecrementBefore                shift and go to state 51
    FunctionCall                   shift and go to state 52
    VarName                        shift and go to state 53
    Literal                        shift and go to state 54
    IntLiteral                     shift and go to state 57
    BoolLiteral                    shift and go to state 58
    CharLiteral                    shift and go to state 59

state 131

    (29) IfElseStatement -> IF ( Expression ) Block ELSE Block .

    ID              reduce using rule 29 (IfElseStatement -> IF ( Expression ) Block ELSE Block .)
    IF              reduce using rule 29 (IfElseStatement -> IF ( Expression ) Block ELSE Block .)
    FOR             reduce using rule 29 (IfElseStatement -> IF ( Expression ) Block ELSE Block .)
    WHILE           reduce using rule 29 (IfElseStatement -> IF ( Expression ) Block ELSE Block .)
    BREAK           reduce using rule 29 (IfElseStatement -> IF ( Expression ) Block ELSE Block .)
    RETURN          reduce using rule 29 (IfElseStatement -> IF ( Expression ) Block ELSE Block .)
    (               reduce using rule 29 (IfElseStatement -> IF ( Expression ) Block ELSE Block .)
    -               reduce using rule 29 (IfElseStatement -> IF ( Expression ) Block ELSE Block .)
    INC             reduce using rule 29 (IfElseStatement -> IF ( Expression ) Block ELSE Block .)
    DEC             reduce using rule 29 (IfElseStatement -> IF ( Expression ) Block ELSE Block .)
    INTL            reduce using rule 29 (IfElseStatement -> IF ( Expression ) Block ELSE Block .)
    BOOLL           reduce using rule 29 (IfElseStatement -> IF ( Expression ) Block ELSE Block .)
    CHARL           reduce using rule 29 (IfElseStatement -> IF ( Expression ) Block ELSE Block .)
    }               reduce using rule 29 (IfElseStatement -> IF ( Expression ) Block ELSE Block .)
    ;               reduce using rule 29 (IfElseStatement -> IF ( Expression ) Block ELSE Block .)
    )               reduce using rule 29 (IfElseStatement -> IF ( Expression ) Block ELSE Block .)


state 132

    (28) ForStatement -> FOR ( Statement ; Expression ; Statement . ) Block

    )               shift and go to state 133


state 133

    (28) ForStatement -> FOR ( Statement ; Expression ; Statement ) . Block
    (48) Block -> . { StatementListR }

    {               shift and go to state 18

    Block                          shift and go to state 134

state 134

    (28) ForStatement -> FOR ( Statement ; Expression ; Statement ) Block .

    ID              reduce using rule 28 (ForStatement -> FOR ( Statement ; Expression ; Statement ) Block .)
    IF              reduce using rule 28 (ForStatement -> FOR ( Statement ; Expression ; Statement ) Block .)
    FOR             reduce using rule 28 (ForStatement -> FOR ( Statement ; Expression ; Statement ) Block .)
    WHILE           reduce using rule 28 (ForStatement -> FOR ( Statement ; Expression ; Statement ) Block .)
    BREAK           reduce using rule 28 (ForStatement -> FOR ( Statement ; Expression ; Statement ) Block .)
    RETURN          reduce using rule 28 (ForStatement -> FOR ( Statement ; Expression ; Statement ) Block .)
    (               reduce using rule 28 (ForStatement -> FOR ( Statement ; Expression ; Statement ) Block .)
    -               reduce using rule 28 (ForStatement -> FOR ( Statement ; Expression ; Statement ) Block .)
    INC             reduce using rule 28 (ForStatement -> FOR ( Statement ; Expression ; Statement ) Block .)
    DEC             reduce using rule 28 (ForStatement -> FOR ( Statement ; Expression ; Statement ) Block .)
    INTL            reduce using rule 28 (ForStatement -> FOR ( Statement ; Expression ; Statement ) Block .)
    BOOLL           reduce using rule 28 (ForStatement -> FOR ( Statement ; Expression ; Statement ) Block .)
    CHARL           reduce using rule 28 (ForStatement -> FOR ( Statement ; Expression ; Statement ) Block .)
    }               reduce using rule 28 (ForStatement -> FOR ( Statement ; Expression ; Statement ) Block .)
    ;               reduce using rule 28 (ForStatement -> FOR ( Statement ; Expression ; Statement ) Block .)
    )               reduce using rule 28 (ForStatement -> FOR ( Statement ; Expression ; Statement ) Block .)

